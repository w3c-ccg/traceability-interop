{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "36bad77f-0f18-47fb-a814-f6ccf8e286f8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "490259e3-3e67-4828-aeb0-1a9cfc5f7e59",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0de0eff-c652-4e11-9d05-6c6eb2a412aa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dd829b4b-8626-45b1-b008-7f63a427cf68"
                }
              }
            ]
          },
          {
            "id": "430fbce1-1433-4eec-8592-8a9a78a2be61",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b89a7e6-0794-490c-aebc-711834f10f85",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "27c43268-7f78-4f6d-919f-b0ddafd56758"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "12e0eb4d-f1aa-4002-9ed2-f394ce83ed5c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d7e52839-5518-435a-8802-24ad25e98de8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6cd6b559-5e4d-43d1-b9b9-4b537f121c4b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53670165-e84e-4411-b9b0-de77d622d1c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b946d3b-c05d-422b-9253-23f38f06b9a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2f1c801-e76c-49d7-96da-77d5d0f67061",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22b5e197-d843-4c6a-9fdc-eb63737757ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b3aeee3-eb4b-47a9-af11-d2698113375d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "037dbc78-92b1-4135-8eac-e918da76a0e1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82eb2205-a2ee-4857-a244-9c4cef1ec36b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ab04dd5d-b835-4c67-bf35-dea468e2d574"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b69f605c-e2e4-4b50-965d-bdbdf8e59aca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "516e6d13-7dcc-40b7-89c4-0eebceacfd5b"
            }
          }
        ]
      },
      {
        "id": "2c9f8045-7f72-4dd8-834e-8a8013477271",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c2955405-b90d-4dcd-9def-8acd34872c3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf3a3f60-55ff-4157-a0e4-6b23e1ca9626",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "48908aa2-feea-417b-a041-6325eab5d3c1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7126b411-12cc-4a79-a503-fa717a6c4b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab3ff3f7-f37d-4a8f-ba9e-f53eab2845db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f02edd9-e402-475a-9e97-e6961b73f458",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e963e00-fc94-43e3-bc19-f273215feef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "544a338a-5e8e-4f78-9381-7efb34a81588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f6deca-f160-4df1-a70c-5f58f6e2ca6e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a34f150-93b1-4875-b4b6-af3130c9cc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c97cf475-46fd-477b-9293-f78ad14c1d06"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af1bf355-6ff5-4bfe-8699-5d440256bc0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "234090e2-4d73-4b56-beb6-8dc55f37ebd7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31898989-b3f2-4309-bf1d-c0b1bdb188d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a7b2b9e-5b00-4aeb-a38c-dc4819618bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21e6662-ed02-4220-be45-65d0637ced8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a172a96c-13f9-4b50-9b50-e10bf67e5138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12edb85-7291-42d8-aa27-ee3994f07f3b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ccebf7-32a7-4228-87bc-c47d18d94af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b69a775-c1fb-46f2-be40-baedc4e0f00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea61648-31d1-42cc-8bcb-685de25b4bee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "829a0620-d21d-41a1-99db-661acc1f7e29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9988c0a8-1d55-40fd-a11e-d436a8f24717",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa0d97bc-4eba-4ab3-b075-40ced31d53ad",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18b7870d-9d3e-4f92-a29d-6b335983ac88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "03067b4c-6c3e-4a3f-a9b1-57f1acd0ed85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f2aec9b-e2d6-4fd9-a47c-5a4b510309ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c6e072bf-8066-4e98-b96c-b492b48f89b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "467bea87-4e06-4c63-8763-0515b87aa067",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89d25091-4728-44c1-9677-b99a3b80830e"
            }
          }
        ]
      },
      {
        "id": "95ba1e8b-c972-4746-ba5e-e1e58853b04b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "10d96347-9247-49c3-b468-cd71606b179c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e487ad61-66cd-46c5-84c7-1e40589f2cb5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5e5467f5-0000-41c6-bc9d-4f6954fa9779",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa24aa0e-175c-4850-bdd9-23be3b6a62b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07dab084-5086-4a8e-a5ba-01616795cd52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c828e6f5-6264-44ab-a74a-4375f9362b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7286745a-85d3-4b80-9da5-510cd227ce13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26e71f6-1990-49e2-b61c-3e7137622686",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6344f267-4f4e-4fe0-86df-dda62e0dc226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ccc1a5-571b-4964-ba4c-47cf5c7e2bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f335ccc-db33-4de6-ab92-892a864530fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ecdd57a-1c5c-4f72-9449-13f89e6b5f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e965be-aaef-4d1b-ab0e-87a890bd92cb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6e16fc-7b84-4102-bbbb-b4e7fe2bc7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19ec520-9fc9-47d0-92b1-d658680777fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba948d8-4f08-4ca9-a266-47782b259658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10701d99-cd5e-48a0-b831-909c6c87cac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a2a3d1-a451-4408-9b92-821f1cf20fe6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4dc4f4-e29d-4546-8a47-714cc616bdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc721fca-e0fa-461f-a051-9848cf1e8da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4d547a-c8fc-4bc7-aa44-acf4183ca9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8a2e01a-230f-4d27-b851-4eb20f3de3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dad307-0387-46b9-b729-526b212f5d90",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070499e7-ec4d-4c52-88b3-243bc353198f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493ddcd5-54ec-44ec-98ef-fd9a6446ef6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e58f58-330e-4f72-987b-efb7f93a0959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8599855c-99fa-4cef-9ce3-e4d974dae437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1312648e-01a8-486e-8838-d344c6fc89ac",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255a2e9b-d989-4bce-9608-23a5daeb2df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f988c94-a441-4046-a8fc-40bf2f1ce65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d99b59-2ad8-45b4-9e17-46b7b35cd605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44726c86-c646-46f6-af0b-342849cacfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21eaed4-2c1c-4b92-89f4-78b17122ca54",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04aeebb1-8184-4698-9428-89d2ea0355c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b68d3bb-cd0b-40cc-b046-c9ea3ea04f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892a8527-35a8-4d2e-802b-b0850ad99e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50f32c59-467f-41d8-ac2b-59a2da84bb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7284bf5-bb75-49f8-9fe6-533f42f50500",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae577aeb-0290-417d-84c9-b01d81704138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ffca37-8fcc-41a4-8ae8-21eb6c64f37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3091f0a-93cc-485c-a4ae-7d7c53cf821a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64194f2f-b8bf-473f-8483-37e0d77cee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c54d08-dfc2-4573-a137-f1b9cbdf20e3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479ca4a0-4980-46da-825e-807348303131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ceb770-f4b6-4032-b750-9dc87ee18787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc56c884-23f8-41bf-984c-733aa69a2b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "933b17e3-38eb-46e6-b74b-5c4d1ddaf6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c00545-667b-4d96-a21d-46f80ee991ff",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86fdf93-802d-42eb-95b1-9d9ad7607e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124bd319-cdeb-4d27-9831-a001556c590d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380dea96-8481-4091-adfa-7d30eef44ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c877be32-e811-4597-8a3b-c7144046b3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce06b5c-2b85-4493-9470-f00edc21f9d2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34b7077-0514-40e7-8fc5-93ccde0db07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51243687-8eeb-463b-b36d-2d6e7305ab45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f2f82b-0a09-4d71-9508-17deb610c41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b6ab7e7-0a40-4ee0-a0bc-459283ffc3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed4a7fb-88f2-437b-99be-0185216c51ab",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4c3eb0-9fb5-4480-a947-4a3dd4768d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b046ea16-ec7b-4aa6-801f-c8a6cb14b6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e33a89-41cb-4f88-9ce1-a8f54d0c0771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e51edb2-18ab-48f1-a73a-6c25f9d27eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707991b1-6a3c-42b0-91a6-b5a9f65e0d8d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e16dc8-e778-4637-b38a-ec3bd9e4eb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1faecd37-78fd-4181-a017-d02a25366ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8107cf12-7ead-432d-925e-a0b0bbe063f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2d8571e-f746-40ff-a917-ba47fb3b7f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec285860-7983-4fa0-a740-f9bdf01914b3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f96e760-77ba-41b8-979f-1ee2b1f37327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567ca49a-6888-4d87-9f05-556446a78a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a15cb0-00f7-454b-b7c5-d44f6e48612f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72547a2a-9fac-4aad-bcb7-e760617ae844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d648a8-77cc-4dfc-b954-7ef354b0d0ca",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f89f5d-e9a4-420d-b65d-c3c37149b9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137c664f-f6af-40ea-95ae-aebcd8fcc951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12035f6f-d0f7-449b-8b6b-62e8195acfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07f13368-44a5-436b-8d72-a85d873c1600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa02c378-11b2-43d7-a75e-5b1b428a6203",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3baee6a-20e9-4ecd-afea-63906300c285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde10964-8010-4cd1-879c-b070a95981d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdca885-b669-4ed7-9d08-9552f991867a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaa68710-5ae7-4ebf-9845-65b80a1c9538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc94ba0-a117-4570-8db8-0eec3dbf58cd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05b60e8-e170-4650-b9a4-3a9e2c41249e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077ce1f0-762e-4e60-8e15-34cc20cde985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223c0f07-b577-49d6-8890-26d1b353533e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9df6be62-222d-4497-9974-455c4f5e77ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75984b00-8b0b-4752-989d-153a9a3e58ea",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf8f5c0-74e2-43d5-861e-07aa4cf4b3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434f5545-6c40-4f0e-807a-14693a717b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e696994-51fb-4b93-a0ae-41f52d784270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa595ef1-8ba0-42a9-897e-49a88a5e4cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c13bc0-5ca9-4cb0-b9fb-703e9ed7af8d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d0e076-9bfe-4831-87f4-b4a83b60121a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88365bee-503c-4f7c-acf2-330a77a53a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55d8bfa-9cc9-4055-9395-13f943251dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8afbc67d-fb2e-4785-8495-2fcc004b2956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83567393-ba58-4b34-848f-ae9480f07eed",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5023e97c-a6d4-4295-8895-b4ea0bd03ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575d2296-9e84-4949-aab8-66194152617b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2b2fef-2ab0-4bc4-8eb4-cba537cc4322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98afdb95-9063-4478-9db7-419d3d227f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107c4e23-9b66-4da4-8069-e88230671562",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abc3947-484c-4fdf-b062-66f9cf0cba3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad8ce2e-9ae6-4dd6-8cf3-05020a3e9efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4195c5a-7922-4c65-a48d-69aaa38f20c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f712fe6-8551-486e-809f-0b0ef25d86c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618e9d6e-0e1d-47e9-80a4-27f1270389b9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "967d4d8f-532b-4bb9-bea0-1a7566c4792c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5a2efc-6d18-4610-8ff1-1bb4677f3c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09a14bd-9281-4a09-8d60-43c538e21666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2dc1994-d098-4370-a6ee-04b3c3635c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61627cbd-bcff-4249-93ba-1c718613f359",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e0d4c8-5ade-4db4-9d63-e8eb66449e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a86187-37b1-4f47-9424-c623da3bcc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc51e908-6a48-4023-978d-224616ed847b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99425a25-6ef0-4abf-afe4-b81bd69706d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b315d05-1a59-4c20-bb97-b152f8530b18",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ac4a08-6c8e-4ce8-a622-bf2d2cd00079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50906101-227e-44d0-93e7-c9256d4c88eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24c7703-1d44-4320-9938-bc69e041f0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1814815-d825-4557-8b49-6582b5bbc90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efc88f4-d66b-4b50-a289-7946eaef28e1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8f5a57-6e26-4b1c-b8a5-81cc93248bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407a1d91-ea8b-4249-a7a8-933b23542c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82df837-1439-46b0-adaa-966fc9616363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e502ee-3c5c-44fb-96cd-fac431d0e6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912a2e96-da66-49ee-baac-635ca8e81c8c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265ced7c-52f5-4c06-88c9-3031d3760733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba0edaa-b413-4663-abe4-a8c830cee828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd82e7d-110e-43d3-a632-dbbf7ccd1df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da0a21fa-f850-41d8-b5a9-89d90086b6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecdff94-6995-4464-b5dd-6ef5d5f584d8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398c1c22-c204-4e05-8463-6c5e66a7c18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be93c950-df30-4e1c-98ef-0dc1a007cb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4088f898-b097-40e3-ae16-9242a4909dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9996c309-fb00-443c-b9d1-13615709008e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df4f61a-710a-4ce4-b0b7-8975970bc79d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914c8ad7-f28d-4dcd-9126-324f26d05335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524d338a-d4e1-44d6-83ba-532447088690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecc3c70-3d8e-44d3-a2ba-8df201148a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9c2f8b-ecac-4956-97e5-acad60eaf614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0600b1e4-602d-4269-b4d8-b70dab7cd278",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1105b311-c7b5-4b40-bbbb-07c7c0ca7f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afbc453e-4bda-4f30-8a7d-b2dbc6932656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fb732f-3163-4a6e-8f49-d8fa1683f7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dbaced8-7486-4981-aaf1-03565f9289c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a2899e-83b6-4d86-94bb-590ce7b39706",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78f312b-d1d1-443c-8d5e-63efecfbbdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a497b46d-bba2-4f87-b6c3-46a41700a5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8e9fc3-3faa-4035-af6c-307528bc80e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f44be21-edc6-4c38-81e7-c4856f252d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03ff656-34b5-4a3f-8247-48fbaed8b7c7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd14a102-de36-4ff4-8e43-5d25b7dbc3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4a79db-c92a-42bc-826d-134525dddb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f0a78a-fd8f-4867-a5bb-4bf11c5b3a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db53699e-83aa-4f39-8384-150dcd3442e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e996fec-90c3-47a4-93b0-9b7ff26a1fd3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5975ad5-6b8e-42ce-bb6a-a1e26bb2784f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9c62cb-c073-448b-a409-34c017d33283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b09ac7-862e-42f6-8ddf-a1ce138bd13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1232a1-9708-4e3b-a61f-da0ec24dc1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda789db-efb7-4ccf-b7a7-0cf860db3300",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f4a9a8-3c36-4663-af12-dd4b12a344e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c906317-b155-451e-aed6-805962ae6769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6997e7-71c5-4d01-a4c7-d588dc9fb864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ece0c4a1-7c81-4efe-9b3b-a6fea367ae1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d49544-be95-4de7-ae3e-adb066becb23",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3253c01-b57b-4f61-ba78-04ced1914f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9284705d-8246-4167-83a0-4c5e7e1230bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfe0a37-83a1-4e01-a487-a4434df38a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89ed41d6-0e70-4932-b850-117ead7593c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b4f03b-5479-441f-b868-5e6b50a95199",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bb0a92-6f25-44b5-814e-74cdca93e628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4ef1e4-1713-4987-a49d-b8419175f86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58aa457d-bc27-4878-ba45-346ef7d4c878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cba7d5d9-f51d-47a4-aad9-607e02c0a993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae34287a-eae9-45ef-8cc4-60a795661979",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1250d233-9523-4ba4-8fe6-105c6f68e575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6f50a35-1de3-4be2-9d2b-6b7fd0c59552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabb9920-3991-407e-99ad-b74d54d3b44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ddefe57e-613d-4dd8-b5dc-25407cc0f6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48409897-9ada-4263-8ddb-7533568a36ea",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8975440f-78b0-4942-91e6-5ef1f74e14b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6293aba-e14e-4150-9b4f-cb30caf0336b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d968450-c906-4a09-b9f9-e46d16d99977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16bc2a3f-0620-405c-896d-37cb0810c082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b56f9c-143a-47c0-a896-98f4e79ea76c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef5e9cf-2289-47e1-94f0-e3fffeb78f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383ca918-40b1-4b8b-bbfe-d6e7abd00ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fa2875-5bc6-4349-b401-032bff60151e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8717ed2c-3a31-4c0b-8e09-69475fef5fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae39542-952f-4c6d-b966-e364a9258d49",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b91e03-9e1b-4a38-a860-4a5535a379ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618cc111-6f06-4588-9b3f-bb512a026926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee3a43f-c79e-49ec-b71f-ade49d90cd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "18872948-04f1-4e20-9e4b-15d7210e3ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221db899-e383-4e9b-9e5f-e5c3861be86d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa21fd8-84f1-4858-89d1-a03ee6f33b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2fbc97-7823-4722-abd1-05cffbd06778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a231ee78-ff8b-40c9-a617-8f3e818eae71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f94bf2f3-ab1c-49ee-ba77-6fe6f6e25739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03300476-7958-476d-a198-48e51fcb6657",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e79ac60-7fac-4975-b3f3-1888ec70e480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e4d4ab-eb01-4d21-a756-a7a3d4aa4678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678d0770-daec-4f81-b1f6-c5bb982a9d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cac3cbf8-f35e-406a-8d0f-63fcbb72cf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebab635-186c-4df9-9aea-0e180ffb3cbd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5592f619-47c5-4a9a-a0bd-153c1e0b04d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09be0514-7d0d-4709-9e5e-06a3ae6013a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb80c09-39c4-4ff9-8b40-b5c2e7f88f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8207c91d-b06b-45a6-9d2d-937ed1b5a1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a65ebf-59f6-4a83-90c5-553c08c2e135",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc20f9c-9eaf-4e9b-b641-ef87e0c466fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f8323f-099e-4746-bb81-5020f0cae25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a0ca46-133f-4908-98ac-1d3849f47490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe78f761-2dc8-43be-a1c7-8db40b720f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce6823b-8fcc-4f8b-b257-a07cb5a5e1ca",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340c7956-044c-42d0-988d-f4eb875e3bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4992987-45ff-41d1-b394-e49f5a9b0346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c183952-42c5-43b8-886e-f9b4e2e861f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1f82f6-0684-4628-a820-8f0ef0b74676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dd2447-c255-4a06-8c81-bc951f31a59e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbfde4d-3773-4af5-99b5-ddf1175c9018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc7d021-1535-40e7-a717-b23bb79eb2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7c6d5c-55fc-49fb-80a1-c7309a8f1f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31cf7c3f-e2be-413b-a898-e0f30973fece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc729785-5107-42df-a3ae-58309f8b71ef",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19e31dc-ea97-47c2-af7e-852086801f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74de4707-a4ee-484d-bef0-29cce14476aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02a58e2-20e2-47f3-bb0b-9d0701f3d38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "739b500e-f1ca-4b43-ab12-98e61c87d9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47387cd-5a91-481c-a2d0-e656b69db517",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72361bbf-3e68-4dda-8101-52829f41458a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30da4cc5-3879-4aba-ab54-eb6e2d3296be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded29cfe-5374-4504-bc6d-1a79cd6fc426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cafb2629-2e57-41eb-a8b5-da59aa255c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4905b547-b7b3-4cba-b25c-fac89503459a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ea02f5-8d69-406e-ba62-8a16f0b0c0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77da5f7e-8289-459f-8037-04717a75af93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49ef76e-991d-4aa2-b729-73e0e77765e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4188ab-723f-49a6-a93a-debd6f69ed1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce4d28e-fd6f-40c7-bf43-1cca8d74cb62",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdaa9eb-072c-436f-a247-c577c1e5ce6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355694c6-6f68-4342-bf9a-71c6395bb406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a47cf36-df5b-4821-8dde-9beabbb64f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ac6bd1-68a2-4dd4-beba-1e779331bc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bed3ba-2104-47fc-b7ff-2e1edf25a89b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450de10c-f191-42c0-99ce-a60a375c2778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8bf441-3df6-47b6-a7f7-ab59bfc26929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebed77c-b53f-4e13-a67e-099d1d1c259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08117ded-d17a-418b-ac08-b31498cd4598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b72c36-235d-4562-951c-14d824ffc8f4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ccf553-2ebf-422c-9013-e60e95c628ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3da5b1-6b25-42e7-ab4b-d13f6774e6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c681e63-d168-42a2-9166-d2dad4772e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "613f8bc5-3557-4454-83ba-737ff852e2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e59631a-7322-45c5-8cc9-706decf5f030",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84e359d-4ceb-47e7-8820-d62772f36d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcccfecd-487b-49ff-9f2b-7054dd0b1507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecc9578-b532-4b0f-929e-531dee53b84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66e9a4e9-e0b8-491a-a752-ce81bd931623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc7e0ed-360e-4246-8b1b-af0fc98688df",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2de5eae-09b0-4112-8c7e-257bf35efc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4b9026-29cd-41ef-91c5-e840e7d8dca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6893cc97-60bb-47f7-bf39-f0590532ac22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd89b920-4fd9-4f26-ae15-63bb60cd6db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2efd08-fd94-4e02-b13e-ee988a506be4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5aed44b-3c0f-414e-8b76-d4bb4e598a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb423514-6b80-43a8-93f8-478d174a6642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fc2ac6-4c48-4ac9-adc0-689d7bddc37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "543b99e0-60d6-466a-8b4c-039b452c5820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef0d029-7efe-4468-9136-9073799d054b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7067c776-4f42-494b-a3a7-f049b0ee0e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244f0957-a008-498c-80c1-95c5fd57e634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2401fb2b-dc2e-438a-a86f-a48f9207d91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da22cd09-03fe-4b24-967d-a45c336f9fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15349b58-9ae3-458c-a1e7-e45e9492902e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a71316-81d3-40ff-921e-8c9214bcf7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9780538c-c36f-40d1-bcd1-05dd3d623d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90744f25-6757-46dd-8f22-51a16b455161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8a76b3-ac12-460d-ad02-de6c7c89bc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b32ba8c-f888-442d-a713-5f189c6f9872",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c32008-652b-4244-a6d6-94546a7d4bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429686fc-0506-4b2f-8279-913368e79b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f684dc03-5a45-49bf-badf-af6404750b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cba344fc-a446-4605-bba4-1c6d2b2f59c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94548bac-a30b-4561-b173-d9cce281b290",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8d0844-6f71-4e63-b60c-89483a23c3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d49c58-59f4-4465-818a-14a7b6f50dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394cced3-967d-4f66-87ad-7aa75ef2ceb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b17e4c3-a6fb-46d9-888c-23063aff945d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b779f63b-545d-4ad6-a4b3-45084de0b524",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9bcf05-93c2-443b-ab2c-b8c6c99af095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3a9a75-ec20-4895-bb09-a3742a8478f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d3f090-7cd6-4d0b-a9af-1c71f5a1965a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fd25e2-d74f-411c-98d6-d51fdcb87659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5075090-e748-4383-aed1-0d455bffee15",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b30f5d-189a-49d3-aae4-49cea1331671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b52486-4dee-442b-b1c3-583a8cb3afe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350aa724-b655-4aa5-a977-0d19e8850648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c13c828f-4446-4b51-b795-7f45f6fb9376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ce6183-435f-4aa1-84f8-a4825c7db60a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ec00d0-c648-4730-9f88-bb9f29c9df09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0f74c3-d1b9-4948-89a1-e228d584788b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f567ad05-5eab-49e9-a27b-f44784e3fa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc78ae63-9b0c-4c30-ac02-f3babf4ef2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dd6df4-155b-4b62-a1d4-b512b9d301a8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea16ab9-3b5d-4e0b-9f5a-679349570f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e33e72-14da-43ce-973f-2b1ac81a474d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aeb9db1-3a5d-414a-be5e-e81230072812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7067ba-13de-4b0c-99d2-b9facec70121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb235ef5-9174-481a-9633-e63c88e7dfba",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6ad5dc-21f2-4476-a8c4-b38427e8ab6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785d2028-7605-41e2-8609-0568c13e4d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335c7753-ed96-4cfc-8633-478ad5eaef27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fecae15-dddf-4971-87ed-ecbae8efa50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d85b824-21f6-4e82-9f4c-559a24a4a2ce",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7d613b-1d52-4113-b2a5-c3d7b79f321e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a206a9-ffea-4e7f-bf10-69932b2e8d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f99b11c-760b-4e2e-a9ab-80187f432db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac193f3-029e-44cd-9689-e1bc2b176865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1314893a-14c1-44fe-aab5-0bc0414b293f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fbf72e-de87-4fa2-886c-e70d0a3cddeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e27b37f-2805-494a-ae35-cfc91ec6c367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d07def-4348-4ea2-b8d3-1f13b87a4f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f126b07e-dc17-47d4-a93d-c4d9c8d18763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf23095-8ac1-4a74-b40d-207f3af3b833",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d37293b-41fd-4eef-88df-a3d6cea75b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb507c51-856b-40f1-82a9-3e9eeef83497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3daa510-fb3c-48b8-9369-a03b35c76a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2da0924f-53ab-4e1f-a601-c92772f984f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe9f3e8-7fc2-41a1-8b80-2b02d6b23c48",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25b6c61-18c0-44dd-8cfc-262c445738c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ddaea9-ca0a-45dc-94a7-8c57884f1a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaedef12-2690-4c6d-b579-a21fb2ca436c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "132fe1fd-3f80-44d2-9fd5-a894fe08203f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2e4251-3a9a-4b04-a4d5-36249bbf50cb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259d5b5c-1214-424f-9aad-2ca7e3450d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f113d0-30d4-48aa-85f7-8646d79dc91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566cbe85-5766-4ffe-8ab1-898335d0c40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2708fbfa-57fa-4ad1-8a2a-04ed236c601a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b2809c-011d-4411-a3de-1223473763fd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e94137d-0101-4c74-afcf-bfc81883fda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a71d79-0fa9-4d42-ab4e-bf218b3b5fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240ae09d-69fd-4092-98b2-3692be284ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba4015d-eeb3-4bbb-afaa-cff80be1fd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b57ffa0-39cd-424d-b1d9-c67f395f439e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f8fa08-dc69-472c-906a-01dd0b49febe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3277dda4-19ae-4fcb-8e32-3bf5dd55c62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3146630b-f48a-4826-bff9-5ba6b5e2bde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0134d0e8-485c-42c1-91c4-07b3166a84b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe9bedb-26a7-4b0a-89bd-175a3fe93b0b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f33281-d337-48dc-9e22-4cd0d4d13e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3e8190-4d43-49c6-8009-10eaf11168d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6f3ca3-af77-42d2-ad04-f72ee7f83dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30c40b40-65c1-4f83-b3d6-9eeb8f35a51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23a794d-8fd8-4fc1-a6b2-aa1598c42461",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcfdfdb-f8d4-4403-b084-2935c7a71226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8945e790-638b-4481-ae42-87e48aa09f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7485b50d-33fd-40d8-9d55-bdae571a7d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a019c0fc-a34a-4875-ac6d-554cdd0e63cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075b4620-9215-4d19-add6-0f1869fa7f8d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ab240a-2e1d-4f1e-b70b-bc52cf491906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de6d999-933e-4b41-a230-1140ba90c7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b35885f-ba4c-4ae3-a65a-60c0cc926fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e69e685b-a1dd-4ed9-be6b-3f231ef0c9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cdf91c-fdd7-4fe9-90d6-859d7e2acdcf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a483507c-5fd4-4e6a-8f21-64f1de908a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611c65e5-5279-4057-9a7b-03255310f495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648ed706-5e5a-4419-a4a5-ab957e73f69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c5ba85d-5f47-4155-9423-b697f73173fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebba4d5a-8cc2-4d28-a99d-cab13a81e00f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fba29f5-6c30-435e-a8f3-1141ce3e22d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9cdd0e3-4549-4bd6-8add-b77009ef340b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf0c9ec-09ec-4a59-89b4-3de36c2de6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d34d7d9-6334-4e32-8b59-5d4b52c71394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301bca58-eac5-46c7-b7c7-694e70e7440b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ee0636-f38d-4110-b23f-9a09eec6e3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42661dbe-e056-445a-a4e3-4011e3ff3751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7f7029-99ca-47da-9c95-a67eb0b049d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e24b0c55-d46a-4d3d-8553-03b88e6ca6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8772cc-695e-4ba8-a016-a2bbef8636fd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6048d0c6-4c38-4828-ade3-1191bc3626c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f810472-18fe-4590-a8bc-d0a18f70b248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012b1253-3f56-407e-a6ae-c6bda4e154b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccff251-f3d4-45e2-8aed-f78ff307befb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ca8724-d2d3-4435-ab7f-c6c48c917e93",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cee68d-d266-46c9-b2f2-c4cf3e105545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f88a8f2-dcc4-42ce-abfa-859f3a5636b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf6ff05-cba9-4000-8dd5-7cbed7454641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "710e1c06-4a9d-47a2-ade2-54e184398937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae713e0-0104-4308-b968-ed26de2c9523",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46cf8f8-e308-4014-8bb1-cf88fd46c33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ee94ed-aae3-4b2e-be0c-14f204bf2cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bea153-e460-4319-853a-f1b4f5965cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae77f8e8-581f-4df5-9b32-1f03613fa2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac791fd3-0863-41e4-93da-e69ca9da5465",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a716149-ba1b-4876-99e0-189ed529400e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0f50c0-9037-4137-8986-612a68cf307a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc23ff3-b37f-4567-a468-535bb304e149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae8253da-43c8-4630-9af7-bdf93bba9027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31234eef-aaf9-4336-9d67-61b8265e5875",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28a08ad-87b8-48b8-90e1-744694e7dfca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dacd37eb-58ba-4ad0-bf9a-5d439213e287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e7aa56-4c52-4c0f-b186-8e44027e439a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "50417f59-a37d-4d25-b6f1-624f339146c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb327ca8-ef89-4711-b5d7-b3d05e79c4b7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3160330b-afdb-4bf2-9e46-2602b03086c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c400e5d-872f-4d56-8233-bcdea550a4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bcab79-bb28-449c-a980-95bbfcc0ee8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e42b0e8b-280d-46be-a245-1608b1e2742c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d55d69-d86e-42e3-8272-f76f9f971771",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98d07f8-6143-4eeb-8771-b366be2d588d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21da61ff-6a96-4d3d-8f24-2c34d2d7db52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d9f24b-154a-45fe-853b-6e4bfdd63ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e6bda5-c6aa-4f52-9f79-2e2e9138f282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9bf5cc-9121-4d81-82ff-8e7219e28670",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3693ca7c-d3de-4d0e-9823-7e7646f6624e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f07394-7fa6-43bb-9271-b60f0a0f0e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb98c7c7-66fb-4c3f-84c6-fcd7b02d113a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91a33f85-e62d-4fe7-b0e4-c8279a459a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e8a6ef-e420-4490-87fd-b84ce0f853e0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ec9165-4fce-45ed-88ca-5e839f4bb724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a70ddfd-6a07-4ffb-86a2-5c881b495a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f9c496-eb3e-4f43-beb2-bc45fd8f082f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6ff2b8-403e-432c-9c09-36f1ec44ac9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5827d0-c2df-49a5-bf59-0293c012471e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fdf1c7-5ef7-4c33-95e6-2cd19f9e88cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ee840f-584e-4047-a2a2-eb98d81f5599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a6433e-b2a5-4b01-a52d-4a84ccbf79ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21e2a02f-455b-47cc-a7e3-4d401467e610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2f072f-f3d8-4115-b611-2aef349c5f88",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5feae74-d6a9-4bb7-8e87-47a59eeeb593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0054f66d-689e-4d6c-8dae-8ba753110f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7becbf8-728a-4226-89d8-1e9d6a0a1711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f329ac31-cb8a-459e-b7f2-e0e19dc043b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30c9d5b-01ee-48e9-bbcd-2e5339906a63",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a781fea-5b0e-47dc-9cd9-44eccbe16c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b8f103-236a-4b26-9d00-85c122b4cf62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c2c565-5f40-43cc-91cb-373b27026319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "696f907a-9251-4173-b086-f8ad92e1fa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951eeada-b15b-4d9f-b53b-60d9f59213cf",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f9fc79-37ca-49d6-b983-4a72b69762f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931e3b08-2f39-4e74-910c-f4630a0d17a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c6a536-cf1f-4ed0-81ed-68c9d02441e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "877529f1-1629-4f6f-a518-289e32348639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169f4d7f-a1a8-4522-ba7d-14da1181957d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fe2261-b3a9-4355-aafe-e2f2e6ec2ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988a7cd3-9168-42a5-9886-ea1a81f7bc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a261e472-735a-4c7d-ae54-8bb44b046474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c83cded-a993-4e11-b158-43e3fd00657b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10906ff-6189-4ce7-b2a3-d5739f0137f7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69521ae9-3301-4265-992a-c088414a24f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894d664b-d4ae-4783-8d65-a2715d51ae78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b278f9f-b23a-4818-a92f-f6490cb37a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5be1ada-0967-49ac-a2f0-35123378392d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce031ce1-96d9-4a0c-ba26-9fce1926ecf6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96b4e29-4b0b-489a-b32c-8dd1ec3d5019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "422bcbc9-de55-4692-80c6-94a03b950314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a16b6b-8dab-46af-b697-f5d3461fe385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c39c086f-bffe-4564-8e15-65009dede490"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "096183fd-072c-43fe-9c40-1efd8ce29d9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d4282fb-3d38-4c57-821a-6329b34eb73b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da32b7ce-7940-41fa-a5e0-ce175fa10388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca225f06-3b52-4e50-8281-2b03f6459e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5448e5a6-2063-49d2-ac67-892aa31c3c58",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36a36f30-069f-484e-a291-c72cdb6011e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a970a950-af6b-450a-a75a-f817cc2c52a3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4f6fd3-bb55-4eb9-9af6-918439e399c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15eac0b9-ed45-476d-8306-e0d0510c8de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6920e53d-3c59-4f24-b539-1329ea0ee31f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9f850aa-f55c-4ca9-b47f-b62d85783d66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3956cfe1-5959-469e-a678-def7db7e54cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "184efb92-370e-46e8-98af-9a11788e0d25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f025802e-c709-4706-a93a-c56e91245a13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de3c5df0-25ca-4e82-b763-d69de0d6bd58"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f3f3379e-8593-48c2-95f1-be8662616fd5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df7697bb-6a80-4158-b6f5-6086c16d3f5b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2712559-773f-44b7-86dd-eec523e91b40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb2b6293-7d60-48db-add4-c1ab2c911467"
                }
              }
            ]
          },
          {
            "id": "d3675d02-fe86-4ac2-bb8e-b6adcef5e4e4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7dc4446d-577c-44a2-a378-cd404d81a87c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b67b81d-fb4d-4ecc-949a-2b57700764f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc5aa029-01c8-4f6f-a946-e4edae774f87"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aad161af-e3a7-4f56-a60c-b7d06c36e237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e687aa26-594d-4593-9d6e-5dd832b7a246"
                    }
                  }
                ]
              },
              {
                "id": "7f69166f-bb53-4d80-9e66-8a6b7f95f496",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b59c153a-0d59-4561-82ab-e82604e33bac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35e34cf1-3152-4524-853b-d60dfe096402"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f608e629-d0db-4ef7-8d05-cebdb6cb11b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ddd9b2c5-18a6-4aa2-9c53-cef9f4806fbf"
                    }
                  }
                ]
              },
              {
                "id": "d9c29406-d13a-41b2-a242-9a0a3274f300",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "218f140c-8bc6-474d-b9ee-0cd525abf34c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "600d41bf-3c5c-42e8-9ec2-b4b493b0648b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf6b430c-0471-4850-95db-86706cb43306",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e0e2766-7bcc-439e-b33e-610c2681d42f"
                    }
                  }
                ]
              },
              {
                "id": "bcd1de0d-7628-4161-97cd-f8bac5a04918",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4de30375-3c1c-4dc3-aaec-7206b382df3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d534f43-4604-4dd2-b037-bf8f598956ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4cebd60-6661-4239-8465-0537fc89d82d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c9b4e19b-bc63-4da2-98ee-6eead94dd20f"
                    }
                  }
                ]
              },
              {
                "id": "e4426811-8eb1-46ea-b645-f098bee3e328",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58d36c39-9b2b-4183-8250-1893721226eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30f131be-f365-423f-aca8-bccefe695050"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ca0edd7-76b2-4019-baa6-afa09a5a427e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "99f84867-8a89-4a45-9dee-b28481d75663"
                    }
                  }
                ]
              },
              {
                "id": "5b68f3f1-9a97-40bf-a49e-d1b5d9e939c9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adea9e79-b6f9-4a4e-bf7f-8495ff665676",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc1aa418-69b2-404e-afb7-3eed1973ec18"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75db7737-ed34-43a1-879f-8ba0e1bfe3a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a810d59c-1412-4ba0-b6a1-07889bfb1b50"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d565206-34f4-4862-9fd6-25c7f3df560b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c6d27c5-add8-4e4c-8125-00ec49d31036"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9a624177-0761-4d4e-96f7-48488f416616",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3cc63a9-f537-4f38-94f5-818442572d46"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "599d55a2-8866-4b3f-a845-cabcde163274",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8408f6e0-8e60-4d6f-827b-b4f62b0f11f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aaeeec93-559a-4cdf-90a8-3bc446a0a5ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2e2debb-7b0e-442f-84ca-daa9d24abfd9"
            }
          }
        ]
      },
      {
        "id": "eb5f8e00-3a2e-4785-82be-49bb562ac299",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dd63c4c9-7f1d-4db7-bdba-8e7585afdfda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd15a190-1f22-4cf1-b5b4-a345907b29a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54db8b5c-31e7-4ea1-b226-19c4bc021d20",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74362d3f-f06e-4e1e-8c0f-2619d586f08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f41eae5-bacc-4c3b-9260-4af8b4162db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8665b8a5-8de7-4f2e-a89d-55c155b5ce9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "09daddac-813f-466d-8a2b-bf61c19e01c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57337b58-f7bc-468b-9e8b-a10ab8a28c84",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd045a2-cdc5-4cb2-bfef-fd4dc3a57cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e41e60c-189d-4729-8379-795f67f9759b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2140db62-07a9-4bc3-b1ff-1c9d5e621a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3969ab-58bb-4691-8548-4c36a26e3c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d100bcd0-d0d1-4ad8-bfb9-cee0326ea61f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14276e3b-5710-4d75-a21d-49983daae986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3038cf7d-9049-44b5-93c6-e4a1315ecafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c75ee-ca59-4689-8ffa-7d901741b59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47f9f44f-233d-4b92-aa8e-732df4720223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfeec317-c7c9-41e0-a8ea-ce94e6b2a7fb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dea023-3c1f-4cbc-8423-95d1a5054306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d811b1f6-a5f1-4237-b791-7e0586341310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e2e2b8-1300-46ad-b986-f76475efd608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39b69423-7959-4a18-ae6d-c55402eafa4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271b4879-70ed-4987-9499-38d0c1e55dff",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2aefec-5b67-4086-950f-267f9c56904e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597d4adb-e732-4a1c-a1dd-b7aa2f5d6ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991e2f17-f060-49b7-b35f-b8d4ba53e344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b18b7843-3ac2-4f16-872d-33426cdc2f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7411f690-3065-4bb3-be82-246ff3f90508",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcfeaa9-c5ca-40e6-8ca9-62381c2eb6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8213d3-e4b0-4517-a232-0aa5641117f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358dbb36-9cce-44c9-be05-d448e7489da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "40b94fd2-28bf-4329-8cf3-8409edb2deaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3ab5df-5e83-4b5c-be67-b06a51025f12",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c5c8c1-5d89-458c-9058-33c2edaa7b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b71db3-25e7-4987-a5ce-3e05c41d5096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d583c3b5-dc69-4830-b144-9f56f3434685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "20130e96-f8db-4591-8ac4-bd4637eb6359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8934294b-7a49-4212-b74c-60f4385e7385",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc914e8-c8e7-4507-8516-76456369496c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b48543-ecb9-4f46-bff1-767c355c7788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1326d22-047f-45a1-9fca-1f7c65c31cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "381341c3-92a2-498c-8606-21c0deaf34ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99e0b19-b5d4-4743-a8db-4bbc39bf7667",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c953ab-db17-404f-bd60-d34db9c97bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e45c67c-c70e-46c6-9007-2c030d057a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d6ee38-1e04-401f-8162-2f0bfa5921ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f096c8-cec6-4f1f-bd58-bb184623f1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51102359-c00b-4e0d-bc5a-80f16c36334a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075e92d8-304c-44b9-81c9-e418f8a44c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace0bd20-8bed-477f-ad37-f85039792b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6a3d40-6009-4264-956a-a1a8093d1024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98bdfe24-0b86-4a1b-b7e5-59fe9d0b4598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec816c12-622a-422b-bd5b-622ae94df8f3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3471e32a-04d6-4267-89fe-d3530df7bd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89c8714-b5c5-4028-8c49-266c5dba6c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec1b76d-c22a-495d-8814-67cc82a31104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "547b7514-4c1f-49c6-994c-316dec52bb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe896c39-7881-43f6-9809-54e03910c3d7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec22821-c6e6-4cf2-9057-45fd8c4cc1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d917f346-77d1-4309-a43c-362d641d4a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd373a26-b050-4eed-b0fb-b2c915bb92fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0267963-a5d1-40f8-9fd1-c01ae2ae50be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16dcbf6e-addd-4180-9117-635d2fda8558",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000a91c8-ce7b-4945-9ce8-42d60e7bbd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d1cb0e-14fc-4c23-a97c-5a65a0956dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a1e867-b417-485a-a6c1-71b2df5d50d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "079d6993-a0f3-4476-ab47-5c6dd00bb688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f5c677-7d45-4d5c-8d54-901b0ba9bff3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece6f97f-7cc5-4690-8bf1-727723bce5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ef20d0-6ed5-470a-ae1f-45018b8bff46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c835dfd-f6be-46fd-8f49-c52a5ffd4a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f38cd2d-d39d-4202-86d7-7424ad976e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec30bf3-6a42-4b43-a86b-247bb16c7159",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8cae5b-dba0-455e-bd7e-19d6a4766be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c0f0c1-58ba-4ef2-8921-08b98f59ea93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb76f18-dd4e-4951-b499-df25cb36bca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c42eb2ae-0476-4640-8b34-20670c694cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afc63ca-3afd-4bc7-af00-b5307189245a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a09944-ebc5-438c-bab7-c086d3e06383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a407baff-305c-4d6c-8818-c50e1cb81388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8800270f-33cb-4a9c-bedf-8209033fd9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1af895-db15-4297-9fce-d5234f9079ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c867a5e0-4390-446b-a0a6-a709774a4502",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9eb41c-2979-4fa5-b468-69e0090597e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252f906b-965d-4793-98ad-ffe814812525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c2c5f5-c953-4b2c-9036-f1cbd4e56d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bae531-6c97-48c0-8284-2b122a1efb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0415ed-65d3-4c5a-8c60-17da8dae2885",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118012b9-eaaa-45b3-b9de-4a3b0fde87ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba75799-ca75-4393-89e4-2b70254b7306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4ad05f-280c-43f3-940a-137d8dda1a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3434e631-4fa5-4df3-8d0b-a1127b0bf51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7007a374-0911-49e6-ab2d-1a66fe47f454",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266348f5-8fa3-4d19-b065-c47035a66711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a25c0e8-4f58-414b-bfe1-e0fe20069e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8de1ffb-2492-47c1-b006-1b9c6abc4111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d835501-9711-4462-98ed-9917d84826e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffce5b9-bdb2-4291-867e-5e5426856a49",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa5e0ee-1126-45c2-bc4c-264f9e69e81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b04eaa-0808-4361-b5d3-358df9fba7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe3e212-4c1f-412c-8e20-363fbf88c4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9393ed1-c336-433c-8d37-4591ee8da855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2973cfc-1bff-4c2a-abb9-d86a35eadcdb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4a1107-f79a-4979-a0e3-38ec47bb8735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906b8d83-37ae-42d8-b99e-e5352cde2892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5ac062-6e0e-469e-a09f-ba838e2b600a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd86b40-1790-4cb5-be81-151601394228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470e9cda-b309-40e6-bf7e-973879632ad2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa645f0-da38-459d-9323-c9a284327c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d9dedc-3fd4-49a4-94b5-96058c6353c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45f743a-7ab2-4b27-b6fe-669050de9a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28db7f01-ef3d-46af-abd8-2004fcac6142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8566ce-6cdb-464d-bb33-210f16f2e918",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62325e55-ad90-4f94-82e7-fa334ca399f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4e3c27-a2bf-4f80-a2b2-aa26211ac7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0dc414-824b-4e95-8edb-40d8d9424715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c820966a-e0db-45b1-bd9c-cbf95d166a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a92040-d1f5-491c-8cb8-2461c2d7c97a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cbaf7e-5fbb-4cfc-81a0-b763a81e00ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51bace9-5064-43ab-b406-2c6a7c921be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3ca4d3-4aab-43ca-92a4-76fe1c03100e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83ce135c-28a1-4957-abf0-70c4c7fe0413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426a68ae-71d8-49c2-be83-31624420ab31",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a611f9a2-6055-47e6-a6ea-ffb5be2091f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11df0780-293d-49c2-b8dc-64260761e761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddb193d-14ac-45d0-a2bd-f97160354387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe562bf-c7b3-40fd-81a4-2e3108a57851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bb32c3-87e0-4a7c-aae3-99cccd0a7cd0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01eeb0c1-aced-4392-b54b-a5891b404594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6d04d1-a168-4a57-a061-83805a8f2042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71929182-e97d-4ea1-90b1-168e04910548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b82339db-5856-43cc-a944-9c1cf5cf5fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bcec23-4512-426e-bf9d-03e193a48918",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aa47f4-ffe5-4930-a2e4-7aec95372bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c482a149-634d-4cda-a209-65b4229ec47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa0e140-a0d1-4c37-8e1f-3cd363ab9d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e1e693-16a2-4397-b16d-88e827f22385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9b6d7b-99e6-4a6c-9a1d-eadb029f2369",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a817d7ab-689c-4fa1-a2e4-d73ee9eaacd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53bb779b-cb38-4935-b4fc-8b79ee44a86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed91a7f7-9ee3-4646-a767-efed1da1ed00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e857c9aa-c6fe-4dc8-b904-91964d352783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37183c6e-f598-4b74-92fe-3593b0b74bb7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0268-3bcf-42a0-bdd6-8cf6e0b9f4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52401571-141e-46f4-8ed8-0ba6bc64fa90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497935f3-089f-49d9-acd2-55a330ac91d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf80826d-2d32-4b6f-be1f-3fd8dedc79e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78991f1-a07a-4b0b-97f0-f273e7d2edfa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6276755c-a5f5-4124-a924-5bf30fc77056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd29561-d91c-4cf9-b35a-c5e271022734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff0e06d-56b1-4b25-bcc1-5dc9083c5c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19d25121-77ff-4ea3-afdc-cedc6c58a560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc5b903-a2e9-4370-b4e5-d0cd3f4338c4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f654e651-5de7-4b01-86ff-e15bb6737fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf2469e-7002-4205-9a47-6fb15b75ab69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdd2308-24d5-40a3-b2b4-dbb991a2ca81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8812e43b-2c43-45a4-afe6-6d933312916f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ca3154-82a9-470f-ab88-4ef2038393fb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912b3ccb-bd73-4a61-b7ea-3b94e208fcf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84925fb-a587-4716-9464-b9af2ae95b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3fde62-a916-4316-8176-25a6cf2a86ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3647a67c-8b2c-406d-89a5-dd0385025c2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e3266322-507c-46bb-9c13-2b5c3f58ecb9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe739527-5213-400b-b0b4-47b75e0edbe1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2249421a-8949-48f5-9546-c54c226d6a7e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ad4ae5-e377-409c-b5cd-325ed2be1a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305a609a-bba8-45a6-85d2-e61f43b01a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c92d9450-5ffe-4840-ae75-664b33b9d06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d36a0c9-46dc-4912-8528-38d8e4d2c9c7",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471bb23d-f6da-423b-9070-5bdbd08cc87e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a4941808-8c7e-4ffc-981f-dae0685df94d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125be901-2cab-4631-9677-3d76a7247058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ec1bd18-cdb2-4c9d-b107-d9c5dc6321cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de8230ea-63e8-4fc5-9e26-9e9a1e04c35b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54af05d4-3f00-453e-9991-3ea4dc5c35a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1172e9b8-3c65-44fa-aae1-08540864f5ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8c6f16e-ef92-47bd-a084-60eceedbc482"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23e2e236-942f-470c-b86d-0d8cf520d380",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a9c03b4-86c7-4797-b460-e9bc360452fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2ef5074-d0c9-4aee-8599-432fd97650e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12e78de3-b267-4d91-9c29-1c9da12aed48"
            }
          }
        ]
      },
      {
        "id": "f94ff520-41a4-40c2-95d0-687306727684",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "33a7c8d1-74fe-4f90-85ee-cdb07df2dcc6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19ee2ef8-3116-4b7d-8929-6b2fa041c181",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "65a68495-2d1b-4cbd-923b-2e4cbcc4a6ee",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26959452-77d7-4642-a8c0-3ba51827f300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784cd6e2-bb2d-4ca5-849f-57c8d209b777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9680defb-6666-4e78-b77a-1efdd2310c36",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5c02e6-36b9-4427-96d6-3ea7ca6bae5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2076a1e-9215-4955-ba1e-3f1eaa4511ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ada8e4c-0e90-4d00-bbba-3ba895d042e5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c542116b-e31f-48a1-a299-619c11607dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426c0b30-ca0c-4d06-97b3-8c88e110cae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e953844-7e59-464b-857e-5b8274a700d3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea002eb3-8ea2-4677-92b2-ae34ce412716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cace2de2-6055-43e3-bbbb-54dcc72de113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49efb04-abcc-44a8-93f1-58d4d9fe40ef",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da3ce31-b03d-4d8b-94f9-4be470255918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640a668b-ea3a-4829-a992-85f6939931ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38205d84-0782-4b3e-a373-bd888bded3f5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e227de0-afdb-49b7-baf2-ff3a11432ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daae2c84-ef7a-44c6-a19b-fb4b6733b5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ae387f-a28b-4205-b69a-3ff8267f6043",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ef4c6a-0e3a-4544-9f72-e25f7c9e69d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd89fd6-2c61-44be-8c50-f89c67154bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6bfed6-2138-427e-aa08-6a25790f7e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ceb285-1b87-45cb-a65c-310a8462990d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7371f78a-5ad0-46c0-bcf7-2d04ad107a55",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f29691-2b7c-46c3-8802-50a85bc9bbb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fce2d1e-72b5-49f9-9b35-f984dcf654e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a870b0c1-09cd-498d-9add-2468ed9135fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61e0f8c-d95b-4e1f-99e2-78b45ca318a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b007c36-ef3e-431b-b1df-1df64d489962",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8bc70f-d139-4098-887d-2b4952bd81c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69b70f63-8d2f-484e-9fc3-37d3eaf7eb17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed81bd30-e267-4006-b562-1b88fa6c613c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c70c2c-cfea-477e-ac85-43713e4f9246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de16fb12-d542-4ece-bd24-e8516a174d1d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e53979-c3eb-4490-bfee-598fc262e334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f369dd8e-3b73-4d47-9057-e2dc3ea129ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b55ac1-bf38-45b0-a939-4a4ee616f905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1232ba95-d667-4006-8883-d6d507189339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c37711-5f9e-42b2-9579-4cea444c37b1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7dbfcb-5df5-4496-bbc3-5c432929e946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f363538-894d-463d-a36f-24000cb5e13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc8b95d-c389-41b2-987e-12da90d2f5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3684e5-8860-4e79-8771-e40978dbdac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab3f630-e354-4d6d-b9f9-3d5cda1f7ec0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72350405-141f-4f92-b6a3-bbf8905a5d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d733a1b2-5a7f-4041-b540-91d7f2d37599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e40b938-4575-4bff-bc8c-8df9966935de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca03c4e-0a97-4fed-8e08-52aebab3ccde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33431cf4-6cb1-4308-9488-ac6c092794a0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce0bd9a-d5ae-460e-9fa1-03e663163e51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "407a6541-4c0f-47ab-82f2-03e74e9d00d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a81c3e2-61bd-4309-b55a-b8ecce52eb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70fbbdca-3fa3-4f80-aeb1-20593921ef00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d248568e-fd2a-4b01-a5aa-afa6466b1a77",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476ee272-534b-47c6-abef-1e4075e078e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7c8bb7c-275c-4920-8794-b77e9407c174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778e1e5f-2ed1-4a25-b68f-0a325b2cdb3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f1fd7f-54c8-4d18-94e2-dc8f7ccb303f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdd4dc0-82ee-475c-8662-1e540061e4ca",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e199b1-0bf6-4c32-8a47-8a9bfa26110a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0bdc1b0-dc65-4ee9-aa98-7a41869cb671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44a3c53-575c-4381-8c51-4724f1fa9ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8547b3ac-b4f7-459d-8a0b-bda348fcef12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1217c580-0781-4567-9ac7-133944a954c9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599e7201-de98-4274-9930-6ad4995ad107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0bcd87b-1543-4cea-b860-b08a5a4b57c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc74cfe-8e75-4b8a-8f6a-99d47ff20341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534ced14-bad0-4cd3-bbf2-0efbef236158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226f99ec-3589-41e5-b426-bec4369a6c24",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652f263d-b297-4885-837d-19f0a5abb262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c40f24-6ad4-4d03-9c5b-24d32d0309f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c8d6c9-3f71-4d3e-a256-1d6d41c76a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922779c9-cd7a-4e5a-a4a2-0c48ff41746d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7172c1-87eb-4ed1-bb52-7d636217ac94",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5398f9-c2dd-4f8c-9367-7cd419c19d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caddece5-5fc7-41de-bc48-d25f7a3c201b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331b7577-2fb2-435a-ae9c-86fda62b2303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b62e3e6-1288-408a-a184-0a3e513192bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e62fc0b-a204-4a8e-8705-5da8df3da8cc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdcc422-d44f-413a-a1fd-54a3c244ec40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc94cdf4-f4f7-4127-a19c-86a640f51634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d6eebf-1b7d-4480-9333-57385d146dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7370d680-7c2e-4cfd-a919-4a151022749e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb4d602-6b3e-4651-bb21-6427242cf6c0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2cc6ff-780d-4c07-96e9-bc2f4508c797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb459f65-7646-4e20-91a8-f5a57d478c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3aab97-0b94-476a-8b2e-5f88befffef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5895693f-505f-4240-8570-e35d2eb4ebe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f1f17d-5d29-413a-ba49-ac07571786e2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796619a3-a37d-4ed3-aa24-8f2d07a1b361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a467498-64f7-4ebe-a4cb-3ea2795f822c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109bbc6a-212a-4b52-8a6c-bd9f4c6d059c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb60b36a-de91-44d2-96f9-9241e13d69a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3ce395-75f8-4640-a2f4-e00983867df1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b05e89-c9fe-4ba0-a024-b9e7e67eb075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ee66c1-59cd-444f-93a3-a5d2606006ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5d0111-87e8-4c0c-8361-b5c24d5e7a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a86d7507-c7d4-417d-ae64-edadd95ac988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcb7f31-e6dd-4615-b71e-8f23f6a4af93",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40954e3c-6baf-49c2-a436-12c79384f015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b157ff-9cb4-49d0-829e-bd4238cf68c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f364b4-7cf9-4db9-9d28-2b51790741f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9836d95-2e5d-4ca0-ae73-7f9deda78dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4127d1e2-b4d5-4bbb-85a3-11b1560f26db",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e590203f-23bb-4786-85b9-d0333c080386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e6c3b3e-551b-4a88-9dd5-f80a86d83ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bbc834-89ea-4b1a-92a9-9b2e8e68b9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf2d944-82ec-40a4-8170-c86d57fd0ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be0417c-3572-457e-827c-67f35889e9f6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8a215d-4211-4898-afbf-e54edeaf4fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55952903-cff9-4954-9b42-d89b7a6c0191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148507fe-b482-4f37-89d5-8674d6a4a786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0be5c37-cda5-4c4a-8598-05e2185f1607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7ddd63-f19d-4926-abb2-3a80f8e6f6c1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c390ce-4b9c-4d7d-8b04-083245ffc1a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e9288ba-8465-4b22-86b0-d747b05c2de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b800e337-8474-4834-887e-c88c2b9b3a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77bbbb00-b9c2-4ccd-b520-59957d403594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af68a81a-da86-4898-aab6-51f610f5b1a8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4746681f-de35-4181-afeb-95efc2ffb75f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30dd9fff-9b4f-40fa-85dc-0fb467b3bc31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96541007-8109-4cd2-8420-6a8a9b82e243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538d7ee2-c1c2-4110-921a-d0d56dfe9f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdced78d-6b3c-406c-86d3-caf05b5b5f5e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a06dce8-a7cb-4a11-b605-8a9c46e3295c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca7da93-12da-413b-bb1c-9a898315ed87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26beedf-77b8-422c-b099-36c17627bf0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2381748e-d0a1-4654-8e01-e01ec1798ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0779130-f581-436a-9f19-fc61ca8120d4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3df0817-c76c-48a0-847f-c6469869bc21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79d5611a-e96f-44a8-b547-3acba11ded52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1066d89-ea3a-43f8-8a9f-1a4dbebf7db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c44cf9-c4e1-4e3e-ad80-7b2044f02c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bcf732-6960-4317-b511-08d84c202251",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1463b5-40da-4f08-af99-c6bef383127d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c1a69e-0566-4a78-82b9-32dcc0196c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b24c1d7-12fb-4aa5-a615-1e5c79ba894a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d40229-68e7-4656-9835-5fd9704ebd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcc5c5d-cb5d-4ad9-bd50-aa5cb0b3f80b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4113aa61-ce47-4b70-8769-db9af0f0458a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f87ea70-0b88-4b93-9a3b-f5261751a83f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0746946a-235f-4a2f-8c37-aaddb2f27fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929b58b0-92e3-4fc7-a8e6-234f1461adaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0f0a9d-48d6-483f-bd88-2361008a02dd",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3e084e-96a2-469c-9649-e3ecb0e379af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deee6472-7b9a-4d7a-bf18-67f58e2162fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "466b455b-4a5c-4ff7-bc61-40654d62bcd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3bb31fe-19de-4a4f-a640-98923ccda924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda6e3a7-edb3-45ef-b0ca-d2fdebc46b48",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdd968c-4249-4b74-8495-317c0798d686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecc00084-db9a-4a1b-94e1-07d337fd4905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d332e78c-94ae-43fe-9269-93ba009fd3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7381b844-ec88-4b9a-9947-df5671d581ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f18815e-0b91-43f3-b161-39981169f533",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa5c3fe-78fa-4a87-9e0c-c90e6708c874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "336ab8d4-a98d-4a54-b37f-85f8621bae16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22d4204-0452-42b8-ab09-d58c6c1ec221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74ad955-1e38-4055-ad47-d537dc355761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9b603d-7871-4784-a827-42e1c1685af6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8981b7-14c7-4b1d-b1b9-1e41e5ffdde2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3239868c-bd9e-4e67-8995-8481d48b00f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbd5cbe-f783-4e4d-b565-a80a11dd45e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9def32de-274b-40b5-b44b-f67edcf6d5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cccbf2-b85c-475a-aca5-735a2cd61a89",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5f1e52-c949-4cdc-ad65-406eb245cfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d94d18-4a52-429b-afb8-f49531b3e5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7990e99-0af3-4747-95d6-4be0a7fa3b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013733ef-b0bf-4611-a879-e97448f3daaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c46b984-778d-410f-bd34-f51b60d97b80",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6241a3-c3af-45ec-9c77-f3023803c350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beaf54ff-836c-4c8e-8f89-b7e426251733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41444851-a44f-47f7-9e97-3486229c8a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b91efb9-79a0-4e66-9f75-0891eca5ab5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e887a708-fe4b-489e-8500-178b2a48711e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242a8763-dbc3-4d24-9b14-eb6d96e7b9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c53764-5173-40f2-811e-adff5485edab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a118d754-f2c6-4a6b-85dd-499840c17494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c636df42-6a92-4d33-ba8a-cb3428bf8f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22757d01-b692-42ea-a07b-3ec90517a242",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa17546-8ce5-43b9-82d2-8f7e25f7f682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04368e0-8dcf-47ad-9da9-af39fc39c6c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "059ed957-9619-4daa-a535-c41004919d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de85b5ca-ddb3-424d-8b4e-99c4271d153c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1698d6-41de-4ee3-bf43-3e09d9c2340c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d351f4-c6e2-4dff-b947-ad600d5f7ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551b136a-50e7-407c-a891-d45e5c45aa7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37297db-08ba-495c-b52b-1307719fef13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb82323c-6d64-4661-83cc-43fc197576bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6924ab-9bce-4388-80e5-fc3e9582e099",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b46f8e-967d-471e-8b6b-fcc31d34041e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66202701-3e5c-43b6-ba29-837da31a491b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dbdd4c-440a-4f6e-b6a0-77dc5c141b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0a5b03-9018-4e0a-8186-52c1195d9889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4767e11-09aa-4842-924b-fd0818e8736e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ce56b4-fe15-4543-9cdf-7c29d8fb0eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c074e5-e416-48db-8183-5d22fd06c2e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc218ff-ca37-4669-86a9-6e25b96ee358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036070cd-638d-47a3-9ff1-6babfac8c3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ede86cf-c7ba-44e9-9978-26e58890c927",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9bb44e1-15d5-415b-8d87-020c14dadfcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11646a1-213b-4b51-8539-7561ae45ca93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f53e35-cf75-4340-8af1-44f5c507d863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc5d0a7-4e77-4268-806d-d5ef3350c4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a411569-dd9f-4489-84de-215f1f763fd6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a231e1a-132a-45ef-9265-ecbe8724bf56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eabc99e-b014-4d35-ad4c-cd7f577a3afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42eca1e6-f99a-4888-a1d4-6bfeb8ea3423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd8514e-b5a7-47ea-a84b-3f0d34f5be4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83491d1-99a5-4cea-8e48-5774ed2eab67",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f9adf3-8cf4-4fd6-88de-7e7547165f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387986ce-5c46-472a-b8a8-d5fd1a07c434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb391e6-3a79-4490-b6c1-48ad51025b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e866c4c-eccb-4844-9fff-3619e6a23222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef0bfb2-a9fa-4ca3-9d75-f4068b1705e4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02488604-7e79-4798-9cb0-f9ce9842fdab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7306a99-df70-4139-879e-4d3b029e38eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2415c8d3-e36c-4678-824f-b1d6e49c666b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d306d0d8-29a3-4f46-a7b3-3305fc096525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2910c9a1-5484-4343-9237-4dda11763626",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9b971c-18d6-4948-a49c-cc5c5a6d665f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96ac18b-3f22-42ba-a31e-8cab79608257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8530e38-8b18-4876-8c9c-55332fa409a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b90d0d8-54a0-444c-aa63-914bbe97c96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6467f75-fad9-4e29-91aa-e8fa18899b4e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fe9342-bc72-4b89-930d-1cf8701206ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c96c40-399c-4807-8c1f-5e986efd6fec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2495ac49-7fee-4bda-9068-0c059d0c908a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ea0a01-b6c6-4d58-8d17-fd2bc7c0072a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32bda8a-96e5-410f-b55a-28c78b36a653",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b399a4-5d96-41c0-b8cf-7fbc5a89caeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6de3d7c-90e4-4865-85eb-0da44e3d0cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb59d89-444b-46e6-b223-b014e3ba0c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972a19a4-766f-4d94-995e-8f660dcf7e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca171e73-528f-4d9a-aebb-9ea3d061f32d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b435c8d-ed60-4113-86bb-5325049f189a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfe6a3a-bbe2-4f23-acf7-5d4ddf54dfaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c4c503-3101-4e2b-a42c-5007827f104f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c23a8a6f-eec4-4703-8322-e06c46ffc1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8704a9d-5154-4f44-b518-a56ce078bf32",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ca75aa-6bf5-4b44-8ec2-66eada59c751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f43e66-fcbb-4001-ae56-7d5e1f861ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433c83eb-5d90-49f8-83df-83f209571221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51cf9165-b36b-4500-8a1d-a8601ce7dfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2cfe44-1f64-4531-9f53-138b0451a61e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e78b937-a404-4440-af04-1fcb7d25f143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239ff729-8479-4108-8c0f-c39e0a35af04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16652cea-4279-4dbd-871b-4f82b5c331f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b355c679-8a4d-427b-bbad-9871636d2b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3693cdb-27fd-4aa1-b2d5-a3af3eb144a3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb0146b-2173-4074-9520-e7608ef42add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4024a29-5898-4390-beba-778492517e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68065fe3-6d9b-4f13-b489-16cb8aeab5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2261a4d5-f755-4956-9e84-5257820215d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78091c0b-7f91-4fce-9d78-375de46ede57",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dea3604-d2dd-40f0-8ce8-57f835f3d4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d723c5be-0615-4f97-a03c-a5d7f81b69ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef909b7a-474d-4f5d-a334-c3d407a5f4fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c57ce4f-cabd-42f7-b940-a1a65a829c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e054f16f-d445-4320-92aa-3b8ffa1d5561",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15de113e-f90d-482e-8425-2160e74456b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f1ecb5-7e53-40a7-bbef-980653cb9bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d222b636-f24d-435c-b375-0f6b40438d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa847f09-52bc-4982-85df-a1d1ce05f071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dac68bf-fda2-4c5a-b55e-c26a6520db52",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33996c3-0f2c-4373-856e-d123763c32a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f6a71b-6592-4c98-9784-43c31219e1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5af0b7c-88e4-4324-ae1f-96313042c0e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539ea962-5a2f-4c17-a7d6-d98d4ca217ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecda93cc-5f3d-4ee4-aab4-4f194b24ae0a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b52ca26-42cb-4df6-8bf9-658284e926ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941fc29b-f0d1-413d-9158-aa69201e9174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3236ef7-8650-4c05-808c-28e83d854737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879e9733-ae4f-495e-a30d-2049c9cb9923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc094d8c-4329-42fd-9f6b-8c47c01f8e35",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21abf794-7fe0-44fe-8898-fababd0f9152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b65a71c-9c5b-423a-912a-b62c553f0dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd794373-98ad-43d6-b2c2-ba01df907c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec109008-4970-4445-bdc1-310e93fbc2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df507f24-1f16-4aa1-9d46-cb6d6caabd80",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb21533-1fda-4044-85a8-af8788291cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806ff47b-3883-4bfa-99cb-8a8a383fba07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e87176-150c-4b14-8ed5-1240b5d74283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e844eb-811e-4407-bc07-d827ef4e715b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81aece54-bcd4-41f3-8af1-b6a5887e8fbb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fd7766-c839-4d37-908f-cbab2d79e18a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea34c624-d176-4173-8d77-bd33bee43988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25db20c9-40a8-4a7c-9d96-2d05318656ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae88d53-f884-44bb-8bed-85d8aa6e8e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6969a38-0338-4856-887f-2cba91633597",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4908caf7-de58-4c9e-913c-5c3456c93091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402bac49-d31c-48c6-9f9a-6abbfb1bd7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c58324-4aef-4c96-90fc-8cc897b9aa58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dfc6c1-4380-483e-b019-82acdbee1732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d33f23b-a94e-422f-92a0-dbb89c85e8aa",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82efa7ce-8909-437a-b5c0-2c4cec59cced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905a391f-53a3-4287-a8a6-6077c4a7dd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f088f031-7635-4a3d-8896-90be739a73dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8eefaba-ee48-4fba-8c5a-a254f60f37d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccb9704-3ad3-4b5c-8f3b-0b382cf8548e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a7c643-b4c7-4036-9fc2-d0c15414b957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f19b89-1825-4f31-95a5-f79e020c9bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae573fc-7692-4a2e-88a1-38d779e2d460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72a33fb-f58e-4cc0-809b-47fa2c8e61fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cb763c-4a0c-4842-b9ec-3e81c4db003d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247255c8-98e0-4a60-b51f-1a16dc303d7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "939ecb94-4218-4a28-931b-9922e18cc0a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00250a83-3537-4958-bf8e-1862e11c59dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f337c0a9-19cd-4844-977e-e8122fb61a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b80ae1-2b69-4dd6-86a9-2b9f5c8d76e9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28db3a7f-a8d9-4f2e-b9b5-73205a7e47cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3c07e10-9f08-41a2-84de-599d9816363e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8b8801-348b-4c02-927b-2af0c06915a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439da030-2af4-44f5-98fb-4333e6ea4406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668a33f2-ec37-48dc-9e87-5b5f74018cc6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e79448-afc0-4b27-a745-6f009cb717b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f5850cd-ab9e-4e1f-9788-a265253ae0a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f07610-70b4-4c4f-ba8f-ceb4f724f751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee543aa2-4f01-4f07-8e49-4cb6e42cc022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f462677-8679-4e6e-bb9a-3409ea36a66d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461600ba-e7a6-48dd-a007-122d541b81fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0406fd5-1ae9-42d1-8824-4e939200876b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936cceff-f6bf-490e-b1b1-222f5b182b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c299615b-9722-4781-8c4b-5a10424846bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14bd1a9-ec85-490c-a6e5-faa0c0d1e83d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4750b57d-23e1-4441-8983-a11c0e6ca7fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "855a70b1-9dae-46e3-be78-d87607179add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bb66ad-aef3-48a7-8186-c41896d70914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af03b02f-e569-4cf2-9482-ea24c822842d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc571fa4-b27c-49fd-ae19-c7e3ad907219",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80d5397-40ae-48d3-94b8-673d208c656b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f164db00-fd5b-4c29-adcc-88b005c1eb86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2291d136-566d-482a-be58-5030983d3b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9017d85-0d9e-4f5b-8118-7a61efc69a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53812f27-8440-4d14-b635-69b1992438ae",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67583851-4b51-4516-8123-651881c8d13f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01ae4fd4-a3e9-4f62-8813-62ba173a1f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a0b89b-709b-4165-886b-3eac6be91704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e985f0-0ecf-4f94-8b4f-49354a1a0506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef57550-8ac2-40ab-9fcd-0175a51548ff",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d59915-2959-4afd-b0f1-a21bb4766201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "495b2792-b242-48db-a12d-d357ed9ff40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db74a16-cee2-4ffe-be1d-f0bb6c189677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7c13aa-c14f-4abf-8a63-b060c6ab87b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d0eeb0-3d00-49cb-8a88-5c41e4ac2d0f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc538044-39a4-4506-84c2-cdf66bf00da1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13362ab8-a5ed-4e77-96de-b919b5d6a068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d37888-d5be-4712-867d-813c474c1e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb77c90-d290-4911-a2e4-3898e2257cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96af1455-d6d8-44b3-8cc7-b860471c75ab",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f0b143-2c02-4c8d-8f43-77b130f24e4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f24bdba0-9163-4ef5-a165-575a24adfc7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac8ef32-9213-45af-b1b8-5ed29aa5b484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d78279-30b1-4e21-becf-8a3ad9674bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0514a8-388d-4928-82b6-ea3eb35f1c25",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8591f04a-db26-4bdb-a55a-13f8c6e3253a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed218b35-13de-49b9-aee3-662fdd6cdc71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e8f73a-7b38-45d0-962a-c09942fdc850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981a54a7-774a-4ae7-8d50-cc5d40a5c3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2de8ba-8bf2-4466-80ef-a499596643fd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da949eb1-f88d-4517-a8fd-af353ffe711b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43976124-bf68-469d-bc72-0f61cd957f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5021db-1976-42e0-80d9-00b43102d847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a30226-7752-4325-8552-4a79ab9fae06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa1fb65-92d4-4e34-a347-a984f70688bf",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d755da70-1ee2-45ad-833e-7e38c6077e73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb5145c-2efa-4886-b6b4-28e58db3ca48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2673bb8a-d604-4bcd-8eef-3922cad95ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7f0d5b-2579-4b82-aa67-872810f21c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc05fcfc-beb2-42f7-925f-2901615e280a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ea418f-40f8-4da0-9a45-102e8f409e90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "469d5afe-b475-43ee-9a11-86eda3b29069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7e3631-6ff9-43c2-87fe-38f51ac5efcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dc9635-5833-4056-b137-951c3bea8c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e65c38-dbb8-41fc-876c-698f84bbbded",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3c47f7-033a-46e2-bff9-db134c6532f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "280915c0-41f3-4e3e-92ce-cc6515bf8f13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b17cef2-3b66-4534-9f18-de4808b0e566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c226eb-a155-4244-9878-510eaf12e71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7768c49-3d51-4906-a5b3-058ef0d35059",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b8b743-b8f4-4706-bb04-350f01582790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "347d938f-dc72-4e44-8482-d3e8c70d7bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a397ff1c-0b89-461d-ac79-f1a9c2dc5ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4d4e92-a5ba-4700-b81b-4e03630366b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085e5079-73fa-42b6-a48e-c55f8f8077ef",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f2e173-84a9-43e1-985f-99e87654328b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4caf5063-2084-49c4-9482-8af8f9ac3182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b69854-374c-4ec0-b369-6ba31931987c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ca3202-1569-46f6-a996-bfc63611e1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba0f377-8885-48ea-ae2c-41de9dc87f61",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54eb36ba-1298-4712-8307-187e4c5e6100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b018432-cde6-4f22-98b9-1e842f8df2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "424ee07d-1d81-4cb2-b090-0b572d8f1f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cafce3-0287-49a9-8603-4e3575120a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6ad38f-9e46-41c7-833f-090c184a5689",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25e567a-065b-4e39-b5c5-343af806c415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c19754f9-7ea4-4831-82dc-7d82efe3dd9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e6a092-e972-4dfe-910d-c03b9748de01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e567a0fc-950a-4b3d-b7ff-ff0ce4d54369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c75bc2-6566-46de-9152-83def4c4cbb3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476c1a93-90e0-4d66-b289-1c2def4c41e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43f53226-90df-424c-867c-dfbbaae4c42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bed9446-b34e-4719-a849-75da1f5ae1f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68435bbe-483a-4160-9232-9fd9e76e325e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385796a1-cebf-42e2-bb74-21ec3e835697",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fb9919-fc5f-4079-9e32-5f89c915dbab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1721b9bd-2146-4975-b365-7fe5804a84de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d69389d-f22d-4490-bfeb-a162215b31d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae00bec6-d6c4-47f0-82c1-26808ec26f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1140ccf1-e993-4ab1-803a-c6e09b135bad",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56099ed7-8094-4d8c-8087-feba3f2ea5b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e376de3-a55a-452b-ad15-31ca7307617c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccf9dae-94d5-47d4-94c1-b8e153dc08d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c86223-3880-4857-995e-a1107c0c81c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da98d5b5-581f-471f-96cf-bb7857180d00",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2763aa-0407-4d6c-af68-83f74cfc088b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7edb11b7-282e-4cc1-aaff-3e4d492fa9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cad0fa-5e14-4f98-ae03-b27d2c60dad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f22f184-f291-4ce2-8ff4-3937ae3b0510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bef7ef8-cb10-4d44-9b37-80810fa147d9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af2b5d1-ddb5-48f6-9978-2ff9601efa0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27e4c72c-0817-4bbc-b6cb-6fab32482983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afe3d14-643f-4283-b742-86246a972f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8b138b-205f-4227-bcbf-2ac098246c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63625f25-e9a7-4720-a444-f306f3bf9900",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3dc0cf-36b5-41a3-9fef-ba8fb82014f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57489ff2-12eb-4d77-b3cd-8e92cd306c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a418f7c7-21b5-4a83-8360-50cfc50a766d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07caa18f-ef80-43f0-8f43-1e86b1704c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6316812-6dff-4b14-a35d-663ff452de6a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a821d37d-0012-4734-a4c6-42e91d97d71a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba553b62-40f3-4177-8f64-bdc98c717584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05963d94-f0ed-4bfc-98b0-6c29a8f49d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a423cc-5e2e-4012-857b-c6de4556c01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8f28fe-943f-4265-b041-530b9fb5f675",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47913ecb-362e-4c46-87e8-8210d02f98e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b4ec52c-854c-42cf-98db-7d2ea1883bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bf4658-1a42-4c81-a0de-9cba18dc3c5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd9db429-253a-44bc-bb2e-589d8a36653e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a96c3ee-2962-4a68-bd4b-5aa42986ccc8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d355a2-2086-4926-946e-0934925c7440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "080ddc70-2784-45e0-bfcb-f4596b69a9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cee6c8a-d414-41ea-9a0e-f7eb0c2d7e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c71eca-5c60-44db-9f7b-146af2ab0488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5e7afd-2273-4951-844f-78493f5a95e5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb49638-d94f-49f5-8aca-94fc5fded908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "407bc5be-9e3d-4a05-b80a-7ee0aa71a75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f18d7c-7439-4084-aa99-a318e37045e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1788b1fe-d4c2-4577-b946-987b557adc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4bd8db7-2896-4412-85c3-4cef7b4c1f09",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d697cb1-0a66-4369-b3af-0a0583573abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71abcc06-4f94-492e-a62e-17faebf2a311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e234f13-777f-496f-bdf4-f5646b70d0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5bd844-44a0-47d3-bec7-5b5e1c6f5d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715dd67d-05b2-4321-9815-adc1ba269c25",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b317f8-cf09-4806-908f-06f527fa1745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d91ef7-0a0e-4442-9a4b-91a76bc0ecdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5001b9c5-61da-4219-bdef-422b849e185d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de456e5-62b0-4cf2-a55a-c5e2f6a93e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b85caa-31e3-40bb-8e65-e2ab2698154e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5ef9e8-5cfa-4f0b-b8ab-99d63e3f06fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46211573-126c-4aac-89ed-7dbf4413cc3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6d04b3-2f9b-414e-8bf9-e234ddeb17a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b90e98c-8c3b-40df-bdad-3351971f8ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f24ea0-74f8-4eba-a831-ae35a892b2e6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b57bb4-5fc2-438d-8612-ea1c3b8557c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3faa42fa-3327-419d-b16e-33d15dd93e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a23d6f-ace0-466d-9a59-1df3b9c81d84",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09099952-5421-4545-9975-4afa7d1118e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2eb6a6d-fec9-42ff-becb-d2d0f1c7aeb3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff7f378-d3d1-4675-92cf-22641c57ea3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae386043-b503-4dc9-bc4b-b9f4be347483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efe592f-8d60-4e22-9156-2cc82e83ef01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09dadaa8-a03e-46db-bb1b-10e4c3167e92"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e3ef230-05cc-4b2b-b8bb-1a600b6b393a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49d3d7af-3d66-41e8-9cbf-2fe9657d6d46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "931b49b1-0967-482d-90b7-85f4d3492c86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3af478c3-5056-4569-80c0-e62c5ccdcad0"
                    }
                  }
                ]
              },
              {
                "id": "54fe3f36-299a-499e-8e7c-bdc034cbcd72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fcf196c9-0716-43e2-8401-d72c7b32e641",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf94806-470d-4c5c-b7d6-c49ec9a96912",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "18f4d17b-b238-494f-bca5-968a1e48d6ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6befd4d0-4477-4780-bf0b-0ee929cd2126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e53aef0-ae91-4ca3-abab-a5892528b964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93fa32d-a905-4fc3-b19f-45f1d4d9faf7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dddb033-f00e-4558-adbd-6c75342013c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b0de423c-a5b9-4507-b430-e9b6ebc30bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d9616a5-4913-4922-84b0-c565e55a3e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e57352c0-30be-4160-9afa-5e5e4c228496"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ce6f343-8748-4b24-8c1e-7bc3d62d9e26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6a98576-4437-4374-a3ce-06e3e1de5197"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "107fb68b-6f57-4ccc-8e68-12e353801abf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2eb1481-00a6-4d75-b58c-190268e85e8f"
                    }
                  }
                ]
              },
              {
                "id": "4f08c6aa-acf5-44a7-9da8-cd3315e48b5c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7cbf231d-a505-479d-971e-de3c9da3ac8c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1101e9e1-d90f-4a65-b7c2-7982cd3f5c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "96622582-a563-4ea8-a7db-00a5c33d3a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d53e1f7-8b4d-42a3-9cbe-f27cc02e1de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17249a96-9aef-46ad-ae92-4f266967b01c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b00a6d4b-a1bf-48a5-9a28-515d48c1a12f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dfa60104-df2f-434c-87bb-59e598ad8da0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffecb0bf-1eb7-4f03-a4e6-6b3b1d8b96d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cfb698b9-f7cd-453e-a44f-aeeeef76d7c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daa9ed07-23b0-4fbe-9523-3fc86a4cba0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a280db0c-d652-4852-8757-0267b9e5e442"
                    }
                  }
                ]
              },
              {
                "id": "df11fe81-d835-4204-bc06-6f9f762e86b9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fec677fe-44e4-4f03-817f-d8bbeb536bca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c6343079-c7f0-4b61-a774-9e8a7021723c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7e36c44-694f-4ae4-9862-8c20025c4f3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cde5af32-d426-4e13-b6c7-d17e7f39a3ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f32918b3-efc7-4bdf-9c1c-fa54bc601505",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fd1e1d70-a5ce-4fe1-95eb-52e13fd310cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13ec9be1-4b2a-4a9c-9fb2-77849ad67a82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55b21ecc-a828-4a08-8d07-9291d6bb9832"
            }
          }
        ]
      },
      {
        "id": "0f3cd4ad-b681-40a4-99e7-6830e139eb46",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "82b4a654-f8c0-480d-84fe-4bf9eba1b23a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32b39b27-6e56-466c-80b7-cdfed0b8351b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5baf53d4-3f3d-47bb-ba6f-af10f5c164ca",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9862a38c-209d-4fdf-b44a-44c7fff5d9bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "915eb938-31f0-455b-85dd-a08f84a6f16e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069661b5-9bdf-4721-b29d-f4e9fc750caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48d6ce61-2082-4f4a-984a-7ec416196022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e96aae-b41f-4fc0-94e5-2b28b6c34ec5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eea7553-4080-476c-97c8-89aea7323939",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "634982ff-2ec5-4a12-9b5d-65ca9d5ffc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0b91bf-5941-4d83-8bd2-f3a48be0785e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a1b91c2-35c8-4ee2-9452-a92982f04d60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a641535-3d06-4698-8a98-02b6d38aad72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb631fb5-2f91-411c-aae7-e0eded1ace6d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "156978a3-8b81-4bcc-beb8-98febf67b867",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24db6ec7-4375-4d19-84f1-bbc2d838897f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82a83bcd-76b7-4a9e-ac4d-1979d61b55b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "731c8830-3acf-4b61-92da-bbfa29fecbf0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3022af1c-c6c8-4313-8df0-d784fa3f8ae7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c9b208f-5d62-4e40-b8f7-a9b207f2ba09"
            }
          }
        ]
      },
      {
        "id": "8651a0c1-b118-40f8-b2a0-89880bf61344",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "39a9ff67-6037-4638-af51-3e8ac755277b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f64df579-e16e-49b1-9d45-a968621dcb97",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d018b2e0-2600-432e-b58a-4db3bc363265",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fcb919-06cb-4075-8323-bbd99e9df8ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5186f2c-6d72-4889-93f9-6f9c4f6b9c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e038234-df26-456f-9a2a-be8706c0c04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6ccc051-bbb2-41d7-98b3-4cb920473250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1287247-081c-4da3-a092-6e91a8cc9c55",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e333929b-2598-4353-a3db-0008d0453f2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6629cf-d264-46a3-a5c5-3e9416cf4559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "516bc2b2-15b7-458d-acee-d820554aa9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80357018-43d4-470f-8c48-8822c30e8cd4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc3e0a1e-8db0-4d06-85af-dd7f142ed5cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ab1295a-271d-444c-b4b6-663c313408c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2f7477b-2b8e-4f1f-b5a5-5a483dc0113f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8da0ca9c-4eeb-487d-9dbb-476a17b200be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2e86713-9abe-4b65-bde7-afdfbcba4695",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "32bd7652-f43c-4429-8efc-d11e32068b11"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "493973f0-21ce-4af8-a490-17c5246f4268",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9bc8f5c-6064-4107-9caf-2b49d0943ea4"
            }
          }
        ]
      },
      {
        "id": "7dde9957-b6ce-4fc7-ae64-9e705ecf3b9b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "26d67733-0375-4563-83a4-3827955456ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0f2b780-1520-4e11-987e-bc458f8817e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ef5028d-099b-4a19-8591-a283c30c024f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62987037-13c7-4628-8b17-9ece538b03d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37d43634-67c7-4370-96e1-22dfbf3621b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb50e79a-1e59-49f6-81be-89604c596958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "300f1619-6588-431c-8712-e207a345ad74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f0fe6f-b435-40d5-8db0-0a0d2be37821",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837ff04c-6855-4367-b606-938950580e32",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bab3110b-83f6-4bc7-8fa0-e1029771622e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e024aa-84d3-456a-8682-85d62752a6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58d36705-d0b5-4878-8e61-9ca969c7ae01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95965a0c-a8f6-42d3-953d-849b069520d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e01bdb66-ef42-4de7-b8a8-e9ca1900b799"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2aa6bf2e-262b-40e1-bb3d-3d4fab56bb1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24785a9d-3760-418e-aa46-7de272dbc124"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06693f73-e07a-4a93-8721-1df13f633e7e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "327e5554-a49f-4110-86a1-833ac7abdd07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "738781a8-ac3b-4971-985a-a981d47ddd84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea01ce83-04f6-449a-956c-bbcc31d45109"
            }
          }
        ]
      },
      {
        "id": "4b8124f6-3455-4b87-b5b6-34fc95385709",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c58e33b-410b-4d2f-b8c7-dd2ec6ef7f0d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd1fe824-d02b-459f-a67d-56e19650de1c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "761cb0e2-9f63-47c4-85fc-73ccc81ea083",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "202993a3-f898-4cf0-bab5-513b94138faf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "675eb594-e162-44ce-a6c5-0a7ad903b28b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 295.3,
      "responseMin": 10,
      "responseMax": 9727,
      "responseSd": 965.4832321373889,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683246850339,
      "completed": 1683246938172
    },
    "executions": [
      {
        "id": "490259e3-3e67-4828-aeb0-1a9cfc5f7e59",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ba09f244-898f-447d-88f6-cd0b29174331",
          "httpRequestId": "ef5a1380-c903-40bb-914d-fe8051562763"
        },
        "item": {
          "id": "490259e3-3e67-4828-aeb0-1a9cfc5f7e59",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3f479e6f-8be0-4254-96b9-e827742e003a",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "430fbce1-1433-4eec-8592-8a9a78a2be61",
        "cursor": {
          "ref": "57dfa070-5378-4ac1-bee6-550f16431b52",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8f920e30-ad94-4ee0-89b3-f0f597139826"
        },
        "item": {
          "id": "430fbce1-1433-4eec-8592-8a9a78a2be61",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e97ee8d6-bca8-43d1-b074-35781a917285",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "6cd6b559-5e4d-43d1-b9b9-4b537f121c4b",
        "cursor": {
          "ref": "d03ca003-446f-49f2-8afe-58618203e45d",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8647f44a-85a4-4169-9868-ec9d4c382b9f"
        },
        "item": {
          "id": "6cd6b559-5e4d-43d1-b9b9-4b537f121c4b",
          "name": "did_json"
        },
        "response": {
          "id": "f4fe84ac-5dea-43d5-8130-0b500c142214",
          "status": "OK",
          "code": 200,
          "responseTime": 437,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48908aa2-feea-417b-a041-6325eab5d3c1",
        "cursor": {
          "ref": "65b57be0-d371-43f1-a632-c24acb067aa1",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b3a27d25-44ee-4814-9deb-71da52dc88d2"
        },
        "item": {
          "id": "48908aa2-feea-417b-a041-6325eab5d3c1",
          "name": "did:invalid"
        },
        "response": {
          "id": "5b098217-476a-44fd-a1dc-1aae433360cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1041,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "48908aa2-feea-417b-a041-6325eab5d3c1",
        "cursor": {
          "ref": "65b57be0-d371-43f1-a632-c24acb067aa1",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b3a27d25-44ee-4814-9deb-71da52dc88d2"
        },
        "item": {
          "id": "48908aa2-feea-417b-a041-6325eab5d3c1",
          "name": "did:invalid"
        },
        "response": {
          "id": "5b098217-476a-44fd-a1dc-1aae433360cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1041,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2f02edd9-e402-475a-9e97-e6961b73f458",
        "cursor": {
          "ref": "6680c418-1a9c-457e-85fc-aaff8cbc2ea6",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8bfc6cad-dc25-4189-a6a3-ee1d3caa0e97"
        },
        "item": {
          "id": "2f02edd9-e402-475a-9e97-e6961b73f458",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "854a0013-7b06-4722-8f87-0f6070662634",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f6deca-f160-4df1-a70c-5f58f6e2ca6e",
        "cursor": {
          "ref": "23d6571a-a9cf-486a-9adb-e1be1038e91d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75c5a48c-5de9-43b9-95bc-0403fd29d052"
        },
        "item": {
          "id": "a1f6deca-f160-4df1-a70c-5f58f6e2ca6e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5cba29d8-cb10-4e37-ba0a-4c9fcb84a8b8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234090e2-4d73-4b56-beb6-8dc55f37ebd7",
        "cursor": {
          "ref": "9d397b42-4e88-4c15-9925-58c8247fa1da",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4b7f02c6-419b-45dc-bc0d-a60e2f0bd8f2"
        },
        "item": {
          "id": "234090e2-4d73-4b56-beb6-8dc55f37ebd7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8e4a489c-d35c-44ea-8fca-d885b40058c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b12edb85-7291-42d8-aa27-ee3994f07f3b",
        "cursor": {
          "ref": "0c620fc2-c218-4bd7-b550-4ae8ce049285",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "882c83a5-fc1c-4981-87df-ef746e79fa69"
        },
        "item": {
          "id": "b12edb85-7291-42d8-aa27-ee3994f07f3b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "35912fe1-b00b-4103-99f1-395bf9844ad3",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b12edb85-7291-42d8-aa27-ee3994f07f3b",
        "cursor": {
          "ref": "0c620fc2-c218-4bd7-b550-4ae8ce049285",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "882c83a5-fc1c-4981-87df-ef746e79fa69"
        },
        "item": {
          "id": "b12edb85-7291-42d8-aa27-ee3994f07f3b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "35912fe1-b00b-4103-99f1-395bf9844ad3",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fa0d97bc-4eba-4ab3-b075-40ced31d53ad",
        "cursor": {
          "ref": "e43284d2-8238-4523-b4d4-fe5c5cce908d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ef3359ba-4424-4f3d-907f-c155cb1477bc"
        },
        "item": {
          "id": "fa0d97bc-4eba-4ab3-b075-40ced31d53ad",
          "name": "identifiers"
        },
        "response": {
          "id": "32b32d1d-2a64-49ac-9701-4cf8ee4506af",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5467f5-0000-41c6-bc9d-4f6954fa9779",
        "cursor": {
          "ref": "14c928c6-7bbf-4f34-8975-fee98384e8ca",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "12585ab5-abe2-41cc-ac5d-3c44c1fb6464"
        },
        "item": {
          "id": "5e5467f5-0000-41c6-bc9d-4f6954fa9779",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "999f012e-e63d-4407-b2a7-d1eca5ad8f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5467f5-0000-41c6-bc9d-4f6954fa9779",
        "cursor": {
          "ref": "14c928c6-7bbf-4f34-8975-fee98384e8ca",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "12585ab5-abe2-41cc-ac5d-3c44c1fb6464"
        },
        "item": {
          "id": "5e5467f5-0000-41c6-bc9d-4f6954fa9779",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "999f012e-e63d-4407-b2a7-d1eca5ad8f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26e71f6-1990-49e2-b61c-3e7137622686",
        "cursor": {
          "ref": "ff80d76a-4b99-4dd8-922c-1afc457c37d1",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2cd44fb9-dab8-4c9c-89d8-f041812196fc"
        },
        "item": {
          "id": "a26e71f6-1990-49e2-b61c-3e7137622686",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e399b261-c21a-4099-af5b-e0935ecf8395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e965be-aaef-4d1b-ab0e-87a890bd92cb",
        "cursor": {
          "ref": "ebe86f9b-18dc-4f14-b56a-488d9ddea2db",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d99ac52c-328d-4a0b-a59f-b984cb58e956"
        },
        "item": {
          "id": "30e965be-aaef-4d1b-ab0e-87a890bd92cb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "606022a1-577f-42dd-92eb-750201470afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a2a3d1-a451-4408-9b92-821f1cf20fe6",
        "cursor": {
          "ref": "9cd910dd-22a9-4476-8627-d8f00ebaf6fc",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2f7677f1-e958-4b6e-bb98-2545562be83c"
        },
        "item": {
          "id": "57a2a3d1-a451-4408-9b92-821f1cf20fe6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "43ec19a6-99af-4d66-873d-e695c1da4b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dad307-0387-46b9-b729-526b212f5d90",
        "cursor": {
          "ref": "fdb5124e-8503-4742-9eaa-9814e7dfcd78",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6fee374c-4fe2-4e27-b2d6-1819271550ca"
        },
        "item": {
          "id": "33dad307-0387-46b9-b729-526b212f5d90",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "058dc836-4e82-4224-9463-08838bcfc440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1312648e-01a8-486e-8838-d344c6fc89ac",
        "cursor": {
          "ref": "dbfd4fc6-bbc3-4c1d-9259-34f9efef5541",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "df67e38e-68d3-417b-96a5-0bc104f9df93"
        },
        "item": {
          "id": "1312648e-01a8-486e-8838-d344c6fc89ac",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6f04eab3-9a0e-4f39-84a5-309fee4434d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21eaed4-2c1c-4b92-89f4-78b17122ca54",
        "cursor": {
          "ref": "fc05ac06-734c-4eed-9787-9eb86dd68017",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ed02a899-af28-401c-a3c2-881fb70d5cac"
        },
        "item": {
          "id": "e21eaed4-2c1c-4b92-89f4-78b17122ca54",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e77cd6c8-3306-4d8b-a29a-98f4c58cce64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7284bf5-bb75-49f8-9fe6-533f42f50500",
        "cursor": {
          "ref": "876b6a60-e9db-4d2b-9b62-7841b006c2fc",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1d0f99c0-ed3f-4c89-ab6b-211829971425"
        },
        "item": {
          "id": "e7284bf5-bb75-49f8-9fe6-533f42f50500",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "41034fff-c7e4-4759-8209-f047877e4329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c54d08-dfc2-4573-a137-f1b9cbdf20e3",
        "cursor": {
          "ref": "a3cde8e0-9bb5-4d48-8012-7ac4342f4030",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "76074a8b-4b25-4498-b42f-13addf9eb16b"
        },
        "item": {
          "id": "e1c54d08-dfc2-4573-a137-f1b9cbdf20e3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "eb1c1f64-32a2-471a-963d-381245e57417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c00545-667b-4d96-a21d-46f80ee991ff",
        "cursor": {
          "ref": "4829a861-838b-4872-8c15-b720447fe111",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6d529ae0-e4c9-46ed-8bbd-cb7a49977259"
        },
        "item": {
          "id": "f7c00545-667b-4d96-a21d-46f80ee991ff",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a217daf5-a505-4b92-8d9a-6267fa93b118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce06b5c-2b85-4493-9470-f00edc21f9d2",
        "cursor": {
          "ref": "a720b62f-9985-416d-b027-63e887cadf95",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1388a11b-0b5e-4270-b3e3-9f385b774380"
        },
        "item": {
          "id": "2ce06b5c-2b85-4493-9470-f00edc21f9d2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "be9855e4-fe0d-4874-9e03-9c095e20de99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed4a7fb-88f2-437b-99be-0185216c51ab",
        "cursor": {
          "ref": "e23c7696-bf1c-447c-8dca-618f00ed9b81",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ce49b8c8-612c-4a00-a20e-3892ec69d355"
        },
        "item": {
          "id": "6ed4a7fb-88f2-437b-99be-0185216c51ab",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "65263e2f-3631-4132-8936-085e1467aecc",
          "status": "Created",
          "code": 201,
          "responseTime": 2370,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "707991b1-6a3c-42b0-91a6-b5a9f65e0d8d",
        "cursor": {
          "ref": "771c1dfd-cc36-4ca9-8b21-b2978591f4f4",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "84e1f667-7ef5-4bbe-851f-212bd8c2dde0"
        },
        "item": {
          "id": "707991b1-6a3c-42b0-91a6-b5a9f65e0d8d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0d40fa6f-6fcb-4696-8368-399f9749722d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec285860-7983-4fa0-a740-f9bdf01914b3",
        "cursor": {
          "ref": "ec76f0ae-f725-42f8-adfb-8eedfd7cdf80",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f37b5e41-00d4-4290-b934-2e46176dab9a"
        },
        "item": {
          "id": "ec285860-7983-4fa0-a740-f9bdf01914b3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8f9adb09-ad9e-4ccb-bc97-0f5d04335fce",
          "status": "Created",
          "code": 201,
          "responseTime": 9727,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "83d648a8-77cc-4dfc-b954-7ef354b0d0ca",
        "cursor": {
          "ref": "03900072-1c8f-463d-a464-f4574879cef8",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b695dd2d-d88b-46c1-b171-7cd55b8d5d96"
        },
        "item": {
          "id": "83d648a8-77cc-4dfc-b954-7ef354b0d0ca",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "49351fe4-f5a5-45b5-a788-952e8da1f6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa02c378-11b2-43d7-a75e-5b1b428a6203",
        "cursor": {
          "ref": "a1309aed-16e8-4190-9246-5c4d75434e84",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2f170d8e-3bf7-46ee-8daa-4aaf7c3acab7"
        },
        "item": {
          "id": "aa02c378-11b2-43d7-a75e-5b1b428a6203",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b53ca591-b907-4aa4-bb30-5b30ad8941f6",
          "status": "Created",
          "code": 201,
          "responseTime": 4847,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "5cc94ba0-a117-4570-8db8-0eec3dbf58cd",
        "cursor": {
          "ref": "7553634c-2431-4b9d-9763-fd382f96c011",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d0d8d8eb-7430-4931-89d6-1959f027eb66"
        },
        "item": {
          "id": "5cc94ba0-a117-4570-8db8-0eec3dbf58cd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7fbb298d-08c7-4274-8a18-8b135c78f2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75984b00-8b0b-4752-989d-153a9a3e58ea",
        "cursor": {
          "ref": "0f9308e9-c597-4839-8b97-76afc292bdd3",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2a16ff2a-a4a3-4602-a6aa-e579edf3d52f"
        },
        "item": {
          "id": "75984b00-8b0b-4752-989d-153a9a3e58ea",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "99581092-b018-4a47-b98e-9d29d0ed08fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c13bc0-5ca9-4cb0-b9fb-703e9ed7af8d",
        "cursor": {
          "ref": "2321e13e-7353-4d33-b010-acd38bd063e5",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "484f372f-3c5d-4766-b217-6fbe924fb920"
        },
        "item": {
          "id": "f3c13bc0-5ca9-4cb0-b9fb-703e9ed7af8d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "42995297-70be-4cf9-b726-938b6623c532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83567393-ba58-4b34-848f-ae9480f07eed",
        "cursor": {
          "ref": "f646134a-0ccb-4204-bfe8-6c6ae4a32251",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2b887c8e-d86f-480b-965a-2f9a0104dbee"
        },
        "item": {
          "id": "83567393-ba58-4b34-848f-ae9480f07eed",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ea206a51-39d3-4830-8449-edf6aed5ca5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107c4e23-9b66-4da4-8069-e88230671562",
        "cursor": {
          "ref": "ab3466c0-46b8-480e-ad19-6385d467ad46",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9c5ac3be-81bd-4506-8169-178c8ddedc0f"
        },
        "item": {
          "id": "107c4e23-9b66-4da4-8069-e88230671562",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "028344b6-ddb9-4454-98c3-6cc04b1076e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618e9d6e-0e1d-47e9-80a4-27f1270389b9",
        "cursor": {
          "ref": "3f16b45b-679f-4048-a06a-9eade94070d2",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c4ac1863-1e80-4eac-bf72-ca6fd98a8fb4"
        },
        "item": {
          "id": "618e9d6e-0e1d-47e9-80a4-27f1270389b9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9648ffe9-de24-4bc1-8cca-2ec8de6d2756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61627cbd-bcff-4249-93ba-1c718613f359",
        "cursor": {
          "ref": "c338bbe0-f37a-4823-887c-099ffa3d9805",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d53f65b5-6759-44c0-bf86-f3e460456322"
        },
        "item": {
          "id": "61627cbd-bcff-4249-93ba-1c718613f359",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3eb0ba82-4741-4fde-8891-9cca2ad788c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b315d05-1a59-4c20-bb97-b152f8530b18",
        "cursor": {
          "ref": "71bc90d1-0031-4133-ba41-13056aa1cb23",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7fb2d9de-88d3-41a6-b7ca-c03517e731bc"
        },
        "item": {
          "id": "2b315d05-1a59-4c20-bb97-b152f8530b18",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "684c747d-03c7-4c79-9c43-d9b8b7d86bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efc88f4-d66b-4b50-a289-7946eaef28e1",
        "cursor": {
          "ref": "deb62935-0747-4b08-9890-19be4b81d6bb",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ca3f814e-6038-463a-9fcd-0ce164e4bd91"
        },
        "item": {
          "id": "5efc88f4-d66b-4b50-a289-7946eaef28e1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7f96a2a4-dbd1-4e90-824b-a3c0b0c26c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912a2e96-da66-49ee-baac-635ca8e81c8c",
        "cursor": {
          "ref": "d7b7fe5b-9db1-4b57-bdd9-c90f8be5d9ac",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fcfe5a1d-ed89-4342-9663-f8aeaa654f0e"
        },
        "item": {
          "id": "912a2e96-da66-49ee-baac-635ca8e81c8c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6f8a8ca8-2263-4c93-a821-b1719963a772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecdff94-6995-4464-b5dd-6ef5d5f584d8",
        "cursor": {
          "ref": "5682a9e5-47ab-4ab6-ad4c-098ad6af7b3a",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "60c90c09-805b-470d-9e4d-7af1efba414e"
        },
        "item": {
          "id": "eecdff94-6995-4464-b5dd-6ef5d5f584d8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6b7c8cd4-6526-42dc-897f-bafe6a857741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df4f61a-710a-4ce4-b0b7-8975970bc79d",
        "cursor": {
          "ref": "10398df6-f9cf-4ec9-a9c2-d275fb9a308d",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eafc72ef-6582-4fa8-aba1-de8adae3f892"
        },
        "item": {
          "id": "4df4f61a-710a-4ce4-b0b7-8975970bc79d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7aff65d5-e2eb-4395-acfb-46f6facc8778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0600b1e4-602d-4269-b4d8-b70dab7cd278",
        "cursor": {
          "ref": "3b4a1e17-a576-4ef9-99ed-f1be20c46163",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "96667c4c-1ba1-41d0-845b-288d0f5d487a"
        },
        "item": {
          "id": "0600b1e4-602d-4269-b4d8-b70dab7cd278",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "aab0435d-331e-4033-a452-86d236fb8f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a2899e-83b6-4d86-94bb-590ce7b39706",
        "cursor": {
          "ref": "af807013-44e8-40d7-95fb-fa376e228387",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7c302b13-b550-48aa-9daf-d106652eac87"
        },
        "item": {
          "id": "39a2899e-83b6-4d86-94bb-590ce7b39706",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c1c781bb-4e4d-486f-9a44-6dd71925a3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03ff656-34b5-4a3f-8247-48fbaed8b7c7",
        "cursor": {
          "ref": "a9df7f9c-bd45-4ac3-a39b-e6dc44a9ea53",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "46cdfbdf-72e2-43ee-889e-c6493fa9d982"
        },
        "item": {
          "id": "d03ff656-34b5-4a3f-8247-48fbaed8b7c7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f7164702-68e2-4646-8697-4781a25fb032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e996fec-90c3-47a4-93b0-9b7ff26a1fd3",
        "cursor": {
          "ref": "aadec37a-b999-49b1-b422-cfc4f60b897a",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1f9aa02d-7943-4ec7-9883-c1a75fd3e36a"
        },
        "item": {
          "id": "6e996fec-90c3-47a4-93b0-9b7ff26a1fd3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b7e3feac-99fd-4e3c-8339-f62fa9fe5e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda789db-efb7-4ccf-b7a7-0cf860db3300",
        "cursor": {
          "ref": "8ba55e4e-a02a-47d0-87a8-fabcd312ba8e",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "85c9f654-f989-45df-89e8-668384e514eb"
        },
        "item": {
          "id": "dda789db-efb7-4ccf-b7a7-0cf860db3300",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8b5e8e65-dca9-42fa-9490-d9240662daec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d49544-be95-4de7-ae3e-adb066becb23",
        "cursor": {
          "ref": "be10bf9b-9638-43e9-9785-fff3f27a8b54",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0578f880-2fad-4383-b9ef-5f619a8436e8"
        },
        "item": {
          "id": "a9d49544-be95-4de7-ae3e-adb066becb23",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3ccee937-80b9-454e-b3d5-72e19e71474f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b4f03b-5479-441f-b868-5e6b50a95199",
        "cursor": {
          "ref": "200e3cd9-ecb9-4a05-bc50-4e610f80f4f4",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a4184ef9-7432-4e28-b9e9-c09646fbf55b"
        },
        "item": {
          "id": "53b4f03b-5479-441f-b868-5e6b50a95199",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a73f0618-3c57-408f-9ea4-41d030f2d021",
          "status": "Created",
          "code": 201,
          "responseTime": 2333,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ae34287a-eae9-45ef-8cc4-60a795661979",
        "cursor": {
          "ref": "7aa41c16-6c7d-4945-b606-21091c67737d",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fac79484-2f82-44b7-9dac-268c6d92f14e"
        },
        "item": {
          "id": "ae34287a-eae9-45ef-8cc4-60a795661979",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6ec345f2-2a8b-49b5-afaa-bb14f0d45d91",
          "status": "Created",
          "code": 201,
          "responseTime": 2591,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "48409897-9ada-4263-8ddb-7533568a36ea",
        "cursor": {
          "ref": "7bf590f8-9f39-4485-9c40-b77b0056b7db",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8f72695f-1c9d-4852-b424-82b60fabd440"
        },
        "item": {
          "id": "48409897-9ada-4263-8ddb-7533568a36ea",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "72cf6ac5-1917-4de5-b46e-801773cf000a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b56f9c-143a-47c0-a896-98f4e79ea76c",
        "cursor": {
          "ref": "c92ef5da-c2a7-45bc-9cd7-e67af1958bbd",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3bb39086-2655-4541-aed1-5d6493fa47d7"
        },
        "item": {
          "id": "54b56f9c-143a-47c0-a896-98f4e79ea76c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2afbdee1-aabc-42e0-9376-95f9a08545b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae39542-952f-4c6d-b966-e364a9258d49",
        "cursor": {
          "ref": "4a9de74e-f7e3-4a87-b006-c9941868bd41",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3abe4e19-d06f-4518-ad57-9374c7b3ff13"
        },
        "item": {
          "id": "dae39542-952f-4c6d-b966-e364a9258d49",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f054e7fb-66af-469a-9d8b-502f6a10e47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221db899-e383-4e9b-9e5f-e5c3861be86d",
        "cursor": {
          "ref": "a79c3a2a-9a0a-453b-bed5-ade567130fce",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "75270231-4e81-414f-bdcf-24d0249fe9d1"
        },
        "item": {
          "id": "221db899-e383-4e9b-9e5f-e5c3861be86d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1e9c55ac-b3ca-47b3-9371-5f8097073287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03300476-7958-476d-a198-48e51fcb6657",
        "cursor": {
          "ref": "9782efcc-648b-4469-9414-320451d3ad2f",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e76616f6-1385-499c-8802-a322b73436e5"
        },
        "item": {
          "id": "03300476-7958-476d-a198-48e51fcb6657",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "05d89fd4-d548-4c87-8b90-4c1b29f617bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebab635-186c-4df9-9aea-0e180ffb3cbd",
        "cursor": {
          "ref": "093f5199-fe45-4d08-baf4-fdee27134539",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "13abeac9-5a42-4b15-98b7-819308270f9d"
        },
        "item": {
          "id": "aebab635-186c-4df9-9aea-0e180ffb3cbd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e61251de-b7c5-4af9-bc0c-0c6e208f2efa",
          "status": "Created",
          "code": 201,
          "responseTime": 2511,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "12a65ebf-59f6-4a83-90c5-553c08c2e135",
        "cursor": {
          "ref": "d5a61fa6-1a41-4bb9-a505-2756dfa3fce8",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "05415ce6-357b-4cb4-b58a-dd27f93574f5"
        },
        "item": {
          "id": "12a65ebf-59f6-4a83-90c5-553c08c2e135",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "75ed596a-5f31-419e-869e-b5bf1fd5820f",
          "status": "Created",
          "code": 201,
          "responseTime": 2167,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "cce6823b-8fcc-4f8b-b257-a07cb5a5e1ca",
        "cursor": {
          "ref": "2852072b-ecd9-4897-b4c2-61322ded9264",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3ef6ab94-88e1-4190-a5e1-3cabd5a1c08f"
        },
        "item": {
          "id": "cce6823b-8fcc-4f8b-b257-a07cb5a5e1ca",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b908f2e6-758a-423a-9551-7c2fdcb461b4",
          "status": "Created",
          "code": 201,
          "responseTime": 2336,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "c8dd2447-c255-4a06-8c81-bc951f31a59e",
        "cursor": {
          "ref": "24dc9e2c-1753-4876-83dd-edcca4fbff99",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bfbadc28-6677-41eb-b79b-5208e236431a"
        },
        "item": {
          "id": "c8dd2447-c255-4a06-8c81-bc951f31a59e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "64493b60-645f-4e3d-9e7e-9b5525ce591d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc729785-5107-42df-a3ae-58309f8b71ef",
        "cursor": {
          "ref": "1a32f419-ab17-47c3-888b-9666001b21ce",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c26be4e2-2111-4b16-8fd8-12b3fd6f08f7"
        },
        "item": {
          "id": "fc729785-5107-42df-a3ae-58309f8b71ef",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bcaa75c3-b460-46d4-b9c4-0bbf877587a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47387cd-5a91-481c-a2d0-e656b69db517",
        "cursor": {
          "ref": "7b04c429-9823-431f-8630-9f4749cacdf6",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "90f57d60-0bc4-4465-b6aa-19a1f0b4c795"
        },
        "item": {
          "id": "f47387cd-5a91-481c-a2d0-e656b69db517",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "db8ede25-6e66-4dd2-8e9f-bbf75c763ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4905b547-b7b3-4cba-b25c-fac89503459a",
        "cursor": {
          "ref": "cec0d922-417c-4b05-865c-273858210513",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "efcf5b63-6248-4a51-b70a-418eb5f74629"
        },
        "item": {
          "id": "4905b547-b7b3-4cba-b25c-fac89503459a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "70bdaf5f-ceca-44d8-9373-676c07db3698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce4d28e-fd6f-40c7-bf43-1cca8d74cb62",
        "cursor": {
          "ref": "93c88a86-162d-4146-802c-8fb37b25b9f2",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ddafe71c-a6ac-4c7d-80f3-211d9d69027f"
        },
        "item": {
          "id": "1ce4d28e-fd6f-40c7-bf43-1cca8d74cb62",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e4dd12a6-9d42-47d9-a255-25c27fce29db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bed3ba-2104-47fc-b7ff-2e1edf25a89b",
        "cursor": {
          "ref": "946213b7-f874-4729-ba6e-e5c2492e6530",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dd9ba77e-3130-47e3-abee-82dcde05bd58"
        },
        "item": {
          "id": "d3bed3ba-2104-47fc-b7ff-2e1edf25a89b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cafebf41-1082-4b4a-86b5-59409629459f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b72c36-235d-4562-951c-14d824ffc8f4",
        "cursor": {
          "ref": "e363ccba-4d4f-4de7-b847-9818aef2612e",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2d44a4d6-11d3-4d70-9f89-5cce85e02137"
        },
        "item": {
          "id": "56b72c36-235d-4562-951c-14d824ffc8f4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5b76f0dd-3103-4c0b-8239-09ba6fa8d50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e59631a-7322-45c5-8cc9-706decf5f030",
        "cursor": {
          "ref": "22814f16-a2f1-441a-aad6-6ad6759c6cbb",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "717439a5-ab87-413d-b188-d6fd0f9da2b6"
        },
        "item": {
          "id": "3e59631a-7322-45c5-8cc9-706decf5f030",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a9b3bf94-847a-4893-ad53-5eff237d6e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc7e0ed-360e-4246-8b1b-af0fc98688df",
        "cursor": {
          "ref": "2a178a6c-e144-4d00-a711-dfb443b14113",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e4aae55c-b613-4af2-94ea-7fc00abbc892"
        },
        "item": {
          "id": "ecc7e0ed-360e-4246-8b1b-af0fc98688df",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1b1d061c-4e3d-483a-815e-e46e90a850ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2efd08-fd94-4e02-b13e-ee988a506be4",
        "cursor": {
          "ref": "f9cccb3e-3612-4ac3-be40-5f2bd0541a9a",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c0bf5542-f47a-4fa9-8944-f013eb7d65f0"
        },
        "item": {
          "id": "8c2efd08-fd94-4e02-b13e-ee988a506be4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "28688594-6e30-4d63-91db-0efcec6de5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef0d029-7efe-4468-9136-9073799d054b",
        "cursor": {
          "ref": "9a5dd8ed-92db-4464-9031-53890126312c",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cb2dea34-33ee-4b24-9b64-316b494c298f"
        },
        "item": {
          "id": "6ef0d029-7efe-4468-9136-9073799d054b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "51328473-3116-4cae-b032-2dcddb33c2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15349b58-9ae3-458c-a1e7-e45e9492902e",
        "cursor": {
          "ref": "927673cb-9937-4bcc-966c-cc1d8575c016",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0deed2c5-4858-407d-bd1c-59a2a3b09359"
        },
        "item": {
          "id": "15349b58-9ae3-458c-a1e7-e45e9492902e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d4c323f1-a414-403a-9b07-8597657d19a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b32ba8c-f888-442d-a713-5f189c6f9872",
        "cursor": {
          "ref": "0b833ead-ba54-49cc-b3b5-2e628305046c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "af9f81f3-d96e-436c-a644-5385f5b37aa3"
        },
        "item": {
          "id": "9b32ba8c-f888-442d-a713-5f189c6f9872",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4d61d65e-899d-4f31-91f9-f0c035abf0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94548bac-a30b-4561-b173-d9cce281b290",
        "cursor": {
          "ref": "71c8b5ff-a120-40a0-b33f-0c157cdc886d",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d4424c55-0539-4e1c-8a9d-0f06e90cdd4c"
        },
        "item": {
          "id": "94548bac-a30b-4561-b173-d9cce281b290",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ef78e3ab-9780-41ce-986c-5e899c6fa603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b779f63b-545d-4ad6-a4b3-45084de0b524",
        "cursor": {
          "ref": "f880b489-dc06-4143-895c-c16c13a1141e",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7156b80e-8ec4-4d33-8c1e-b6c231dbdf0e"
        },
        "item": {
          "id": "b779f63b-545d-4ad6-a4b3-45084de0b524",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "834e9b24-f961-43fd-b544-e24ec6d57f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5075090-e748-4383-aed1-0d455bffee15",
        "cursor": {
          "ref": "67df8d1d-9d6a-44f2-9363-960bc879c462",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c64a72ae-839c-4b37-aae4-adbc9522fee1"
        },
        "item": {
          "id": "a5075090-e748-4383-aed1-0d455bffee15",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "879010a5-9a37-4e94-830a-270519d3c752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ce6183-435f-4aa1-84f8-a4825c7db60a",
        "cursor": {
          "ref": "ebe86dd9-344f-4302-8403-d058da0b082b",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "410e1735-53e6-4fa1-8a93-61fd5486350c"
        },
        "item": {
          "id": "e2ce6183-435f-4aa1-84f8-a4825c7db60a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7ff684a7-65d8-4b41-b135-daa17bac9974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dd6df4-155b-4b62-a1d4-b512b9d301a8",
        "cursor": {
          "ref": "7c6aa15e-4ab7-418f-9aff-0661cfd28e1d",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a70e4ae9-adfb-4da0-9220-7cdeedf45d7a"
        },
        "item": {
          "id": "71dd6df4-155b-4b62-a1d4-b512b9d301a8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6eff795e-4adf-4927-ac55-e6a6e61fbf98",
          "status": "Created",
          "code": 201,
          "responseTime": 2689,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "eb235ef5-9174-481a-9633-e63c88e7dfba",
        "cursor": {
          "ref": "b33bd33f-6596-4b57-b827-a6183968b510",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "015d1635-4fef-431f-8733-c64748004a84"
        },
        "item": {
          "id": "eb235ef5-9174-481a-9633-e63c88e7dfba",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "927b4990-6b7e-4bdc-9af7-b95c28e1c12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d85b824-21f6-4e82-9f4c-559a24a4a2ce",
        "cursor": {
          "ref": "c4d9ace7-d2b7-4998-816c-bdefcf8fe5ce",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c5ab044b-31a5-4071-8859-0ea226a39e03"
        },
        "item": {
          "id": "8d85b824-21f6-4e82-9f4c-559a24a4a2ce",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6b85fa66-a1df-42c3-b7be-23bc10b3eaf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1314893a-14c1-44fe-aab5-0bc0414b293f",
        "cursor": {
          "ref": "1b200fd8-6a52-44a4-b64f-489c9f754829",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "51d85789-0d40-4a73-ad1b-b2bf36afcb9b"
        },
        "item": {
          "id": "1314893a-14c1-44fe-aab5-0bc0414b293f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5e0fc176-ee72-4253-97e3-a5791e74d445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf23095-8ac1-4a74-b40d-207f3af3b833",
        "cursor": {
          "ref": "90e0282b-bb7f-48e3-82de-22bbdb991547",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7528cde4-6c23-4f65-989f-dd7f01d0a656"
        },
        "item": {
          "id": "2cf23095-8ac1-4a74-b40d-207f3af3b833",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "255b1577-ca46-4f84-86c8-239dd01ecef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe9f3e8-7fc2-41a1-8b80-2b02d6b23c48",
        "cursor": {
          "ref": "fd02981c-e8b7-4976-b0e3-83800b82620d",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fa1d15ed-a2d3-4c2e-b606-0bd74b276736"
        },
        "item": {
          "id": "7fe9f3e8-7fc2-41a1-8b80-2b02d6b23c48",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1307e9db-81b0-4e93-a7c6-0738088d6a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2e4251-3a9a-4b04-a4d5-36249bbf50cb",
        "cursor": {
          "ref": "54696308-6e13-44a8-9790-ff2026936107",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ca85bab3-1c29-459b-9392-5e4ac5c8e4af"
        },
        "item": {
          "id": "8a2e4251-3a9a-4b04-a4d5-36249bbf50cb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bdfcbc33-97c6-4be2-b393-d744ddacaf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b2809c-011d-4411-a3de-1223473763fd",
        "cursor": {
          "ref": "c27b3ae4-8051-45ad-bebe-a839be21beee",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4e998604-b902-4ad5-aa7b-85525c672f6d"
        },
        "item": {
          "id": "09b2809c-011d-4411-a3de-1223473763fd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "aab90b87-1df3-4b69-ba79-03501a795297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b57ffa0-39cd-424d-b1d9-c67f395f439e",
        "cursor": {
          "ref": "e95f6694-7c06-4722-8ad3-44d8e89a3da3",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "241ff95d-f465-4a3b-8825-745445caa37f"
        },
        "item": {
          "id": "4b57ffa0-39cd-424d-b1d9-c67f395f439e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "378ed418-f022-4093-89a1-c32b0e4646e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe9bedb-26a7-4b0a-89bd-175a3fe93b0b",
        "cursor": {
          "ref": "2b2e3e03-afa3-4a9b-bb56-ef75f434b5e7",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "794ca154-6ec7-45b0-aaee-a5a1b83678d8"
        },
        "item": {
          "id": "ffe9bedb-26a7-4b0a-89bd-175a3fe93b0b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c030d926-7f89-417b-a547-0054b21306e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23a794d-8fd8-4fc1-a6b2-aa1598c42461",
        "cursor": {
          "ref": "2121089b-83f7-48c3-ab41-2b00d4f54ad4",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2df85583-29fb-484e-9a20-71c3a91024a6"
        },
        "item": {
          "id": "a23a794d-8fd8-4fc1-a6b2-aa1598c42461",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b5d7c830-525c-425e-8c45-0fddaf683363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075b4620-9215-4d19-add6-0f1869fa7f8d",
        "cursor": {
          "ref": "7343fb88-5044-4b26-971e-d8c4c1d78f90",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "db0c870a-0e2f-4278-a82a-0251929a9dd3"
        },
        "item": {
          "id": "075b4620-9215-4d19-add6-0f1869fa7f8d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "08b2e9ba-9265-42bc-bc06-4f4d8e3d9ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cdf91c-fdd7-4fe9-90d6-859d7e2acdcf",
        "cursor": {
          "ref": "a040eb54-1049-45ff-97fd-34c641557e91",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "223fca7a-0bd1-4338-b742-bb812e880e03"
        },
        "item": {
          "id": "e9cdf91c-fdd7-4fe9-90d6-859d7e2acdcf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d108d003-d530-4264-847a-ef10e218c677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebba4d5a-8cc2-4d28-a99d-cab13a81e00f",
        "cursor": {
          "ref": "b543a62c-4a2c-4ed9-b5ae-d81cbb439a8c",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ae4358a4-3054-4dab-b945-abfb39de3c45"
        },
        "item": {
          "id": "ebba4d5a-8cc2-4d28-a99d-cab13a81e00f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "82dd6f38-5d74-4c25-aa64-b856672c3876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301bca58-eac5-46c7-b7c7-694e70e7440b",
        "cursor": {
          "ref": "34d287ff-c8ce-46e0-8f21-306e6588d296",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "84f3051a-9390-4472-9286-04678d456cc0"
        },
        "item": {
          "id": "301bca58-eac5-46c7-b7c7-694e70e7440b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9d1e0232-6465-4623-94fd-7048f4d6a4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8772cc-695e-4ba8-a016-a2bbef8636fd",
        "cursor": {
          "ref": "fa720f19-4ef3-404d-9d7a-71d1a16e9d49",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c0e73cbe-89ff-4241-8ba5-20d75712ff60"
        },
        "item": {
          "id": "df8772cc-695e-4ba8-a016-a2bbef8636fd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7b7c5083-45d6-4abc-95d9-2151deff5f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ca8724-d2d3-4435-ab7f-c6c48c917e93",
        "cursor": {
          "ref": "f82ae605-e181-4aeb-a846-64c5ebaadd87",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b702a5fe-7747-4fa1-ae3d-296322db47a2"
        },
        "item": {
          "id": "23ca8724-d2d3-4435-ab7f-c6c48c917e93",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a8a36b4a-fd22-47ae-92dd-87da46e1e67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae713e0-0104-4308-b968-ed26de2c9523",
        "cursor": {
          "ref": "47997607-4602-4275-a5ed-7d355c34740b",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f2029e42-1d00-46ab-bb1a-51700856afe8"
        },
        "item": {
          "id": "aae713e0-0104-4308-b968-ed26de2c9523",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a1c5f272-038a-4714-8e14-40106657b878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac791fd3-0863-41e4-93da-e69ca9da5465",
        "cursor": {
          "ref": "35600d16-e934-4671-9dcf-7310b0df1b46",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fbf90434-933e-4ea0-8b95-eaa2b0f429bc"
        },
        "item": {
          "id": "ac791fd3-0863-41e4-93da-e69ca9da5465",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "bff80dca-571b-4679-8bc8-5d1944272ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31234eef-aaf9-4336-9d67-61b8265e5875",
        "cursor": {
          "ref": "fccd2cc1-dcc5-4211-8782-c80298679fc4",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "48c0433d-253d-48c9-b3ac-45f33caf8391"
        },
        "item": {
          "id": "31234eef-aaf9-4336-9d67-61b8265e5875",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dc588d70-d68b-4e19-b820-d803a7f9d9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb327ca8-ef89-4711-b5d7-b3d05e79c4b7",
        "cursor": {
          "ref": "18420e42-23d4-4bcc-89c8-b89338ff243b",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "538590e3-3d63-4c30-a21a-59ef3c50f594"
        },
        "item": {
          "id": "cb327ca8-ef89-4711-b5d7-b3d05e79c4b7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ab760da7-ec23-414c-9a44-c59b8c2ad92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d55d69-d86e-42e3-8272-f76f9f971771",
        "cursor": {
          "ref": "526365f6-ffd4-4f4d-9e1e-560c4bb6a24a",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "953a5de5-a009-4aab-9eac-4c691ac0da87"
        },
        "item": {
          "id": "52d55d69-d86e-42e3-8272-f76f9f971771",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e0366fa5-d92e-40ad-8597-347a65f40982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9bf5cc-9121-4d81-82ff-8e7219e28670",
        "cursor": {
          "ref": "f3faaef1-379e-4797-a2ba-8edaeccaee53",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "eda30cf2-42c4-44ac-8d93-e49542fe745d"
        },
        "item": {
          "id": "ab9bf5cc-9121-4d81-82ff-8e7219e28670",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "31894112-f819-4b1b-9496-4745808af85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e8a6ef-e420-4490-87fd-b84ce0f853e0",
        "cursor": {
          "ref": "93974945-1899-4fc2-9ee1-4f0ec4d45f7b",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "93b4a292-e334-4bed-a591-6c41f14fff2c"
        },
        "item": {
          "id": "26e8a6ef-e420-4490-87fd-b84ce0f853e0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a48a5b99-2d1f-4f55-a422-8c64608530d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5827d0-c2df-49a5-bf59-0293c012471e",
        "cursor": {
          "ref": "2051525c-1cee-42ef-9544-35a1dfa8853f",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7b7cc581-bd7f-4b48-bd5f-8d2f0537c82a"
        },
        "item": {
          "id": "1b5827d0-c2df-49a5-bf59-0293c012471e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5178254b-b5fc-4945-a05d-b5b1bdec89b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2f072f-f3d8-4115-b611-2aef349c5f88",
        "cursor": {
          "ref": "8588be1a-7f65-4130-ab34-0c82616f900c",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c61e7ff6-2a56-43a9-a4c2-4f2527c1ae4c"
        },
        "item": {
          "id": "dc2f072f-f3d8-4115-b611-2aef349c5f88",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "83462dd6-3db5-489b-a7b1-1fc9f0677850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30c9d5b-01ee-48e9-bbcd-2e5339906a63",
        "cursor": {
          "ref": "01e5a477-d643-4a97-99f1-941217bd4e4b",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f3d287b3-04cf-4420-b96e-1dd17bf4c95b"
        },
        "item": {
          "id": "d30c9d5b-01ee-48e9-bbcd-2e5339906a63",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0497edbf-5747-41e6-9119-48432bd80177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951eeada-b15b-4d9f-b53b-60d9f59213cf",
        "cursor": {
          "ref": "499b548c-bd3e-4f2e-a705-18465eaa2471",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "385e1949-2f9e-4fc4-9682-30198d0a5391"
        },
        "item": {
          "id": "951eeada-b15b-4d9f-b53b-60d9f59213cf",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c56343bd-c497-493a-be57-c2316a123ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169f4d7f-a1a8-4522-ba7d-14da1181957d",
        "cursor": {
          "ref": "283c7b3b-9a1e-4d1f-89cc-de2d9d065b91",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dfa428f8-5734-4faa-a779-033c5e6b6150"
        },
        "item": {
          "id": "169f4d7f-a1a8-4522-ba7d-14da1181957d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9be1c047-3c98-48ee-a918-74805ced3782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10906ff-6189-4ce7-b2a3-d5739f0137f7",
        "cursor": {
          "ref": "cc7b1051-4e89-4128-917e-20df26cbde3c",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "134d04d9-952f-4355-9135-6f2cb1afbbdc"
        },
        "item": {
          "id": "c10906ff-6189-4ce7-b2a3-d5739f0137f7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "89b0cec8-0425-449a-b200-0c0bcee54275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce031ce1-96d9-4a0c-ba26-9fce1926ecf6",
        "cursor": {
          "ref": "46e3ccff-81b3-4087-8802-d54404f5caca",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "369befca-9e2a-42b3-9829-c7bba130a20b"
        },
        "item": {
          "id": "ce031ce1-96d9-4a0c-ba26-9fce1926ecf6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6940ff3d-d392-4613-8c81-07fd13651ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4282fb-3d38-4c57-821a-6329b34eb73b",
        "cursor": {
          "ref": "9946f473-853e-4e02-b92c-609ff9636074",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b12f5b42-dd34-4586-a4e9-4265c953a3cc"
        },
        "item": {
          "id": "1d4282fb-3d38-4c57-821a-6329b34eb73b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f88cbf50-6265-41d7-b288-36e0b532a364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "a970a950-af6b-450a-a75a-f817cc2c52a3",
        "cursor": {
          "ref": "d021437f-fdeb-4507-87ce-fbfc566f3037",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d92b1dba-058f-4b00-916f-85a0677260b6"
        },
        "item": {
          "id": "a970a950-af6b-450a-a75a-f817cc2c52a3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "09c63479-0ae3-4667-8180-e996c5ea46db",
          "status": "Created",
          "code": 201,
          "responseTime": 1903,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7dc4446d-577c-44a2-a378-cd404d81a87c",
        "cursor": {
          "ref": "c2b7b712-5973-46b6-823a-ef9a92dc9257",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1430448c-43fc-42c6-9866-5ade799d0338"
        },
        "item": {
          "id": "7dc4446d-577c-44a2-a378-cd404d81a87c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "977702c9-4247-4e20-8c40-358c93b68f74",
          "status": "Created",
          "code": 201,
          "responseTime": 4068,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f69166f-bb53-4d80-9e66-8a6b7f95f496",
        "cursor": {
          "ref": "bafa2c30-da0b-4b40-a8e0-9569e6eb8a58",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "192afcd0-fa06-47f2-93a4-a0ac71a20d84"
        },
        "item": {
          "id": "7f69166f-bb53-4d80-9e66-8a6b7f95f496",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0f6b78d0-2ec1-49b7-93d0-03d1a901bd9f",
          "status": "Created",
          "code": 201,
          "responseTime": 2449,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c29406-d13a-41b2-a242-9a0a3274f300",
        "cursor": {
          "ref": "c6d9997e-fed5-4bb3-b666-9b56edf07686",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0b1ac9f7-24c8-4b41-b23f-cb4b30c1dcbd"
        },
        "item": {
          "id": "d9c29406-d13a-41b2-a242-9a0a3274f300",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "728517b7-9f7b-45e4-9e83-61d48cde5d5c",
          "status": "Created",
          "code": 201,
          "responseTime": 2577,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd1de0d-7628-4161-97cd-f8bac5a04918",
        "cursor": {
          "ref": "78882a06-e876-4695-a832-d0033ba05112",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1d8a0463-99a8-41c6-b0ea-f43d1ea550fa"
        },
        "item": {
          "id": "bcd1de0d-7628-4161-97cd-f8bac5a04918",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "38f0a637-45ce-4476-9824-2d57522af243",
          "status": "Created",
          "code": 201,
          "responseTime": 2116,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4426811-8eb1-46ea-b645-f098bee3e328",
        "cursor": {
          "ref": "fa86b0fa-8f3f-413c-9782-923a74eb196b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8c8ccfd6-a1c8-4360-9b4e-a31c62d24295"
        },
        "item": {
          "id": "e4426811-8eb1-46ea-b645-f098bee3e328",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d4c3749e-1527-4593-9ee3-51157c71087f",
          "status": "Created",
          "code": 201,
          "responseTime": 2854,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-05T00:35:13Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-05T00:35:13Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "5b68f3f1-9a97-40bf-a49e-d1b5d9e939c9",
        "cursor": {
          "ref": "954ec71b-4f91-4040-8450-5c6ae5150b3b",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c1337cc3-99a2-4355-a95c-095370772afa"
        },
        "item": {
          "id": "5b68f3f1-9a97-40bf-a49e-d1b5d9e939c9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1d51e7cd-f3cb-486a-b516-ea519bac8816",
          "status": "Created",
          "code": 201,
          "responseTime": 3558,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54db8b5c-31e7-4ea1-b226-19c4bc021d20",
        "cursor": {
          "ref": "f7a0ff37-8a84-4cf2-9f06-360212f827d3",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a88b0d26-3f0c-4112-8272-5cbc7a39c413"
        },
        "item": {
          "id": "54db8b5c-31e7-4ea1-b226-19c4bc021d20",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "953efff0-43e6-4b4d-821e-f3aaa494cf36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54db8b5c-31e7-4ea1-b226-19c4bc021d20",
        "cursor": {
          "ref": "f7a0ff37-8a84-4cf2-9f06-360212f827d3",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a88b0d26-3f0c-4112-8272-5cbc7a39c413"
        },
        "item": {
          "id": "54db8b5c-31e7-4ea1-b226-19c4bc021d20",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "953efff0-43e6-4b4d-821e-f3aaa494cf36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57337b58-f7bc-468b-9e8b-a10ab8a28c84",
        "cursor": {
          "ref": "523ba433-206f-418c-8bf5-5f6fac67873f",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f112baf5-742b-4cb3-9b2a-dbd8bff4967f"
        },
        "item": {
          "id": "57337b58-f7bc-468b-9e8b-a10ab8a28c84",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1c0948c5-e36d-4462-8e44-c47f283537b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d100bcd0-d0d1-4ad8-bfb9-cee0326ea61f",
        "cursor": {
          "ref": "5a088815-1744-4114-8c52-94f4be9eb15e",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "edd6ee57-4ddd-45fe-81c4-12aeb8156824"
        },
        "item": {
          "id": "d100bcd0-d0d1-4ad8-bfb9-cee0326ea61f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9fab184e-3773-4764-99a4-7c7642013dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfeec317-c7c9-41e0-a8ea-ce94e6b2a7fb",
        "cursor": {
          "ref": "19cd3130-2bd7-47e5-85d7-b765c8e74795",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e8f37fef-378c-4a21-8606-aac4ac7214ad"
        },
        "item": {
          "id": "bfeec317-c7c9-41e0-a8ea-ce94e6b2a7fb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d98f8afc-1ead-4b3e-97f9-4f66c54a3865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271b4879-70ed-4987-9499-38d0c1e55dff",
        "cursor": {
          "ref": "868eb69b-02f6-4761-b2df-23a2cbac78c8",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cd7da12d-bdaf-49ef-9a98-03ac6f8293a9"
        },
        "item": {
          "id": "271b4879-70ed-4987-9499-38d0c1e55dff",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "81afbe6f-e6ee-411e-8912-d6ba7af9c24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7411f690-3065-4bb3-be82-246ff3f90508",
        "cursor": {
          "ref": "a8e76dab-a7a7-4742-89c9-c6647efbfd0e",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6dc65767-38de-4f4c-b5cf-e4d8a20ac008"
        },
        "item": {
          "id": "7411f690-3065-4bb3-be82-246ff3f90508",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "140ded40-b8eb-4f48-9f9c-8ea601730523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3ab5df-5e83-4b5c-be67-b06a51025f12",
        "cursor": {
          "ref": "6037cb37-9f95-4ce7-9c23-7af83ca82219",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d36b39f3-29e1-413b-a930-534db1e4e156"
        },
        "item": {
          "id": "6a3ab5df-5e83-4b5c-be67-b06a51025f12",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6e218fe0-7d6e-40c6-824d-173ec461fbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8934294b-7a49-4212-b74c-60f4385e7385",
        "cursor": {
          "ref": "a3b211f6-357c-4c4c-8c7b-b401637b098e",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3aa82154-55b7-43b0-89d0-b4a6c9987980"
        },
        "item": {
          "id": "8934294b-7a49-4212-b74c-60f4385e7385",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "90c930d8-5ff7-43ef-a32b-35e1a5213398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99e0b19-b5d4-4743-a8db-4bbc39bf7667",
        "cursor": {
          "ref": "bc723720-d5ba-4133-9077-19e90d8b2982",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "949ef11a-cd45-486c-b8cf-482e9e1af1e4"
        },
        "item": {
          "id": "a99e0b19-b5d4-4743-a8db-4bbc39bf7667",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "95dd130c-b31b-4f08-8da8-0e21e56e71b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51102359-c00b-4e0d-bc5a-80f16c36334a",
        "cursor": {
          "ref": "95df9d03-74eb-4a4c-9487-9482767eac00",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1329f879-2a79-4ba6-b8ec-bee534726923"
        },
        "item": {
          "id": "51102359-c00b-4e0d-bc5a-80f16c36334a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ad02ca64-5805-49cd-bccc-310993d21ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec816c12-622a-422b-bd5b-622ae94df8f3",
        "cursor": {
          "ref": "014ec1d4-8194-4567-9b9d-194992799b60",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6cc0c4f9-370f-4127-9aea-8a742538241e"
        },
        "item": {
          "id": "ec816c12-622a-422b-bd5b-622ae94df8f3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6123f094-c7a6-4227-82c0-305688ed9df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe896c39-7881-43f6-9809-54e03910c3d7",
        "cursor": {
          "ref": "7febbc13-b9dc-4fdf-aead-211b2f5f8a71",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5a121b35-25c1-4d02-8ed8-f766598bf2aa"
        },
        "item": {
          "id": "fe896c39-7881-43f6-9809-54e03910c3d7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "01aa3722-c210-4747-9d76-2f310e6eb697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16dcbf6e-addd-4180-9117-635d2fda8558",
        "cursor": {
          "ref": "73963d8f-4773-4413-9ac9-69168c54db56",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5d53e7b7-6b8b-4b84-9a58-d05d2c6cbf13"
        },
        "item": {
          "id": "16dcbf6e-addd-4180-9117-635d2fda8558",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e84c82f3-96b7-4a2f-911a-d00ed982732b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f5c677-7d45-4d5c-8d54-901b0ba9bff3",
        "cursor": {
          "ref": "7c3c4a40-cd66-4acf-9fb1-e41cb48af144",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "21a8935b-b08a-4531-8d98-7b758648381b"
        },
        "item": {
          "id": "d8f5c677-7d45-4d5c-8d54-901b0ba9bff3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c3a2e4bb-1a4f-4dab-801c-976f7308536e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec30bf3-6a42-4b43-a86b-247bb16c7159",
        "cursor": {
          "ref": "2e252aa1-d7c6-462a-9c83-186872c9691c",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8a4a5e53-06e5-4c9b-b0ee-91ed0d96aa98"
        },
        "item": {
          "id": "bec30bf3-6a42-4b43-a86b-247bb16c7159",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0cc54d42-2c2b-454c-9ae9-d21adb10f3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afc63ca-3afd-4bc7-af00-b5307189245a",
        "cursor": {
          "ref": "ad83181b-b6b4-4af7-9c2a-78f05b7024f3",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "57a216c5-7eff-4b47-9425-5509179169c7"
        },
        "item": {
          "id": "9afc63ca-3afd-4bc7-af00-b5307189245a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b60b7986-54a9-4d23-860e-1b5006293105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c867a5e0-4390-446b-a0a6-a709774a4502",
        "cursor": {
          "ref": "66a9b8f5-1df2-4b90-a8e2-b89fd21e87da",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f92b4928-7404-487e-83c9-7fe00f9faf48"
        },
        "item": {
          "id": "c867a5e0-4390-446b-a0a6-a709774a4502",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "57b0fb32-ae7d-462c-a8f0-fa4b0596047a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0415ed-65d3-4c5a-8c60-17da8dae2885",
        "cursor": {
          "ref": "6693bf3b-cafd-42d3-aabf-53a88a579099",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "488e2796-7459-46eb-a18d-ed2078ae84b3"
        },
        "item": {
          "id": "de0415ed-65d3-4c5a-8c60-17da8dae2885",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fa0d69e8-bfdd-431f-bb6b-31aa22bcc32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7007a374-0911-49e6-ab2d-1a66fe47f454",
        "cursor": {
          "ref": "79933619-778c-4771-bdab-8775617a4b45",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "23bdaaaa-f5b0-4b71-b78d-ebba82725138"
        },
        "item": {
          "id": "7007a374-0911-49e6-ab2d-1a66fe47f454",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f696b23b-7e1c-4166-b9a2-82db30a0665a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffce5b9-bdb2-4291-867e-5e5426856a49",
        "cursor": {
          "ref": "1ea2f08e-08be-4155-8b22-50da11e99f21",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "61782e97-caea-4031-9f92-93b75f345fc0"
        },
        "item": {
          "id": "2ffce5b9-bdb2-4291-867e-5e5426856a49",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "349eec3c-0f33-4fe1-aa73-7fb52e1799f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2973cfc-1bff-4c2a-abb9-d86a35eadcdb",
        "cursor": {
          "ref": "ed9f059b-6489-41f4-88c1-49a5e768dd61",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bf26b60c-810b-4943-8d71-fd140b9fb90d"
        },
        "item": {
          "id": "c2973cfc-1bff-4c2a-abb9-d86a35eadcdb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f56e31fb-0c6e-4d84-b43e-4ac36048edeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470e9cda-b309-40e6-bf7e-973879632ad2",
        "cursor": {
          "ref": "dcf82a65-23be-41b3-8d84-8481050c93cf",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d09b7846-e5a3-4df0-a9de-2feb4f9e3dce"
        },
        "item": {
          "id": "470e9cda-b309-40e6-bf7e-973879632ad2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "43bf7562-750b-4258-a31c-1868ee3f60e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8566ce-6cdb-464d-bb33-210f16f2e918",
        "cursor": {
          "ref": "8f32b446-71ea-488f-8ea5-daf8825bda3d",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2e3d2865-6a06-4474-b55b-f29529cd3f56"
        },
        "item": {
          "id": "fb8566ce-6cdb-464d-bb33-210f16f2e918",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3a786b57-2d4c-404b-969c-7a4f4d3e8c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a92040-d1f5-491c-8cb8-2461c2d7c97a",
        "cursor": {
          "ref": "ebaa93f2-3159-41d4-9dd4-75e117ffb606",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "80b77cb9-f4f5-427f-8741-309bdfff5018"
        },
        "item": {
          "id": "b0a92040-d1f5-491c-8cb8-2461c2d7c97a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6f89a398-c2db-436c-8b77-503acd9242ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426a68ae-71d8-49c2-be83-31624420ab31",
        "cursor": {
          "ref": "c6e37f6c-39f1-4ec9-85d9-e4a472a61f75",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c9111910-40fd-48b5-b1e2-e069a3d72e67"
        },
        "item": {
          "id": "426a68ae-71d8-49c2-be83-31624420ab31",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cfdec5b7-f6aa-47c2-aeb6-dc9879d38221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bb32c3-87e0-4a7c-aae3-99cccd0a7cd0",
        "cursor": {
          "ref": "14d80f2e-30d8-4285-b06b-15d7da446b26",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4b320ba2-3fca-4335-bdf0-ac3fd112d25a"
        },
        "item": {
          "id": "f8bb32c3-87e0-4a7c-aae3-99cccd0a7cd0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7547de0d-6884-423b-92d0-bc0de64359f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bcec23-4512-426e-bf9d-03e193a48918",
        "cursor": {
          "ref": "1da95f48-53ac-4144-b5db-9bf79de56d0d",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d55314ce-142c-48bc-a6fa-e7cbf078ceaf"
        },
        "item": {
          "id": "b4bcec23-4512-426e-bf9d-03e193a48918",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fd6d0322-4bd5-4cb7-9d7a-461005312d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9b6d7b-99e6-4a6c-9a1d-eadb029f2369",
        "cursor": {
          "ref": "03989ce4-ea90-4e70-bbba-7bf9ecb607e8",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ab2b3b41-2100-4614-bd59-d700d232d254"
        },
        "item": {
          "id": "8e9b6d7b-99e6-4a6c-9a1d-eadb029f2369",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "636d37e1-0de0-46d1-84cf-45595019db72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37183c6e-f598-4b74-92fe-3593b0b74bb7",
        "cursor": {
          "ref": "bd96ead4-b541-461f-9844-e765cd6fe3dc",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "78bde3ca-e799-4541-bd11-1649997cb978"
        },
        "item": {
          "id": "37183c6e-f598-4b74-92fe-3593b0b74bb7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f4c94c94-22ff-4b2a-9026-bcb2a1b85b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78991f1-a07a-4b0b-97f0-f273e7d2edfa",
        "cursor": {
          "ref": "ebb03e98-d04a-4494-80bb-3eaf0c8aaeb5",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "246d17fa-d6b4-4315-abc2-501d40d38725"
        },
        "item": {
          "id": "d78991f1-a07a-4b0b-97f0-f273e7d2edfa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "94efc381-b86d-4cb5-b8a0-d8d46bdeb975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc5b903-a2e9-4370-b4e5-d0cd3f4338c4",
        "cursor": {
          "ref": "a9466118-82f7-4e34-9c85-0395b2845db4",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d7d68b14-5b6e-46cd-9a57-3465c0d74c9b"
        },
        "item": {
          "id": "4cc5b903-a2e9-4370-b4e5-d0cd3f4338c4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "338bba42-80f7-4d29-b34a-346ef1cf8614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ca3154-82a9-470f-ab88-4ef2038393fb",
        "cursor": {
          "ref": "cbc435f1-8da8-43cc-893c-f5be024a18a2",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2ff938cb-5e5f-49e2-aa9f-b0448f96e6a5"
        },
        "item": {
          "id": "a7ca3154-82a9-470f-ab88-4ef2038393fb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1a2352c6-5ae3-427b-b50c-9cac3dcce16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe739527-5213-400b-b0b4-47b75e0edbe1",
        "cursor": {
          "ref": "c380a39f-7c94-47e3-ba31-9ced4b9a7af4",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b5938b36-e436-4950-bbfe-44f794e2c253"
        },
        "item": {
          "id": "fe739527-5213-400b-b0b4-47b75e0edbe1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f447f096-a8b4-4a99-a823-c85a6051ab3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1d36a0c9-46dc-4912-8528-38d8e4d2c9c7",
        "cursor": {
          "ref": "3e314527-a121-4eb8-bd7d-0f72db7602e7",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e7d4a036-a8e2-4acc-baec-83b48dec78be"
        },
        "item": {
          "id": "1d36a0c9-46dc-4912-8528-38d8e4d2c9c7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c342d9b0-af60-4480-8556-0c3a3ce1bb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "65a68495-2d1b-4cbd-923b-2e4cbcc4a6ee",
        "cursor": {
          "ref": "e7e632ac-0d7d-4a38-b04c-ed17b817c7a8",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "38b5c344-15cf-42a6-aab7-cc9fe4f5e3b7"
        },
        "item": {
          "id": "65a68495-2d1b-4cbd-923b-2e4cbcc4a6ee",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0c3fee0d-bcbf-4f48-9b5d-9c83e8bed21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a68495-2d1b-4cbd-923b-2e4cbcc4a6ee",
        "cursor": {
          "ref": "e7e632ac-0d7d-4a38-b04c-ed17b817c7a8",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "38b5c344-15cf-42a6-aab7-cc9fe4f5e3b7"
        },
        "item": {
          "id": "65a68495-2d1b-4cbd-923b-2e4cbcc4a6ee",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0c3fee0d-bcbf-4f48-9b5d-9c83e8bed21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9680defb-6666-4e78-b77a-1efdd2310c36",
        "cursor": {
          "ref": "194a7d1e-aba2-4d07-a4dd-19ee08d51ec0",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d69d4479-77ce-44cb-928b-e487169b307e"
        },
        "item": {
          "id": "9680defb-6666-4e78-b77a-1efdd2310c36",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "83291ba2-2c50-4316-a58f-d41e97b07be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ada8e4c-0e90-4d00-bbba-3ba895d042e5",
        "cursor": {
          "ref": "2a50d8ae-6d4e-44b0-adc5-892efb1be300",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "26e4a7b9-c2a3-45d8-a081-f21387fd4bb0"
        },
        "item": {
          "id": "1ada8e4c-0e90-4d00-bbba-3ba895d042e5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1b231afe-be8a-4210-a99e-95a332071d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e953844-7e59-464b-857e-5b8274a700d3",
        "cursor": {
          "ref": "a67730a5-45d4-4dbb-8fef-0514daa0d8cd",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a533f86a-f444-4bce-9963-0c4f3b204a0d"
        },
        "item": {
          "id": "8e953844-7e59-464b-857e-5b8274a700d3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "36969b84-e84d-49c5-a7f5-8886d0bb18a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49efb04-abcc-44a8-93f1-58d4d9fe40ef",
        "cursor": {
          "ref": "47255d8f-a4bc-4106-90c4-148338e706cb",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7c54af0e-3eb5-4d1a-b746-a1e13f4abd07"
        },
        "item": {
          "id": "b49efb04-abcc-44a8-93f1-58d4d9fe40ef",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "38b3a636-614e-4bf6-ae98-a34bcd5ea39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38205d84-0782-4b3e-a373-bd888bded3f5",
        "cursor": {
          "ref": "e0f4038c-0b15-454f-928d-f000ebf54876",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ef405abf-7e4f-46d1-94d3-8a3fafcf5562"
        },
        "item": {
          "id": "38205d84-0782-4b3e-a373-bd888bded3f5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d6e5101a-0570-494f-b982-360d6d7a90ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ae387f-a28b-4205-b69a-3ff8267f6043",
        "cursor": {
          "ref": "f93fc122-02dd-4058-8482-b880b3470fc1",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "103907f0-8853-4793-b697-4f17ae831358"
        },
        "item": {
          "id": "b7ae387f-a28b-4205-b69a-3ff8267f6043",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "423b5339-8c3c-48b9-a562-2c47f6c80fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7371f78a-5ad0-46c0-bcf7-2d04ad107a55",
        "cursor": {
          "ref": "f0a8fc93-9b27-405b-be34-003b6e08d3ec",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "09411d68-fcbb-44dc-8276-417c04559560"
        },
        "item": {
          "id": "7371f78a-5ad0-46c0-bcf7-2d04ad107a55",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a84c1f1e-38dc-48b0-b28f-59b1bf870829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b007c36-ef3e-431b-b1df-1df64d489962",
        "cursor": {
          "ref": "f13e104c-38c6-4327-a508-d36d28ddc54e",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fe1c1490-bc3f-45cb-ab36-6626f4366ace"
        },
        "item": {
          "id": "4b007c36-ef3e-431b-b1df-1df64d489962",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "66ae7c16-0831-40cd-8f57-276f3f6639aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de16fb12-d542-4ece-bd24-e8516a174d1d",
        "cursor": {
          "ref": "89196af3-caab-4b58-b9db-243245290cb5",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0f79f76b-8124-49c6-ab91-98d31f033d58"
        },
        "item": {
          "id": "de16fb12-d542-4ece-bd24-e8516a174d1d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "053f2982-a109-4824-b9f8-d57fb615b484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c37711-5f9e-42b2-9579-4cea444c37b1",
        "cursor": {
          "ref": "1018f55f-b4db-4881-8805-9bb70605176c",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3297c3c0-ada7-4610-aafe-0a74ae3a95f9"
        },
        "item": {
          "id": "68c37711-5f9e-42b2-9579-4cea444c37b1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "30c54a3c-33fd-4c8a-9e15-d2ecd2b42302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab3f630-e354-4d6d-b9f9-3d5cda1f7ec0",
        "cursor": {
          "ref": "e67ac1fd-f768-4917-a2fd-fb38eafd1297",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c75ddd45-ab15-4ab9-89e8-9117b406b90b"
        },
        "item": {
          "id": "7ab3f630-e354-4d6d-b9f9-3d5cda1f7ec0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "35af2d87-647b-4c9c-ba48-598e76602819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33431cf4-6cb1-4308-9488-ac6c092794a0",
        "cursor": {
          "ref": "2d2656e5-ec5a-4c1b-aeb2-e2e44a529721",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "278143e0-8685-470a-a00a-77e33658bb30"
        },
        "item": {
          "id": "33431cf4-6cb1-4308-9488-ac6c092794a0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b59a73fc-345d-436d-a645-c27fc7a6677a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d248568e-fd2a-4b01-a5aa-afa6466b1a77",
        "cursor": {
          "ref": "67596adb-8ad1-4696-897c-3b256b516d46",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "472b58c2-4965-4e8f-a970-4f7f537de53c"
        },
        "item": {
          "id": "d248568e-fd2a-4b01-a5aa-afa6466b1a77",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9df7aa2f-d469-430d-93f1-72063d5578ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdd4dc0-82ee-475c-8662-1e540061e4ca",
        "cursor": {
          "ref": "dbf7863a-692b-433a-9597-253aa31841f8",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e1f5d0d5-19d7-4df4-a58e-0dee1ebcee00"
        },
        "item": {
          "id": "7cdd4dc0-82ee-475c-8662-1e540061e4ca",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "52a9b1bf-5cb1-41d4-a45a-89894a0161f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1217c580-0781-4567-9ac7-133944a954c9",
        "cursor": {
          "ref": "5f418775-030f-4849-8e76-f30b27ff64d6",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "30324f8b-8ef9-4f41-8d37-a63599184c28"
        },
        "item": {
          "id": "1217c580-0781-4567-9ac7-133944a954c9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "20a0c0b8-9200-43ce-b449-05dc23b97e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226f99ec-3589-41e5-b426-bec4369a6c24",
        "cursor": {
          "ref": "6453af80-4fe2-4934-9f9c-21e1a6f05d1e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cca1380d-5099-4f6f-b40c-95663373a2df"
        },
        "item": {
          "id": "226f99ec-3589-41e5-b426-bec4369a6c24",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7b685eab-5fcd-41e8-9ad0-7217cb45dd77",
          "status": "OK",
          "code": 200,
          "responseTime": 1294,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "6c7172c1-87eb-4ed1-bb52-7d636217ac94",
        "cursor": {
          "ref": "f583deee-ff66-489f-8d45-63410cda04ad",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2209eb58-1cef-4381-9ddc-56194b29db2c"
        },
        "item": {
          "id": "6c7172c1-87eb-4ed1-bb52-7d636217ac94",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c9f81307-5d05-4b43-a287-39a8deb6ed4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e62fc0b-a204-4a8e-8705-5da8df3da8cc",
        "cursor": {
          "ref": "ffeba24e-235d-4008-bc20-99f064c1af5e",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "819fede0-f222-4aeb-a3e0-58cf52c22411"
        },
        "item": {
          "id": "5e62fc0b-a204-4a8e-8705-5da8df3da8cc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d8701176-f7ef-42ce-aa07-c87e9b45b42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb4d602-6b3e-4651-bb21-6427242cf6c0",
        "cursor": {
          "ref": "4f3e36bb-c6cc-4dda-b5ed-cebabd6acf7c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ebaf47ae-dcf1-4fbd-a6d6-fafe51fd0c66"
        },
        "item": {
          "id": "2cb4d602-6b3e-4651-bb21-6427242cf6c0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e68298e0-8e93-41eb-9cd0-5e51fc64c635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f1f17d-5d29-413a-ba49-ac07571786e2",
        "cursor": {
          "ref": "5c93a467-b995-4bd2-9c00-650f0be2df4c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "13284f47-0c57-4e11-96a6-eb8e2ddea110"
        },
        "item": {
          "id": "a5f1f17d-5d29-413a-ba49-ac07571786e2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0022ef95-eadf-4fd7-b939-59225f0e24e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3ce395-75f8-4640-a2f4-e00983867df1",
        "cursor": {
          "ref": "baad41eb-8e8e-4f86-900f-5179ac5c1994",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "79b9d0d3-0c80-47b3-b781-cb49d530ff8f"
        },
        "item": {
          "id": "2f3ce395-75f8-4640-a2f4-e00983867df1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1226cef9-58e0-4eb0-ab80-9059294250e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fcb7f31-e6dd-4615-b71e-8f23f6a4af93",
        "cursor": {
          "ref": "b007802e-9d6e-40c2-8092-24fca97626e4",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0bde5e93-cd36-4b41-8cfa-a42b16b01242"
        },
        "item": {
          "id": "7fcb7f31-e6dd-4615-b71e-8f23f6a4af93",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "12357719-58c7-4f8d-9aa2-421a3b42d475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4127d1e2-b4d5-4bbb-85a3-11b1560f26db",
        "cursor": {
          "ref": "61598e48-a347-4d94-ac44-e5da5ce9c735",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b9917b9c-8c0e-48fc-8c82-9f102a78c124"
        },
        "item": {
          "id": "4127d1e2-b4d5-4bbb-85a3-11b1560f26db",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ade58f4b-666a-431b-bb87-156913c007e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be0417c-3572-457e-827c-67f35889e9f6",
        "cursor": {
          "ref": "f1290397-d03c-4ce3-bd9d-6cef3168cd1e",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f8d26f39-8b1d-44e8-8cbf-e49a30b8f232"
        },
        "item": {
          "id": "8be0417c-3572-457e-827c-67f35889e9f6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b912a70c-7b9d-4f86-b40d-c9aada16dc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7ddd63-f19d-4926-abb2-3a80f8e6f6c1",
        "cursor": {
          "ref": "36fd2f07-b56f-417e-af20-20e0f1ecf46e",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c2d0ab79-b9eb-4fbf-94c5-1d2f4d2fcfa1"
        },
        "item": {
          "id": "ec7ddd63-f19d-4926-abb2-3a80f8e6f6c1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b70e5265-e495-405c-9375-b21cde29b042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af68a81a-da86-4898-aab6-51f610f5b1a8",
        "cursor": {
          "ref": "e463d2af-ec26-40fa-9310-4c8c3787befa",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "26f737eb-77f2-465d-89fd-a300b7d89ce5"
        },
        "item": {
          "id": "af68a81a-da86-4898-aab6-51f610f5b1a8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3e23529a-d0c6-45c9-bc1c-b54e73376f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdced78d-6b3c-406c-86d3-caf05b5b5f5e",
        "cursor": {
          "ref": "914ce90d-36ef-4242-9cec-972d9a5349a8",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8d1fbf37-c82c-4cab-996b-e36b26d4996b"
        },
        "item": {
          "id": "fdced78d-6b3c-406c-86d3-caf05b5b5f5e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9c7c95db-86a5-4144-b7cf-16bde2b9e47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0779130-f581-436a-9f19-fc61ca8120d4",
        "cursor": {
          "ref": "542b070d-b336-460c-8f04-9e36a81bd229",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a80dc4bf-c781-41e0-99e3-cda305846bb9"
        },
        "item": {
          "id": "a0779130-f581-436a-9f19-fc61ca8120d4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2c99cb8e-e043-45a5-a503-ac3349315eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bcf732-6960-4317-b511-08d84c202251",
        "cursor": {
          "ref": "ac61c4b6-18ac-4550-baa8-e680f9c58395",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1dc76751-6a88-46b5-8f33-7f21dfb30779"
        },
        "item": {
          "id": "91bcf732-6960-4317-b511-08d84c202251",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7f6fba1c-406b-45c4-85b7-69b390002e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcc5c5d-cb5d-4ad9-bd50-aa5cb0b3f80b",
        "cursor": {
          "ref": "0d2329a7-5d68-4871-95e4-1cfa45499d5f",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "14e3229e-ec58-4a8a-bceb-4b490fc9aaa6"
        },
        "item": {
          "id": "bbcc5c5d-cb5d-4ad9-bd50-aa5cb0b3f80b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a295eb61-eae5-4f02-b637-145e547bc768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0f0a9d-48d6-483f-bd88-2361008a02dd",
        "cursor": {
          "ref": "aaede386-920d-4fcc-9df5-5199a99d05fc",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6318d9c0-2a17-428a-bdd5-e9299ce6d3e8"
        },
        "item": {
          "id": "fa0f0a9d-48d6-483f-bd88-2361008a02dd",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b93fe394-ddc9-408b-bda9-3b3cb8387005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda6e3a7-edb3-45ef-b0ca-d2fdebc46b48",
        "cursor": {
          "ref": "6f4d1aa2-ce01-49f9-931b-b1a0338dacfa",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "122b3fb8-d4d8-4a67-8047-d334a387db27"
        },
        "item": {
          "id": "bda6e3a7-edb3-45ef-b0ca-d2fdebc46b48",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c7e3ad0c-1494-482c-b843-6778441b038a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f18815e-0b91-43f3-b161-39981169f533",
        "cursor": {
          "ref": "2fbf1d2d-302b-4f6a-bcdb-f15eb0725499",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "26148afc-d4d6-420b-beee-af7305391883"
        },
        "item": {
          "id": "3f18815e-0b91-43f3-b161-39981169f533",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "89d10b3f-0a57-4388-9d94-8a66835a385f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9b603d-7871-4784-a827-42e1c1685af6",
        "cursor": {
          "ref": "3cd224a6-3d78-46e9-be75-39c009394e5c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5071963d-6cc8-4261-a788-71a36b195d3d"
        },
        "item": {
          "id": "2a9b603d-7871-4784-a827-42e1c1685af6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "062ca5ee-76b5-48c2-8121-d9c7d9d08ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cccbf2-b85c-475a-aca5-735a2cd61a89",
        "cursor": {
          "ref": "e3ce1abf-af81-4a1a-97c0-a23742cb052f",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "540e815a-9878-4999-bd98-2d7e1caa2bea"
        },
        "item": {
          "id": "e0cccbf2-b85c-475a-aca5-735a2cd61a89",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b8075c8d-113b-4574-b330-715b716b59d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c46b984-778d-410f-bd34-f51b60d97b80",
        "cursor": {
          "ref": "96ca40e6-bd36-4b8f-9846-2ff827567af7",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4f06560f-b719-41a0-908b-41b47979374f"
        },
        "item": {
          "id": "8c46b984-778d-410f-bd34-f51b60d97b80",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3496bb4a-48d7-4baf-9662-d4b3b233f847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e887a708-fe4b-489e-8500-178b2a48711e",
        "cursor": {
          "ref": "d354ecf9-edb7-425d-bcf9-8c34ef87d5e8",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "23585297-1f6a-4c55-a78e-de67722944db"
        },
        "item": {
          "id": "e887a708-fe4b-489e-8500-178b2a48711e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "39c852fe-fae1-4122-bc19-1a29f2d9085d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22757d01-b692-42ea-a07b-3ec90517a242",
        "cursor": {
          "ref": "0a265565-a97b-448d-b4bc-7071432cd4a8",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2b1d94eb-8fca-40e6-a432-514e8e06f621"
        },
        "item": {
          "id": "22757d01-b692-42ea-a07b-3ec90517a242",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "89ebf686-4fcf-44e9-ab2e-fa96a18dc173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1698d6-41de-4ee3-bf43-3e09d9c2340c",
        "cursor": {
          "ref": "0af9ef64-3e2a-473d-a093-2ccdfc660e85",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "008e92d7-52cb-4774-b055-4a3a24c10784"
        },
        "item": {
          "id": "fb1698d6-41de-4ee3-bf43-3e09d9c2340c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ff3631bb-60d0-4836-a51c-482692255122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e6924ab-9bce-4388-80e5-fc3e9582e099",
        "cursor": {
          "ref": "a07bf1fe-a850-49cf-badb-81705d1633e4",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3dbb5c64-f09d-46e5-a37c-7e934bfbd94a"
        },
        "item": {
          "id": "5e6924ab-9bce-4388-80e5-fc3e9582e099",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d3d0c9ed-3d50-49d7-a580-ed805bc46d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4767e11-09aa-4842-924b-fd0818e8736e",
        "cursor": {
          "ref": "a002340d-3692-4c15-bd31-abe0b2a599ce",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dac023f6-064b-4ea7-ab05-953854244032"
        },
        "item": {
          "id": "a4767e11-09aa-4842-924b-fd0818e8736e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "83bb8cfd-bd4f-4150-be52-08e08283c2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ede86cf-c7ba-44e9-9978-26e58890c927",
        "cursor": {
          "ref": "e501c85b-a666-4c69-8bbd-baad5f47a951",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "261d7af2-edeb-46ec-8123-573da1f10a0d"
        },
        "item": {
          "id": "4ede86cf-c7ba-44e9-9978-26e58890c927",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d70c9eb1-f83f-4c3c-a2d5-b6007f2c391d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a411569-dd9f-4489-84de-215f1f763fd6",
        "cursor": {
          "ref": "b6a3ba43-a8d5-414c-b3b8-acdd74837af9",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "30cc4310-f671-414f-85a6-237ac1df01dd"
        },
        "item": {
          "id": "1a411569-dd9f-4489-84de-215f1f763fd6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e149783a-c79e-4ce1-85d0-4736f7d867dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83491d1-99a5-4cea-8e48-5774ed2eab67",
        "cursor": {
          "ref": "69d91b69-9a8e-4403-af48-bad780951c7c",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "008f80b1-e3f8-4e09-baf8-0110e7c2ba2f"
        },
        "item": {
          "id": "b83491d1-99a5-4cea-8e48-5774ed2eab67",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "14845050-1bcc-44b2-8939-0b1c593f4a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef0bfb2-a9fa-4ca3-9d75-f4068b1705e4",
        "cursor": {
          "ref": "edf1448a-d153-4846-a908-a779e7f9ccd2",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "de29572e-c5a7-4cad-82f9-1188a9882001"
        },
        "item": {
          "id": "4ef0bfb2-a9fa-4ca3-9d75-f4068b1705e4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "70b528a5-6a64-4591-841e-3a55a1dd5906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2910c9a1-5484-4343-9237-4dda11763626",
        "cursor": {
          "ref": "6cbfd068-273e-45fd-afff-edd170ccb32a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "716f053b-49e4-48c0-844e-7f3fb2a9fc38"
        },
        "item": {
          "id": "2910c9a1-5484-4343-9237-4dda11763626",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "77d7faca-9991-46e1-b539-856f12fa62d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6467f75-fad9-4e29-91aa-e8fa18899b4e",
        "cursor": {
          "ref": "0c944788-f631-437e-90a1-ee19297abc20",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "14662499-a348-43b0-8088-b69bbb183267"
        },
        "item": {
          "id": "a6467f75-fad9-4e29-91aa-e8fa18899b4e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fb039ea0-914f-49ea-bc58-9e2122b2ca18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32bda8a-96e5-410f-b55a-28c78b36a653",
        "cursor": {
          "ref": "a8f03e29-f762-4f4d-b302-f7f1741eea88",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "922a8864-1170-4bf0-b1fa-2cba6578ef7a"
        },
        "item": {
          "id": "d32bda8a-96e5-410f-b55a-28c78b36a653",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9d70c7f8-a295-410a-87c0-d6cdc35524f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca171e73-528f-4d9a-aebb-9ea3d061f32d",
        "cursor": {
          "ref": "7eb6f718-e61d-408b-9041-1fff0e973d87",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0b5f9100-494d-4518-b767-3cf05f88e30c"
        },
        "item": {
          "id": "ca171e73-528f-4d9a-aebb-9ea3d061f32d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f6f9b2d0-01d3-4ba6-bfb3-1409207db945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8704a9d-5154-4f44-b518-a56ce078bf32",
        "cursor": {
          "ref": "0bee7945-0998-4009-9432-159d7454d334",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bf7ce256-ad7e-4cd8-bfc8-f0ef4aea4a14"
        },
        "item": {
          "id": "c8704a9d-5154-4f44-b518-a56ce078bf32",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e896e242-fbf8-40db-87b1-94f9b9d4254a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2cfe44-1f64-4531-9f53-138b0451a61e",
        "cursor": {
          "ref": "1f31fa02-4d56-4914-96b6-b4d720179e46",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0262436b-350c-47e6-ba45-63c257117357"
        },
        "item": {
          "id": "bc2cfe44-1f64-4531-9f53-138b0451a61e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6a083ccd-e74a-4883-b4e3-f199ba83b9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3693cdb-27fd-4aa1-b2d5-a3af3eb144a3",
        "cursor": {
          "ref": "405b28ae-efb7-4180-872c-54cbe1d8ced5",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "778271e6-4232-45c3-ab43-5421e886a570"
        },
        "item": {
          "id": "b3693cdb-27fd-4aa1-b2d5-a3af3eb144a3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "865937fb-d284-4eb5-bbbd-08a0a5bbef5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78091c0b-7f91-4fce-9d78-375de46ede57",
        "cursor": {
          "ref": "78c32164-5365-4dbe-8bef-6faf2e9d902a",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "df2dff3b-3c00-4506-a369-1b0171c39653"
        },
        "item": {
          "id": "78091c0b-7f91-4fce-9d78-375de46ede57",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0ef5eb26-e75f-42ba-8bc7-b6f530d589ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e054f16f-d445-4320-92aa-3b8ffa1d5561",
        "cursor": {
          "ref": "c5965b7a-ca63-4d5b-be30-986205022e10",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d97af5a7-7c4e-448c-b718-166965df0fe5"
        },
        "item": {
          "id": "e054f16f-d445-4320-92aa-3b8ffa1d5561",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5d80f90f-a6e2-4763-8535-304e4e9d4a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dac68bf-fda2-4c5a-b55e-c26a6520db52",
        "cursor": {
          "ref": "bd91d0c9-49fe-4d05-b1b6-cee324e71e0f",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f29c2907-20c1-4535-807b-7b4a2723f4f5"
        },
        "item": {
          "id": "9dac68bf-fda2-4c5a-b55e-c26a6520db52",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7a166d66-b6f1-4ed0-bd2c-b68b90fd59d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecda93cc-5f3d-4ee4-aab4-4f194b24ae0a",
        "cursor": {
          "ref": "5bfd5f7f-74f1-4763-bd52-1a38e8542467",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "96ad193f-4650-4381-88cd-842b5eb4fc38"
        },
        "item": {
          "id": "ecda93cc-5f3d-4ee4-aab4-4f194b24ae0a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "05b7f28a-d6bb-42e0-9765-83be0f0b9843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc094d8c-4329-42fd-9f6b-8c47c01f8e35",
        "cursor": {
          "ref": "6f2a4869-3b33-44a2-9a91-24f236d61df9",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "94fa6be6-dc8b-49c5-b017-9ec2dd8690ac"
        },
        "item": {
          "id": "cc094d8c-4329-42fd-9f6b-8c47c01f8e35",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "682485f1-09bb-444b-9af5-8ac7595b7e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df507f24-1f16-4aa1-9d46-cb6d6caabd80",
        "cursor": {
          "ref": "dae9c4a1-3730-4ce5-899b-4d7c01edd243",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ade0cb6f-3769-4820-8110-0ef5ae421087"
        },
        "item": {
          "id": "df507f24-1f16-4aa1-9d46-cb6d6caabd80",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fde0b698-2936-465c-a3a6-d48721a7baa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81aece54-bcd4-41f3-8af1-b6a5887e8fbb",
        "cursor": {
          "ref": "b72067b8-43d0-4443-b7f1-0f4b62ff0eea",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "386707eb-3b29-46bb-b97f-a205fe73487d"
        },
        "item": {
          "id": "81aece54-bcd4-41f3-8af1-b6a5887e8fbb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7ea5e01e-7d34-4065-867e-29208bb658e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6969a38-0338-4856-887f-2cba91633597",
        "cursor": {
          "ref": "70626c66-8c20-470c-b79a-3269c76a5d64",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cc094e8b-e565-4f00-a9cd-a5b097a4a9a3"
        },
        "item": {
          "id": "f6969a38-0338-4856-887f-2cba91633597",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1c0fc575-43ea-41a8-bc63-d739d0bf90c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d33f23b-a94e-422f-92a0-dbb89c85e8aa",
        "cursor": {
          "ref": "5794d71c-9268-43af-9fc8-c94706056f8f",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "869dcf35-be04-493f-be56-ede9f3f67574"
        },
        "item": {
          "id": "4d33f23b-a94e-422f-92a0-dbb89c85e8aa",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e09b18f4-8a61-4772-8962-5b22a1835c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccb9704-3ad3-4b5c-8f3b-0b382cf8548e",
        "cursor": {
          "ref": "55395759-2eae-40b4-b5c1-71c8984245a0",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c0e42768-928a-4a5e-8837-09932197fad4"
        },
        "item": {
          "id": "6ccb9704-3ad3-4b5c-8f3b-0b382cf8548e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "77626894-0085-4349-b66d-4f6441d7632a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cb763c-4a0c-4842-b9ec-3e81c4db003d",
        "cursor": {
          "ref": "ce28c592-c47c-455b-8a22-d2f3318ad075",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "32a665a4-c719-4aa3-b7c7-1e79f56e5ec9"
        },
        "item": {
          "id": "25cb763c-4a0c-4842-b9ec-3e81c4db003d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "739a42fa-89f9-43ac-ae93-08d4a1a7143e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b80ae1-2b69-4dd6-86a9-2b9f5c8d76e9",
        "cursor": {
          "ref": "0a151a31-80f7-456b-b31d-2ab7b89a2536",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d36cc58f-8e60-4f22-b1fe-e4d2ca0c41a0"
        },
        "item": {
          "id": "85b80ae1-2b69-4dd6-86a9-2b9f5c8d76e9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4a7a8aaa-4168-4c68-a07f-4a2119051c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668a33f2-ec37-48dc-9e87-5b5f74018cc6",
        "cursor": {
          "ref": "a2a9f4c7-8079-43c0-9bfb-99a7c1f8cec1",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "08076b76-ac06-495a-a95d-d5872c38f337"
        },
        "item": {
          "id": "668a33f2-ec37-48dc-9e87-5b5f74018cc6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "88a9503b-e770-4207-9316-58c896eb6d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f462677-8679-4e6e-bb9a-3409ea36a66d",
        "cursor": {
          "ref": "c9aea513-8eeb-4936-9aa1-dbe584d12aa1",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "73b5de69-7ebd-492d-a84c-ce1dc9f2f8a1"
        },
        "item": {
          "id": "4f462677-8679-4e6e-bb9a-3409ea36a66d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a6a0402d-2490-47aa-9446-2b0a6d2a94b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14bd1a9-ec85-490c-a6e5-faa0c0d1e83d",
        "cursor": {
          "ref": "4fc191dd-1597-4bfe-90bd-ed9abde20e7c",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a64917b1-1993-476b-ae82-760402784ed7"
        },
        "item": {
          "id": "f14bd1a9-ec85-490c-a6e5-faa0c0d1e83d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "07136672-d0b2-4b24-9811-bc571df413a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc571fa4-b27c-49fd-ae19-c7e3ad907219",
        "cursor": {
          "ref": "13995f07-299a-4f6a-87cc-71e148653b35",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f460a405-52ce-4330-ae2c-6cc00e2a2d6f"
        },
        "item": {
          "id": "cc571fa4-b27c-49fd-ae19-c7e3ad907219",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8d2a7fd6-5f70-4ad1-82d7-7ce81779b40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53812f27-8440-4d14-b635-69b1992438ae",
        "cursor": {
          "ref": "70d6fb47-1d3b-4656-8575-1bc7ec27e167",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4ff6278a-6410-49b0-aff3-3bdf09be170e"
        },
        "item": {
          "id": "53812f27-8440-4d14-b635-69b1992438ae",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "90bb95be-ba77-4755-a544-6d69c9707284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef57550-8ac2-40ab-9fcd-0175a51548ff",
        "cursor": {
          "ref": "3a914812-d09c-47f0-97aa-eb6e99b7b5e6",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6c387282-a798-4cea-bfe4-e41511742961"
        },
        "item": {
          "id": "1ef57550-8ac2-40ab-9fcd-0175a51548ff",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ad7a544e-cda9-4479-9ab0-372acf1f1dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d0eeb0-3d00-49cb-8a88-5c41e4ac2d0f",
        "cursor": {
          "ref": "92f19e93-230c-4833-b848-f77268c53d7f",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b7558cab-941b-4c27-b764-ba3e496127f3"
        },
        "item": {
          "id": "47d0eeb0-3d00-49cb-8a88-5c41e4ac2d0f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b7842b1b-91dd-47ae-a19a-f132fc68ef1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96af1455-d6d8-44b3-8cc7-b860471c75ab",
        "cursor": {
          "ref": "08679e9a-e2a0-4ffc-a3a8-45689aee06a1",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b16ec52f-20a9-4a7f-b7f1-128380fda647"
        },
        "item": {
          "id": "96af1455-d6d8-44b3-8cc7-b860471c75ab",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b29c05d3-d6ec-4813-a62d-6331709d65b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0514a8-388d-4928-82b6-ea3eb35f1c25",
        "cursor": {
          "ref": "12c915d9-21bc-4cd2-ab6a-4bef2648e224",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0daaaf85-f5fc-4e75-85c5-5ff8a5dbee1b"
        },
        "item": {
          "id": "9f0514a8-388d-4928-82b6-ea3eb35f1c25",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3d6b7671-2864-4ab2-8fd5-023d08feb272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2de8ba-8bf2-4466-80ef-a499596643fd",
        "cursor": {
          "ref": "100727ff-d88d-4f06-b893-976a7249c4bf",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4b74a521-95aa-4c04-b681-ba54a21a09b4"
        },
        "item": {
          "id": "dd2de8ba-8bf2-4466-80ef-a499596643fd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "31313aeb-7640-4a28-a322-e1130b0a2e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa1fb65-92d4-4e34-a347-a984f70688bf",
        "cursor": {
          "ref": "50ce2553-6ef0-428d-8042-a316cd22417a",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dd14e4fa-0f51-4bab-abbb-8e91116e82fe"
        },
        "item": {
          "id": "3aa1fb65-92d4-4e34-a347-a984f70688bf",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "16bf4762-b6c3-4342-a5dc-5bd29ec7dafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc05fcfc-beb2-42f7-925f-2901615e280a",
        "cursor": {
          "ref": "d8512b1b-46b4-4960-8bcd-320ce85f090c",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6075b055-8b7b-4c39-99c9-a1031c434c65"
        },
        "item": {
          "id": "fc05fcfc-beb2-42f7-925f-2901615e280a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "38bfca46-51ef-4444-b520-f6c794ea8d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e65c38-dbb8-41fc-876c-698f84bbbded",
        "cursor": {
          "ref": "aafcdbdc-0462-4f67-8bb1-1f4ebb412ab6",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3b91fe9b-5e75-41f6-9f70-7e9059f62693"
        },
        "item": {
          "id": "f9e65c38-dbb8-41fc-876c-698f84bbbded",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "233092fd-958b-4d21-8a30-5351607c39a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7768c49-3d51-4906-a5b3-058ef0d35059",
        "cursor": {
          "ref": "d7e607e0-8877-482d-bd36-d7695815a5e2",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6d6dc9ec-0ba2-42fa-9d32-9b5a8be354c2"
        },
        "item": {
          "id": "c7768c49-3d51-4906-a5b3-058ef0d35059",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "88cd3035-6e02-4839-943b-586c6d60e332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085e5079-73fa-42b6-a48e-c55f8f8077ef",
        "cursor": {
          "ref": "1a12343c-f06a-46e3-8317-5aed2c003a40",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b26c8e20-eee4-4c43-b200-1d79f785a135"
        },
        "item": {
          "id": "085e5079-73fa-42b6-a48e-c55f8f8077ef",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f5b587b2-5fe0-4da4-8160-1911483867f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba0f377-8885-48ea-ae2c-41de9dc87f61",
        "cursor": {
          "ref": "ef4e69df-e7c3-4dd1-918b-d02cd3a36cd2",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9adf4cde-df53-4aa9-b3b6-eea49558d57c"
        },
        "item": {
          "id": "2ba0f377-8885-48ea-ae2c-41de9dc87f61",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f208d2bb-31ab-45c2-86ba-0357c056a1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6ad38f-9e46-41c7-833f-090c184a5689",
        "cursor": {
          "ref": "c5e1ce40-976f-4248-a74e-12c069f1965d",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cdf17303-6d81-4921-9042-ccbab971bd75"
        },
        "item": {
          "id": "2c6ad38f-9e46-41c7-833f-090c184a5689",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ca2ddbf6-a54a-408b-9b33-5d8830f2ce5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c75bc2-6566-46de-9152-83def4c4cbb3",
        "cursor": {
          "ref": "02721b41-a0db-4a75-ab1e-c44ddbdc3b98",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e772a85d-619d-4682-8be4-30cddaa03466"
        },
        "item": {
          "id": "b8c75bc2-6566-46de-9152-83def4c4cbb3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7e84b8eb-02dd-416a-bd3f-f1b9b5f71efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385796a1-cebf-42e2-bb74-21ec3e835697",
        "cursor": {
          "ref": "c83ea4ee-2c77-4cd2-9cfd-547914066635",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "307c568b-96f2-46b8-a2db-f30d09fbd973"
        },
        "item": {
          "id": "385796a1-cebf-42e2-bb74-21ec3e835697",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d91ecac8-baa5-4a62-b485-d6d6ec625d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1140ccf1-e993-4ab1-803a-c6e09b135bad",
        "cursor": {
          "ref": "ecbb3098-92aa-477e-8e95-662c30e7a7f3",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bb6d5049-5dba-4f58-ba07-7a1dac6f0fd6"
        },
        "item": {
          "id": "1140ccf1-e993-4ab1-803a-c6e09b135bad",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1c2417d7-b132-42e3-97bf-88c3cca4b538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da98d5b5-581f-471f-96cf-bb7857180d00",
        "cursor": {
          "ref": "03f79755-4368-4076-b348-0658ecf471d2",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "31b4784c-46b9-4f1a-a73a-84fc920eb4bb"
        },
        "item": {
          "id": "da98d5b5-581f-471f-96cf-bb7857180d00",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "aa6953c2-69c6-48cf-bcde-a3c098e8b23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bef7ef8-cb10-4d44-9b37-80810fa147d9",
        "cursor": {
          "ref": "ead00bea-2815-4e1d-b539-2efc6660fb55",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "55914e76-8372-4bbc-9bc8-da607c22eae5"
        },
        "item": {
          "id": "9bef7ef8-cb10-4d44-9b37-80810fa147d9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "13945f94-e6f8-4fa9-aaa0-0f7a9895fd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63625f25-e9a7-4720-a444-f306f3bf9900",
        "cursor": {
          "ref": "0137ab8b-f7b9-4a43-917e-19d889a8f1cd",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "993d6f2f-a138-4cf8-a337-90c28ba8df27"
        },
        "item": {
          "id": "63625f25-e9a7-4720-a444-f306f3bf9900",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b6ca9e5d-3d04-4455-a902-930b8ec99152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6316812-6dff-4b14-a35d-663ff452de6a",
        "cursor": {
          "ref": "d6de5a9b-5675-402e-afbd-fb34a4418cd5",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7028227c-4c3e-4ecc-9181-810918b11e1b"
        },
        "item": {
          "id": "f6316812-6dff-4b14-a35d-663ff452de6a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6c389f14-7072-428a-b02e-6e346568f027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8f28fe-943f-4265-b041-530b9fb5f675",
        "cursor": {
          "ref": "dcff53b6-6235-4620-b657-6c746ea88a5f",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c9432593-2172-4ec3-8dc8-ef59c64286e9"
        },
        "item": {
          "id": "3f8f28fe-943f-4265-b041-530b9fb5f675",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e1581ad6-88b5-4d51-8636-cfb0eedabede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a96c3ee-2962-4a68-bd4b-5aa42986ccc8",
        "cursor": {
          "ref": "65dcb5e4-f310-4b8a-aeee-503f2b9e10d2",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bab2c27d-7e59-467e-8a47-fb2e7e9d5369"
        },
        "item": {
          "id": "2a96c3ee-2962-4a68-bd4b-5aa42986ccc8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1bd4f2b6-6cd5-4cd9-99dc-36715177edbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5e7afd-2273-4951-844f-78493f5a95e5",
        "cursor": {
          "ref": "1e0b30a6-8d29-49f3-903e-48e808c529d6",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "da2d6ad2-47b0-45bd-8e34-9724e1f329ba"
        },
        "item": {
          "id": "3f5e7afd-2273-4951-844f-78493f5a95e5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "65dbe59c-65c0-4e99-82a2-d1b23a6d5a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bd8db7-2896-4412-85c3-4cef7b4c1f09",
        "cursor": {
          "ref": "af921b8b-1d0f-4c31-8640-4d91e4d08681",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "881ac1c2-c83e-4ffc-acbc-a0c78d34ee7f"
        },
        "item": {
          "id": "e4bd8db7-2896-4412-85c3-4cef7b4c1f09",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8eb764f3-fcb3-44d3-a8e2-6bf3a9b30cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715dd67d-05b2-4321-9815-adc1ba269c25",
        "cursor": {
          "ref": "e815564c-e7ba-453b-8f6d-6b87d23b95e8",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7f8d14e1-1a79-41c5-a063-158113a2d898"
        },
        "item": {
          "id": "715dd67d-05b2-4321-9815-adc1ba269c25",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6b8a4268-8128-47e2-8191-e0a7d7584999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b85caa-31e3-40bb-8e65-e2ab2698154e",
        "cursor": {
          "ref": "18a6c59e-9b0b-4c16-b586-2a767514d428",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "02f50029-75cf-446e-b083-5d3b4b5427b0"
        },
        "item": {
          "id": "42b85caa-31e3-40bb-8e65-e2ab2698154e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "63f26926-482e-44c7-89f1-d1655943168f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f24ea0-74f8-4eba-a831-ae35a892b2e6",
        "cursor": {
          "ref": "658bf438-7c7c-40d7-9002-7cf18ae64d23",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cde66d24-47ff-4bab-b0db-6fbde39e28ee"
        },
        "item": {
          "id": "79f24ea0-74f8-4eba-a831-ae35a892b2e6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ed5a44a0-5352-4c93-80b5-8f412cb91a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2eb6a6d-fec9-42ff-becb-d2d0f1c7aeb3",
        "cursor": {
          "ref": "ea6894fc-57c2-476d-a9f9-926f934f599e",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0ae2e322-660e-4f42-a3c1-11d58ced14cc"
        },
        "item": {
          "id": "c2eb6a6d-fec9-42ff-becb-d2d0f1c7aeb3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ea02bdfc-cd0c-479b-82fe-27f98fee499d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf196c9-0716-43e2-8401-d72c7b32e641",
        "cursor": {
          "ref": "0d66206c-7690-4019-aebf-1cfaf3e6238c",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8ab1d811-1cb8-455f-9b0c-9e89c0ec7c17"
        },
        "item": {
          "id": "fcf196c9-0716-43e2-8401-d72c7b32e641",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "27a3bc1d-dd64-40b2-b4d5-4a841017a90a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e93fa32d-a905-4fc3-b19f-45f1d4d9faf7",
        "cursor": {
          "ref": "d339ba9a-6478-4fc3-8a21-d2439f4f99e7",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "380d7a26-8973-4843-9905-d29899e00c4e"
        },
        "item": {
          "id": "e93fa32d-a905-4fc3-b19f-45f1d4d9faf7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6d3ed589-9a9b-435d-b2c3-d3a80561ad5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7cbf231d-a505-479d-971e-de3c9da3ac8c",
        "cursor": {
          "ref": "17853f3d-1209-487f-81fb-67bb7ae1442d",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "105829ba-5150-4c86-9017-03f205b4c692"
        },
        "item": {
          "id": "7cbf231d-a505-479d-971e-de3c9da3ac8c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5ff2795c-fbc0-48f5-ac11-6d832802720e",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa60104-df2f-434c-87bb-59e598ad8da0",
        "cursor": {
          "ref": "c06c25e6-83e1-488a-9771-d4905634f96c",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5f5191f6-c6b7-4a42-b948-44d6a2b74f6a"
        },
        "item": {
          "id": "dfa60104-df2f-434c-87bb-59e598ad8da0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8a503e4b-f33d-47cb-9a20-d88caacf0645",
          "status": "OK",
          "code": 200,
          "responseTime": 1879,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "df11fe81-d835-4204-bc06-6f9f762e86b9",
        "cursor": {
          "ref": "5b613318-27fd-4c19-966c-a34a3b827455",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "07977efc-6271-4f54-a5c7-bd441dbf7b0d"
        },
        "item": {
          "id": "df11fe81-d835-4204-bc06-6f9f762e86b9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "068f68b7-8d01-4c51-bbaf-1431d59cbe75",
          "status": "OK",
          "code": 200,
          "responseTime": 2078,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5baf53d4-3f3d-47bb-ba6f-af10f5c164ca",
        "cursor": {
          "ref": "a11ede01-1792-485f-8d6d-76408e4d2cf7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "aa5ec2b8-b8f0-413c-9530-48532f8fb635"
        },
        "item": {
          "id": "5baf53d4-3f3d-47bb-ba6f-af10f5c164ca",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f69186be-4406-4484-afed-f2d5a52dc633",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5baf53d4-3f3d-47bb-ba6f-af10f5c164ca",
        "cursor": {
          "ref": "a11ede01-1792-485f-8d6d-76408e4d2cf7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "aa5ec2b8-b8f0-413c-9530-48532f8fb635"
        },
        "item": {
          "id": "5baf53d4-3f3d-47bb-ba6f-af10f5c164ca",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f69186be-4406-4484-afed-f2d5a52dc633",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5baf53d4-3f3d-47bb-ba6f-af10f5c164ca",
        "cursor": {
          "ref": "a11ede01-1792-485f-8d6d-76408e4d2cf7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "aa5ec2b8-b8f0-413c-9530-48532f8fb635"
        },
        "item": {
          "id": "5baf53d4-3f3d-47bb-ba6f-af10f5c164ca",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f69186be-4406-4484-afed-f2d5a52dc633",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "71e96aae-b41f-4fc0-94e5-2b28b6c34ec5",
        "cursor": {
          "ref": "4fcef35c-cb57-4392-9e2d-41f45e644f3f",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "69fc0e7f-8c8e-4007-b750-9e32c2e06603"
        },
        "item": {
          "id": "71e96aae-b41f-4fc0-94e5-2b28b6c34ec5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "daf0e8f2-c47a-4e49-abbb-42fcd0ecf01c",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d018b2e0-2600-432e-b58a-4db3bc363265",
        "cursor": {
          "ref": "a65d9cbc-5112-4afa-a40d-d16b7405ae4c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b949ccdd-31bd-46d5-87b2-416688a19990"
        },
        "item": {
          "id": "d018b2e0-2600-432e-b58a-4db3bc363265",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e2018737-42a5-4a46-8517-4a84ff8abf47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d018b2e0-2600-432e-b58a-4db3bc363265",
        "cursor": {
          "ref": "a65d9cbc-5112-4afa-a40d-d16b7405ae4c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b949ccdd-31bd-46d5-87b2-416688a19990"
        },
        "item": {
          "id": "d018b2e0-2600-432e-b58a-4db3bc363265",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e2018737-42a5-4a46-8517-4a84ff8abf47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b1287247-081c-4da3-a092-6e91a8cc9c55",
        "cursor": {
          "ref": "dfe87995-6643-43a9-88d2-6e8f43195d76",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f7483fe0-5bdb-4f0d-8407-9b7905b69635"
        },
        "item": {
          "id": "b1287247-081c-4da3-a092-6e91a8cc9c55",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b7082a99-6f0a-412e-9d6b-ad3c17095103",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 122,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3ef5028d-099b-4a19-8591-a283c30c024f",
        "cursor": {
          "ref": "605ca954-3731-4363-9ed4-00d2ab650b11",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f78d8bd3-f972-4abc-91c7-71f415e19536"
        },
        "item": {
          "id": "3ef5028d-099b-4a19-8591-a283c30c024f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ae54f3e0-2ebf-4423-a9d7-20a663d8abfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3ef5028d-099b-4a19-8591-a283c30c024f",
        "cursor": {
          "ref": "605ca954-3731-4363-9ed4-00d2ab650b11",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f78d8bd3-f972-4abc-91c7-71f415e19536"
        },
        "item": {
          "id": "3ef5028d-099b-4a19-8591-a283c30c024f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ae54f3e0-2ebf-4423-a9d7-20a663d8abfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "24f0fe6f-b435-40d5-8db0-0a0d2be37821",
        "cursor": {
          "ref": "0115a5d2-9474-490f-851a-1ba9cf3e57bc",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "158ee557-5ad7-4b89-b5c1-04a02b76f202"
        },
        "item": {
          "id": "24f0fe6f-b435-40d5-8db0-0a0d2be37821",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3235d1b9-06e0-4779-b39a-56723e5e5161",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}