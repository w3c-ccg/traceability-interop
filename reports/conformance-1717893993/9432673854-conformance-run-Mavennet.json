{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dde1a3f2-25b6-4f80-9ff6-1b0ccaaf32fe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a859f341-8822-4493-b30d-5951934bde6b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "31406c4e-f988-4182-b512-63f4bbda07a9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cd6e2e13-72ff-427c-ad00-e4cb1c3a9324"
                }
              }
            ]
          },
          {
            "id": "4d8d9ec6-2361-42fe-9867-0d471141571f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cfd84d8c-0737-4122-85d0-ae5fe9ad422f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f54523dc-2f66-4b40-ba59-0fd469c27108"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3632d43d-50aa-4e94-a9d5-28b96e78e928",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4c18d76a-66e5-4a58-a8b7-cf453f6b8604",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab867f04-4f62-417d-913f-6b3a307ac3c7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "baffa242-1d4a-49ad-ab8e-1474e2ed5492",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e15f87dd-75d9-4476-86ac-b5337ef4dad6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "927b35d5-3b5e-44e9-b19b-6ec93d6713d8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3180f020-0846-419b-b071-4b7cb4207857"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c64017f5-7561-4bb4-9966-732aee43486d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c665863-f30f-49ab-a795-f1b089ec9271"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "734cdc2b-df57-4155-bf5d-25886824ff14",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7d0b9ed8-94e0-4f60-a14c-d1de61b57540"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d635aded-b849-433d-b2c4-52b9b35d63d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "845bbac2-da33-4c94-9150-40ec2f583b2e"
            }
          }
        ]
      },
      {
        "id": "e0766646-392f-4bfb-9fdc-7d70cdd5698b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "777bd5a1-3a1b-481b-ae12-9e3f10ca4a96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45414620-89a7-4844-a93b-51cb2fb97904",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe76b378-750f-4c41-aa88-955f23ed3847",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67484a8-79d2-4557-b548-2798297688b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e858664f-89f3-4864-885d-93518c7a458a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a78d21b-d3e7-4879-80de-e04ba6bca0d6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee075065-c6a3-48b8-a7fa-e1d273f9049c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25526c77-f681-4dbe-adb3-4936d11960ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a93058f-dfdf-4ae1-ad4d-7d6a435cf3db",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401d769a-3036-4733-80d5-fd7a08c03bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f65d2f60-be28-460a-b76d-6ef011c753df"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb4e9037-d33d-458b-b810-e53b5f0cd98f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab645b61-9e0a-4ca3-b2d2-ee17c7e83fe1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b7d377-f183-4240-9cbb-352ad5c85f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6025fee5-cdcb-414d-b93a-fed5fea3304b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a534408c-2536-4c3d-ac96-19e4cd06e00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ebc1bf-8743-48d2-a2bf-ab7e964c79d8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9efc88a1-098c-40b7-aac7-74e5cafd195f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7220717d-340c-4dee-a694-fa837c7ef14a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "829abd36-64f3-4a24-bf5d-182b4875f309",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "26de5e11-bdf0-480e-b11f-7271c51156e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91cb7d8f-ae99-477d-b402-da08f75c3b5e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ba895eb2-84ff-4f7c-8366-b803b3f80e64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "138f9bb3-c30c-4a4e-92e1-9fc86f8793af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "650d8a30-2b7a-4c6c-a10f-7a8ed5bb8664"
            }
          }
        ]
      },
      {
        "id": "f45eab98-dbd1-4cb4-aad3-e9fe2190c6a5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a3d97b6c-a0e5-4247-ae59-1cc8e7a038d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb4fee5c-9be8-4579-8d43-9043096e4718",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "17e30247-95d3-44f6-9fcd-408cd92c71f5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e87c22-e184-4e0f-9fc5-043723308826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d1bb8d-30ff-4670-88be-5cfc1135804b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea1e118-bdec-42da-b38b-b542c26d7144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cce934ec-ad61-47f1-b636-414678c150c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8988245f-a1d4-4c7e-9841-e3e5e361bd05",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6a3b09-bbde-42ae-8989-087331376345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031c2cd1-d7d4-4228-879f-2578e416f10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d3dd0b-5194-4744-b2d4-dc9d47e0de7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6e35222-aa62-4824-abd3-2bf6adba0cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c785177-b2ca-47ef-8bd5-fb797defad06",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f26c277-e6c9-4ac3-925d-80aadbd9a6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8932b506-bc9e-4b6d-ace2-05d28f3fc0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fff268-ecbc-4a2d-90ce-fa798e29c960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f723f66-5cf0-43bc-8f1d-378b4468e9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4061ef7-4041-465c-a235-e7c6a64ce004",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800bf88b-269a-44ce-b3da-34bbda37ab37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66bcca5c-f422-4d66-91d5-4422ce13aed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03133174-4b0c-4fe2-a69b-2c1872dc88de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edd96103-b621-4a18-a3b7-2da3fe268e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e59c5ec-c1e0-4caf-818e-7702a6e30094",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4527e7a2-0f52-4593-9eec-bef771838d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ad6827-998a-405f-be01-97074b542309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a90c10-0936-4c72-bcbe-d8dfee142689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b51e3a2-7bce-4ae7-9b64-851170243999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953ce97f-3f85-40a0-b675-5830127f78ec",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4293102f-63b3-4a90-a62c-cd38f1c50b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757af1d2-59fc-426d-a9c2-b467b82ca5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3eb004-5f59-4dd4-be5e-f746a6523a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddcdcdc7-0baf-4c0d-abd5-3e3d37cb1358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6d302a-aa6e-489c-b850-f1c5a67bcebe",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9039ef-35d5-4cb0-9fbf-f221bd8e1eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d0be8a-ca94-4c04-b894-8780380870c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa6a864-3a1e-4929-983d-a8f08bae6652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63b02821-7d70-40ee-868f-e91a910ed017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dfbb0b-9361-4001-9b28-98ce0f0d973b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c494cfe5-169d-4276-965d-9ae86f45cc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43667e99-7891-49f5-8db0-fd40f391d6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1aef0b-de16-49a3-9fb4-0d71d2e126e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d269ca2b-3d8d-4795-a514-384423df1d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e845d7e6-7ce5-42d3-978a-f37740546fc3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cc59c3-4290-4f42-9b3c-bfbc02a568ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845b6c38-14ba-4e90-bfac-5d6154811ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328172e1-76b9-45c1-8e70-d958d37f0667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e1585bb-700e-4073-af6a-ebbd37a50f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b30c39-62e2-4a2e-9804-de1e4e2c1b84",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee4dd4c-e2a7-48e3-b12a-3c5257138b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131b3b04-b5e4-460c-b184-0fda10aee788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f3cf55-3a58-4d09-b198-715f342a5d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf44a3a7-f8d1-458a-8c2b-97e916e6c6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cde170e-2c39-4b83-803a-a9efea81134f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a5f1ef-6966-4014-b93b-d59168eeb950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e20af0a-8a07-4448-8f01-7d82c3d08d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbcd015-c9ad-44c7-a668-1c3b8c7b42d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68b66aa8-5745-442b-a1ca-a44acd199111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35925b79-b8f7-4de2-94cd-6d439fb8f8b2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79591131-27ce-4d48-a1b9-2ae875a6d032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b48b229-e5b7-48e8-8e09-86a1501db4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495d3985-5817-454d-9253-67c3fbfa35cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bda27a27-cce9-4c1b-8bed-726ae74e0bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc4d48b-5867-4cbd-83c5-28ae055c15ac",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31931f40-f7fa-4724-95ca-b73268322e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ff1025-3504-470c-b469-1ce8b42a8ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf78ed60-ae20-4639-88d9-c65f21f3d131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f7e6e3b-8f27-46c7-b129-591fc9f274a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2954dc1a-3cc4-48c2-af75-55ac541ff7bd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ed92da-9000-410f-9555-07539bf2dcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3810cb-629d-4d1a-991b-fa577b4e0584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6a9b45-8447-455a-9f8a-2aaeeb1fc87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b19acaf8-9001-440e-865f-199800a8a509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb236ae-d4c9-48e5-8c89-668ba0e69ffe",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10137c0d-79b9-4f8c-b0e0-a75978c381ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6541cbd1-4e56-4c1d-8acc-aeee9dfd1328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff35cbe-febc-4031-b9f2-a08ab944e43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d509e735-ec15-4304-9f1e-ced44a57f392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2558a476-3549-453e-ac22-84ed7e1b9a4b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0d12ed-9e9b-4d81-b8a7-47c027c4041c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10df7c4-e888-4ed7-9302-07b4eeb76ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473d4a87-1943-4f2f-9265-b40c7fd3cbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f773f4f5-a46f-43a4-bcb6-01e4716cf4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6621b9c0-2808-4497-9b83-c645522513fd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f56e0c5-34c9-487e-b9a5-e82aada5ae11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ff02eb-fd4d-4fda-9790-43f85ab9aae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1d96c1-0ff1-4c0b-919f-dcb8293e4e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b55588c1-d236-487f-af70-41f90357b28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabfcd7f-147e-4809-ba5a-155907111677",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc481e5f-2029-4593-9f1b-ac37af8e6eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ee9bdf-8684-434b-b6a8-25f7b4f1b21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc336e45-1a37-43c4-b082-aba6fd5135eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e08b9575-0940-4618-85d3-73690d4d9673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01660c73-5601-4e0b-8629-5b5d8b244f43",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54a4a97-5d93-476f-ac76-3e65bc4cf7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b236a04a-dd1b-41d2-ad29-698c03c62055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dca16a5-571b-48de-99fd-202eaa09447f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "550e5b27-90b0-4db3-af9b-123d8bce48ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc09021a-c66e-4e2d-9522-c21a365c61ca",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566d38c0-eec4-4521-b39f-968b0f2617b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22ea1b0-286c-4b57-93a7-517fd89b56a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4980e4b8-6557-4132-bb09-323e386cb63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "263064fa-4bba-4a81-9073-d1fb918577d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92405f2-5fb8-42ef-bfb8-80cc68f3a845",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de55a91b-40db-4167-a87e-876ad1636707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf74dde-d6b4-4947-b4e7-146685cb3063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6cc6d0-4cb8-4e3b-8f45-1bf9e5d1ca07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "13f744d1-687f-4a37-95dd-af2f45baa43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99745cc-af9d-4acf-a838-97fcaca12602",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385ba88c-bf15-4773-961b-8883c3a1cb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7cc55f8-bac6-4874-bc4a-2348d66d989b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cffda4-ce85-4174-b974-79cd4fc16089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b993fd8-2155-491a-ac93-2180988ca4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2782d1a-319e-4aed-9e74-9b80977f6453",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecb648f-a0fe-4cb0-aff7-199372d18575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4272a8-a05a-4568-87c2-103fec888566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14f263c-2a81-4b00-8a7f-59f91dd7afc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc154f9e-8ea9-486a-aadc-2fde1eee08cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ba1161-40ad-4275-a34b-c7c80c6f0dbf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e1b18a-2887-4da6-94d5-8bb9e60b520c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d32a86f-5a50-47f5-893d-6fa9b9410134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20ec5f6-7fee-441f-bacc-7fe66e8db633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d50d723-34ca-4379-a261-33052e7c0df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5600ae8b-aa5f-4a5c-9c91-b67eef1a5e88",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5274d895-c353-4c6d-ab54-d0812fcfe12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0026644-a064-4cd9-8685-bcb2439fedcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a52a7a-fc94-4ac1-815e-0957ef39348c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e151f8-8c7b-42f9-bb45-bb0d89f0cdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63feb56d-845f-4c81-9d7c-da6fa8e5fd25",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea3a45d-a5df-425b-8436-294babc4e1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6d2191-6414-4ec3-97c5-b4977b5ee528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fcdd03-bc6d-4fbc-95db-60650c453006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8e663b6-0545-440f-a9ca-1dda0ac7ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f45eaa-765e-43c9-b822-63f20dc0ce31",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9ba4b7-6fb6-4f36-8d6e-166973df3aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a4535e-afc0-4835-9f7e-5dd6d2d65299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1242ac-9c33-46e3-b973-88be505a9750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d01618-64fc-4f69-a0da-373bc6b99823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd469039-e417-43a1-9314-b8bc42b52d82",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1373c1c-f334-42e6-9cce-34fa72cfc2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae715619-f7d8-4d08-a1a3-a5f713559b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f495ef-e4f4-4859-aa53-6ed7f1780c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e19cbf0d-6675-47e1-8047-62312873aef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383e0557-4f57-4d71-b086-412f38acbd4b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35e51bc-a1a1-4006-872e-b45ed7508c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d385ecc-4e03-4c99-8651-6426ec6f4994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f912d1-e445-4036-99db-fd9ef5a2826d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc516717-d6e7-4f97-a5e9-71897383eb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053633b0-a5b9-47ba-98dd-7db81bc50306",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22af47ec-14f0-4009-990b-339f5d35d7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab88a3e-3e39-4d42-930f-98dd4233b4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5da43a0-3792-492a-b847-ea893e69744b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4c4dda-a3fe-443d-b4f6-43a0d1e08c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84a5e25-74d4-4d12-a81b-7a3c98d34616",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddda665-468d-4a8d-8616-2f50a958a150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b71def-3cf1-4c65-beac-2bb6813a9c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4e0eec-7e2c-46d8-a6ac-8453c8377c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e73afc-1a0f-496d-b53d-c014ec0ec0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fd442c-b63e-4663-92d3-0924ac869bb8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba9fc55-3715-4f80-8a9e-38534eeca200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58fedf8-c62b-42b0-b145-912072658811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80da801a-ea7d-4653-89de-61514ef2e625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c85d8a-1cba-44fd-bcd9-768ad4c9d6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68435ac0-a8cf-4275-bd36-00dd14507515",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f6e88a-6873-4c2e-bff6-7ecbe3907fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242102db-5cfb-437b-9b7d-e74d2f8be848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de92d18-c62f-4f42-bd4c-a3adc5aa272f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55a3a1ea-98de-4303-80c5-20357ffb6b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd45168-a700-40e8-a9f3-a74a0cd2f2cc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e939b53c-47e7-43cb-bae3-bd3144331fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe68e2e-dc59-49d8-8490-834a30ad531f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acddbde-8258-4777-94b7-c5d4a8361e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e734f7f9-4264-4a47-8432-1c466e4f9716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb0887a-1c09-4e88-92c4-6e8f83f3198e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a5ac61-e1a6-4d61-97a3-0ab5d2b2bb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054c1fba-3326-443e-a91b-e4ad1e654917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e6d282-0ad6-4c3b-ad3f-465420377aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d87dd82d-3c2d-49f4-9e4c-9f423e4db16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69f7f4d-d4ec-4a5c-96cd-9e9b59ae80cb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f960f0-1e22-4799-8a3f-797eaba3b3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4306cffc-f36e-472c-9ab4-77a6e7295685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee3ddbd-1c4d-49d5-b8c3-2efd213985f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55831d5c-9519-41b9-8814-e1d2ea2a1807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da450eb2-447a-4568-a1dc-bdc86024d3a0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9eb6d29-f38f-40ad-8e79-4b443a4526c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc99816-3d74-4461-a28f-4da9917b59a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0654df-295c-4e41-91a5-cfb542ced7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f34d40b0-906c-47a6-ac49-7f897eb323e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2992aa9-daf6-4dcc-ba00-1f176ba43d80",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5ca502-52f8-4f40-9b15-db44807dc16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2431a8b4-2a85-4423-91ce-28d0040c30d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c1d665-0fbc-41fc-955b-067f57cacb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0bbd544-eb0e-41bd-9de9-bdd00fb239bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d83cf8-de50-48e4-860c-c5a4291d9b38",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af43308-42cf-4063-85a0-8609b4a6358e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4ba07b-beef-4ce3-ad60-4f8cfdbc68a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f55d2c7-8157-40e6-a28c-6af1e37c4820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ed61e7-49b8-41a1-bc0f-3f52cdfb293f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7fd4bb-7e01-4855-8071-fbd87c0045f2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8698e6ea-86b2-45be-abcb-028c6d1e5fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86833306-c5a7-46c6-822f-171794f406f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5b4431-ce76-47a8-8ef9-7fd60363aec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "927c82f3-1d82-431c-b05f-869fd7ff64b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6db82f-356c-473d-a591-9c2879e78dd9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58addbe6-3ef5-4ccf-8581-8091dd29caf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9111e5df-f49f-4ada-b1f5-324fd5ce6970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f19ec7e-a310-4088-9c6e-08561194e586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c796d99a-a6fc-47a1-9a2d-f9223376c54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415f4f6e-0a97-4cde-8c34-c0eaf9ecd7ef",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c77887-21c6-49d9-ab94-0de93e383ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f67cbe-b0f5-40d1-b802-475208401440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d863b9d-1232-4064-9bdf-cafe303ba46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d53000a6-9b98-4920-b007-34cffc962c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffc8f9d-9fb5-4609-8b3e-19bbd9bb16b3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a94b39-f717-45b4-931e-691aca7e905e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0376d26a-5de9-44e7-9fa5-5336c60a11a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a612826-71b2-4b30-bea3-b6e4a9ea715e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "576ab05d-a463-4525-8886-f618ad153719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37673f53-603d-4645-ad6d-d58991b6b7a7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a8f89d-0b7d-4576-bb75-530dc0b03662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f7834c-17c7-4601-8af8-f82210144086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af460233-5eaf-4767-8e9d-9f958c1ab24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a66367ce-b616-4254-8428-8a3077d9eae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b894ec-4a40-40af-add4-824fa09c9bad",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ab2e6f-f272-4355-85f5-59b74c71039b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34925e8e-92da-400f-a9bf-01db420d695a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7e619b-ae5a-4b28-9572-ac0670bd8861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d8f83c6-3883-444b-b487-2f653fa676b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96214d4-210f-4147-9ddf-6a3354df7cb0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46ac9c1-6683-45f1-9b15-bb3b36418245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43898b1-5c9e-4c07-abde-3a4bdb77c853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30402a4-c175-4cb9-a0ca-fc1afc532ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9794a2b-804e-497f-bcf9-3aa75258e996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641d13a5-717f-45c7-9cd5-a059818d9816",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3303fd9e-a92d-4689-a32c-86c0c2107af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bac0d7-bcae-4aea-ac68-c0e5b2aaecfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa960084-97b5-4379-be50-5150de4de26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d67f12f2-9704-47b6-9824-169da9e1e249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899099e6-2877-4911-bdfe-6cbcfe2bdff0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38b6441-95d1-4c52-a708-1e6010c34bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3385eed-b10d-482f-817f-883f08b33a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc5da24-1c0f-4e1d-889e-d130e69b844f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59ff7b38-3955-4e41-9f2b-c6ecb142a735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40174ad7-06bb-46f2-b951-f5c52e42a647",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91bf935-d461-4340-952d-6edf8603d7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d080d2-3c88-4154-bcc8-84c9d719278e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e198ba1c-946b-4825-8d35-84906ae43ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "237c9fb6-b346-482c-8995-954f556d7813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0a532c-7ab8-42fe-9efc-f680bde7678a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da4323e-8b0b-4c5a-a5ff-2785612036d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c93320-4527-4237-988e-f1e06af62e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9705574-eeea-4ea1-afb8-5cd4b775d4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56d25f91-6401-4c45-9c4b-08643ea38475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c0e222-c2b3-419c-918e-7e27caa65297",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e31437-d5a2-42fe-a9ea-5d51aa5aa26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32aa432-11b3-4aee-9c01-394ceeb84b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95079c5-434a-4732-b3e7-d23b34982c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "66b1ff1b-0840-4ef5-864f-6d616b132dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faae9799-a3b2-4de3-8ef0-7b08dbdf3930",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64dc183-ce50-48c1-955b-2a1256807280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8449730-9f25-47d5-8d9b-60a161d8a358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afb890f-0254-47e2-bfce-15ade6b2bbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "305bcf65-5dfa-48f3-b058-63f478823d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be67873d-7b38-427d-8e22-4fa7111fef6b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8968841a-8f55-4be5-9b08-6f1c0d1e5523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012ea316-d266-4ecf-a561-6d6546a98b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71c0727-0708-400a-abcd-b6d72df83237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba687d10-7acb-43eb-bdd6-70d0830759fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3690866-6075-4f9f-af00-9919c12ed1b7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560e0556-e2e9-425b-9797-6736bb094cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec8cb14-ef6c-40b0-974b-ed6c5737fb2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f832490b-2d20-4894-ac82-e2da0f9cc5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c789c8cd-7d0d-4a16-8916-6919221ca4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99349f2f-333c-4302-a775-2e7780d86558",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbc99ce-55f9-4e3d-a004-91b3e9ccec22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da24942-08f2-4395-8fea-f0add8f84b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de91f59a-7606-421f-a81f-a3950b065f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "058223ae-f921-4e35-a194-c0795330f22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2eceaf1-1a80-4c5e-8fb5-a053acca93ff",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df306dc5-0a7a-40e3-a3a0-258cbdbe53ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3f9ec3-f981-4682-9e3c-8a5dae3de3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bc8c88-9dfd-42cb-aa12-be1af60aeeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "48a063c8-0268-4681-8bf0-1e50013e2023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016edc5b-ad5d-43b0-956a-224c626dba80",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c98c48-22b2-474f-bc59-8a1362a2f4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddf603b-58df-4d19-a96d-e4318fcf58fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e5028a-81c5-4bbd-9934-c3ebff9c5e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "251c2684-a140-4476-bb04-7ad59fd2788c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdadc05b-4969-4f69-b11d-60ec5e6a08f3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f606561a-fece-449a-89d9-3ec36dfff995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e063ca-7f5d-4cd4-8e9c-da5fc8a4b944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afda582-3a15-4380-aa07-698dbeb6dcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e19d8fa8-4dbd-448a-9869-502fbf8fddd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b6794a-89f6-450e-8f93-0a6fc4b8f2ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2384531-90a5-41f6-9409-b722a1176787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77adc73-36bd-434e-b780-28a5f735dd21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f3f54d-364f-4f08-aa39-9ebf28c2a28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb59d44f-6009-4070-a619-2ac4b59fe841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c73ed30-e266-46f4-a6e4-b47c3057cdbe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eab66b7-dd56-4051-8b1c-d80d33ffa9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edce780a-ccb9-4eb6-aa59-40994749bfc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8c3833-1e74-4636-80e6-34cb451e360e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "97cd7f9c-2d8e-4122-ad0c-55051513c290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd016737-a4d0-48bb-93cd-b79218b2a478",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1314b263-1e12-4266-abe2-64589349c513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31bd140b-04c2-43bd-b4ab-0afdf5016408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53396b63-44ca-4e9b-86e2-ebd990a2ecb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "012c16f7-2b97-4366-988c-60c7f7dfce3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f50ee71-f7db-49c8-8567-a9a4c6997851",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10fdd3a-05ac-4e35-8ec9-440187d76bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def5b81b-3daa-4165-85a0-0273335b2a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb0057c-881d-46bb-a576-c868f14fa213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef20cf4-34d5-4b3f-94e0-a010f3d49d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64229bbe-e984-495b-8479-a62b4d52125a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f266be0-5c71-4953-9a10-1975bca449d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345c3971-d651-4505-a619-80116199867a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621d2ea1-d3e0-4deb-a9f5-41b84ae9770d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2e52e4-5a2d-4578-b358-5507c15f9a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5c8df3-23a2-4b4d-afd2-8cb4e80f7b23",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a031ac-e770-4a4a-bfcf-b39ad2cfb1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b6bf461-f67b-43b2-a5c7-20661e58974f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6e1a11-0ef6-4604-8b3a-ad435f000c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "249b1b97-f366-4bbd-94a2-cfccb59fe799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f6ad8f-2230-47cc-91a3-224a0b9e8f58",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88980643-4181-40c1-9a11-da8388f78290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d46ede-5581-4362-913e-52cfc988340d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff18bf48-ff4c-4e8a-ab1a-9f819e2e4f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e69d506e-362f-4265-b0f3-88a62022c191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8294255-ad03-4d89-8e42-9f31f4f13cfe",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089eefff-60f9-4531-9b5a-1fbf860b75a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed35e24e-9c87-4a83-a01d-90be4ff491ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93c1a57-9337-40d9-82ae-416a38c7e383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c19297f-2956-4941-bb49-3f4d94b27cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81fb0fb-fd3f-4417-87f9-ed680a571ccb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d5813a-4b95-4872-8a4e-15b3dfe03a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3180986b-57a2-4a85-9a2b-fe4d019373d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc28322-e991-4835-a503-e79db23a49f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dee6b377-43fb-499e-b9fd-8e532f261c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d6a4e5-8c4e-4ede-8e14-ab5efa8a659a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fcecc8-99b0-48f8-91eb-d0cfca530530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad4c6a5a-5783-4104-b496-6f05b242ca0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382a6c8e-6d6e-4360-bdf6-e5d8a4e61599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "70bd9854-e8a7-4f69-8eec-4ebed4c2868d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8992dfa1-8e5c-47f0-b644-e622438ff8c7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e04211-3c80-4904-b8a5-72c8fbd42749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be746ae-b97a-4e67-a6ae-f1098adcc1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8241e3b4-0806-4a4b-94bc-7f5e43571d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2660e792-b29c-416c-9eed-216d017302ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529ec5a2-7b0f-48f3-b7d5-5458abc8a957",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0757af-ee29-4f83-a2a4-450bdafe3183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd9aa3f0-a92c-49d0-874b-c99c7fdba27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24171dc8-24d4-4922-8e18-fc0b0297780e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52b1dfff-22ea-4e74-b572-5c077cc057f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b30fd04-fe01-4612-8b74-b01ff84abe6d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb4d08c-2798-4549-bdc4-ac410fed18bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9aacef-e115-4aaf-89cb-0bee9bf1e677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb8729a-be8e-4a94-af51-e8f0ffaf109d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0c91d4-17c0-493f-9118-e85bd709092d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bf8848-c75c-486a-becd-dc17793c4de7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07424924-9575-4a79-baed-22f5e420c74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c58a276-19ff-46f0-bb58-b2c0d95217a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06eeee7-2c23-477f-927d-302926c5aba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c7f546-a8d8-4171-8912-e37a3cc20fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b4f655-96f4-4d0c-bf67-596de56d3179",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7895254-78d2-4cfc-af5d-4a807d69918a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d299c06-6489-4d01-93e7-57d50c9e1091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993c160f-67cf-403f-a603-bdfd8777f257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac35750-0aaa-4083-9616-171b4f8ee717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05660bf-e699-4168-9127-954c19f33ae7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec1669b-4448-4562-8072-8bed8eb3d14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc219b6a-f72a-4e20-9aed-5547a4bfb7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40711e45-5784-4b30-91ff-afc242f7a02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a843b6ab-eb9d-4c02-896d-17eebbb28bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd73c471-ed2c-426c-abec-7bd2d904b3a9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e837a9-9f90-41fa-9512-b2abe61091a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9576f7-d5c0-4e76-aea3-635d011a4cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ddd804-9fbf-4416-94f9-acac212d72a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "acfa3e25-6e17-4144-8378-8f3fcb2fe163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e92c6a-5ab1-43cd-aa23-fd4842e4b620",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8886f947-54bd-4498-97e0-d3d8f5262884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf31a7dc-be5f-4c65-87ba-c63f594637ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f199fe2-7ede-4b15-ae4b-6ef55ab193e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14cce8c8-ef6d-48b4-9131-f4cc7a10faeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b3b2b9-e0be-4993-96c3-84b57975e08f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffea585-e956-4817-aae0-f9bde53d2946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ab79cb-4480-4678-82ba-67bc77a47061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c814e22b-8fe3-4163-ae27-f03feeb40817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb7076a-d995-4b11-ab84-b1457a211e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc76dad-e61f-4ace-8a81-2ab38ded1e05",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eaf75b0-0b1d-4384-92f5-4871b12e2cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e12a29-4a7f-4b8a-af84-3c4e088dab73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9e1d18-0689-433f-a56b-59ebd2036917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "206807bf-3ee7-48a4-bec9-6df2cedcd714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d92bd91-31c4-4100-b8c0-a733dd94b802",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd34601-1c18-46f8-b565-1790a3b94703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903ba331-4a97-41cb-8f03-38d1f4468c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8393c8e1-471d-4a36-a1db-60ffc4a44723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c53bc859-e345-4208-86e8-1c178b380e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3137db54-7dfe-4aa8-a1c2-04ea471bbb6e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07076bc-900a-4ec4-bc7d-1691dcaf3825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a174398-dd79-4963-a24c-7380fd961dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcc8296-8932-4dd3-aaa6-57f5388a2923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "619fb1df-1682-483f-833a-40f0d187d1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c053269-16f6-4e8d-b4b6-b73d3097bdcc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde476cc-cf55-4ec0-8254-42ca9c5b4622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36200ee5-a222-4e13-b6ec-8a41707ccd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a094c92-3e1b-4902-b515-5cc19d2b3328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "711bb8ad-c83e-4212-80ea-57822260963f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88eb16b5-5039-4e7d-b664-6b0f4c6a2420",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dc989b-6bd1-4d0e-a855-ca1d25d5b83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba459bfd-777d-4aef-8a39-96c1213623c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b01c93-63fe-40a8-aea0-23084c661c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bec7b9cf-f2df-4787-b974-50e0c935db70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8649ef-d305-4bb2-b4e7-6d4dbe670a16",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbefeb3-918c-4d57-aa6d-0491bc8180b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3534b0-b3da-4881-8cf3-138012a12f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e214d9-47de-486a-af05-48b4865ef3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc4ef89-f51f-4a64-ba7a-cedbf5c4bcb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f37d7ca-f994-493c-80cc-ec9e5e5618c1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a95ec3b-c159-4ed7-9a71-00f78b763ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2e0691-9297-40ce-be4c-65be9f2bb734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30544e24-3a3c-48ff-84bf-e12690efd8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d56ab6e3-68d0-4b1a-894a-994be40e526f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c196961c-1cc3-4acc-b83d-988b105d5c39",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc1935a-4b20-4688-b039-9e7d77d0dcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626a3e31-9b98-4157-8eed-89fc61569dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dede09a-a9d0-4060-b628-f78afa714644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2502d0c4-93f9-4570-b8b5-2e149098a188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0beae2a2-f7bf-4956-9086-12e137dce8f9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3cb548-acf9-43cb-93d3-e50f1b441c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d73109f-1879-462a-bedc-6642c9ed62ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9e1917-320a-406d-ade5-96a49da2843e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68fb601f-e24b-42e5-bf9e-6d8ba84bd3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd99a8c-f1a5-4d2e-bba2-434cfd65d91a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f32b3f1-ba90-419e-8fde-31c19f3d4d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3856a396-c4e3-4cec-85d9-ddc1f569bb56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31712490-1cbd-4405-9f09-2ee12fa15864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e36ebc-bd63-4636-aa1b-29dfbcab646f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da9fe4e-6b1b-430e-8c73-aea284aa00bc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a915ef7-62b8-4944-adc1-1cb93e9953d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81028b96-be04-4065-ab8a-bf1b043e56c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbeb5dd-9e7e-4e6e-ab54-8554a7354a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "343703fd-1371-4d99-9b19-7a7d5ea7dec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524ad426-e69e-4680-ad80-7983073efcb7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d2ce63-678b-41d5-a12a-5d177e7a3529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce06f49-3bf7-42a4-b8d2-1d0aea60d56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed3ccfd-1860-4367-a817-6bda0f8b7f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2448a6-026b-4041-86e8-4ce0ed30048c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681bd641-cc82-476c-879b-b71d65cdfa14",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88d979c-f6e4-42a8-b091-44049820504e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527bcaa3-cd47-4a03-a73b-29f9f1c4a778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8dee3d-abfb-4662-b72a-20cfb9baaa6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "36d43ed7-1440-4c2a-af4c-b9a17472ab80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d69a943-15e4-4afe-9d35-501afb86010c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3bd8ba-ee35-4cf2-98bb-383112077d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f75aeb-c1a3-4f7d-b1d1-fbc2a4881e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3361f711-dcaa-4856-b5ea-682f62f54554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7cb2e78-dc40-466d-be44-b04cd2e5635e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd264131-a59e-4054-aef8-a2a8b00fbca3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39c7093-486e-4892-a9dc-041520d50c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6f25cdfc-559e-4702-ae98-e3beb5703be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0d62b8-c43c-4f5f-aa76-f9330676f291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6514af8-2fce-47dd-9854-fd845eb32070"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "da1d393b-70f3-46d2-8936-9abf4f219c07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18a10dfe-0280-49e8-813b-80ed90de59f4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8945c60e-bb84-495e-8bc8-e20554c53e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f6a068b-16d3-4b22-b705-00ea54492f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33ae45b-a495-48e7-94bd-da18e2ff615e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "585988df-6fd2-4181-8899-6bbf77edd8ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0359fb99-9e04-4e80-90e1-dcda37a7f8e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78d53744-7bf5-4037-930e-82baed74a82a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b583b57d-9198-426c-a356-a9577dff751e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5937bdc1-9520-434b-997c-d11746ddea23"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "527b9693-e551-4dbf-a9f8-51baaaa90929",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1dd64ba1-fd8a-4ec9-ab94-d986089c9c82"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "def3cb86-4942-4ef0-9669-065604cfe351",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cef75daa-2f42-4849-92ca-e1f857af3158"
                }
              }
            ]
          },
          {
            "id": "24ce04e9-93b5-40cb-9bc9-25b08568146b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "10b32b73-f72f-4f4a-b24f-52b8e79cc731",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "20930834-a245-4ab8-af8f-52be6ed2c959",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2b8a93-bfa3-4949-99aa-6676f54cd426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7ab27bf5-b780-44bf-abf0-cd3bdf80d7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcd80c0-7ba3-4ef1-b745-9516f6e09549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7616465-a50f-41b2-9faa-97e5599a3e8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "788f02bd-dab1-4586-be68-dfcc8b4aa147",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd26803c-9ebf-4ab2-830f-2c8ccda4b84b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d3fd9a5-f280-40ba-804d-c9febedc1232"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "471a4919-8742-4df5-91cd-322fcbb15f4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a874eef-1c00-4e22-8768-a60b99c48d34"
                    }
                  }
                ]
              },
              {
                "id": "9988c68b-1d79-4795-a7ee-1cb5b23eb9ea",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0f86965-4f30-4015-b9d1-131b701e42f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e917acc-1f75-46e8-85be-e8360eca4b73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eea78369-b200-451f-ac8c-28917d3b4141",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fa9c4a16-4865-4165-9ea4-fa1910bf36c4"
                    }
                  }
                ]
              },
              {
                "id": "2390566b-86b3-4524-90f3-3b85529df099",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39b44b5c-c14b-4969-a713-dcbade18e6d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eba74571-3693-4b28-b0dd-177e28d0bc1d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bf61b90-c445-4cf6-9425-69e2c00bf846",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "95ddd0b1-9783-453f-98e8-a5537cd799c0"
                    }
                  }
                ]
              },
              {
                "id": "a155c708-39ef-46be-9100-6cce56228967",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bce3d319-4f33-4cad-a856-78a652b1fc0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d9e4765-d172-4023-87fa-a094917ddea5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfb097b0-0a3b-4abf-b6ec-efdd1824c821",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4b4433d1-e51a-4821-b6b8-bff7bcd1ab7d"
                    }
                  }
                ]
              },
              {
                "id": "c048555b-3de9-4838-9753-66fbba0f6484",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "126750ca-35b9-4a1d-b0f1-a2e5be4824ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d770a306-0869-4f22-9a1c-9049af1c950e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f572b46-734a-41a7-8c78-7790d8be1417",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d762284c-09fe-47b2-a4b0-d80f0fe16081"
                    }
                  }
                ]
              },
              {
                "id": "0b843264-d94a-4d84-a9b7-9ea5dfa5a729",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04c4f0e1-0ba2-4c8b-ac05-cf4eb7cc22e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67f90735-24cd-45c8-9b8b-e4d4416564d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3f171c1-73dc-48ac-8bb4-3fb696fe98b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "70dbc64f-8dd6-473f-b332-d0e816b14306"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98221411-3a7b-49db-bdd9-d7598573b11b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e757b5a-61d2-4a3e-80db-dc2b576beb3e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "68911abf-761b-4f76-8f48-7a19aa6a1e76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef913296-c778-41b6-a51e-e04687ad3581"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56828eca-c175-4ace-94ba-9543da51c9ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "950cf123-75e8-4f8e-b455-7ae67aa3748b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f752b36b-6771-4b03-97e8-be41e1600cd9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a29983c-ba65-4283-87b5-7902955514c3"
            }
          }
        ]
      },
      {
        "id": "f9813de8-5484-4f6a-bf9a-30cc5e3fc18b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5da2033c-ce98-45c4-912e-d47eba685a6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd6de99b-a223-41fa-83f9-9fad879dcbd5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c07ff941-88ce-47aa-9fa0-585d7509482d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c024b78-cbb5-46da-8f65-05147dd0ab73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc993d9-61ed-4ef7-b916-1069f2e587c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c3500f-3c14-44bf-9bb2-b7d09979fa41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "38b6fae2-2c82-4c33-a3de-20b1365f69d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df480871-5253-4a14-90b3-7fcf936a8594",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b661c4fc-f0da-41cb-a364-6a6b33512487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03970cd8-dfbd-43ac-9bfe-748e8278bb1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7eb39a-4955-4003-9240-e76d78d97552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20b3d05b-8b96-4e1f-8a1a-73292e58c0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e9d7db-bd10-43e2-a724-303fb1cc1458",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba558dce-96ac-4fda-8d74-b652a5d8a981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe168a30-b6b9-4439-8a29-9ace26c2b7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3b78b9-65d2-4976-9cff-74aa27d2cc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7fbb563-5352-4fa3-b480-83780f4fcfbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203267ce-7aeb-4854-b230-41f97bf1b69a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ee5eff-4df5-4277-ac24-75390849ada5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725ae303-1438-40ab-9f25-c765802ace6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92d27de-30fe-4f9a-ab12-8848dcb28a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed13d92-b043-4726-881b-8313576c1f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e189ca39-44e6-482d-802a-bd5a5fe617cf",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1d2275-0c3a-4eaf-bd88-f35bc77f1f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789741a4-bf5e-411e-bba6-8e49292a6682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc688aa-b08d-4b4f-b173-afb15f3293cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9cd49e-004c-4b65-8aca-9d29aa9d2e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e8a0c2-4487-4471-9478-6739aa984ac0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7c4231-f492-4128-a36a-a795d7aa9024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67736fd-15e3-47ac-90a8-7945072308c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1cec59-8448-4a29-9b52-e571af607ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7a7dc0-ecdd-4aaa-92af-243aed3fce7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70323756-63b7-409e-951d-48f1e3c10e10",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d7cfcd-c55f-4437-acf0-5852defbbfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41bf89e-a66c-4247-8734-bab7c3cd0b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7c2ea1-22e3-4f7f-8a1d-d29769c638b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4caf40e5-37a5-464b-a38f-35f548febe0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0558d81c-e781-49ce-8b66-f2ddba300870",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59635880-0de7-4907-b0da-6aee4c128e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b814239-de7b-46fe-8de2-94288ded2d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5a4019-8280-4968-b0ef-79b15cb7d5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed18f8bc-d3ae-42b3-b7cf-5f9fc8b229a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f922ea-20f3-4522-86cc-2002e686ec87",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8284e0-b19f-4ab4-afc1-2bb0fcce802f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b53832a-7cd5-4de6-b983-46e7f4ac89db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca06e5b-0566-4df6-9e67-e1d58b1d8e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "95bbe6b5-0a7e-4b77-b0c4-a2bd808c3e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19680e5-3b36-449f-b1a1-38fbc1164ec6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fd71dc-e094-4515-9153-bdb4978ab4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5bd014-b654-4bf9-aad0-f4a56e53bc08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2177f5ea-4a24-4666-9c32-ab871c42a7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efe3ab81-8d41-42d1-a578-a68f636b80b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d64afb-8e36-4184-8c21-04de18d1db49",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7879200e-2d77-4413-9ab5-30351068dd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f573c9-dad5-49fc-8c8d-ea033edeb7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafc15ed-4e71-4ea7-9866-997a18dcdee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "990cb693-b09e-4c2b-b74f-d5b6e21d437f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ec3288-a5de-4708-bac2-d61061f50787",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1186d3f3-dccb-4322-ae0b-e7eafab11b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b17a50a-3ccc-4259-8a0a-34c286071a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1353d8ea-27d0-471e-9d32-6508605e9d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c520d8-34c1-49fa-a408-8ccb62843f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca5d17e-bf40-41e0-9bc4-cb5cb036dad0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d64b30e-3532-4e58-a3be-f0c619714371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2882fb0c-23de-485c-bade-e1f4e311bc0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c748a202-c1c2-4dce-ad18-fc29b87ee735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f97e068f-f25a-4dc5-b1f0-32f2eef19f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8c8f8c-0370-4ab9-8bcd-6cf5e48df559",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f77ec3-136a-4a67-848d-cf567c9ba0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12b7817-93de-4adf-8335-6834296d4fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dfcab8-6a02-48ab-b86c-1cc4b3b7a045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3faabba4-7bf1-4e57-8479-bc2f48fa437b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2478ef84-12e7-4a17-aa97-1a4bc6ef35d2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd5cbb3-c12d-487f-9ad7-72f5395842e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a2d1d2-0342-4bb3-b499-4418a9b80e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc7fd11-f174-48d3-9dfc-d7624f2304c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e891baa-ec40-498d-b8af-f0dda8179cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd1039a-9e22-43ee-9a97-a64539ef3cc8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198f17ab-7284-4573-b860-2546a2f5d1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775fce3a-961f-4611-aea7-e7033c5be7b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8aba2e-a29c-4718-8797-2c647eba2103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7cea25e-484b-49b8-91f5-c47b30c6f38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db00aba-90f1-436e-b85e-66d70a67d434",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cece5d-db1d-4d12-ba80-bbbb094b95ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd5c2c7-b362-4f05-8887-5e7fee5d0372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf51594-ca14-4fc0-82c5-062eafc8633a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "35047a16-8d67-4e90-8f4a-88c44cd3eab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aee0aec-0549-4f20-9bc3-f6aec3bfb165",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d272c89f-5a02-4e87-b9ee-e92f8ce22a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b29c89-9a1a-4bf2-be42-e433078396b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba87f33-bb22-4470-a6d2-2fd45481a22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "15955d97-593d-4cc3-9244-02bb073a93d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cb4432-bd99-41f0-bd81-76ddda067958",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2d58f9-5c89-4274-aafc-3241250481d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1bc0cc7-4338-4424-b646-3250a21dc1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f73a828-7146-4e65-90ae-d0f6129f487b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02e91a3d-835e-4db0-a7a3-af9f608cfcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18717bc-22fd-4d30-b3b3-e1c1d9637b10",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b49b90-e541-4c9d-aa86-608943526c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c6409c-711b-41e8-8e85-5bf101838946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0216ad-5218-479d-8042-5d6aaf76e1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d163ff06-90e6-46ea-9aef-76ee5071a625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba94d12-fb8a-4844-9a28-d376c8f2d822",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9da61d-a3c7-406f-83db-46d613fa84fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedabcec-c11d-4a81-8f17-92a16f71c8e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61ff0a6-378a-4eb4-a461-5675bf007b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90d12421-d24d-4fe9-ae2b-b1cdafc5da09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ebad05-f5de-4245-93c7-72850ef9cd75",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ecc4da-a473-4d69-8130-1d7d49944815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0955f79b-b7ba-435b-8ea4-fe54f0c32dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe94a33b-9d0f-462f-a004-0e6800f22971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eddccbfa-2876-4805-8769-954a7d063110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f7aba6-a6be-4cc4-8ee0-6378591a09e4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c83bda-2474-400f-89c8-4b912a013726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99462ac-d702-4e23-bfab-5fe3132ffd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e103e388-668b-461d-94a7-12f45d8790b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5078607-3fa6-459b-bd65-ce42cbf5a965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23066625-c5f1-4b08-a79a-164bb1ee3a48",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63da832c-a978-4125-b4e6-f2a8b3508f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bff528-a07e-45cf-bc53-ebf7b29cb5c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9cd446-d08b-4294-aff1-9d97f237d2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1ed3e9-5dc0-4537-846b-78a4b28f328d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d536d7-c659-419a-803b-cd64d5dd2bc2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92eac0a7-fffb-4ad1-b2d9-6ac11c9c420b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961aed4d-602e-4a5b-98ae-a6e46c78de15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b388424a-2810-41d6-ae45-b1765023b34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49aadead-210d-4447-b643-cea1a284236e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40da3249-bb11-46bd-9fb2-fef0587a3b09",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efbdf98-7019-48a7-bf27-293dd43c0c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9549e73-7d1b-4d91-85a9-112d164cba39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2eb2e2-791b-46cf-82c5-b74552c36726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df9b3fdd-1656-4b7c-9ac2-1c0731a07d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b99fdc-3f06-4d02-84dc-e40c9f45c3a4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7985dc29-1d30-42b3-adc8-edde463f1e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0b8cb7-9161-4bf4-a31f-1fb5470fec87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b285a053-1e23-4816-b06d-31858e22f040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7251da-af51-41f9-8c57-c50bf2ef39de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8218e00f-f979-4da7-8d67-93ba8f60ac2d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fb8110-396a-41da-b2ef-15f888aec573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc22d7d-1e77-4acb-bfd1-e66e60836594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141b6f5f-6e48-4377-8765-5a67e375653f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "964f81d2-44f2-409b-9238-780924cf179f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8ba832-0591-4933-9515-1b5c93276574",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffe0671-52e8-460d-a971-a7a2d4784c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be2b186-34a6-4abf-af64-bbb339af8cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708d8df4-0004-4be5-85d4-888a0e6e4d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "067acd10-70d6-4c35-8412-7b0373ffea7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3e1e6a-67c9-445c-acd2-006368d45d5c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f8224f-513c-4a2a-8006-d1089c006827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e0c3fc-a5a5-4572-8a44-42d0c95bd8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedb1619-c742-430c-9efb-cfac65c3a0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90ef47e5-d11d-4c18-b84c-99ec2f0863a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac232f3c-f613-446d-a576-9d315869920e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04d5436-c3a5-43ee-855d-3304c23b5bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db612ca-206d-4492-afbc-e31176ca7e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795c481e-85f0-4789-b28a-4627d1446a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e785efa6-3a8e-4e5f-bcf0-e75910e9635d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d9fc92-86b5-40f8-8ad6-b374d9aec4c8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6542f06-db63-4426-a1a6-9451f1dc3561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf0a48a-3a96-4046-87fc-67ba463ac467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93bf0bf-afb3-409d-8523-91fb9ff053c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf056ef-8c0c-4f1f-9611-84c8ba0c1c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ebdf21-be47-41ba-98c7-f3668aa48d97",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ebed5e-2ca8-482e-8e24-9885bd51564d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7202e780-c36a-4c2c-8365-9ace70b29547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88ee592-88eb-49e5-bb91-482f9801a10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e9a0906-d507-454d-bb01-d9fcc50d790a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8279a2-6be7-4122-bc6e-9e78c11c22ff",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5fcd99-f5dd-4635-b722-4a53770ef505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0c9cde-c469-4db8-9077-195a628dffbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c864629-9b8f-4492-bfbd-44fca692d224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb65f795-03bd-4042-a3c4-5c4cfaadcd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d15951-59fe-4e0f-b0ca-41ea0ccb1a9b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de46cf11-b0ce-4364-8308-f37606ac2a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b043d6f-c18b-49ae-9137-281ae45d809d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b2bc18-08f9-4685-ab83-d1f894e91f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c3f1ae-ad7f-4e45-9b08-c073e027f21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593b4fe2-1d90-45e1-ac69-8374f4112f96",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c66e811-9975-48ef-b9d2-0214ffe4f8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98922efe-d95a-4efe-bd35-c70c5330cf6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a66b8c8-2036-4ae7-8bd0-90195a51d1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7de8ebeb-1a8f-4320-827b-c0cf4dda2a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec29c8a8-6771-42d8-a3e0-e483553a3ab8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e01db4c-d7d5-4512-a562-a9db56e98346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c41026-380f-403a-a6c5-aa2774b0bfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d202351-e35c-47a9-8d45-b56067f4fb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "187b8375-4d8c-455b-9332-922eb098553a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0d63322-4722-41ca-b70a-b17e6dab3326",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6199f856-0e9b-4fac-8c9c-fe6b11878bfe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b5c110-e97e-4a43-a63e-039c4f777de8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "678221eb-7c56-419d-96fa-578fbf1a52fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdd0be7-f150-4429-a5aa-51d7bc428540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "735277d1-7b06-403c-85a4-f290f51a280e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f422b83e-b158-4073-aad0-526b213b8a75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68364e9a-ec16-4c58-8a89-1d11b22117a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a42d315-3795-4ce3-ab41-9e27976f7a03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dee37a0d-8384-4d40-b328-8fd6b812f53d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adee3ff2-9ca7-4bd7-aff2-65d0c02315f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e277b761-b6dc-4410-9339-50bdb009145c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f801c35-9783-4532-bd33-aae26498d378",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "457fbe95-74d2-4230-9008-37bedbe5700a"
            }
          }
        ]
      },
      {
        "id": "591a279e-41ef-4ba1-9563-2112eac121bb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "81210b48-d4b4-4a06-9749-f4bed2e67ef2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "692ee7b0-7da7-4068-995e-b700468bb56d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5fe87016-987a-474e-b9aa-393b7ba85a08",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8aaa90-d833-4c9c-ba84-a4fae9d58ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2040314-de02-4450-ac84-50b914c0baa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377036e1-f65d-414e-8e0e-13e84bf6ae58",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a68fe33-6e4d-4f18-9d11-b925b4a673f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5934e56-30b6-4a00-a472-bd5a5f76050d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475e001c-32b3-44e1-9416-9565d2bf2424",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e461413-8f70-4907-9ddd-8287060ca130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb99117-77b7-4609-9c01-fa5cad1425b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ad7022-3c56-4f17-baaf-98146955cf6c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46c708d-e356-47f9-a320-ee58494d75af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac1de45-db6d-440c-a89d-09cfa75d2e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479a9717-ce1a-42e1-8c46-3c996bf40362",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b81b08-722b-4ef0-8269-1e159c131722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2855abf9-8f14-4f52-a2a3-f8299bda2234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da90bcb-8fab-40dd-acaf-4c9e4663fb9d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30aaeb19-f45f-4f44-b70f-80cc96a502cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25ca1ae-c371-4b21-bda0-5a0e67b680ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa70e90-d8da-49b7-a475-28209c0a089c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4196e615-8ecf-41ba-b24e-5e9807663261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b92033-df5d-4074-8416-a4250c49a4be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b80dbf-fbbb-4475-a29c-5242e70831f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbcfc5c-e0d3-4a66-9908-83e181b5c618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0942b726-cc6f-4d9e-b800-97a2a6c2e57a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c65152c-4464-4a3a-9cdd-5c1d86354d74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b8254b-9a74-455d-beda-6fb7592e43b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f24ed5-0f50-4bbc-8e41-97f8c5f4086d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb5a1ff-6b2d-40b9-be15-7b5e1613ed8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f2fcce-b7b9-4716-b65c-7fcd8d241118",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebfd8fd-8847-4e7a-a177-ece9d375fe4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a95cc72-e593-4cdc-a141-b9cc7094169c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dce29ab-1dc0-4268-8e0a-e18c9187ef74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10db9f7f-af34-4ee0-a157-bae2c14fdcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e5ad66-3431-4bea-be01-03ebfd4c527c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d88a5cc-8bf7-4a1f-9f36-112c4e90faa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6412397-ae13-4e5c-b00c-8d2512eb43b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d8d81f-b1ce-4ada-80b6-04b3afcc9b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d827ae2c-624c-46c5-82bd-62b6171cc559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78627664-efd2-466e-b198-a76ff30952bb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de72bb02-1a56-4075-b387-7888af60b61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620f81db-64cd-419e-ae24-ba6cda549c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6ca409-5a11-4069-85ea-c13cb5e7a00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722cb278-e210-4d88-9855-7f861430d007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1b3b38-7d6b-499b-a4a0-c897857bf079",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e03e65-bceb-4aea-973d-e82077b6ebc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94926450-0589-46a2-9f80-cd69141ae2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c3d1f9-fc0e-425c-aa5a-4bb6f96b407e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9dcc4a4-7575-4677-b09a-01a9a7a4d951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1261336-ae2b-464b-a5c3-538a01512121",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee83c58a-cb6c-4887-bd35-5514ec917ca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07c3da53-c7f7-4bdc-bc12-07c7914c8e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0ee0c5-a87f-4bed-ae4c-11aba25ff039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b678f4-c03e-4b98-8d56-9847f202a416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814efa44-5d06-48d3-893f-b0b5480eb8b1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374ace6b-95f0-4ff9-8d4c-4d642c093120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e8579ca-9d54-4399-aa61-8acd28e3f7c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33340c4-5a77-44da-9762-43e18e60c238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4696430-8a8d-4548-a17c-32ca601256bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850f6673-80c8-4cbb-aa09-f845de491b8a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3ee63e-fa81-4301-b26f-bdf7d09382f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d119daac-0069-44ff-b082-0dcdf3dc9509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f61368-ef1a-4355-8a9d-e08cfae4b655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91183e53-0274-42e7-9fa4-c24836aa0c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ab194f-615f-45d2-83a2-88371a87a69e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b02686-ee35-406b-b694-5f201e8ba017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e61c5b-fb8f-4f76-b7d1-54b845680d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9cefb1-0205-48c0-a901-3edef2e11c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a35a5ce-7121-463c-8775-80caba07f1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7382b362-923d-48b6-802c-6781e55702dc",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a03c87-ed22-456f-a7dc-5a6e791e532f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9bc8a15-59e2-4609-92b9-ba45c09b5cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6cd4e6-c0f6-41da-92fd-52b913644688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae571ba-4eb9-46c2-8dc4-12e77835cfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6aab8ed-a194-4ff5-953a-2fe50e7d6260",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c83d3c-de4a-4d10-ac2f-885dc72cf2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5633fc4c-2413-4607-9924-f72a1bcf9a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74497f5a-5f3a-4efc-93e7-d708a0784701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157652fd-424a-4be1-9d70-4ac21709d972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36715bb-335d-42dc-83b8-075d0938d83d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52a1251-ae56-44fe-b738-e0999ee5734c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f124add-d696-442f-b4ef-cea4d0a206ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbe7fad-7b04-4025-ab7e-7d586478fad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfcf547-a88a-4dea-bf1c-2c9f76d737c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbe4fcd-281e-4330-b069-1f1efb1b7f21",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2a5025-23fd-4128-b4c2-c8a8f0cd649a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56527ce6-1cba-4892-bf5b-eb2bb7e99b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53df13c-17f1-4e2e-9b06-28e1b0545878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66903c36-f47e-46c2-8b57-177c3c1afff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fed050-95cb-40bb-bfcd-dacaaa8e5a8a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9405c2c3-87e7-4a54-82bf-da755a4b877d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2276c027-c80b-4cac-a57d-62f0367c60a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "255205f7-7d2c-4cdf-86f1-db2a678739c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53843f5c-1d5c-4832-aed8-19378e005a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd3d4f8-5501-495c-8a2d-aeddb16362f2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88bf0d6-1528-4eef-ba1a-621e36d61509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314967eb-1d15-432e-b9f1-497dd465283a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f7929e-75d9-4c06-8715-87812e3a874e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5a87d6-685a-4578-bfcd-2a9c44b8957e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95621b6-3751-47a7-8e78-e2ee487f97b5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91346c36-a3da-45ce-84af-84301db1af55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72790ea2-19e6-412b-9865-f64837ec179a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad842d8a-48ab-49ec-b380-2579603d3402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26164880-473e-4cb9-85a6-defa600acb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7094d39a-2743-4671-adcd-d706dbd10315",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff0f290-f308-4b9d-ab59-0e72acd6c1c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e7e9ad6-da6c-430e-92b1-1b8ac389ef3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f249090c-91e1-49f4-8516-6edd6fe5d447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f85e30e-a9a1-4db0-912c-9d79988ed172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836814a4-929a-4e9c-83cc-8f6979ab685f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dede9bd-4c48-42e9-a45c-242dbbfc4469",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a3f69eb-9a2b-4b68-8b44-34e6d78e94a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "418c045a-c76f-44cb-bb7a-7b21b85a409d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020819b3-a012-4684-8db1-80303ec8b215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909966cd-1dad-4e51-97b4-45730666e487",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f877b0-dc63-4c61-aee0-23673547bc59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "727d7a3d-3ec6-41ac-942e-14469d487ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17779c94-2de6-4c65-99a9-471b8ebaff9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d944816-6fba-4e90-ab1d-3cf97483ca04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97688848-b9a9-4d8e-83e7-70d318fee52d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be83710-7264-48b0-8e4b-eb9c1bd84034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab068be2-aa37-4063-804e-00826f1f555f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7098d2-9d2e-4709-a66c-06c5bd365d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab0f8ab-3dd0-4cf4-a0ab-b2a5f9a601d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4792bbda-c5ba-40f1-b654-46bea73c6971",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9add1afb-d1b8-43f8-9c2c-38509fb47612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6daf9b9-40b1-492f-8cc8-915309803871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14460a70-69a7-430c-be00-275b5bb60de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15b3729-514f-469c-bdae-66eb7f315ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331a750e-a9b0-4dae-b106-b0a650ae94e1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe147f30-d711-4486-a4e2-f5ea3e1676ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db8f2b0-a459-4c93-83ed-79fee94495e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7a404a-ba2f-4924-bdd9-d78f276b1d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4679cf-30c3-498a-bc62-2dda07afeba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d89a8a-b7a0-4fd7-9b07-8eea83505a0c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33d921b-aeb9-4515-9a4d-c257c8132b83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e908e47-60a6-4e48-9592-9c239705e1bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae9c0a6-37c9-4c39-b984-530ba19ff93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a03489a-a5ef-47bf-bedf-2bb39de3b7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d843b8a-ced0-4af9-9dd7-6745e32a3ddf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e504478-2fbd-4314-baed-0ba1b16c442b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5af10195-3494-4b43-b4e6-9ec08444c0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5126a200-1e45-40e3-ac62-672f5ddadfd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328b0b24-7a87-4b7e-b19e-f077a064a065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cc71b7-1b0d-474f-8642-804bac445935",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2669d2-5de7-4c65-87bf-fcd37899a580",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ea9829a-cd35-4e89-baad-103e5c8cef6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47adf3b-e9f0-49db-b2da-c1ad29dc60a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b249e7f-33e1-4e2e-a231-d2c2e6032d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be48ede5-e37b-4c64-a09f-b84a356b9cf8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e16bc7-fb78-43dd-a413-e7e52edfa002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "276fd484-d97f-4b67-9b9e-f5010216bbf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cb1a22-b2fb-48f1-9d61-5d7a54ae9a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d78a02e-63ac-44ee-8137-d4bd4e1322bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb47a0c0-576c-4f94-b696-318ee861296d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c626dca-b081-4e54-80bc-3fa941cf6006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c344403b-b0b0-4854-9454-de9139b649e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f7dc73-a77f-46aa-bac6-6749e1984ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f974b8-9abc-457f-8815-3cfe5b96e3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cb9376-a98e-4a4b-87e5-69ea68f21758",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1c664e-fb7a-4bdc-af67-f87ba11c0e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f032012e-83c7-4533-9b2e-1778848f2629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e06f40-07cb-44c8-aeaf-d047977ba4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640582dc-6669-47f4-9104-83c4c9fbf1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca32c76-9429-4fd6-afc0-0d1f2bfafc36",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b6f91f-442a-482d-a3a8-adfcb28d8f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183894bb-bfdc-4bd3-aa26-935b00094d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6fcc0a-2b40-4537-8d4a-591ff773383c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12361155-a54c-47ca-a192-7f6316bdb6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40cf1dd4-e18b-4aac-adba-1c374cf41265",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddde808e-d9ce-4c31-8d7d-59f857c95279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5216e043-f1f7-4d95-8653-4626b63d50a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aaa8faa-28fa-4cdf-9c7b-9148c9e93fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595b5dd8-8e45-4ad0-b8e1-0b5f31af2ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8612d5f-faa9-4ce5-8dc0-d44d4842c341",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4798446-1cdf-4e9f-9a24-bd7e9a9d6d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "703af87b-cd7c-4d30-8499-62ffc2672aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aff5be-2b64-42bc-b61e-9ddda4e42ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9eb8d6-713d-4d05-9670-1821b66806e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec046c2-0a2e-4d74-8a05-41668b545021",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706fef72-b089-4e21-802d-402947d611ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fab19df-09d3-45f6-9c39-14ea99f9472d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492f42ff-b80b-4e52-9303-d9b9a5e2b132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb995960-0347-4cae-93c1-dfc584eebd4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8473aba8-bec9-4585-877e-65bf953e6d99",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e148da86-614b-4b02-9d0c-f91c4efc461a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b3863b-220c-441e-8ba7-f235641a7b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55fdac8-7747-4e6a-80ab-1dd540923ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ad9918-2901-47b9-90e8-e3850846ed4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7552fa9c-2b53-46b0-85e9-d296e5dabf9c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08f679c-5c12-4076-b9b8-701a0a2979a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b90ad6b-eff1-4e4e-8d92-3302b147528f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d352d8-8f33-4752-bfd4-06afd0f5690d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143ba550-5e21-46f9-baa3-e6c40390c232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ac5f93-46fa-493e-9aea-0505ad00eecd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58b2378-2c09-4dba-a43a-801d7e43ac01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b6b713-3580-4af6-bbbc-d8b4d60062b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4480f345-6b32-4174-a9af-a4e162dd455f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732ebbe9-7cc4-410d-b0a9-b65e5aa263ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23240674-ec1b-4397-b489-22c977f37514",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524d9332-d0dc-447c-9f67-7cb323b88ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2721f88-c682-49dd-8c15-45a5e6f81f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a731771-f780-4438-82f4-7dc97619f9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be4f9e9-1f53-4ba3-b100-c1c7fc55ef05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b853e82c-9435-4876-943f-4ba4a83ebea6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488de054-10ee-4653-b673-2dfee688148a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e885a9-46ae-4771-9328-ff4fa0259585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c7f19a-ca9f-41c5-bf17-ca282e784b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac24eb6e-8b80-452c-bdb7-36381ceb95e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4801ef36-50c7-44f0-8bf0-43e0d281c880",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedd5893-5872-4990-a4b4-15b7cc17e260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ecef963-d9c1-4baf-99b7-fe6b89ddc13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9f285c-c496-4d46-86b2-d648fc862306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ce2422-fd07-4d9d-8743-9426d40c2d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939f3d66-37e2-48f3-89b8-d4c0f6440111",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76cbf81-72f9-4ffa-bee9-87cdf484158c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c6aefc-8a23-439a-be28-427afd7fdbdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa48c49-cdbe-4b13-be45-ee92c24f8171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38efdd4d-8962-4e83-bb36-d27b0eb38b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4940bebe-9edd-4202-b294-3fe8051b258a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1c569c-229f-4126-ade6-73d293e87a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c827b7dd-c5be-4518-9814-362e004c8264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a3a861-4a18-4237-af24-9b28fe2ed1bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16829626-4898-4b3c-a939-a00c7fd83f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da18e4e-1b7a-44db-bc11-581065e82a12",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a0c052-7cab-4ebb-8db9-32ab7b11d842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09cd60fe-4ff9-4af4-9058-302132291782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f12a81-1b9b-4376-aeca-121ab048ecbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90c2bb5-d79b-4685-bc63-2df25cb48206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5890e5b7-e4f6-4ea4-b2e6-612188ee5db4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea2565a-7a32-4ffb-9516-4b2e26f74bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481e0fed-3f02-48b7-88a6-e26b0883687d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a765307-6e4b-4780-89b1-4d44334abd89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a872e26-090c-40a4-afa9-6b8ac4f7ed7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040c08a7-49c3-4e1e-80bb-34f4bbf55d24",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18477226-c2f3-4546-a2f1-f2b7481b08f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5bb5c8-b4da-4736-8a3a-f56f978a7e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89eb94b3-08cf-44e8-a745-82a266f518d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f386598b-2e79-44ff-87f7-26aeacf54455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d85e4b-d816-4098-ac81-f519e41c96c9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14334a44-98af-468f-9b10-26522f69fefc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8f5352-bcb4-48e2-8c7b-6f6ff6b8c9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6bb3fd-1be0-401c-b247-5b91c1874b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afdb6e7-208d-4b7f-8304-d0f7715f5f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d474eadb-35e4-40a4-89b1-b639687b1ee3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0198b834-af60-4a82-9631-084bcdc03930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae548b49-5b72-4e40-b9d6-48c86a5b7fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d9e113-41ca-44e5-a169-17a987d4279d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb3f874-ee2d-4b35-af75-ec6c4e2d4e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2335674e-fb3c-4128-9da8-fbc5fb85c179",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f1b126-0ccf-4062-921e-c14ba7aeb91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aeb83bb-7b41-41b0-bbf9-e645ab7c50a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e56746e-2eb5-4bf2-842e-922d98ec6e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974ad7e5-00e0-47d8-9cb8-2dae768e69e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72c0969-f62e-4035-8b8d-6de51b5d01a1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33e346f-5bf2-45b3-a599-2c90f753a769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326e2a83-a22f-4206-892e-df2bdc66d1e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ddcc74-f035-4a14-8d62-6ed1a4fc19ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe91761-d7d2-4bf3-a1d9-13dccab4ffaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c8a9e4-04f6-48f5-a2b1-0788f85c2e51",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000541b8-50ec-4a54-8fdf-a7762ab06d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba42cefe-c6b8-4b64-8a49-4b83ed44e701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa47ad1-6cfd-497b-9e29-80f3360b6de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7965bd-fada-4cb6-829e-c50ebccfa978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071f610f-8425-40fa-a30c-11c88da85e25",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703af939-400f-46bb-83a0-c135c2efdc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882a894e-7f33-4e28-a58d-891b57e34277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b16273e-47c6-4987-b553-f90894e4fd71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97eac50-6118-411c-b462-d6cc696c5c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed937b9-492d-47f6-a286-908a63a92aa2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52dc2953-513b-451f-ab77-8da4234b1e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd2e201-3e33-4d89-bf53-ab3948afa797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50913ed4-a833-4c8f-afed-0ed3d7e23d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed00140-4d7f-447c-9b6b-d4459684cd93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca47d6ee-7f5d-4b71-bb5b-7cd1a0eed368",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde1fbf5-4199-4a8c-ba21-5bf659000fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd7a187-2a01-49ae-aaba-0351c2ebe949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcaa520-05f9-462b-b20c-0039f718b462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4381049d-46fb-4e6f-94f7-7375fcb4ed1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7927bee7-e862-46b8-9c5d-01bad9c1d986",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28f9060-6183-4306-9e91-6416cc14fb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae02fd4c-8400-43b1-aeb4-a034ad3fb939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3014a3ba-3891-4dfe-a979-037b91a947c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0a4590-83bd-402d-b67f-efc7153b7ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8723766-99d6-423c-864e-295ba3e07b27",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832cf070-7baf-4651-a951-f8b747823c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98518f9b-4418-46ea-afa2-a5d83fcd7ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dbe76e-8876-4140-bd68-e5618e371bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa02e6d5-e6cf-4302-8a78-81c980735d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636b068b-160c-4d17-a57a-6d3053024824",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b97925-e75d-46e7-9242-f8abeef8a078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ed1046a-b1fe-4178-a7d2-1f71d7088ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba3636d-6114-40f3-987b-f04d67b88f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf6ac5f-ff15-4a5a-83e2-9a99b1f3f52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38b1bed-952f-4f3a-9da7-80d63e4f9ac3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621cc457-c67b-4b28-bb1d-ca3104911674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b779fcc-9ba7-4f9a-9aee-e1edbf89ec75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194dba15-4e9c-4309-b862-2f4ed5f71e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b5cd4c-40c1-40ca-a106-bd08e7b7a3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bacb7e0-a7f3-4f5c-8e54-669e56e19176",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3071bc07-8a6f-4ea2-a703-f66aca4ea6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19115ba6-256b-4726-a5ea-c70f7c2cb664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49afae18-96ac-4542-bd90-21e340e3c9b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9aff7d0-0de8-432f-a138-0376098047fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1210d9ea-b647-489b-8dff-842d7a74d76e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c234f36-abb6-434e-b30f-c53979fa19cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2cc8d92-f361-4ace-852d-55bc45b37aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbfede4-d488-4589-9ffe-c0383e9697c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e0d9ea-8c60-4c57-b0a9-a8a21c9483a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde5c989-de67-4b81-a322-686d002e47ce",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9960c4-1904-4b36-8015-31496df83b92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d03123ac-f723-4d05-9ef7-d074e4234769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c09e328-d892-4935-97d1-083b2ad69d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6949b55c-52cf-4a6e-a993-f38c166320bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390a9d7d-672c-4eea-987b-2b5ccdff95ab",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f103de6-1a72-48b1-9d96-10d19a9fd4e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8cdeb98-7cb3-4f29-a53f-d3e2c2a7b005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62950440-331e-48df-9285-07998d61bfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb598f5d-8656-45a7-a0c0-393717381ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935fc30f-d9a6-4ede-9688-e63ab7169602",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2145d30-a100-49e7-af77-bcdfbad0a6e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4868262-230c-4fb0-ae28-9909f15823d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b78ed0-c4ed-4148-9f96-4a8ccda69563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ad3b33-effe-4e09-8625-2bdde6d49c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50571e07-cf8c-4fe1-844e-b8d60c9d8a46",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4ecd46-6e1b-4a8f-850b-efa5c696b966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8ec08aa-6237-4380-b849-9cc2e52987f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cfa1ae-76a9-43b5-98b3-b79a34d6ab5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f4e336-1d89-4a8d-90ed-ca2b3ce8f1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26654b12-f985-49b7-bcd7-78c6f49eb3c0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8770cb18-178a-402c-814a-34e6de03860b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4256c577-17c8-4bbe-88ef-27bff95e585a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91634e7-5293-461a-bad2-4b86ccbaa4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efe6ede-7867-480e-8d18-49ed8ea415e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ceeee44-1883-4a5c-9dd0-1534c6f5d1a2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081febb2-45d8-4cea-9e23-322fdb9029eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50f865d1-bd9a-4c39-a19d-00bfc6e8f1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49da770b-8471-4190-8e27-34c23cba16b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea32c013-f48c-44a9-a327-4b5f7239805b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c29f40e-b559-4abb-9796-0beb133ad340",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f21402-6ac6-48e6-b60b-4c4f80600ac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "389813f4-b90c-4d5e-b55d-9f41355ccae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e828864-e5af-4c57-a6ee-022a9afeb879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f0d9aa-c864-41dc-b1e5-72a90fff5b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab134d2-5455-46f3-9cb5-ffa22de5c176",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895cd634-7291-4592-b95f-086bc2e93634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca9fb28f-46a3-4180-a8f4-a7b569aa0598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7719fe-af4f-4a48-86fb-be5a9de7839f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706c64f5-ba4a-4dbd-a806-c807a5d508cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb813864-247b-4ea0-90db-4344d8def6fa",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ea5bb6-19fb-43f3-84df-25d8440bc9eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecdb37f3-4e92-462b-a37e-d3045729f006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba71e066-f6c4-452e-8bca-0059c915d11e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc915e20-f81b-4ef8-8376-02c5c778baf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3d4924-82a5-47ab-a777-6c415d7f69f9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ac3f7b-76ea-4ede-be7b-5b6c452531ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24aa361-d992-42f8-a0c9-e38533d2862b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce745964-6514-4203-a9d3-a3c50a908fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb5fc2b-d5d2-48a1-860a-9c239852f5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326b4eae-943b-4cad-8402-c48bed7eeb06",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3db56af-fc8b-476f-b594-dc4d08732ded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e85bf529-e95e-4b97-a65b-8b863c354d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b60636-391c-4f00-9b9f-0d00be618cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0741b549-0e5d-4040-bc00-0aa3cd4b92a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11bfc4a-ae3e-45d1-8fcf-db160b0e1897",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a88cbfc-5383-41fd-92b5-47e48d20d727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4015500c-c511-4435-a2d2-c63a93bacbae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56546e27-50ff-4709-8321-42211e9e7dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33667d59-e59f-44ad-926d-6b1c58328d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1ded0d-00cc-40c1-b0fb-6670e7bd88fc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3567463-56e6-41e3-aa1f-095f81bf5b39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65497b66-e110-4463-8289-d38a3d48b8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6834a376-34b9-49ea-88d9-028ca2223ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174578b2-cbc3-404e-a49f-392c3eea71c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3110e6b-5cad-4e38-bd0b-589135af74bf",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177d798d-478b-46b2-9b60-f7d4d2d49921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535b0d13-7bab-4134-8870-39d43aa63b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5152a8f6-17a6-4b7d-b4a3-a36b94860c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8499418-60b3-4b45-b14a-3109c1d0cfd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915b7cfe-f805-4ce4-9278-3105de583ac4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c63568f-5da0-4717-b3fe-ba5f32c18f3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89efcae5-5761-4139-a8b6-4ff664469eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35b57c0-dfdd-4480-995c-23d8bae89045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c1d949-02ab-465a-8b22-60fb190ff58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7533fcbb-fa73-4df3-ba51-a9044d54e868",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed03171-4756-4483-8a61-709d61dcdf8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae31182a-b2b8-4114-94e8-95819ecc93e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7816394-388c-47ed-b905-0aad61db48b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9baedcf1-2937-4870-8400-4a656b53351f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfecbaf6-3e25-4b16-b415-1fdb47f18b6d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688300ff-8928-4ca8-8d8c-4e278cedb848",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ca350e8-a560-4500-a93b-851d7bdaaf81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8d3bbc-5fd4-4168-bbf3-952744bc8d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73361f8c-9ca8-4a7b-8747-20e12d17f1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d778802a-64bc-487f-a3b4-1eb06f511d34",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f69c82-798e-4bd1-bf04-7b0850db8718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0257e5b-efef-4c80-9155-0562b58aa41e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df906087-65bc-4791-885f-c467ca67e7da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6afd0aec-e9f7-4e84-bd3f-638aed1f26ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d15ca89-df1c-41bd-8f64-95213207375c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326a7813-56fc-4e78-aa54-87615acdae55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afa1bd71-bf47-43b5-b4a4-39176e4aac69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12ce316-ca55-4045-9847-053371ca876f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af69059-76b2-465b-89c9-67c5fce9b0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3050e83b-8108-48a0-bfd9-6c5aca546b4c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5ac813-10f9-4eb6-9e20-903b6945271e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba76499a-9264-4c30-962a-f9f3c0240bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed42b398-e68f-486e-9588-fd832a87fc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f784f8-eff2-4cb3-a5de-16ed5868ba35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989c1aec-3b94-4f85-a880-920d54be34e1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79aad477-d6b9-4d61-8bb0-36490cbaf828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f53cf7af-1e87-4c08-b045-98fe24c96dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7809ea-d152-48f7-afa2-c5ded8ce9dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc737bb-914b-41ad-9051-6ca3678ccd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7d1444-987b-41ff-8bc1-be7d242f2dd8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748ca65d-1cdc-42ca-9b9a-6b7b778e4697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6c876ab-02d2-4ea3-baef-87a9a3fd1da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab86487-6574-41e9-977f-ca2c725b3666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4244de4-e95f-4083-81de-500e2a18dca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62423af8-168a-4bcb-823f-3da16d7dc015",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f48cf6e-74d1-428b-b851-7c43a35bb829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e68991b-4df7-4970-b80f-8f0e9af418a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a728be1c-0171-49c3-ac64-1bf5c8e0cfbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09650b41-b665-41c7-8c79-c9899210277f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11adbe1-8f8d-45d8-b1ae-cca9913ec986",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c29a1a4-a192-49a3-b9c5-6671a61620d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af92c385-3a97-4036-9306-079dfe03bf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8379c76-8ed2-4fa0-b511-2674140af921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b26be6d-94fa-4b09-bc86-7ebbc02d2867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bee7d8c-2412-4de8-a564-7a0eff7ada64",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb4ffb5-cba2-43bb-9e9b-90d16b6ed854",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d34ac4d4-431b-4cb4-92f1-826dec50f45a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166e5af1-0481-4d93-abae-63b39779ef04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcbb73f5-92dd-4bd7-baba-75fb4cddcf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cab03a9-6594-44a8-ba7f-18b31f6f6125",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfbd783-488d-489c-adb9-fa98a7f8918e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbf1cf5c-6212-4df5-8249-1f6e88b529b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81ef834-fa6f-45bc-a131-d4761a304c65",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8081340-c3c3-4c37-a389-3d407c302352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd22584a-e6d4-4b0d-87e3-95c05a9af8e9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be542af8-95b6-45a7-a455-44cb5173dbba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee3720e0-d87c-473f-a98e-dd2ddcc95f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ebf2c9-fce3-48ea-9a9b-0c6900e08b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5dc8f4a-05d3-4c86-9448-2c0b79b315c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b017878-6fd4-4e87-a1bc-84e0769823c2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9300090-af4c-462e-9446-bd46716dc6f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcf4512d-b8e8-495c-9e30-d957552ffd9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c36436c-9738-4289-88df-01ec5d548239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19d862d-de27-424d-b1b9-d078d4978bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5487d40e-da2b-4afc-b40c-d9b412e38c3a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911f835a-88b1-45b8-9e98-dd7d35b5e781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98ff26cf-b2a2-44f5-a94a-baeb794d9643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ceb226-d94a-454e-8aa5-0df494a0130a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d853bd2-f9b4-4edf-bc71-690b36a7d4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6d758a-e540-4334-95b5-9c7053f67748",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b773dcaa-5bb6-4674-8b8d-b43e0914d821",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1aaa0f9-0287-4c82-aa5e-6b9139156dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b77be7b-e1e3-4d2d-8bb0-6ba847fbbb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81eb4c6e-9152-494a-8d2e-e783610bb1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8678b11d-a0da-4349-963b-0e3a3a6ba1ed",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d13cd0-d525-42a3-aecf-9f027b8d67b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d49bbe66-9e6b-458a-8225-bc522838624e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26098837-29d4-4134-80c2-91dbdcd8ce8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fddbdb0-85d2-4a40-a7fb-bc8c2f2c2d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011d4195-a301-45b3-8d05-a7ed32f686f7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf2f0df-c996-4d7c-934d-d2db8994f146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c977083a-57fa-4ce7-a9d6-c799cd3add05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c306d819-f9e3-4b7f-b8be-611e6226d265",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4e17c7-8541-4979-ac6e-b2b373bace91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903cbc15-a1a8-4ce3-84f2-e6b53ec7ff8d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f0e641-682e-4948-bdd0-2750f4e03be2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c9b8243-b214-4b95-b9ff-a139ac0d4e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "820d6c27-33f5-4142-a1d3-723e12a5442a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616a4b45-cdb5-4b64-b902-b8ca210a3f79"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d5f8b55-bc0b-4332-8017-6a4d391f9cdf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dcb3a12-04f4-44ce-ab3e-fff294462f3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "809521db-1340-46c2-9bb1-78907b34576f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4707c30-f536-4798-b9a7-7c2fcc19719c"
                    }
                  }
                ]
              },
              {
                "id": "5a45c52d-ea12-402d-8da9-73f96f7712a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76b40404-96dc-471d-967e-5271bc51e986",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7d9e0c-8dfc-494c-8272-4090b58579b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8a651281-96e6-467a-9358-d6876407c036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43142339-3967-4407-8424-cbd8c177bf04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffc43035-1161-4066-a3f0-75745daeb449"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c016fe20-3926-43a7-92ec-2a6636d07370",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8debb5af-f93e-410c-9c34-a421efd13641"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "62d38f70-ea1a-496c-a28d-b2b81ef877dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "175960c3-9501-4a5a-8102-a434babab60b"
                    }
                  }
                ]
              },
              {
                "id": "50246b38-bad6-4aed-950a-415a42861ecd",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "91b8c28b-8758-41fa-8ff5-0d9f30d6e48c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b11e14-f6b3-4741-b2c5-c59c110b0f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "04a87627-425f-4d9f-bd0a-d0179cd82b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9e4a14-d02a-4b5a-ac73-dc2fd2b4d152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8509f22-6028-4b39-8b31-f8e418320513"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d7f1da82-d47d-4f64-a141-3061d0062d6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0c86b58c-8816-4e2c-aa91-20a98a022ccd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe270ff7-d83c-48d7-99d0-7600af7613e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7526498f-8d2e-465a-8317-7cf731d998b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98798844-a47a-4287-a05c-a3e375588a3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2d49d81-0fd1-4a75-97f0-95abb660c62e"
                    }
                  }
                ]
              },
              {
                "id": "b9d6c821-aa79-4645-8c2c-26f051ba203a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fed5218-4f9b-4bec-b638-4e5920dc6d11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a1c4d0ef-c3f0-43ae-90ff-c9656465e954"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a282486-72a9-4973-87fc-2882fa2b535b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ebcf1df-065d-426a-85b6-c0e8c283851c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d917e91-17a4-43d4-9e66-312bf19bdc0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b63b8969-d150-4027-849d-c398b6027a5a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5df6ddc6-cf43-4e18-8533-958949f12480",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe76d5ec-f349-47da-ac1a-851ef647ad38"
            }
          }
        ]
      },
      {
        "id": "68c23316-8ccc-4762-8772-cc9722f6aabb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d9d0fd7d-72fa-420e-bed3-39839717e988",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5549dd6-43b6-448f-8fe1-c6b9b496edcb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6dca11bd-e1bc-4d3e-9597-978b422e41f9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97749753-4f0b-4c61-a39f-ded78415d4e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fa4b770c-c509-4378-8172-fb879f7ae19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a549ad-bec5-4b70-9efa-7078ae9a3a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73ac1d25-f34a-4d18-a749-04cfb755cc15"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59d8fe8a-f3d3-409d-8498-8e4e176d2f8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d5cb3d1-38a0-47e0-b73c-17504510712f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "349f1b82-4a15-467b-b465-67996928321b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cd1d648-d091-4288-9c37-f59481c576b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddfb2f27-a1b3-4549-b607-27a76621b599",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "db016766-b643-4613-9894-5f0f8cf656ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebedcff2-08a4-4b34-b60e-19544c530cd4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "837d7ed1-d5f1-474b-8c6c-3bd617b13281"
            }
          }
        ]
      },
      {
        "id": "cd53e5f3-15be-44da-9cf0-dc5c99cb0417",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4ae6ae3d-c5b6-4582-bae7-e684984ec9ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "996a9252-ac5a-4f73-ba2c-6647f1b86c3a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c631e040-7878-4ddb-b5bc-cd5aae047f13",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2747776-cd52-4278-9b89-09e617c79617",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cdcab30-dfad-44b3-85a5-63d19bd5d914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452655fe-0852-45c9-8637-2fa7e4ec1263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d348c8a-3c2b-43ac-9cba-20e040ec85f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6e71197-143c-4e57-8b1b-61a7acf8b705",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8711ac3d-ed02-462e-953c-1f968c31d9e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ae439be-e336-4823-941d-f0f68b116584",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd1839a4-c740-4453-881c-c950b3d6cc6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5897adf-172b-404f-bbc9-8c1d26983304",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac569d3d-565d-45bf-9cc5-87835e14902d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9058679-c023-4f46-9466-53bd1c4ac412",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70c409b0-6d6d-49bd-9716-1949058cbbac"
            }
          }
        ]
      },
      {
        "id": "c038f277-b683-4485-9604-7808e461cbe0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "83df4c7d-f697-4d16-a42d-1a6515dcd2d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5aca9b73-8fff-428a-8063-914e8a8b3679",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3ea3917-4eb0-4c29-a11d-0c2ef1faefbe",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852d1b9a-6714-4434-9466-bb6324ebfdf5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e05b6d8c-3708-42f2-b362-3e17a1bcc72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e412982-0de2-4d28-b246-b9af5658125a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0195a45-943e-47c9-883a-eac32498f171"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8517bd62-cb6c-4a42-a9bf-2f04f8daa03d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72c5b7c9-8bf4-4bca-a773-07598c21a56f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b485878-d52c-4aa1-9bee-1be6526e05f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f880a869-2305-4d45-abb8-2549f8f95a45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24d178e1-9f4d-461b-a0d9-f7dfa9f9bc1d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63ec0e30-77ff-4cff-beb0-03ee33aebdb3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a00d8171-02f3-48c0-8f28-92795e1be712",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa46afdd-4b46-4ec0-b3eb-cd8fd30c4549"
            }
          }
        ]
      },
      {
        "id": "165b8d2f-4979-46ea-8914-82ced5f3c073",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc289ffa-5b18-4d95-993c-0bb17362e8ff",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6fbd08d-a41b-43c5-b680-18413f4e719a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e186fa52-f249-41ae-b770-37c60c506dbf",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73742fdd-653a-4278-b75d-70b4283e475a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b24bd66a-9545-45cd-9002-7bd7fa61dec0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.55158730158729,
      "responseMin": 12,
      "responseMax": 599,
      "responseSd": 76.59448800480735,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717893723703,
      "completed": 1717893748354
    },
    "executions": [
      {
        "id": "a859f341-8822-4493-b30d-5951934bde6b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "195b91b3-2e89-4e21-8176-e2a0db2e66d2",
          "httpRequestId": "ac88afaf-f581-4633-b5c8-7a2012aaae1b"
        },
        "item": {
          "id": "a859f341-8822-4493-b30d-5951934bde6b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "90f31b3f-a81c-4210-9be0-8ad6fbfc9d19",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "4d8d9ec6-2361-42fe-9867-0d471141571f",
        "cursor": {
          "ref": "0292ffc0-a936-4207-9f13-6e090713171b",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "79df73f9-da5f-4220-80b0-475b658e080d"
        },
        "item": {
          "id": "4d8d9ec6-2361-42fe-9867-0d471141571f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9c4c2cf5-841b-41dc-a0f1-1cb74074e032",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "ab867f04-4f62-417d-913f-6b3a307ac3c7",
        "cursor": {
          "ref": "8d3f060e-ffe2-4220-8294-43069f38dee9",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f8a8d0d5-c29f-4c03-80d5-94aabc87c2d8"
        },
        "item": {
          "id": "ab867f04-4f62-417d-913f-6b3a307ac3c7",
          "name": "did_json"
        },
        "response": {
          "id": "1acb34d4-4a42-4995-9103-19da25f19abc",
          "status": "OK",
          "code": 200,
          "responseTime": 325,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe76b378-750f-4c41-aa88-955f23ed3847",
        "cursor": {
          "ref": "e99b3674-220e-4b9f-9d7d-95c091d372d1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f3a2fa03-1188-486f-b742-0a1a17c1707d"
        },
        "item": {
          "id": "fe76b378-750f-4c41-aa88-955f23ed3847",
          "name": "did:invalid"
        },
        "response": {
          "id": "af70b849-69c1-4216-8589-31a111fd22cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe76b378-750f-4c41-aa88-955f23ed3847",
        "cursor": {
          "ref": "e99b3674-220e-4b9f-9d7d-95c091d372d1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f3a2fa03-1188-486f-b742-0a1a17c1707d"
        },
        "item": {
          "id": "fe76b378-750f-4c41-aa88-955f23ed3847",
          "name": "did:invalid"
        },
        "response": {
          "id": "af70b849-69c1-4216-8589-31a111fd22cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a78d21b-d3e7-4879-80de-e04ba6bca0d6",
        "cursor": {
          "ref": "a12314d1-a799-4ad1-800c-0fadb75d5987",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3bbf0d20-8fe7-4b3f-9369-5217f27e4b2c"
        },
        "item": {
          "id": "7a78d21b-d3e7-4879-80de-e04ba6bca0d6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d25b0aed-ca74-4ea9-99d9-b25a5fb1db81",
          "status": "Not Found",
          "code": 404,
          "responseTime": 334,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a93058f-dfdf-4ae1-ad4d-7d6a435cf3db",
        "cursor": {
          "ref": "66dc52f8-8f42-4d38-88f0-9f9c824c48b4",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "66f07f3b-a1e1-4dc4-b3d6-048d938d1da8"
        },
        "item": {
          "id": "0a93058f-dfdf-4ae1-ad4d-7d6a435cf3db",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "557aaf4e-ba6b-4f37-91ea-7db5358ccb34",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab645b61-9e0a-4ca3-b2d2-ee17c7e83fe1",
        "cursor": {
          "ref": "ca06d160-dd52-489d-8cb5-cb6cd271a778",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "936c45a6-8fc0-4bc9-943c-2e5a96f03610"
        },
        "item": {
          "id": "ab645b61-9e0a-4ca3-b2d2-ee17c7e83fe1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a76d24cf-9403-42d8-8001-754ad6636c23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7220717d-340c-4dee-a694-fa837c7ef14a",
        "cursor": {
          "ref": "0fbc836a-ddf5-4d8f-939e-2fe58f6eb8db",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c3c4019d-466b-4781-91e6-aa5ff1f121c5"
        },
        "item": {
          "id": "7220717d-340c-4dee-a694-fa837c7ef14a",
          "name": "identifiers"
        },
        "response": {
          "id": "88325d89-4f5a-4cb7-aec8-3941ceaa4447",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e30247-95d3-44f6-9fcd-408cd92c71f5",
        "cursor": {
          "ref": "d71cb4e6-ab08-4271-875f-91e68fbdceaa",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2f23b52f-b369-4575-9f4d-84c281e80171"
        },
        "item": {
          "id": "17e30247-95d3-44f6-9fcd-408cd92c71f5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f36f7111-58d0-4c31-8f2e-23db1047c25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8988245f-a1d4-4c7e-9841-e3e5e361bd05",
        "cursor": {
          "ref": "c8585223-6a73-455f-8e00-92bb128aaf27",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c4d0a517-5300-4df3-a2a1-87ffd500618b"
        },
        "item": {
          "id": "8988245f-a1d4-4c7e-9841-e3e5e361bd05",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4774312b-f202-424a-83db-f17ec3b549b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c785177-b2ca-47ef-8bd5-fb797defad06",
        "cursor": {
          "ref": "52c0ad05-4601-44aa-b091-7cb55af0767e",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2647806d-c43c-43b9-aadb-81ee14b69ac5"
        },
        "item": {
          "id": "8c785177-b2ca-47ef-8bd5-fb797defad06",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8f374541-6763-4e8f-a8f3-384abe850e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4061ef7-4041-465c-a235-e7c6a64ce004",
        "cursor": {
          "ref": "9e687e01-be15-45ad-a37e-6537c03a2d8e",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5e4e9e6e-0f91-4ffa-802c-3064d5fb23f7"
        },
        "item": {
          "id": "e4061ef7-4041-465c-a235-e7c6a64ce004",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5eb13b5a-a586-4916-a2b1-d08d65296723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e59c5ec-c1e0-4caf-818e-7702a6e30094",
        "cursor": {
          "ref": "485deffb-3b74-4b09-9c7f-e2023a9c2b3b",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c7c3d1aa-fa2e-48f2-b5c3-dae033f45b56"
        },
        "item": {
          "id": "2e59c5ec-c1e0-4caf-818e-7702a6e30094",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b4155b2c-0cbd-40c8-b5f7-ede0cd36052f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953ce97f-3f85-40a0-b675-5830127f78ec",
        "cursor": {
          "ref": "18f5c9a1-03c0-49e3-8292-a44ab29db5e8",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "10adddd6-fd08-47cc-adce-962ffb30a34c"
        },
        "item": {
          "id": "953ce97f-3f85-40a0-b675-5830127f78ec",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "12a929fa-0d1c-45c0-9c7a-facb63ac91c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6d302a-aa6e-489c-b850-f1c5a67bcebe",
        "cursor": {
          "ref": "4ba97a82-1038-4203-abdd-c154b07e5ad1",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0cdfd41d-c519-4a65-b4ff-5375d98ccf06"
        },
        "item": {
          "id": "2c6d302a-aa6e-489c-b850-f1c5a67bcebe",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c9aa6f72-0e05-4dba-8f12-be65e604fb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69dfbb0b-9361-4001-9b28-98ce0f0d973b",
        "cursor": {
          "ref": "ab412840-04a1-4c44-bcba-f88a7b5f2e1c",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "abaa1751-b9aa-4096-819a-48cf93fae3d8"
        },
        "item": {
          "id": "69dfbb0b-9361-4001-9b28-98ce0f0d973b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "09d8dbdc-51c2-4070-ab32-79791b218776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e845d7e6-7ce5-42d3-978a-f37740546fc3",
        "cursor": {
          "ref": "389cc83f-c310-4337-8023-27e3e4a0a97d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "58175aab-68ec-4e4c-ac58-0a7afb8ad040"
        },
        "item": {
          "id": "e845d7e6-7ce5-42d3-978a-f37740546fc3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7b346939-4635-4d28-914b-2b178ff3b4bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b30c39-62e2-4a2e-9804-de1e4e2c1b84",
        "cursor": {
          "ref": "857da97a-acf8-4556-a6ce-597dbe534dd3",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "05eaba39-b05c-4d20-a809-b6ea8ba42c5f"
        },
        "item": {
          "id": "39b30c39-62e2-4a2e-9804-de1e4e2c1b84",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ac5cb395-1bd7-48d1-ba8c-cdf82ff99337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cde170e-2c39-4b83-803a-a9efea81134f",
        "cursor": {
          "ref": "ac5d94d5-4a2b-47df-a426-43b89e298212",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b9af8bda-5f6b-47c9-b8eb-186d2da7acba"
        },
        "item": {
          "id": "0cde170e-2c39-4b83-803a-a9efea81134f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f5414d36-ec6a-4d60-8822-1610846102b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35925b79-b8f7-4de2-94cd-6d439fb8f8b2",
        "cursor": {
          "ref": "002be140-bb82-4509-9634-9cb7c993181b",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7a6d9e7e-7f5c-4970-8961-fd87add576f0"
        },
        "item": {
          "id": "35925b79-b8f7-4de2-94cd-6d439fb8f8b2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2a191f4d-1926-40f1-aff4-fc4bf78b6570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc4d48b-5867-4cbd-83c5-28ae055c15ac",
        "cursor": {
          "ref": "3e4b58d7-7131-4f90-b19b-0b2985302f55",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0810c271-69f1-46a2-8287-c56c3d95f744"
        },
        "item": {
          "id": "3dc4d48b-5867-4cbd-83c5-28ae055c15ac",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3e31ba4c-774d-40d6-bbbe-1049bef35d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2954dc1a-3cc4-48c2-af75-55ac541ff7bd",
        "cursor": {
          "ref": "378aeff2-2ff3-49c7-9b8d-361ff89fce82",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "741f0b1c-735c-46b5-b17e-5ff26f24fa6d"
        },
        "item": {
          "id": "2954dc1a-3cc4-48c2-af75-55ac541ff7bd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1c6755c7-2def-4df4-8ede-7fd3b6d159ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb236ae-d4c9-48e5-8c89-668ba0e69ffe",
        "cursor": {
          "ref": "c27cd5e1-820a-4a05-8111-85f95c6887c9",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6da121b5-2494-4205-a77e-1b445cd98744"
        },
        "item": {
          "id": "deb236ae-d4c9-48e5-8c89-668ba0e69ffe",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "075a9f16-5912-4565-84dd-61ebe99a6ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2558a476-3549-453e-ac22-84ed7e1b9a4b",
        "cursor": {
          "ref": "8e94fdca-ab9c-4619-8a6d-78dfc1b5b933",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d247cf23-df72-4b26-a0aa-6d494c819a5c"
        },
        "item": {
          "id": "2558a476-3549-453e-ac22-84ed7e1b9a4b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7d61c82b-457f-4806-b8d7-b27896219f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6621b9c0-2808-4497-9b83-c645522513fd",
        "cursor": {
          "ref": "88d1e27c-5cc5-4bf4-81f9-ed156a11fd37",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5fa3aa72-443f-4f1f-b613-5df1da87ed0b"
        },
        "item": {
          "id": "6621b9c0-2808-4497-9b83-c645522513fd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "971ab79c-4c6e-4ef8-b4c0-ef1f1647783c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabfcd7f-147e-4809-ba5a-155907111677",
        "cursor": {
          "ref": "ab26c967-868b-4d0e-bbda-a848a574990f",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "074c0fda-9ada-443d-80cd-23d3bf1c63db"
        },
        "item": {
          "id": "aabfcd7f-147e-4809-ba5a-155907111677",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "46daad03-7bd8-4a7e-bf82-c6edee68633c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01660c73-5601-4e0b-8629-5b5d8b244f43",
        "cursor": {
          "ref": "f433e6c4-dc83-481d-99e6-b3c35c08b412",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ed355ce2-a41e-4163-b4d4-f4b4186612eb"
        },
        "item": {
          "id": "01660c73-5601-4e0b-8629-5b5d8b244f43",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5dcf7729-9822-4e44-b0e9-e612102da9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc09021a-c66e-4e2d-9522-c21a365c61ca",
        "cursor": {
          "ref": "e3a20b9e-b21e-4187-a216-c307879be6bf",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d651f6c1-c2a0-4ad7-8f02-cc497b4e4995"
        },
        "item": {
          "id": "dc09021a-c66e-4e2d-9522-c21a365c61ca",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cf4a7850-291e-43ed-a7a8-2fb9d59a8495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92405f2-5fb8-42ef-bfb8-80cc68f3a845",
        "cursor": {
          "ref": "f228d111-c6ed-4081-98df-257a452c892a",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a2eceeb1-9a5e-4e28-9f02-e9286559f09a"
        },
        "item": {
          "id": "c92405f2-5fb8-42ef-bfb8-80cc68f3a845",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "db50cc1e-d400-4bc0-a51c-561ff372c431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99745cc-af9d-4acf-a838-97fcaca12602",
        "cursor": {
          "ref": "a30fe0d2-fcc6-4fb5-a262-343dc5a766c0",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "43bc898f-41e5-4832-86d5-c19dc5d0119b"
        },
        "item": {
          "id": "f99745cc-af9d-4acf-a838-97fcaca12602",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d4ded984-2f6e-430e-9730-0a22205ed38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2782d1a-319e-4aed-9e74-9b80977f6453",
        "cursor": {
          "ref": "ee0cd502-72aa-4b81-a0e2-77187b7d6556",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7cfd1262-c3f8-417e-9c88-49e62b9108d9"
        },
        "item": {
          "id": "f2782d1a-319e-4aed-9e74-9b80977f6453",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b6dbfbee-21d1-45fe-8c0e-3a3dbd62c4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ba1161-40ad-4275-a34b-c7c80c6f0dbf",
        "cursor": {
          "ref": "964f5684-a8cc-41b4-b603-fec86346e242",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f00c37f4-18e3-4308-ad71-d663ef4d5a04"
        },
        "item": {
          "id": "05ba1161-40ad-4275-a34b-c7c80c6f0dbf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "290d8e4a-8991-4170-a3b7-f1c5a235ece1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5600ae8b-aa5f-4a5c-9c91-b67eef1a5e88",
        "cursor": {
          "ref": "ebd9d5b8-1aca-459d-9d34-cb496eef4c86",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "90bedff3-3a3d-4696-8dfe-fc95ce618ffb"
        },
        "item": {
          "id": "5600ae8b-aa5f-4a5c-9c91-b67eef1a5e88",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d5f1a125-691c-4bb4-8375-6e378f81938e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63feb56d-845f-4c81-9d7c-da6fa8e5fd25",
        "cursor": {
          "ref": "f0d06b9c-581d-4bbc-8b15-52df61be06a3",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c8d957f6-e8ea-4440-ad3a-32f2e23f962c"
        },
        "item": {
          "id": "63feb56d-845f-4c81-9d7c-da6fa8e5fd25",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "94c625ce-5953-4a0b-bf5e-0323cec70427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f45eaa-765e-43c9-b822-63f20dc0ce31",
        "cursor": {
          "ref": "a18f507a-b23a-4e59-9d31-d817315b2c7b",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bf89745b-c8ee-4793-9c1e-0d5544b36527"
        },
        "item": {
          "id": "51f45eaa-765e-43c9-b822-63f20dc0ce31",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1bb527d2-3aac-420c-b90f-3dfdc10c6557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd469039-e417-43a1-9314-b8bc42b52d82",
        "cursor": {
          "ref": "8f660ded-79cb-48ea-a053-cbe82e7ac4e0",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fc8b475a-23fa-44d4-9442-a5db097107d6"
        },
        "item": {
          "id": "fd469039-e417-43a1-9314-b8bc42b52d82",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d5bb396d-2247-4f51-9976-26a374255773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383e0557-4f57-4d71-b086-412f38acbd4b",
        "cursor": {
          "ref": "da1c1bd4-1ff9-4e9b-9832-ee6239fc2d28",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f8d22183-f5ae-40fd-9009-74212dc366f8"
        },
        "item": {
          "id": "383e0557-4f57-4d71-b086-412f38acbd4b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b53ddc23-de59-44ac-9aa3-56d9cc00b840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053633b0-a5b9-47ba-98dd-7db81bc50306",
        "cursor": {
          "ref": "1d5fd4d9-3548-4db7-be08-1d35d4d7252e",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4983394d-71eb-4cce-af5b-6f258df9a813"
        },
        "item": {
          "id": "053633b0-a5b9-47ba-98dd-7db81bc50306",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5e165b4e-277b-4663-bc0f-dd63a30cffab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84a5e25-74d4-4d12-a81b-7a3c98d34616",
        "cursor": {
          "ref": "d5bf7c88-5873-4b33-84c0-fdd83ae47ec1",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1aaad86d-a944-4d90-9a65-9ddc80d2b28a"
        },
        "item": {
          "id": "f84a5e25-74d4-4d12-a81b-7a3c98d34616",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "48a29d35-05d8-4440-83db-41a4e92c2d92",
          "status": "Created",
          "code": 201,
          "responseTime": 599,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b7fd442c-b63e-4663-92d3-0924ac869bb8",
        "cursor": {
          "ref": "5b26c36e-507e-454f-9d33-41f181d577dd",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cc1ab4f8-a58e-48a6-8184-1da0830d4067"
        },
        "item": {
          "id": "b7fd442c-b63e-4663-92d3-0924ac869bb8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8d7e5b46-2a16-4212-ad59-167d92bbbe0f",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "68435ac0-a8cf-4275-bd36-00dd14507515",
        "cursor": {
          "ref": "86c968f4-4af1-4029-8d81-00a3dcd01a3c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d562351f-6f40-465b-ba33-7bfbbe571b81"
        },
        "item": {
          "id": "68435ac0-a8cf-4275-bd36-00dd14507515",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dd830777-ced1-43e9-ab8e-129780691f16",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5cd45168-a700-40e8-a9f3-a74a0cd2f2cc",
        "cursor": {
          "ref": "11bed7a7-a8a2-442b-a1f0-9e6b80fc676a",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6409450c-53d1-4363-a19b-473a90e7744f"
        },
        "item": {
          "id": "5cd45168-a700-40e8-a9f3-a74a0cd2f2cc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b4e0d535-804e-45a1-83d7-13549481384a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb0887a-1c09-4e88-92c4-6e8f83f3198e",
        "cursor": {
          "ref": "e8a0c444-1548-4b9c-9027-0faa64dcf32a",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "115239ed-c66c-4e0c-b503-f33cb0e53d06"
        },
        "item": {
          "id": "fcb0887a-1c09-4e88-92c4-6e8f83f3198e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "399a4a50-bfea-4a8c-a125-b6903276dc80",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e69f7f4d-d4ec-4a5c-96cd-9e9b59ae80cb",
        "cursor": {
          "ref": "534aadc9-fdef-4f74-96d9-44d0965436ed",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "200a3e03-a32c-4481-ba56-5c4b6e618f65"
        },
        "item": {
          "id": "e69f7f4d-d4ec-4a5c-96cd-9e9b59ae80cb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fff84b60-c503-41df-b500-fbc9b6ea47ea",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "da450eb2-447a-4568-a1dc-bdc86024d3a0",
        "cursor": {
          "ref": "2201dbb3-1be8-42ae-bd78-b01eaf6197b9",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fd0f907e-f177-4ee9-841d-8645cba804a5"
        },
        "item": {
          "id": "da450eb2-447a-4568-a1dc-bdc86024d3a0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ab40e797-6b11-4240-869c-e6e08adf0a04",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f2992aa9-daf6-4dcc-ba00-1f176ba43d80",
        "cursor": {
          "ref": "f5553c3f-9072-4e12-be9e-48ad90e7cd0b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e81745f9-2132-47c3-b103-cd2c98daed2e"
        },
        "item": {
          "id": "f2992aa9-daf6-4dcc-ba00-1f176ba43d80",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "535cc977-dc27-4e8a-9ab6-5e9f34dbebe4",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "42d83cf8-de50-48e4-860c-c5a4291d9b38",
        "cursor": {
          "ref": "9f24bd88-bc7e-445b-b653-43282ee132c6",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "70628fc1-f57d-42cd-9f13-d8cc3e08fdcf"
        },
        "item": {
          "id": "42d83cf8-de50-48e4-860c-c5a4291d9b38",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fd716fc0-e5e2-40fb-a578-fa06d70a0934",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0c7fd4bb-7e01-4855-8071-fbd87c0045f2",
        "cursor": {
          "ref": "99d423c7-2fa2-4152-b9cb-61e38ae815c2",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "282e59bd-9154-49a3-807c-8080320f4bcc"
        },
        "item": {
          "id": "0c7fd4bb-7e01-4855-8071-fbd87c0045f2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ab41739a-fdc4-4724-a1f1-e18e01af2f51",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0e6db82f-356c-473d-a591-9c2879e78dd9",
        "cursor": {
          "ref": "052e4378-f4da-416d-ae2d-badb8a22aee0",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c9e25626-8484-4b94-81e7-fff3a9a7a553"
        },
        "item": {
          "id": "0e6db82f-356c-473d-a591-9c2879e78dd9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6a8708db-b4f2-4ce4-9faa-280fb30adda3",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "415f4f6e-0a97-4cde-8c34-c0eaf9ecd7ef",
        "cursor": {
          "ref": "0eb8ce31-87b2-4e29-9f22-c6b6521e6802",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "13139a06-410c-45a7-8db9-4cec524ecc09"
        },
        "item": {
          "id": "415f4f6e-0a97-4cde-8c34-c0eaf9ecd7ef",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "710fb27e-c428-4df9-b389-93429025a759",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4ffc8f9d-9fb5-4609-8b3e-19bbd9bb16b3",
        "cursor": {
          "ref": "0d22791c-7617-43a9-973e-349fa6bc7476",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "095b4886-703d-4290-b58d-876b9781b5b5"
        },
        "item": {
          "id": "4ffc8f9d-9fb5-4609-8b3e-19bbd9bb16b3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "29571fd3-239b-4bbc-8fc8-199ed8165526",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "37673f53-603d-4645-ad6d-d58991b6b7a7",
        "cursor": {
          "ref": "7712ddc3-9fef-42ed-bc07-4f378f584bca",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3ba63373-9db0-4d69-8d80-c7588398d06e"
        },
        "item": {
          "id": "37673f53-603d-4645-ad6d-d58991b6b7a7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6870a300-f6cf-47f9-822a-e377e8da17f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b894ec-4a40-40af-add4-824fa09c9bad",
        "cursor": {
          "ref": "61f2d324-b3f1-4c1b-81f1-751664a0eaa7",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b344b3b8-9836-48fb-9001-67eb8a9c83ee"
        },
        "item": {
          "id": "63b894ec-4a40-40af-add4-824fa09c9bad",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0c8869a6-ac88-483c-8e1b-f683776a6044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96214d4-210f-4147-9ddf-6a3354df7cb0",
        "cursor": {
          "ref": "e25c5ad6-d7d7-413a-bd6d-63abd847bdcc",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8fab5f9c-f285-4cc4-9cc6-12fc568761db"
        },
        "item": {
          "id": "e96214d4-210f-4147-9ddf-6a3354df7cb0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3534ca29-b3e5-42d8-8203-b7ff4495e5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641d13a5-717f-45c7-9cd5-a059818d9816",
        "cursor": {
          "ref": "fb8b464f-7101-4a4e-9219-a2f5106ca28d",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a2fa383a-0d4d-43ee-a951-2a936dcde450"
        },
        "item": {
          "id": "641d13a5-717f-45c7-9cd5-a059818d9816",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a5c73fe9-e6c9-43f9-81c3-3627ba5648c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899099e6-2877-4911-bdfe-6cbcfe2bdff0",
        "cursor": {
          "ref": "8f64d700-e2a7-4841-97be-ab84f57ebf0d",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "85fe4c88-1158-4c78-aac1-98c919e5d2f3"
        },
        "item": {
          "id": "899099e6-2877-4911-bdfe-6cbcfe2bdff0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d89d9972-9d22-4fb5-a18c-b961975dda05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40174ad7-06bb-46f2-b951-f5c52e42a647",
        "cursor": {
          "ref": "4368609f-c6db-4ee8-b10e-205a2bda5af2",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c1b5a016-4fbf-49ec-bef6-29623f2cc109"
        },
        "item": {
          "id": "40174ad7-06bb-46f2-b951-f5c52e42a647",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3e148be3-8b90-43af-bce4-d35f48472cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0a532c-7ab8-42fe-9efc-f680bde7678a",
        "cursor": {
          "ref": "0ec07071-f846-428b-bcaa-314c0b349dce",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bc86eb33-df89-4f2b-8d89-339eaeb6372f"
        },
        "item": {
          "id": "0b0a532c-7ab8-42fe-9efc-f680bde7678a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "36e76c8a-2d75-4d77-8547-ba1b0a39bdb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c0e222-c2b3-419c-918e-7e27caa65297",
        "cursor": {
          "ref": "8cf1f676-78da-431f-96ca-76574664e4f0",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f59ab5d4-04fc-4fcd-a527-086f462b6da3"
        },
        "item": {
          "id": "b6c0e222-c2b3-419c-918e-7e27caa65297",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "89d2b887-43e9-48de-b804-48c8c7fc4406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faae9799-a3b2-4de3-8ef0-7b08dbdf3930",
        "cursor": {
          "ref": "b28ed3e5-3886-4096-b1fa-15deaa473fcf",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2de9e172-7ccf-451c-b932-83ea7e73b753"
        },
        "item": {
          "id": "faae9799-a3b2-4de3-8ef0-7b08dbdf3930",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "27a01f80-2b31-4d88-99d0-804a114d4633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be67873d-7b38-427d-8e22-4fa7111fef6b",
        "cursor": {
          "ref": "d2ba6b0c-7332-42bd-9fba-f36c4b145025",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "35ab7016-7df1-4490-b9c7-f010f484815c"
        },
        "item": {
          "id": "be67873d-7b38-427d-8e22-4fa7111fef6b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9f7cdcfa-edd0-4409-99e3-7658153b4f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3690866-6075-4f9f-af00-9919c12ed1b7",
        "cursor": {
          "ref": "76486185-54f3-4e41-9199-e2658c36ed92",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bc543da4-ac37-4b9b-8ead-aaab5fe87a48"
        },
        "item": {
          "id": "f3690866-6075-4f9f-af00-9919c12ed1b7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "aa152c7a-4a4c-4b38-ac96-f8d9094963ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99349f2f-333c-4302-a775-2e7780d86558",
        "cursor": {
          "ref": "29b55a7d-a434-47f2-8ab2-372618b7dcb9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f88fa833-b90c-4128-9e64-468c22687bfc"
        },
        "item": {
          "id": "99349f2f-333c-4302-a775-2e7780d86558",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3038e024-01fa-4e79-88b2-cc66e8b0d5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2eceaf1-1a80-4c5e-8fb5-a053acca93ff",
        "cursor": {
          "ref": "0c256c25-03cf-4de6-805a-7a1456174bb2",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6e76becb-8e82-458c-b94d-692ccedb9931"
        },
        "item": {
          "id": "e2eceaf1-1a80-4c5e-8fb5-a053acca93ff",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3adaecdb-9b31-4843-ba4c-6f6cff2e3e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016edc5b-ad5d-43b0-956a-224c626dba80",
        "cursor": {
          "ref": "a7c819f0-d4d3-477a-a45c-fc8dda2dbaae",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9bb6e4bd-4191-49d9-9a7c-e869f7dd8cad"
        },
        "item": {
          "id": "016edc5b-ad5d-43b0-956a-224c626dba80",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "466e4b06-b669-4ae1-9186-5f79e08c3637",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "bdadc05b-4969-4f69-b11d-60ec5e6a08f3",
        "cursor": {
          "ref": "4f967a1a-fbfc-4f0f-9908-90fe53e10aae",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f1283353-ac3e-4015-9dbb-ebfdfdd484de"
        },
        "item": {
          "id": "bdadc05b-4969-4f69-b11d-60ec5e6a08f3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9209db2d-4c2b-425d-9bce-4a358840abbc",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "59b6794a-89f6-450e-8f93-0a6fc4b8f2ad",
        "cursor": {
          "ref": "7645bae0-3cd8-42b0-8dc6-e68bb3a9a933",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e230e6ed-985f-4188-8338-0a270aa7de91"
        },
        "item": {
          "id": "59b6794a-89f6-450e-8f93-0a6fc4b8f2ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "83c6f34a-dd4d-4b54-91cb-64cb941ebbe5",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5c73ed30-e266-46f4-a6e4-b47c3057cdbe",
        "cursor": {
          "ref": "14396e41-9356-49f5-b0ee-37e1e89e5081",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e829c1c1-17c2-4755-9a4c-e53074b0c795"
        },
        "item": {
          "id": "5c73ed30-e266-46f4-a6e4-b47c3057cdbe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a4fd5396-098d-4231-9228-3843dce8f689",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "cd016737-a4d0-48bb-93cd-b79218b2a478",
        "cursor": {
          "ref": "291f34bb-0847-493a-931a-f1b8355dd19c",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ac93d2f9-79a8-40c4-8d5c-6ae852d0f693"
        },
        "item": {
          "id": "cd016737-a4d0-48bb-93cd-b79218b2a478",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "be6d57f9-c97f-4657-8314-8487d5a892ed",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2f50ee71-f7db-49c8-8567-a9a4c6997851",
        "cursor": {
          "ref": "3c4a4301-6c9b-41cb-b65f-7f1ae143cf62",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4a052129-ae04-41ca-9149-e31b2211ce5d"
        },
        "item": {
          "id": "2f50ee71-f7db-49c8-8567-a9a4c6997851",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "de84a464-b730-4ef2-9458-58e2f9b1d8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64229bbe-e984-495b-8479-a62b4d52125a",
        "cursor": {
          "ref": "d343ee16-2be8-4512-8d51-018f6dd2e894",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4b7daab0-ef5f-4cd6-9271-e796376a9329"
        },
        "item": {
          "id": "64229bbe-e984-495b-8479-a62b4d52125a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bade4d8d-f44b-421f-b0d1-f178650eb3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5c8df3-23a2-4b4d-afd2-8cb4e80f7b23",
        "cursor": {
          "ref": "5b53a1c0-8f38-477e-b900-3d28bb9becae",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6af6b050-ce6e-4e8d-95f5-cf65b5fc7eb2"
        },
        "item": {
          "id": "4f5c8df3-23a2-4b4d-afd2-8cb4e80f7b23",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a9f3933b-eab7-4c93-a874-4996fdc3e3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f6ad8f-2230-47cc-91a3-224a0b9e8f58",
        "cursor": {
          "ref": "ef58f1d6-b57e-4ab2-ae55-b5b198ba6c69",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cb575590-6e71-4280-916d-36b7d77b32ef"
        },
        "item": {
          "id": "17f6ad8f-2230-47cc-91a3-224a0b9e8f58",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "441889d4-d55b-4ea2-97fd-95ffd5f1abb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8294255-ad03-4d89-8e42-9f31f4f13cfe",
        "cursor": {
          "ref": "1ac7924a-a2bc-4034-9fb3-e17c176bcf2c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a88e8e76-1491-4211-8f99-b4d901c8332b"
        },
        "item": {
          "id": "a8294255-ad03-4d89-8e42-9f31f4f13cfe",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4f16a2bb-0ba1-4fc0-b118-158deb511389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81fb0fb-fd3f-4417-87f9-ed680a571ccb",
        "cursor": {
          "ref": "b450f8e9-a093-44bb-83df-9cdf6959fe48",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f3bbafb3-e4f0-4c53-abf1-e09d5ea4212b"
        },
        "item": {
          "id": "c81fb0fb-fd3f-4417-87f9-ed680a571ccb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1861aa1f-e913-4d30-9407-c97cf2bc7b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d6a4e5-8c4e-4ede-8e14-ab5efa8a659a",
        "cursor": {
          "ref": "c4c0b5ce-4a4f-4d0a-80e6-a5cf9d7ea9a3",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6d3c2b7e-1f3b-4f20-841c-9cc56f15c1bc"
        },
        "item": {
          "id": "14d6a4e5-8c4e-4ede-8e14-ab5efa8a659a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "35c6efa1-119a-4b23-875f-eb699b21252b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8992dfa1-8e5c-47f0-b644-e622438ff8c7",
        "cursor": {
          "ref": "201ed0cb-9645-4841-ba42-f9a777e6aac4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e1be2e19-b9bd-40e6-88f7-7c2a197ea9ef"
        },
        "item": {
          "id": "8992dfa1-8e5c-47f0-b644-e622438ff8c7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "15ab71f9-b0ba-44a4-96e8-8e0e6815dd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529ec5a2-7b0f-48f3-b7d5-5458abc8a957",
        "cursor": {
          "ref": "ccf2dbd7-b877-41c3-939f-70fa7f5d538c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e873f955-cada-4d00-a068-3eb83434ae69"
        },
        "item": {
          "id": "529ec5a2-7b0f-48f3-b7d5-5458abc8a957",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "00fcd540-85d5-4e5d-8ef7-8a4b2766fc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b30fd04-fe01-4612-8b74-b01ff84abe6d",
        "cursor": {
          "ref": "a521a08b-faa5-4429-a58f-80fe863f742a",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "703f7d81-3260-44aa-bfca-dae27e4ce491"
        },
        "item": {
          "id": "6b30fd04-fe01-4612-8b74-b01ff84abe6d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6b780120-d380-4e71-9d7e-44a455189cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bf8848-c75c-486a-becd-dc17793c4de7",
        "cursor": {
          "ref": "9a5a1d11-3194-4d44-a63e-d9b86d09a9fd",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a4d1413a-4dfc-449d-b05e-19c2257fb030"
        },
        "item": {
          "id": "77bf8848-c75c-486a-becd-dc17793c4de7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ed1eb8ef-30e5-45fc-8470-8edd6435b84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b4f655-96f4-4d0c-bf67-596de56d3179",
        "cursor": {
          "ref": "5b32a82c-f7e5-43a3-8811-6d7650208195",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "29f8375f-8342-4bc5-a29b-18f5404c2db0"
        },
        "item": {
          "id": "23b4f655-96f4-4d0c-bf67-596de56d3179",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "acfdaf8e-f7ab-4d38-88cc-7830ae8534a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05660bf-e699-4168-9127-954c19f33ae7",
        "cursor": {
          "ref": "3932793d-a83a-4dfe-9318-7cd312d7b0f7",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5cd414ae-00df-47e4-b001-96891442827b"
        },
        "item": {
          "id": "c05660bf-e699-4168-9127-954c19f33ae7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7cd46ea6-4a6f-4a2d-944a-6006fcca03eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd73c471-ed2c-426c-abec-7bd2d904b3a9",
        "cursor": {
          "ref": "1fe4c2a2-4ab5-4794-8866-47e6ea3301d2",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "208b2156-3950-457c-a7b5-2ecdf5453a5f"
        },
        "item": {
          "id": "bd73c471-ed2c-426c-abec-7bd2d904b3a9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ac2650cd-d040-4656-ae51-47e9d83a40e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e92c6a-5ab1-43cd-aa23-fd4842e4b620",
        "cursor": {
          "ref": "d9dd024e-851d-4989-8842-ab34d46a6c14",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d022b788-7e41-4315-a0fd-057ca7ff2ab4"
        },
        "item": {
          "id": "98e92c6a-5ab1-43cd-aa23-fd4842e4b620",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "37f609d8-f1c7-4493-a72b-fe6db1fdf6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b3b2b9-e0be-4993-96c3-84b57975e08f",
        "cursor": {
          "ref": "233b63d4-c58c-4b01-b109-9e7af35c3df5",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1452fff4-16cf-4192-a8cd-34170c2401c0"
        },
        "item": {
          "id": "a1b3b2b9-e0be-4993-96c3-84b57975e08f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "89bc9f10-98a6-4680-b34f-9b5c75e742d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc76dad-e61f-4ace-8a81-2ab38ded1e05",
        "cursor": {
          "ref": "2a800e6b-92fb-4ecf-9928-b69e86579bec",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0d03eff1-8e9e-4b55-a5e1-c6769e1ecb7d"
        },
        "item": {
          "id": "9cc76dad-e61f-4ace-8a81-2ab38ded1e05",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0a0c6847-818e-44aa-b21e-e394e3fe2032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d92bd91-31c4-4100-b8c0-a733dd94b802",
        "cursor": {
          "ref": "f4f2db4f-bc8c-4656-b9c0-9642ceb9f6f7",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "50d771fd-05dc-49b0-80e1-56776a6fd990"
        },
        "item": {
          "id": "7d92bd91-31c4-4100-b8c0-a733dd94b802",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "779902a5-fdf3-4ee7-a063-f8283d97bb4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3137db54-7dfe-4aa8-a1c2-04ea471bbb6e",
        "cursor": {
          "ref": "303529af-bce6-4a59-b871-6f5cd644433a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8eed497d-ac12-460c-b0d0-c9a89bd77813"
        },
        "item": {
          "id": "3137db54-7dfe-4aa8-a1c2-04ea471bbb6e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b7feb0c3-e83a-478b-bc7e-790eebf33cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c053269-16f6-4e8d-b4b6-b73d3097bdcc",
        "cursor": {
          "ref": "bf5d04f5-52d0-4670-941f-76bd930a9d71",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3c6479f9-b4ea-4d91-9358-97bd4e31047c"
        },
        "item": {
          "id": "9c053269-16f6-4e8d-b4b6-b73d3097bdcc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "66f4e004-7174-47d7-9857-a7af58097d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88eb16b5-5039-4e7d-b664-6b0f4c6a2420",
        "cursor": {
          "ref": "b532dc7f-7740-4390-bcc0-42dbf1a1cbd1",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "70e88987-7527-4568-8641-ecc0721c746a"
        },
        "item": {
          "id": "88eb16b5-5039-4e7d-b664-6b0f4c6a2420",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "53e1970b-868a-459d-ad26-07f503891a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8649ef-d305-4bb2-b4e7-6d4dbe670a16",
        "cursor": {
          "ref": "9b8f7c5b-2c77-42de-acee-0ba71d49b41d",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "13d509fa-aecf-4594-af2a-f0aad32da48e"
        },
        "item": {
          "id": "5a8649ef-d305-4bb2-b4e7-6d4dbe670a16",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "552b6e6b-b444-49e5-a027-f83382e7e4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f37d7ca-f994-493c-80cc-ec9e5e5618c1",
        "cursor": {
          "ref": "ae6cdd25-2dfd-4472-ad65-10b348499994",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b64bca74-9a32-4d06-883a-c61a94785fc6"
        },
        "item": {
          "id": "0f37d7ca-f994-493c-80cc-ec9e5e5618c1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ced06ff0-6664-42ad-81e6-00cae48b1007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c196961c-1cc3-4acc-b83d-988b105d5c39",
        "cursor": {
          "ref": "faca3bf8-6a34-4aa4-92e0-02441b413940",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "18f7762d-9874-47a6-9641-16ef0e653002"
        },
        "item": {
          "id": "c196961c-1cc3-4acc-b83d-988b105d5c39",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dd90ad68-eb41-4c87-bdbc-081f76b567c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0beae2a2-f7bf-4956-9086-12e137dce8f9",
        "cursor": {
          "ref": "11eb432f-fe40-4761-a6da-da6c7ce5da73",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d8afbe35-2ee1-4e23-890f-bcc883ce9ef5"
        },
        "item": {
          "id": "0beae2a2-f7bf-4956-9086-12e137dce8f9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3100aba3-0ca7-4d32-8173-ec508d692df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd99a8c-f1a5-4d2e-bba2-434cfd65d91a",
        "cursor": {
          "ref": "904b6330-aaad-4898-9e40-cb3bd54b8951",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "524104a0-244c-43c0-9f83-b487828e06a3"
        },
        "item": {
          "id": "4bd99a8c-f1a5-4d2e-bba2-434cfd65d91a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5c7a1598-e028-4677-b1f6-aae519c0eac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da9fe4e-6b1b-430e-8c73-aea284aa00bc",
        "cursor": {
          "ref": "afc70199-741f-4389-95d7-40474f26536d",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "78cea254-19c7-4459-84f4-ceeac23d68b3"
        },
        "item": {
          "id": "1da9fe4e-6b1b-430e-8c73-aea284aa00bc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a55e701f-9705-4410-b783-789516f73590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524ad426-e69e-4680-ad80-7983073efcb7",
        "cursor": {
          "ref": "41a2258e-dbff-4ab2-a579-c795c5d2e06a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e9b2d88d-4566-4339-b38e-347d215ca81d"
        },
        "item": {
          "id": "524ad426-e69e-4680-ad80-7983073efcb7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "84d1b43b-3f1a-45e4-84d8-f376c0d8f3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681bd641-cc82-476c-879b-b71d65cdfa14",
        "cursor": {
          "ref": "cef6180d-3804-411b-94b1-dd76fc08fb6b",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9f6d861f-841a-4bf0-9df3-b8f113300ca5"
        },
        "item": {
          "id": "681bd641-cc82-476c-879b-b71d65cdfa14",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "17b95449-5921-46d3-b034-9a247f66a50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d69a943-15e4-4afe-9d35-501afb86010c",
        "cursor": {
          "ref": "41fff5c0-95ee-4c6d-9d92-3b9e704a9d5e",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d2992a39-5c42-400b-973c-70a82c8ed717"
        },
        "item": {
          "id": "1d69a943-15e4-4afe-9d35-501afb86010c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "308ddebe-7eeb-4d95-ab4e-468c5094a9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd264131-a59e-4054-aef8-a2a8b00fbca3",
        "cursor": {
          "ref": "73dc2b10-b871-4311-838b-8c36e0ecd999",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "788e37b3-a4e2-45fd-adbb-5962339093b1"
        },
        "item": {
          "id": "dd264131-a59e-4054-aef8-a2a8b00fbca3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8b2b6e31-152e-4031-bf64-50cdc5cc42d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a10dfe-0280-49e8-813b-80ed90de59f4",
        "cursor": {
          "ref": "6750e94f-eb11-4f04-8251-0392331fead2",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "67b1b7e5-2766-46ff-a3de-bbbd5409dcf5"
        },
        "item": {
          "id": "18a10dfe-0280-49e8-813b-80ed90de59f4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "19ea8c15-7dd3-423c-ad74-d158224093e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20930834-a245-4ab8-af8f-52be6ed2c959",
        "cursor": {
          "ref": "457a0670-27b7-4cce-ba6b-c5606a4b9097",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a79160a5-e544-4e32-a775-cdee2481d49e"
        },
        "item": {
          "id": "20930834-a245-4ab8-af8f-52be6ed2c959",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c16c1e00-384a-475e-8f4f-47a64fa4a1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "788f02bd-dab1-4586-be68-dfcc8b4aa147",
        "cursor": {
          "ref": "65d45966-1b0d-4c22-9680-47ea6ca5440a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "73a47359-a5ce-471d-974f-1568fb359c50"
        },
        "item": {
          "id": "788f02bd-dab1-4586-be68-dfcc8b4aa147",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4d13e869-3862-44f8-a194-7b97af9f65e9",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9988c68b-1d79-4795-a7ee-1cb5b23eb9ea",
        "cursor": {
          "ref": "9c1831e7-81c5-4343-9f65-42df2aa92f38",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "87fa803a-54a1-452f-86e9-0a28eda41946"
        },
        "item": {
          "id": "9988c68b-1d79-4795-a7ee-1cb5b23eb9ea",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ec422687-8e7b-450b-99f5-da8b57c85b16",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2390566b-86b3-4524-90f3-3b85529df099",
        "cursor": {
          "ref": "bed5d634-3979-4f39-97f7-65187fa0e29e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a8cc0165-72a0-4031-9684-86182bdeaed1"
        },
        "item": {
          "id": "2390566b-86b3-4524-90f3-3b85529df099",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f7aa2b5f-aceb-4a3f-99aa-28b2b5ed9eeb",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a155c708-39ef-46be-9100-6cce56228967",
        "cursor": {
          "ref": "bccf607a-3bff-458a-a82b-59b898bb6118",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "99646a28-4e43-4ae9-a2fa-d18557fda3fd"
        },
        "item": {
          "id": "a155c708-39ef-46be-9100-6cce56228967",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "51295033-0dba-4ad9-8892-fd8c919906d6",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c048555b-3de9-4838-9753-66fbba0f6484",
        "cursor": {
          "ref": "ef238957-fc3a-463c-a0a1-a865b9dbc6d5",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "180adb83-7304-4ac9-a71d-af67d8aaf437"
        },
        "item": {
          "id": "c048555b-3de9-4838-9753-66fbba0f6484",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "13ac5d63-ae08-4b4b-bbf3-829351a781bd",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-09T00:42:17.570Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-09T00:42:17.570Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0b843264-d94a-4d84-a9b7-9ea5dfa5a729",
        "cursor": {
          "ref": "ae56b056-bcf9-41a6-be9f-c2d962022157",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f373bb46-c947-453a-8c09-ad43ad7e4f04"
        },
        "item": {
          "id": "0b843264-d94a-4d84-a9b7-9ea5dfa5a729",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2cc383d1-2c7e-47f9-92e5-f028bae4236a",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07ff941-88ce-47aa-9fa0-585d7509482d",
        "cursor": {
          "ref": "9726268b-826d-4c5c-9843-b7328f15618b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b1a1753f-b158-487c-a761-a930f26b089f"
        },
        "item": {
          "id": "c07ff941-88ce-47aa-9fa0-585d7509482d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a1490ddb-3844-4d47-b0df-f2d9dd6ddc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df480871-5253-4a14-90b3-7fcf936a8594",
        "cursor": {
          "ref": "a8f78a5c-3e0e-4e89-bf15-9a638b7af89d",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e51285a0-9f8b-4dba-a04b-24e7ea15a917"
        },
        "item": {
          "id": "df480871-5253-4a14-90b3-7fcf936a8594",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6aae85a8-3ae6-4ee2-af22-1fcc23be652d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e9d7db-bd10-43e2-a724-303fb1cc1458",
        "cursor": {
          "ref": "3f8dc80e-a6b5-4dba-9095-385c85f4dc8a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "521271a0-de2e-4150-9797-65784dcb8fac"
        },
        "item": {
          "id": "f9e9d7db-bd10-43e2-a724-303fb1cc1458",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "05b09b1e-0303-46c5-8c24-4537ece6cfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203267ce-7aeb-4854-b230-41f97bf1b69a",
        "cursor": {
          "ref": "4ffbc15b-f319-4be2-bf6e-ed2d5dfed5bf",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3f1cfa62-adb8-49e1-8269-f96aebe5921a"
        },
        "item": {
          "id": "203267ce-7aeb-4854-b230-41f97bf1b69a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c60d6e0-2ffb-467b-831c-64a5a11bd2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e189ca39-44e6-482d-802a-bd5a5fe617cf",
        "cursor": {
          "ref": "fc1336cd-5871-4284-b635-357225d848ba",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "59efc06b-594c-483c-97d2-5e1953ed9084"
        },
        "item": {
          "id": "e189ca39-44e6-482d-802a-bd5a5fe617cf",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b0a6e24b-10e2-4101-931e-59d01839f8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e8a0c2-4487-4471-9478-6739aa984ac0",
        "cursor": {
          "ref": "4fccf4dd-229c-43f2-9fd4-e165d955e519",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bf5676e7-9692-4b39-ad0c-b74893f6ae73"
        },
        "item": {
          "id": "25e8a0c2-4487-4471-9478-6739aa984ac0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fc234c33-4aa3-4eb2-aed6-e1aa537e71d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70323756-63b7-409e-951d-48f1e3c10e10",
        "cursor": {
          "ref": "0eb0d31b-9a50-4149-982f-1d0785047dc5",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "32795c68-eb1b-40b2-9c11-af2560c56976"
        },
        "item": {
          "id": "70323756-63b7-409e-951d-48f1e3c10e10",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f31d7654-99c3-4a84-b7ca-49d8a61a7257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0558d81c-e781-49ce-8b66-f2ddba300870",
        "cursor": {
          "ref": "85ecf9b2-6982-484c-b134-27e547a4111d",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bb94189c-984c-482c-9ed0-d495b472dd84"
        },
        "item": {
          "id": "0558d81c-e781-49ce-8b66-f2ddba300870",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4f130f69-e42a-46b0-bc6b-681807a5726d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f922ea-20f3-4522-86cc-2002e686ec87",
        "cursor": {
          "ref": "00d5eb9f-df0f-429b-9246-26ad99e0d1ac",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6e543881-62de-4013-9884-6bc8e14a5a7f"
        },
        "item": {
          "id": "96f922ea-20f3-4522-86cc-2002e686ec87",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2d83f537-7e56-4200-9cec-1049dd207a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19680e5-3b36-449f-b1a1-38fbc1164ec6",
        "cursor": {
          "ref": "8962cf90-7b2c-4e02-86ac-4c577686d864",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "71ccffa2-117e-436f-9998-92df70800038"
        },
        "item": {
          "id": "a19680e5-3b36-449f-b1a1-38fbc1164ec6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "720cbfb6-6d55-4c95-b5d7-b4db008ff564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d64afb-8e36-4184-8c21-04de18d1db49",
        "cursor": {
          "ref": "a2311670-1a03-4692-9506-7a515098d006",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fb7ebeb8-d188-4892-981f-01e9acfb980c"
        },
        "item": {
          "id": "c4d64afb-8e36-4184-8c21-04de18d1db49",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5b5a39a3-e12f-4a6d-8c77-ff9dc62e08f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ec3288-a5de-4708-bac2-d61061f50787",
        "cursor": {
          "ref": "06db323e-659e-46a9-8919-153c057a0fd4",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "58f22602-3060-4a1d-9266-1629bf9c174d"
        },
        "item": {
          "id": "09ec3288-a5de-4708-bac2-d61061f50787",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2ec50416-5964-4330-b3e5-c2c3263621ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca5d17e-bf40-41e0-9bc4-cb5cb036dad0",
        "cursor": {
          "ref": "4b4a9ca2-4cfa-48cf-ba93-8f0cdd38da05",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2c56efbd-11ca-4af6-9607-f16a2b50789d"
        },
        "item": {
          "id": "7ca5d17e-bf40-41e0-9bc4-cb5cb036dad0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a898ca1e-9dce-4b37-9f49-9969f3242311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8c8f8c-0370-4ab9-8bcd-6cf5e48df559",
        "cursor": {
          "ref": "aef33009-5a1f-4980-9bb1-be844526cde7",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8e149c8d-ef59-4c96-af8c-ea9068467d91"
        },
        "item": {
          "id": "ae8c8f8c-0370-4ab9-8bcd-6cf5e48df559",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "243c0494-8d85-41b3-9577-611b114574a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2478ef84-12e7-4a17-aa97-1a4bc6ef35d2",
        "cursor": {
          "ref": "bfe21df5-77ff-4554-be64-bd6941e6af33",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6d85c3ab-95f3-44c6-b398-8de11619a57e"
        },
        "item": {
          "id": "2478ef84-12e7-4a17-aa97-1a4bc6ef35d2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "962e5adc-0495-4cad-9f95-e5507cef5d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd1039a-9e22-43ee-9a97-a64539ef3cc8",
        "cursor": {
          "ref": "28650715-689f-4a70-b0dd-076898f66763",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2f506c0b-f8f0-489d-85be-64eaa4b145cf"
        },
        "item": {
          "id": "2cd1039a-9e22-43ee-9a97-a64539ef3cc8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8c1331aa-758e-4a45-91ae-7b72a8dbbaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db00aba-90f1-436e-b85e-66d70a67d434",
        "cursor": {
          "ref": "79d0d21a-39ba-4387-b26a-f7506a011307",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "899dc508-7c27-4baa-a060-c88e452a46ef"
        },
        "item": {
          "id": "6db00aba-90f1-436e-b85e-66d70a67d434",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fab9982b-5405-4164-a6b2-0000aa96764d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aee0aec-0549-4f20-9bc3-f6aec3bfb165",
        "cursor": {
          "ref": "c80f2056-a991-4c04-888f-f5ceb2eed978",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "76234505-b072-4a68-9299-d4c14302a5e4"
        },
        "item": {
          "id": "5aee0aec-0549-4f20-9bc3-f6aec3bfb165",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c0e397c5-4a48-4bda-b079-865b3fe41b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cb4432-bd99-41f0-bd81-76ddda067958",
        "cursor": {
          "ref": "06fc8d4e-cb56-4966-b79c-d7f32e7eb526",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "90709876-7a81-487f-ad49-010c10862c1d"
        },
        "item": {
          "id": "19cb4432-bd99-41f0-bd81-76ddda067958",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5c0769fe-61c5-406c-b480-8d941157d4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18717bc-22fd-4d30-b3b3-e1c1d9637b10",
        "cursor": {
          "ref": "12da77e8-3d10-4e94-83a8-bbcadb38651c",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b0c3b546-fbbf-485d-8896-6fabbd0b4e54"
        },
        "item": {
          "id": "b18717bc-22fd-4d30-b3b3-e1c1d9637b10",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "17301f6f-6e96-42ef-8593-a7e6c2493e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba94d12-fb8a-4844-9a28-d376c8f2d822",
        "cursor": {
          "ref": "7de9511b-4848-4588-bc9f-1ae5f0840eb7",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5a9d902b-c7e3-4a43-b5ad-19eece57d356"
        },
        "item": {
          "id": "bba94d12-fb8a-4844-9a28-d376c8f2d822",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "73f09ca9-7a9d-40c4-b086-0cbcadfec791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ebad05-f5de-4245-93c7-72850ef9cd75",
        "cursor": {
          "ref": "f40ee42a-924f-4d43-9ec4-9fe38aec7329",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f3c2c0b9-d043-4f66-8191-5f87b1e6f87b"
        },
        "item": {
          "id": "d9ebad05-f5de-4245-93c7-72850ef9cd75",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dcdeb641-58c1-410b-9c3a-63f17b5bca18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f7aba6-a6be-4cc4-8ee0-6378591a09e4",
        "cursor": {
          "ref": "f3c699a0-6590-4d5f-85c2-819728053b9c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a35339ce-0bb3-49f8-a70b-105f91966d55"
        },
        "item": {
          "id": "10f7aba6-a6be-4cc4-8ee0-6378591a09e4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ef18fe35-b0e0-4cc6-a7c4-0858cb80b4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23066625-c5f1-4b08-a79a-164bb1ee3a48",
        "cursor": {
          "ref": "6d7ac4aa-9a36-4a15-bf56-acf3b7403bbb",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d899567e-53f5-44ca-853c-816aa74d48ae"
        },
        "item": {
          "id": "23066625-c5f1-4b08-a79a-164bb1ee3a48",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a5703d94-7924-4e98-9077-6febc3e0f75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d536d7-c659-419a-803b-cd64d5dd2bc2",
        "cursor": {
          "ref": "5bf2dbcd-9032-49a9-bb36-d60fcd952e07",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "377246e2-39d9-463d-b631-5d6f3ef8cd3f"
        },
        "item": {
          "id": "b6d536d7-c659-419a-803b-cd64d5dd2bc2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "583999f3-16b0-4839-aa15-5a8895b16cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40da3249-bb11-46bd-9fb2-fef0587a3b09",
        "cursor": {
          "ref": "97aceacf-fc91-47fe-a4fa-427d7e6402d0",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9465c9e2-db30-4542-bbe7-770bad4d248c"
        },
        "item": {
          "id": "40da3249-bb11-46bd-9fb2-fef0587a3b09",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d9cf4698-dd24-49b3-b694-03ac38c5edd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b99fdc-3f06-4d02-84dc-e40c9f45c3a4",
        "cursor": {
          "ref": "66bd1759-2984-4f81-adfb-f402cbd72285",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "83cd0855-d4c7-49ab-be5a-f216ad6d2168"
        },
        "item": {
          "id": "17b99fdc-3f06-4d02-84dc-e40c9f45c3a4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b02303cc-a69d-48e8-aec2-02bcf0ac2dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8218e00f-f979-4da7-8d67-93ba8f60ac2d",
        "cursor": {
          "ref": "d02723bb-286e-46b9-855a-2ef94dfacb45",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c1a85b7a-9dea-413a-8641-b35e5462c688"
        },
        "item": {
          "id": "8218e00f-f979-4da7-8d67-93ba8f60ac2d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fa6cd286-ff4b-4c92-a22a-8375767bec62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8ba832-0591-4933-9515-1b5c93276574",
        "cursor": {
          "ref": "0dedc427-e0f3-4323-b2b8-c3d0950f37a9",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0cf7e3ce-51d5-4123-a4e3-0d6311b701fa"
        },
        "item": {
          "id": "7d8ba832-0591-4933-9515-1b5c93276574",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1a708f95-67c4-4373-8bc3-0a3ab9dedcfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3e1e6a-67c9-445c-acd2-006368d45d5c",
        "cursor": {
          "ref": "26c99738-00db-4bbd-b5b3-11824ef35b0e",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1714db17-5e1f-4d12-93c5-c3253c7f7075"
        },
        "item": {
          "id": "1b3e1e6a-67c9-445c-acd2-006368d45d5c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "05f1b1d4-8591-406c-b63f-1eec55f06f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac232f3c-f613-446d-a576-9d315869920e",
        "cursor": {
          "ref": "e32a8455-6965-4e97-a78a-d73923f034f4",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b385b146-39ac-411a-9a84-839bc69ec5b0"
        },
        "item": {
          "id": "ac232f3c-f613-446d-a576-9d315869920e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "39cf89af-eb97-4d1e-ab16-fb12d81b34fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d9fc92-86b5-40f8-8ad6-b374d9aec4c8",
        "cursor": {
          "ref": "7eaf49c0-9078-44f4-8da8-c316fb914d38",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f09084f5-3e58-43cb-8419-a96eea6e2754"
        },
        "item": {
          "id": "f9d9fc92-86b5-40f8-8ad6-b374d9aec4c8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fe0a961e-46d0-459a-98e8-fe1f7d5d6b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ebdf21-be47-41ba-98c7-f3668aa48d97",
        "cursor": {
          "ref": "c6a52eb9-ffd9-48bf-9f89-c9660e1ebcf2",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bf9153e7-ad47-46b2-821d-a5c5fab0e728"
        },
        "item": {
          "id": "f6ebdf21-be47-41ba-98c7-f3668aa48d97",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e63706e7-b7bd-494e-812c-033cfabb88d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8279a2-6be7-4122-bc6e-9e78c11c22ff",
        "cursor": {
          "ref": "a9e8d5eb-1dfa-43e6-9d05-5e23a3bb4c19",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0a77b09c-8a15-40c5-bb4b-735d953fc4e4"
        },
        "item": {
          "id": "2d8279a2-6be7-4122-bc6e-9e78c11c22ff",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "088ca151-4abf-4ddc-ab28-4dc5ccabc437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d15951-59fe-4e0f-b0ca-41ea0ccb1a9b",
        "cursor": {
          "ref": "e6111182-cfc5-46f7-a19a-045058dc92fe",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5412825e-e6b7-44fb-9d46-56c5bf73bc5a"
        },
        "item": {
          "id": "e2d15951-59fe-4e0f-b0ca-41ea0ccb1a9b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4eeee277-f0aa-448c-b33a-53192a596668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593b4fe2-1d90-45e1-ac69-8374f4112f96",
        "cursor": {
          "ref": "699a9e41-0d1a-4079-afda-8d746d650d44",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "11385e39-0336-4cd5-91a7-9d90c8f7447f"
        },
        "item": {
          "id": "593b4fe2-1d90-45e1-ac69-8374f4112f96",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8d1098b4-f29e-4187-ba78-de0147cbd36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec29c8a8-6771-42d8-a3e0-e483553a3ab8",
        "cursor": {
          "ref": "c7ab60e4-4336-4ead-9a87-fb6896ccb701",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9cfec591-2c67-451a-bf8b-d46a89ac11a7"
        },
        "item": {
          "id": "ec29c8a8-6771-42d8-a3e0-e483553a3ab8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cbb0ced6-adeb-4700-ab79-d13d7952cfc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6199f856-0e9b-4fac-8c9c-fe6b11878bfe",
        "cursor": {
          "ref": "44abfef6-2f35-40f7-9f7f-81f655e1332f",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7813d85d-1f90-402c-a1ca-d4bc5a95f06a"
        },
        "item": {
          "id": "6199f856-0e9b-4fac-8c9c-fe6b11878bfe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c5d547e0-45bc-442e-a396-674e09005aee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe87016-987a-474e-b9aa-393b7ba85a08",
        "cursor": {
          "ref": "7b803a31-351d-4c74-ab73-f7188ef32721",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fa6b9447-4aa2-400a-ad9c-196cec644d75"
        },
        "item": {
          "id": "5fe87016-987a-474e-b9aa-393b7ba85a08",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6047d7e9-aeb0-4f82-88a0-16712f020a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377036e1-f65d-414e-8e0e-13e84bf6ae58",
        "cursor": {
          "ref": "59c0647d-539a-47bb-8c44-b33950ff68ed",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ca6ada3d-2511-4f14-b0fe-a778f5d761a0"
        },
        "item": {
          "id": "377036e1-f65d-414e-8e0e-13e84bf6ae58",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3760ff1a-07af-410f-949d-47b92ea71bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475e001c-32b3-44e1-9416-9565d2bf2424",
        "cursor": {
          "ref": "15934820-6847-48a0-96da-1c0f00558985",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "100c03ca-152c-4014-9338-ea03e0b4a6b4"
        },
        "item": {
          "id": "475e001c-32b3-44e1-9416-9565d2bf2424",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "77b074eb-eb80-4cf0-8706-5211a8f0a3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ad7022-3c56-4f17-baaf-98146955cf6c",
        "cursor": {
          "ref": "47792fdb-7864-4817-8571-a6490915e31e",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "311f42cf-2367-48ce-80a3-94f5358da560"
        },
        "item": {
          "id": "76ad7022-3c56-4f17-baaf-98146955cf6c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d8cf6629-2cd1-4ab1-bbbe-99723dff44d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479a9717-ce1a-42e1-8c46-3c996bf40362",
        "cursor": {
          "ref": "3e6ff6cb-ddfe-4dda-91ce-e6a3151c6d45",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "318b091c-4ff3-44cc-8223-e377672454e5"
        },
        "item": {
          "id": "479a9717-ce1a-42e1-8c46-3c996bf40362",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7ba2aa24-0d68-4307-8173-71887bbb9f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da90bcb-8fab-40dd-acaf-4c9e4663fb9d",
        "cursor": {
          "ref": "26f46230-2406-497d-a3cc-1db6fb0a64e6",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "389394a4-101c-4ff4-96ab-5a20dfc299af"
        },
        "item": {
          "id": "6da90bcb-8fab-40dd-acaf-4c9e4663fb9d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "34d96b70-85c5-4f80-85b7-72bf56cba613",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "1fa70e90-d8da-49b7-a475-28209c0a089c",
        "cursor": {
          "ref": "048ce1a9-d71d-4666-bcca-ecc131946bb0",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9a60a111-d1b0-45d1-85b0-7d0d1c62e171"
        },
        "item": {
          "id": "1fa70e90-d8da-49b7-a475-28209c0a089c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "73168ad6-567d-4b2e-b8db-fe2404487976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0942b726-cc6f-4d9e-b800-97a2a6c2e57a",
        "cursor": {
          "ref": "402b33af-2e8b-4911-9ad4-d3c9668bfa1c",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0aeb5068-0e43-4f09-8107-460a135385ce"
        },
        "item": {
          "id": "0942b726-cc6f-4d9e-b800-97a2a6c2e57a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "41909d32-38e4-45e9-8629-93fb214eae36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f2fcce-b7b9-4716-b65c-7fcd8d241118",
        "cursor": {
          "ref": "70288be0-df59-448c-849e-d12bcae628d4",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b06b5fac-6576-41a2-8787-23d056dd9b05"
        },
        "item": {
          "id": "57f2fcce-b7b9-4716-b65c-7fcd8d241118",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0e542481-16bf-491a-9e0b-e31ddaaf392b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e5ad66-3431-4bea-be01-03ebfd4c527c",
        "cursor": {
          "ref": "c7673522-cccb-472d-97c9-7beaa5d14d22",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6e76638e-82de-4035-afd8-62fb0b398014"
        },
        "item": {
          "id": "09e5ad66-3431-4bea-be01-03ebfd4c527c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3f572129-05c8-4910-bf3f-85123f4b81cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78627664-efd2-466e-b198-a76ff30952bb",
        "cursor": {
          "ref": "808b2034-6e16-4ba8-8893-50d59917a2ae",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0119dbf3-7396-468a-9a05-3882290696f1"
        },
        "item": {
          "id": "78627664-efd2-466e-b198-a76ff30952bb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f74b6234-292c-45b4-94e3-02333fa50c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1b3b38-7d6b-499b-a4a0-c897857bf079",
        "cursor": {
          "ref": "25ac6f90-c781-44d2-a74e-94938ca38d52",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "79b1f2c4-d73e-4485-aaf1-c68456e9e0a6"
        },
        "item": {
          "id": "df1b3b38-7d6b-499b-a4a0-c897857bf079",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c08c3032-36a4-4404-82ca-d6ecca71608f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1261336-ae2b-464b-a5c3-538a01512121",
        "cursor": {
          "ref": "1a344538-fee0-4527-a5d6-589fd03ce1cf",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a908e860-940d-474f-93f7-0241672bec7a"
        },
        "item": {
          "id": "a1261336-ae2b-464b-a5c3-538a01512121",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "13daaee4-8ab3-4247-810d-57b53b7bf3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814efa44-5d06-48d3-893f-b0b5480eb8b1",
        "cursor": {
          "ref": "439e9d13-c8aa-4ebf-80de-4c1b7a88bb5c",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a8997467-54f1-42c9-b096-e8c1b6634db3"
        },
        "item": {
          "id": "814efa44-5d06-48d3-893f-b0b5480eb8b1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f7b55e8e-0087-4f13-bba2-bbbb1c46d1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850f6673-80c8-4cbb-aa09-f845de491b8a",
        "cursor": {
          "ref": "a6400a4b-f50f-4200-820a-911bc38e2a61",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "510fa43b-44fa-498b-9694-d23b3a0dae52"
        },
        "item": {
          "id": "850f6673-80c8-4cbb-aa09-f845de491b8a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "add02151-b5df-4d62-bd67-a3e6b1de481c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ab194f-615f-45d2-83a2-88371a87a69e",
        "cursor": {
          "ref": "dbfb1244-7696-4dab-9bb1-1fd7344b0e14",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d5942f17-42e8-4e7c-93ca-ceffb2466cec"
        },
        "item": {
          "id": "a2ab194f-615f-45d2-83a2-88371a87a69e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1d680392-d814-43b6-8cf2-47951ecb8c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7382b362-923d-48b6-802c-6781e55702dc",
        "cursor": {
          "ref": "1756402a-859e-4391-9d5e-2c67ae22c280",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "746e97d8-cae5-4512-8bd4-e6a5d6eba0bb"
        },
        "item": {
          "id": "7382b362-923d-48b6-802c-6781e55702dc",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2211ddb0-4e33-481b-b867-52ec4bcd9f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6aab8ed-a194-4ff5-953a-2fe50e7d6260",
        "cursor": {
          "ref": "45f5fe34-3d38-4272-89a2-35bc0930e2a0",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9f85d602-96d0-4564-a916-cc495aaba408"
        },
        "item": {
          "id": "b6aab8ed-a194-4ff5-953a-2fe50e7d6260",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e37e4916-9609-48ad-a50d-51a44f1250cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36715bb-335d-42dc-83b8-075d0938d83d",
        "cursor": {
          "ref": "78a96a3c-2908-4b88-ab4d-133f00ace38d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d6402fcf-909c-4e5d-8706-41e1bac5d873"
        },
        "item": {
          "id": "c36715bb-335d-42dc-83b8-075d0938d83d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7f1244c4-fe3f-46dc-9331-77a6e87064c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbe4fcd-281e-4330-b069-1f1efb1b7f21",
        "cursor": {
          "ref": "3171e874-1818-4acf-a168-a09c72a75588",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7bc026a7-0ca1-49e6-b6fc-e08e0331d1e2"
        },
        "item": {
          "id": "efbe4fcd-281e-4330-b069-1f1efb1b7f21",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "55aa4b91-421c-4363-aaed-4eed008adad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fed050-95cb-40bb-bfcd-dacaaa8e5a8a",
        "cursor": {
          "ref": "b83b7d53-fee7-40eb-8aeb-2256c5d52452",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ee221c1c-2a4e-4d83-9087-43b1ec3bae06"
        },
        "item": {
          "id": "f3fed050-95cb-40bb-bfcd-dacaaa8e5a8a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "eb09d934-358b-4930-9c3c-744f41a8b8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd3d4f8-5501-495c-8a2d-aeddb16362f2",
        "cursor": {
          "ref": "61d1c628-e104-4a33-b0d4-be6e870f5d30",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "de8e7123-87bf-44ee-85d5-dccdf7d2d0a6"
        },
        "item": {
          "id": "ecd3d4f8-5501-495c-8a2d-aeddb16362f2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3888cf8a-9298-4b6b-9919-044623d1a0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95621b6-3751-47a7-8e78-e2ee487f97b5",
        "cursor": {
          "ref": "b4da4a2d-9c7f-4647-8f97-6d96eed71c7b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dca1bc93-753a-47eb-a32e-039027f11874"
        },
        "item": {
          "id": "b95621b6-3751-47a7-8e78-e2ee487f97b5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3f39b9fc-682f-4969-ab74-be720c9c6bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7094d39a-2743-4671-adcd-d706dbd10315",
        "cursor": {
          "ref": "22be880a-4075-4de1-bf41-d92e05b87b50",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bdad6b3e-03c2-42fa-99d7-3a3ea5695a1b"
        },
        "item": {
          "id": "7094d39a-2743-4671-adcd-d706dbd10315",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "500b7b2b-42eb-4a3d-b766-80ab8c8d2d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836814a4-929a-4e9c-83cc-8f6979ab685f",
        "cursor": {
          "ref": "d3150512-e67d-4223-b31a-9f05504b09e2",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5c961082-0dcc-40ad-8957-5d468c2baf0d"
        },
        "item": {
          "id": "836814a4-929a-4e9c-83cc-8f6979ab685f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3bc69491-a4ca-4fce-a56e-dbe65a3768e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909966cd-1dad-4e51-97b4-45730666e487",
        "cursor": {
          "ref": "bb919ec6-d11b-4421-b1b1-ebfacbe3bbea",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fb487712-929a-4170-94f3-33404331dff7"
        },
        "item": {
          "id": "909966cd-1dad-4e51-97b4-45730666e487",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1827ddd7-8d5d-4958-a2a2-07b1e0158e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97688848-b9a9-4d8e-83e7-70d318fee52d",
        "cursor": {
          "ref": "1e75745c-4f31-46c9-b069-33f841259967",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "700a4203-6eff-400e-8c4d-aa300569e319"
        },
        "item": {
          "id": "97688848-b9a9-4d8e-83e7-70d318fee52d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a235d89b-00ed-48e9-8d74-9c8631bba33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4792bbda-c5ba-40f1-b654-46bea73c6971",
        "cursor": {
          "ref": "542329a9-1e24-42d6-8629-7aa324f19e7e",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "73d05ff5-8a48-4d96-be55-6fb12ce5f77a"
        },
        "item": {
          "id": "4792bbda-c5ba-40f1-b654-46bea73c6971",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "16f1ea07-6507-4a10-a446-4dfe34ffdf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331a750e-a9b0-4dae-b106-b0a650ae94e1",
        "cursor": {
          "ref": "74e0f777-ab2e-452d-9a0d-b941d19fd992",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "39d41871-9dd9-469f-b248-750017a8545b"
        },
        "item": {
          "id": "331a750e-a9b0-4dae-b106-b0a650ae94e1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "603afed7-8905-4f28-9474-2aef4837d349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d89a8a-b7a0-4fd7-9b07-8eea83505a0c",
        "cursor": {
          "ref": "07a6e213-e98f-41db-afa5-96380ba92ead",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5f17c9e2-8578-47c9-9b9f-48b39976a3ab"
        },
        "item": {
          "id": "e8d89a8a-b7a0-4fd7-9b07-8eea83505a0c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "43c73116-04b6-4a04-ba03-4de251f1d9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d843b8a-ced0-4af9-9dd7-6745e32a3ddf",
        "cursor": {
          "ref": "fb9507f2-8513-4921-b5d1-fe99d4d1c24c",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ea249279-3483-441d-bf91-ee6a80001108"
        },
        "item": {
          "id": "3d843b8a-ced0-4af9-9dd7-6745e32a3ddf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1f4e24a0-d20f-494d-80f9-6b3c795f781e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cc71b7-1b0d-474f-8642-804bac445935",
        "cursor": {
          "ref": "d1fe6071-f813-4567-a431-763711445f2c",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5eab6e1f-7ad6-4a5c-a6d9-c40b6465d209"
        },
        "item": {
          "id": "47cc71b7-1b0d-474f-8642-804bac445935",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "70bd8d6a-2a2c-4e6d-b331-39bca726785d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be48ede5-e37b-4c64-a09f-b84a356b9cf8",
        "cursor": {
          "ref": "d7a540ea-c352-4e63-92a7-bce4f16f3037",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8ec5378e-b63f-443d-a5aa-0f4569b8ad95"
        },
        "item": {
          "id": "be48ede5-e37b-4c64-a09f-b84a356b9cf8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e54c1abe-f168-4ba1-a84c-1561d7d39677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb47a0c0-576c-4f94-b696-318ee861296d",
        "cursor": {
          "ref": "83886bda-5355-4c52-a559-eef0f10dd4ae",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8191984f-c121-4ba8-a700-8e095f55bf4f"
        },
        "item": {
          "id": "cb47a0c0-576c-4f94-b696-318ee861296d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5256472d-c8e1-47cf-8048-51f20019adbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cb9376-a98e-4a4b-87e5-69ea68f21758",
        "cursor": {
          "ref": "1fbf81bf-10a7-4ee4-98be-9e1b62d8ee84",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6949adeb-5d7a-46c4-be5e-c0edd5746d98"
        },
        "item": {
          "id": "36cb9376-a98e-4a4b-87e5-69ea68f21758",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4f97a5bc-b044-4eb1-b76b-3a025b86b6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca32c76-9429-4fd6-afc0-0d1f2bfafc36",
        "cursor": {
          "ref": "64f371b8-9312-4686-a04f-4478594a5f03",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5a9585f9-6628-4118-ade4-5367fbfd2c82"
        },
        "item": {
          "id": "eca32c76-9429-4fd6-afc0-0d1f2bfafc36",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bf47ccd2-7333-4c3b-93c5-b93b4cdf856b",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "40cf1dd4-e18b-4aac-adba-1c374cf41265",
        "cursor": {
          "ref": "bbf71452-1ef2-4fb6-a6fc-06a60ec799b4",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9c8c9fcb-3780-4002-8e33-294392166fcb"
        },
        "item": {
          "id": "40cf1dd4-e18b-4aac-adba-1c374cf41265",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7978a84e-b550-4670-be67-bd20703e0769",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d8612d5f-faa9-4ce5-8dc0-d44d4842c341",
        "cursor": {
          "ref": "5fb9706d-455d-4f17-8b36-d7e1d2444c51",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9e44b3b2-a600-4b0c-b486-c1d2a7ee0067"
        },
        "item": {
          "id": "d8612d5f-faa9-4ce5-8dc0-d44d4842c341",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ea39049b-efc1-4eba-826a-36f4dfbf8f56",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "7ec046c2-0a2e-4d74-8a05-41668b545021",
        "cursor": {
          "ref": "9de9f66c-c75f-4969-bba7-7e3fa6c6098c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e982bfd6-509e-4f05-834e-107ea797841a"
        },
        "item": {
          "id": "7ec046c2-0a2e-4d74-8a05-41668b545021",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a6db989a-91f1-43c7-bf8b-4ca90b63daad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8473aba8-bec9-4585-877e-65bf953e6d99",
        "cursor": {
          "ref": "3028fcd1-4800-4864-93ca-3213eeabb9fc",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8afe93ec-0e5d-4216-ae97-97c6e26c4498"
        },
        "item": {
          "id": "8473aba8-bec9-4585-877e-65bf953e6d99",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "df3c0ad3-bb89-4c71-9617-baf51d48f96d",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7552fa9c-2b53-46b0-85e9-d296e5dabf9c",
        "cursor": {
          "ref": "35dca351-2421-4819-b7c8-b0662341195b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "910637ed-9fe9-422e-af5a-e95c8eb81bd5"
        },
        "item": {
          "id": "7552fa9c-2b53-46b0-85e9-d296e5dabf9c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "034f6819-019d-4ad0-9731-023647302cd7",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "e8ac5f93-46fa-493e-9aea-0505ad00eecd",
        "cursor": {
          "ref": "a2cc36e1-e87a-4bdb-99f6-4be221823e46",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a801281d-08b7-4b2f-b9fd-a61961b076ee"
        },
        "item": {
          "id": "e8ac5f93-46fa-493e-9aea-0505ad00eecd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a2cbb5cc-ecde-4edf-9108-1121d1c2f7bb",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "23240674-ec1b-4397-b489-22c977f37514",
        "cursor": {
          "ref": "2bddafcf-2720-4f55-8f71-fb4a30d1280b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f7ff6d49-7440-4130-934b-8e088ffb897f"
        },
        "item": {
          "id": "23240674-ec1b-4397-b489-22c977f37514",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6b4b90e6-fdeb-424f-8b03-d933f325757d",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b853e82c-9435-4876-943f-4ba4a83ebea6",
        "cursor": {
          "ref": "b433daf5-9a9a-411e-b2de-e81caafbb47c",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b3db8f81-f88f-490e-80e4-b1a95d8627b1"
        },
        "item": {
          "id": "b853e82c-9435-4876-943f-4ba4a83ebea6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aaab198a-b6b2-433c-a4ef-d4bcc85b9d26",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "4801ef36-50c7-44f0-8bf0-43e0d281c880",
        "cursor": {
          "ref": "837504a7-de3e-4068-8acc-679834fd9b97",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "839f536f-a25a-4d9e-a2bc-700e92eec978"
        },
        "item": {
          "id": "4801ef36-50c7-44f0-8bf0-43e0d281c880",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "346bb734-10b3-4c3d-99de-939b3b77fc6b",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "939f3d66-37e2-48f3-89b8-d4c0f6440111",
        "cursor": {
          "ref": "2e60a0d6-36d6-4593-b57f-c0c7276d7e79",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a16d44ba-2d54-4d30-adef-6a451acbcefe"
        },
        "item": {
          "id": "939f3d66-37e2-48f3-89b8-d4c0f6440111",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d5826842-35f0-436f-91e5-dbd017e3afb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4940bebe-9edd-4202-b294-3fe8051b258a",
        "cursor": {
          "ref": "b412a264-9f1e-43d0-b8a3-35bb29147c8f",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8cc951d0-12a4-45f5-aab7-f2d08dbc43a1"
        },
        "item": {
          "id": "4940bebe-9edd-4202-b294-3fe8051b258a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "83e4b62e-deeb-4977-89ec-3b8ed086c3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da18e4e-1b7a-44db-bc11-581065e82a12",
        "cursor": {
          "ref": "2bb4842d-8ec9-4200-ae71-8c6954f993e0",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "78dc025c-e9d7-417f-b959-e4076080c9b7"
        },
        "item": {
          "id": "7da18e4e-1b7a-44db-bc11-581065e82a12",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5d55d15e-a0e8-47c4-9e82-583a662d8266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5890e5b7-e4f6-4ea4-b2e6-612188ee5db4",
        "cursor": {
          "ref": "3f63fb31-a597-4db9-8e40-3d20797b6b2a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "57d8eb63-5ada-4ad6-aa3e-f591d1773311"
        },
        "item": {
          "id": "5890e5b7-e4f6-4ea4-b2e6-612188ee5db4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9086fca3-ae2e-44cf-baa0-df1264b56969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040c08a7-49c3-4e1e-80bb-34f4bbf55d24",
        "cursor": {
          "ref": "6584d7d6-e78b-47cb-8a8c-a7f812daa47b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3828c9a8-3c9a-4eeb-ba47-9240db1b2358"
        },
        "item": {
          "id": "040c08a7-49c3-4e1e-80bb-34f4bbf55d24",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "846b9520-785f-47a8-ba1e-80274dcf36b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d85e4b-d816-4098-ac81-f519e41c96c9",
        "cursor": {
          "ref": "690db24f-f056-46c5-be26-adfc7e893c48",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6e11cf6e-353f-4b15-aaa0-b526e393f0eb"
        },
        "item": {
          "id": "a1d85e4b-d816-4098-ac81-f519e41c96c9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ee14825d-d4f6-48b2-902c-dcd3f7f0a1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d474eadb-35e4-40a4-89b1-b639687b1ee3",
        "cursor": {
          "ref": "9f7f2874-29ca-4828-8c8a-d9bb44770dae",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bb0be923-f708-450c-87ee-6a294b62c304"
        },
        "item": {
          "id": "d474eadb-35e4-40a4-89b1-b639687b1ee3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "de023158-6571-41ab-b3c0-238f7d6abf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2335674e-fb3c-4128-9da8-fbc5fb85c179",
        "cursor": {
          "ref": "1e2c60ab-7192-47e8-b910-96ae0c647c19",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "16bdee0e-1315-4336-b40a-9f9c494e50a8"
        },
        "item": {
          "id": "2335674e-fb3c-4128-9da8-fbc5fb85c179",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "309ad624-9af4-4a3f-b946-43da76476de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72c0969-f62e-4035-8b8d-6de51b5d01a1",
        "cursor": {
          "ref": "053578fe-f8d5-4c6e-a621-7097f6690b2a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "13c0f460-12ab-4afb-9814-4e4fdf1ac484"
        },
        "item": {
          "id": "b72c0969-f62e-4035-8b8d-6de51b5d01a1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c3606799-72a6-4df4-b9d7-9b30b01b46ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c8a9e4-04f6-48f5-a2b1-0788f85c2e51",
        "cursor": {
          "ref": "34085c64-8a97-48a3-881f-2c7161c2af19",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ea67c4de-cb3d-4b4c-9558-fafc7e2d94c4"
        },
        "item": {
          "id": "03c8a9e4-04f6-48f5-a2b1-0788f85c2e51",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "48ad8a8a-a3f1-44cf-ae8a-115cd2c043e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071f610f-8425-40fa-a30c-11c88da85e25",
        "cursor": {
          "ref": "569108cc-804b-49f6-a555-d8cc287ef8d1",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a39021e2-e362-4978-bd88-2f477f2197b1"
        },
        "item": {
          "id": "071f610f-8425-40fa-a30c-11c88da85e25",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2c374769-85f3-4d1b-91d4-1fa95dd227ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed937b9-492d-47f6-a286-908a63a92aa2",
        "cursor": {
          "ref": "260599bf-50a1-45e0-92b4-5a5a25d080da",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f4b0a907-07b9-4ca9-9ab8-147a184e2f7a"
        },
        "item": {
          "id": "6ed937b9-492d-47f6-a286-908a63a92aa2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6e478206-0e46-405a-9feb-fecac82390eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca47d6ee-7f5d-4b71-bb5b-7cd1a0eed368",
        "cursor": {
          "ref": "1150072c-4c90-4b7e-b6ca-0fde7c4febcd",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4ccb216e-4fae-44d0-8b7d-1cb7900f7f4f"
        },
        "item": {
          "id": "ca47d6ee-7f5d-4b71-bb5b-7cd1a0eed368",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "74b4d0cf-af28-4fe1-974c-aa109c3a3aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7927bee7-e862-46b8-9c5d-01bad9c1d986",
        "cursor": {
          "ref": "fbdca733-5b1b-43c3-8545-b91fb4de8f7b",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e10675e1-2028-40bf-869b-b21d772fd639"
        },
        "item": {
          "id": "7927bee7-e862-46b8-9c5d-01bad9c1d986",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1d2433be-2331-430b-9b7f-8037ff7967c3",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a8723766-99d6-423c-864e-295ba3e07b27",
        "cursor": {
          "ref": "dc25f25d-ee8e-4b3a-83db-55b8374f7f78",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "091a91ec-9f45-4c62-8321-d40289aa17c1"
        },
        "item": {
          "id": "a8723766-99d6-423c-864e-295ba3e07b27",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6a9aa2f1-a6dd-40c9-9480-759d72fe5d37",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "636b068b-160c-4d17-a57a-6d3053024824",
        "cursor": {
          "ref": "75a12bb9-e4d8-4cd5-8387-1e3f4c66807b",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6086cce2-62df-4fd7-aadf-1cf3bdea48fc"
        },
        "item": {
          "id": "636b068b-160c-4d17-a57a-6d3053024824",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5e9076ad-beea-4052-87c4-caf7635470bc",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b38b1bed-952f-4f3a-9da7-80d63e4f9ac3",
        "cursor": {
          "ref": "358b14ac-28e7-4993-bafc-3e92cf5ad538",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7ff32134-5373-4091-afaa-aecb4a1e4e84"
        },
        "item": {
          "id": "b38b1bed-952f-4f3a-9da7-80d63e4f9ac3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6b5d34e0-07a1-497e-954a-4615203e2e15",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "1bacb7e0-a7f3-4f5c-8e54-669e56e19176",
        "cursor": {
          "ref": "7ce4341d-086f-4fec-ba27-e2b645ae9180",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7ad05aed-5de7-40cc-ad72-122ee6147b99"
        },
        "item": {
          "id": "1bacb7e0-a7f3-4f5c-8e54-669e56e19176",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ff6e72ac-0137-4bfa-9a51-be50b05640c7",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1210d9ea-b647-489b-8dff-842d7a74d76e",
        "cursor": {
          "ref": "ff85f200-06c3-4f10-a577-cc5ea6cf6014",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "848a541c-a19c-4162-9f06-72ab782d3cce"
        },
        "item": {
          "id": "1210d9ea-b647-489b-8dff-842d7a74d76e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6b65a2e1-6475-4027-a69b-cb5302841369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde5c989-de67-4b81-a322-686d002e47ce",
        "cursor": {
          "ref": "03328f33-3ceb-47a8-bbeb-eb30dae9d2c5",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bc8d62d7-b56a-49ad-a51c-43cf7e965c5b"
        },
        "item": {
          "id": "dde5c989-de67-4b81-a322-686d002e47ce",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "67d3e12c-5a35-4dce-995a-ebcf840ea5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390a9d7d-672c-4eea-987b-2b5ccdff95ab",
        "cursor": {
          "ref": "8632a659-352a-4fd2-961d-548718c00f0c",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ca518bae-4666-4cda-af76-9aba1c232f67"
        },
        "item": {
          "id": "390a9d7d-672c-4eea-987b-2b5ccdff95ab",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6aa768e9-fb64-48a4-bee6-9701e02d8ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935fc30f-d9a6-4ede-9688-e63ab7169602",
        "cursor": {
          "ref": "df8338c0-56e4-443a-9308-949775fdbf39",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8f1a11d0-146f-480b-87bd-fd8eaae98847"
        },
        "item": {
          "id": "935fc30f-d9a6-4ede-9688-e63ab7169602",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3bfff68c-d30b-428b-af5b-76eca25740a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50571e07-cf8c-4fe1-844e-b8d60c9d8a46",
        "cursor": {
          "ref": "b9f032bf-c636-4ec4-afac-eae687212a8d",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "36612b07-7b2c-435e-aaef-08f03837cdfa"
        },
        "item": {
          "id": "50571e07-cf8c-4fe1-844e-b8d60c9d8a46",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b7522f49-f0f0-4f9b-a58d-1b14ad75146e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26654b12-f985-49b7-bcd7-78c6f49eb3c0",
        "cursor": {
          "ref": "4dc0549d-4f71-48e9-94b7-e43a886126a2",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c8dfcd60-4f40-4882-b2da-5b18a7a0fef9"
        },
        "item": {
          "id": "26654b12-f985-49b7-bcd7-78c6f49eb3c0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9f05eb4f-bc5e-47f7-bfc0-919375bb7894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ceeee44-1883-4a5c-9dd0-1534c6f5d1a2",
        "cursor": {
          "ref": "86ce7d07-2b5c-4fbb-833d-abb5fb1dcdcd",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a894481c-d981-4d1e-ad9d-6ef01ff473be"
        },
        "item": {
          "id": "4ceeee44-1883-4a5c-9dd0-1534c6f5d1a2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "652b2593-7936-424d-9b46-1b06927a714f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c29f40e-b559-4abb-9796-0beb133ad340",
        "cursor": {
          "ref": "4172a2c9-ec32-446c-b8f0-9210dde2434a",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f725c4c8-e376-46ef-a733-0b0b87ff4119"
        },
        "item": {
          "id": "8c29f40e-b559-4abb-9796-0beb133ad340",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fa984752-66df-49a0-8bda-8e1945ed0709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab134d2-5455-46f3-9cb5-ffa22de5c176",
        "cursor": {
          "ref": "5e4ed6d9-6f27-4110-9ff9-24615b422784",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1a4f6cb5-163b-4c62-ae7e-8bb8d51e3da3"
        },
        "item": {
          "id": "1ab134d2-5455-46f3-9cb5-ffa22de5c176",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "08ef360b-a00a-4c9f-9866-ecfeaacbe2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb813864-247b-4ea0-90db-4344d8def6fa",
        "cursor": {
          "ref": "5bf00e48-1638-4943-9c30-00c63223155e",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b888003b-1f67-4914-bb5e-a002628146d0"
        },
        "item": {
          "id": "fb813864-247b-4ea0-90db-4344d8def6fa",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "43933dd8-6672-414a-93ba-753501202afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3d4924-82a5-47ab-a777-6c415d7f69f9",
        "cursor": {
          "ref": "ab4e1262-b759-432a-bb05-844dfcafff49",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "72007df7-c89a-4843-b3f0-ad5249bdd806"
        },
        "item": {
          "id": "8b3d4924-82a5-47ab-a777-6c415d7f69f9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bbff5645-0248-4e96-b330-5e1e4de3a86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326b4eae-943b-4cad-8402-c48bed7eeb06",
        "cursor": {
          "ref": "908e7086-9bcc-4652-8cf8-ecc4dffb4b40",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3b469641-c631-4624-8d33-421b3ca17b60"
        },
        "item": {
          "id": "326b4eae-943b-4cad-8402-c48bed7eeb06",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "13784746-c149-4009-b9a3-ec5939e98a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11bfc4a-ae3e-45d1-8fcf-db160b0e1897",
        "cursor": {
          "ref": "18b61591-0cda-4abb-af57-d5306a33e01c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0b9e5841-8ace-46ba-98a0-8f6e6cebe8ec"
        },
        "item": {
          "id": "b11bfc4a-ae3e-45d1-8fcf-db160b0e1897",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f59c0148-d499-456b-a7fb-c9de9205b290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1ded0d-00cc-40c1-b0fb-6670e7bd88fc",
        "cursor": {
          "ref": "402dac75-d77f-41de-88c7-719bf4f7f215",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "534b6044-74e1-4b4a-8fbe-64e94f9a6cc4"
        },
        "item": {
          "id": "ac1ded0d-00cc-40c1-b0fb-6670e7bd88fc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "711dd2c9-2fd6-448d-bd4c-07a28f012db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3110e6b-5cad-4e38-bd0b-589135af74bf",
        "cursor": {
          "ref": "2e3f3290-7900-4f59-a800-de5cfaf520dc",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "137573b9-4589-4c5b-a43c-2e228cb19c8b"
        },
        "item": {
          "id": "b3110e6b-5cad-4e38-bd0b-589135af74bf",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "be577eb2-4a02-4c0f-83e9-225ff323d6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915b7cfe-f805-4ce4-9278-3105de583ac4",
        "cursor": {
          "ref": "8a8c5c22-0e21-40b1-842d-61cf0b78a116",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "67e54ec4-5cd0-4b02-b450-882fddc08520"
        },
        "item": {
          "id": "915b7cfe-f805-4ce4-9278-3105de583ac4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "941f1cc6-f79c-4d15-bde1-414a1456df57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7533fcbb-fa73-4df3-ba51-a9044d54e868",
        "cursor": {
          "ref": "4bdcf798-2992-4d40-9381-759047bdce02",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ec1e2568-24b5-43e4-b131-113e6cccda2e"
        },
        "item": {
          "id": "7533fcbb-fa73-4df3-ba51-a9044d54e868",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d34a48d9-b8f5-4eb7-bcbb-f35f2ca6c4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfecbaf6-3e25-4b16-b415-1fdb47f18b6d",
        "cursor": {
          "ref": "f8814743-a214-49eb-be36-29fc879ec3e2",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0e8a028d-20ab-42ae-b1e3-188dc8a2e6e7"
        },
        "item": {
          "id": "cfecbaf6-3e25-4b16-b415-1fdb47f18b6d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f727ad7d-c793-42ee-80e5-863bc4c1ba71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d778802a-64bc-487f-a3b4-1eb06f511d34",
        "cursor": {
          "ref": "09ae953a-38a7-4476-8a23-01011923efd4",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3cff2485-a1c9-42ff-b09b-67571dd2bcbc"
        },
        "item": {
          "id": "d778802a-64bc-487f-a3b4-1eb06f511d34",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1f3e1be5-3882-42af-921b-8c2d777fbc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d15ca89-df1c-41bd-8f64-95213207375c",
        "cursor": {
          "ref": "bc8a527d-d2a5-4606-9f68-0b857a620a44",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3ba9badf-9155-4234-aa01-82d0691d1676"
        },
        "item": {
          "id": "4d15ca89-df1c-41bd-8f64-95213207375c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "23429768-10ab-445f-8147-8b10971284d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3050e83b-8108-48a0-bfd9-6c5aca546b4c",
        "cursor": {
          "ref": "a4b38cbf-b9bc-4559-80b1-58d08423b9e8",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f922a061-7c17-4a17-8a2e-85690fe96b18"
        },
        "item": {
          "id": "3050e83b-8108-48a0-bfd9-6c5aca546b4c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a8c8af2b-fccb-4859-9b8e-d6058aa2d7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989c1aec-3b94-4f85-a880-920d54be34e1",
        "cursor": {
          "ref": "8050eccb-4a8d-40b9-a4d0-da90fb29733a",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "63567066-2906-4e0f-8d91-dd8d28625ac3"
        },
        "item": {
          "id": "989c1aec-3b94-4f85-a880-920d54be34e1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b371c1ef-b965-43cb-9242-cdff0dd71628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7d1444-987b-41ff-8bc1-be7d242f2dd8",
        "cursor": {
          "ref": "11210e65-522b-414e-b712-511f10125944",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8f7a7c14-f522-45d5-a62d-8c95edb40990"
        },
        "item": {
          "id": "1a7d1444-987b-41ff-8bc1-be7d242f2dd8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c70a42ae-4b58-4016-b4a5-59e5e8ac3ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62423af8-168a-4bcb-823f-3da16d7dc015",
        "cursor": {
          "ref": "ae13d7d3-e92c-4d92-bf00-e007d893abc7",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3fd8acef-84bf-4a5e-ae9b-34710ee0965e"
        },
        "item": {
          "id": "62423af8-168a-4bcb-823f-3da16d7dc015",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "01693593-3826-4d8b-b4f4-20df33f31b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11adbe1-8f8d-45d8-b1ae-cca9913ec986",
        "cursor": {
          "ref": "85f2a3ef-7f85-4a75-bc88-26e312025099",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c8ba0542-ed92-4fdd-842f-0b1bec47c41c"
        },
        "item": {
          "id": "d11adbe1-8f8d-45d8-b1ae-cca9913ec986",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f4425550-5743-4e42-8e24-f489aa58c1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bee7d8c-2412-4de8-a564-7a0eff7ada64",
        "cursor": {
          "ref": "76f395b8-a63c-4053-bc38-572f3f78b084",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e6a34482-0db1-475d-8c87-de4d89ed6cc8"
        },
        "item": {
          "id": "2bee7d8c-2412-4de8-a564-7a0eff7ada64",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "54abd554-3f8d-4062-ae97-d0105da537a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cab03a9-6594-44a8-ba7f-18b31f6f6125",
        "cursor": {
          "ref": "9c5e27e8-170d-4f60-83d4-e70ecb0fe8e2",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c0f24f15-7598-4925-83ff-8c3a806ab78e"
        },
        "item": {
          "id": "5cab03a9-6594-44a8-ba7f-18b31f6f6125",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a411ffd6-9614-486a-9249-1eb410ea6aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd22584a-e6d4-4b0d-87e3-95c05a9af8e9",
        "cursor": {
          "ref": "f6081232-abf2-4913-a51d-9736b6124edc",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9d80e8db-dce7-41d3-b6ab-77e9c395f684"
        },
        "item": {
          "id": "dd22584a-e6d4-4b0d-87e3-95c05a9af8e9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6b298567-4421-453d-8f45-a0af9d7c855b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b017878-6fd4-4e87-a1bc-84e0769823c2",
        "cursor": {
          "ref": "78f7b8c2-f960-4356-bea1-d757d12ebd22",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "133c8ead-29e1-4814-b66c-df9adf87a61e"
        },
        "item": {
          "id": "1b017878-6fd4-4e87-a1bc-84e0769823c2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1f4027fc-ea7b-4ca5-9296-041ac0a152ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5487d40e-da2b-4afc-b40c-d9b412e38c3a",
        "cursor": {
          "ref": "24459eb1-1288-4c01-a4ab-c8ccc0f8747d",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "427daa3e-a15f-4bcb-b766-782da52b24cb"
        },
        "item": {
          "id": "5487d40e-da2b-4afc-b40c-d9b412e38c3a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8d17af73-443c-4e07-b8ac-ae67d10453a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6d758a-e540-4334-95b5-9c7053f67748",
        "cursor": {
          "ref": "bd32f24e-8a39-4268-8703-78e98ec6d46e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "58fbfb31-5794-484c-8106-132e3560f02e"
        },
        "item": {
          "id": "ee6d758a-e540-4334-95b5-9c7053f67748",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3f4a3dc5-dbc6-499e-b612-c10dae347f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8678b11d-a0da-4349-963b-0e3a3a6ba1ed",
        "cursor": {
          "ref": "f05fdad7-3b74-49c6-9549-93efaadc25d6",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "86200685-49d0-4b87-91e5-37d935f0d2c1"
        },
        "item": {
          "id": "8678b11d-a0da-4349-963b-0e3a3a6ba1ed",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "313963bf-9729-42ab-b5a1-3b7706bdbdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011d4195-a301-45b3-8d05-a7ed32f686f7",
        "cursor": {
          "ref": "679ad6f4-5007-4ae5-97bb-b6e05bb3c59a",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b34fd236-9fa6-4c57-8411-f4dd5b48d8de"
        },
        "item": {
          "id": "011d4195-a301-45b3-8d05-a7ed32f686f7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "27a7c7dc-5c25-4db8-876f-ccfd2afd68af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903cbc15-a1a8-4ce3-84f2-e6b53ec7ff8d",
        "cursor": {
          "ref": "1764c1de-d9b3-4dad-95e2-4531f26d8a6a",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ad31259a-b421-4128-9315-11a1a126494f"
        },
        "item": {
          "id": "903cbc15-a1a8-4ce3-84f2-e6b53ec7ff8d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fbeae2ac-7224-463e-a170-bf604276de14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b40404-96dc-471d-967e-5271bc51e986",
        "cursor": {
          "ref": "db105d82-40e8-452a-90ec-c1dfa14152a9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4c207ff1-c645-4014-b8e1-e3c1d15c8321"
        },
        "item": {
          "id": "76b40404-96dc-471d-967e-5271bc51e986",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4a782b83-4842-4fb7-bdc5-3a65b0edd33e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b8c28b-8758-41fa-8ff5-0d9f30d6e48c",
        "cursor": {
          "ref": "51e5eb80-1e53-4d1e-a210-6193e05f1c3d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6a228159-515e-4737-8069-bb1bcc5e91f7"
        },
        "item": {
          "id": "91b8c28b-8758-41fa-8ff5-0d9f30d6e48c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0b753e0c-1fe3-42ac-8c01-3b8de2814b74",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "0c86b58c-8816-4e2c-aa91-20a98a022ccd",
        "cursor": {
          "ref": "8d1da0f5-cc8e-4391-83ff-b2c541c749b8",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a89044c4-f77a-41e9-ae75-6359781ed844"
        },
        "item": {
          "id": "0c86b58c-8816-4e2c-aa91-20a98a022ccd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3f84a993-e156-4288-8457-c37f95bcd3f5",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d6c821-aa79-4645-8c2c-26f051ba203a",
        "cursor": {
          "ref": "95199334-08e6-4c89-bc89-a2c0e0cce8dd",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "66744957-be5c-4b28-83cf-f093c940fdfc"
        },
        "item": {
          "id": "b9d6c821-aa79-4645-8c2c-26f051ba203a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7a18cb09-2130-40bc-a961-9f126dbaaead",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dca11bd-e1bc-4d3e-9597-978b422e41f9",
        "cursor": {
          "ref": "770bfeb6-70c2-424f-93db-a18f558cb703",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "352988b3-dc3a-44de-a3a2-45a7a54ab53a"
        },
        "item": {
          "id": "6dca11bd-e1bc-4d3e-9597-978b422e41f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "72ddd062-b63a-404e-8e12-bab4b287917c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dca11bd-e1bc-4d3e-9597-978b422e41f9",
        "cursor": {
          "ref": "770bfeb6-70c2-424f-93db-a18f558cb703",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "352988b3-dc3a-44de-a3a2-45a7a54ab53a"
        },
        "item": {
          "id": "6dca11bd-e1bc-4d3e-9597-978b422e41f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "72ddd062-b63a-404e-8e12-bab4b287917c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c631e040-7878-4ddb-b5bc-cd5aae047f13",
        "cursor": {
          "ref": "94eb1696-6d4e-4fa5-95db-b981d92dcece",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "76efe1c2-2e72-45b2-80c2-c98fdc92e4cb"
        },
        "item": {
          "id": "c631e040-7878-4ddb-b5bc-cd5aae047f13",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "52a7412d-a264-4311-953a-8bcb4110dd9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ea3917-4eb0-4c29-a11d-0c2ef1faefbe",
        "cursor": {
          "ref": "697039b2-13d0-45f1-a8c9-e35ae1e205ca",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b9a4999b-40d6-4431-91d9-9ca181792373"
        },
        "item": {
          "id": "d3ea3917-4eb0-4c29-a11d-0c2ef1faefbe",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fa45fe76-362f-4afc-b7c7-d82aff1f54b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}