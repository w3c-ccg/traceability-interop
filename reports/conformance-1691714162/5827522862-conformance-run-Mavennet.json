{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b91f1558-a7dd-40ac-89ba-67e687f41bb1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "90cb5a59-338c-44a0-b1ed-41e9f67c1f95",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f68c78fd-ead1-48b1-9c35-279a89214811",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f0649459-91ae-4e8c-982d-907a50350aef"
                }
              }
            ]
          },
          {
            "id": "51ed722a-c8b7-451e-8dbe-30949826c880",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eeb4ef95-a04e-4241-b32d-6931aa452498",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "72fbc62f-63e1-4fa3-a9d5-4190a36956f2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f92c037f-43b5-4f40-bdd0-b3090b2f210b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "99f8937e-77c4-49a6-ad60-77a433d62a2c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f13a8eda-fb26-43b3-b066-6b79a0d778ec",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77966f42-8cdf-4ec9-acee-6fd573362e52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a386bb0c-999a-4da0-a166-46361b98c2e8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "66554ab2-e100-4238-9128-ae7a8cad50be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "48fa49ff-b5be-4c5f-9b70-fdeb6b80f5e1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5ba2c20f-7634-4d3d-a280-0a0d90839464",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ad467b5-9170-4002-b4b8-270113d68f5f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20bd26bf-60d2-48b4-95e9-d39f1d277d66",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e311cf63-4d7c-4e4b-8e8e-d1b76034a930"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c46e94c-c122-4867-8a8e-d275c33901a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56754223-dd5d-4a3e-a7f9-d7cf0ccf0716"
            }
          }
        ]
      },
      {
        "id": "e34a14f2-b9ef-4f27-8ea4-6118fd23c383",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7620b71b-38ff-4afb-8e5e-62bf8a3c05c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3bf23f80-1b40-4d15-b804-40753fea525d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f8133c06-d875-40e0-b8f5-e033e060b3fd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c91c41-a320-429b-98c3-e9e872a818aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30fe66d8-1a5c-426c-9ce8-8d8516d2d04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e106eefc-d7ed-43c6-be52-5eac791de7ae",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec038b87-9b38-4e2b-91fa-20c290c5c723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44957e9e-cec8-44c9-a8e8-8cfbb9838c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab76fae0-9566-4fe1-bd70-a20ccf5a08f2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419a5f55-c2e6-4be5-9536-204391a45793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2aaf4ba5-03cf-4443-bb84-98de46a754a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe26acc2-95af-49a5-8fff-3eb5f0dd916a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf9b87e7-d712-4e64-a422-4e0663fdfe05",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59082f2c-8261-42bb-a10a-ee59e7abb74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79ab30e7-cec5-4212-9f17-6c7b6ee45ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4528a69-f900-4d5c-9e91-814725249cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a573f2-4aa4-4361-b62a-c6a21239f53e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "581f67cf-c722-4f3f-b904-633c167481d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f56793e-88b7-4c0e-aa8c-266c7af30efe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90a927b5-ab2b-4b61-953e-9e56e1e08bbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "42a59671-1c13-416a-b36c-a5256ff3a656"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07d1a000-21ac-41e9-b059-ccbb4026c063",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "dcaa26b3-eeb2-483a-b54c-391aadb7c733"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "577352af-248c-4c0c-973b-ad21abfcf05d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cafbf34a-a56f-43d6-812a-fa0b6bc69753"
            }
          }
        ]
      },
      {
        "id": "27f45732-0aa6-424d-bf12-9065a8e36148",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ca08c8c8-ac67-4784-b6b1-97f1e3532745",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9b6652a-f03c-45d5-bade-905468589c1e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "663b7d70-88a5-4dca-9b0c-e613dcd61ca9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e5fce5-93d8-4f5c-ab31-5f656c26f3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62dc3de-118f-4489-9151-4352c76878ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cb40e7-9d23-4014-ba4f-a4b9593aab27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63a6c889-411f-42dc-b8e3-b2c799903b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d75832-a797-4e7f-b357-7ee7befa26ed",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360658f8-398c-477d-a539-02001b5e9d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf63ef06-2009-4448-b115-347c09e092bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c748dc-ade6-488b-889f-352706e1fd40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f09d5a57-d7d1-41ea-a106-78809d8fc1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5033bfdb-eee0-41f4-9aed-d04c9045c212",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f5e2cc-937e-4589-bbc6-3890e9dbedd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18da744-e020-4c6d-8a65-a67ff46d83c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfde84f-d211-43af-a902-ab4e3bc95255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebb001c9-38a5-40a3-8777-9edccddbdabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eadcf14-3ddf-40f9-bb37-6943b3a46212",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec2dd4b-a8af-4628-9645-f16c6ab0ca24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f578e7-e4cd-4ba3-b68b-3022af66e1b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c98b44-9098-4b2f-bc2b-b00a7e61adb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8def7c2-f3eb-4b30-8698-bae61fe65dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11ea13a-581b-4ea9-a912-e25f1b4dd3e6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d07c9c6-dc97-4294-9400-4c21534a2148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa67af7e-ef1c-4800-8829-0d60f8c7c95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78638ad4-b524-4d1d-8cb9-e7fc30047e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36bf01f8-36f2-4bd0-bbb9-6220c693906c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2272f0-73d3-4bbc-b11d-a8e14c807f83",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2795bf6-c294-43f3-a7a9-bcb57fe7ebe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4263403-3d8a-4f48-a9b9-53af27a51ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564b39d0-b8fb-4815-8779-d96cc756c956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "200d9804-c2dd-4d5a-8dfb-9db2d835b112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e064502a-27bc-4f02-8b86-5e248745da79",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7e4a42-971b-4f7c-9953-64d82940c84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0979a3b-ef6e-4de2-8df8-2f184eaf0204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3f3af7-ed56-4ac3-82d8-cf771d9f9b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab43d93c-d4fc-40cd-b0c0-853302405d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5490658-ef7a-48ea-8b86-b7d25f10b3da",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e9a18d-6860-4516-a170-9b0722f06432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad61dc9-845a-44de-81a5-e3aa3eb6b5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4abc98-baac-49dc-bdac-878f6bb0ca50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d154d09c-71c3-4a72-9d32-b3fcf0d4a669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37269528-115f-4084-8fe2-bb5872599d65",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99c6120-23b4-44be-93b6-d1d3928b99fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1492c1-8949-4d8c-b715-648f0cc9e721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669dcfc9-c1b8-451c-8392-1118d3cc3bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "391be9e8-0d27-4a13-8a4d-6dfd2e7caa02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ce450e-0ff8-437b-8e0d-560cf5d970ca",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bd01ff-ec7a-4a7f-8c3b-9411d7a23aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8458a03d-f7ca-45e8-8cbe-934d4ce78c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d74535f-b643-4ad3-a9b3-e259f8bda604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddb8262d-8716-4545-80c3-cde73e092529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a16392-24c3-4c67-af89-4d0054c1bad1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab89cf8-c796-49c0-99f3-174cdbe0a00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e25b40-1a2d-4f35-b7bb-ae98239b621d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2437564-3cbe-446f-b701-a2f3d4c1cec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f238f28c-9a67-437c-8373-a1925999bc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf0529e-916a-4f94-bfd3-36eafc72dc12",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2aeeb10-60b4-49dd-8502-97a202cdc454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ff32a5-3c94-45da-8cd0-b0142c962b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58c1113-c2f2-4854-bdfe-8e318c083b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1668a3d6-bf9a-424b-9f71-ffb430b2e8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57592c75-5225-4eaf-8fb8-65f6baf58b79",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e8013e-0a48-4fbf-932c-057021eb20b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15a2531-359e-48af-9084-51dab7be6f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440bac06-3b97-4dd7-927f-c72693f1b6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc4f8c51-7241-4bed-9399-09b32833fc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365d43a5-8f10-4c61-92bb-0a8120051507",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82b5855-5d44-4365-a2a2-5b0397ac4f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf959f7-69d6-4696-b4fa-0f64f9d191e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225cebc5-931f-4ab8-ae9a-4cde1799afda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18c3a201-0181-43be-857c-35cfc69769c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065b65b9-b3de-406c-81ac-83e6d67eb90d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9949928-87b2-4cc6-80e1-700a13f164db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a4a301-48c6-4cb7-ab3a-38bb17782dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6787b9d8-97d1-4807-aed0-ca4685bad915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fb8bae7-6efe-40ab-8381-7c084239535c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4f588d-0d58-426c-8bd8-0bacc20d94e2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325d6812-8a36-46f9-8f63-5b5b533c2fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6327f5ce-c27f-4af6-905f-70e7b72c2478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4341e40d-3f94-4efa-942f-7b2cd4898291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6d6718a-a1ff-45b3-95a1-18325b33ec4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd3239e-6c8d-46d6-b9d6-0697f8ce481e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe4750d-5a1d-4008-a8de-74df4311b2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57148e32-0330-46c4-8063-f2bfd8663996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58aff0c0-8cb4-4437-80cc-973decef9db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf675f94-7342-4cd0-864b-83b5b0afa84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfe6991-95cd-4c25-91b0-e3a83ec7b7d4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd5bdae-c1b2-4a96-acc8-593bb6d23288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fcf5ab2-a90f-44d9-86b2-2ca63aa8493d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beed3e76-2d33-44a5-8389-044ec42e6a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5f3f92-6055-43d0-b27f-fc12792efbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c253a79-ccf5-469d-86e8-ba6cf645bf0c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e548d74-bd02-47bc-ba65-2342d023a395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77eebd84-b4fa-4f42-ad81-4f292f20f91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76991b47-3ffd-44fd-accf-fbad3d5fb2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0546f3c0-ae60-4f73-833a-150bac10d7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5370911-4af4-4601-aecc-cc7b2e396dbc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14218e31-b1ed-418d-a543-0d0096e301cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1a6017-2d7e-46d2-bcbf-3909978ebe22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77195732-3b0a-4f64-8607-466a60d774bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92161c7c-8094-4397-8fa7-8956f3d9d02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897f7b36-9bbe-4178-bb53-2ebaf1b64147",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fa8ae4-5697-4d99-8bd5-3062d0a91d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3339e582-4261-4837-8d57-419a17bd3341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a995a7-cbc3-4be3-b0ec-c49f2b522ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de831b8a-ed3a-4254-95e3-3f4c7de40401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9562ce-4058-481e-b3c4-356c03212ef7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8d3ad3-3518-4b3b-8e0c-61768e7524fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a9df31-b607-400f-810e-324ed22985d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25821129-ad75-4e87-8b04-cb30c6569635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "972c2c8c-7878-4c04-addc-1c4bf99df7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0f4b83-07de-47ec-b784-271e76caab6a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec47fac-434c-4acb-9068-75b1483a1c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8622a38-82fa-47c2-97d6-e50ec63a5fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc3969b-5dee-42c6-91f8-ba8ab84495a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1da1b11-ba2d-449c-a879-333b333cb427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddb871b-8440-4976-ac2d-59d6e3608145",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301ffa79-ed54-4a1c-8273-adae1b1fac3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58606a1-3530-481d-ac77-ca7c0818fe30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abdc188-cd68-4534-8481-74eb14f6b531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3533ca-c9ed-444d-bb10-5e9165ade00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e21512a-6686-4923-bd58-b2b5f1beaab0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5a3483-61ef-45b2-a26e-4173245ec4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7351dc-65ef-4979-8754-6ef385fef1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4a483d-37e6-493e-9f6f-bb39962071f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a8cd23-04e6-467b-94d1-56075f539091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5988cd3-4b7c-48ff-81ad-b764ee748c2d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d5757f-adee-42d0-83b7-b154628d89e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fe46c7-f2eb-4292-a52c-d68f73ab5c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b598dba-c6f8-4cd1-90c4-df09392aa8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "941f74db-5f3d-4374-8f39-526176165f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702a5d95-b6e5-4268-b5db-328a6cbb3865",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521bc5a4-d8e1-4ac7-8d89-3ec42cb28401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a886fbce-7de3-4b5c-96b1-e8fe04d93fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed23594d-e554-46bf-9e7d-f861f020d496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6bc54a9-0c5d-4810-8fd1-c39d06c548b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34c7a3c-f4fc-47cd-a64e-44d66bf82c03",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71797501-cd67-4185-a23c-858f1ffe0bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c783777b-3e8c-4bea-ad50-d637f6c887c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea7ec94-c6c9-4933-8470-5f5cbd8b71c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "378718f6-7d55-4508-abad-b067c8211ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99205039-2d22-4788-9d50-552893cffa0e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b40dcdd-f167-4a77-9519-ed95038d0192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a568c4-5570-4329-8d18-5b1c33ab29e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6d64c4-0a84-44bc-a94b-c6b409c203f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63951063-90e0-41dc-8e86-d934fb884524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b26996-f8bc-41a2-afc2-80c41b189277",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc93cf6-8bf1-4123-a8e3-22b34e96c3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a99741-8d2c-481e-a7f7-f34610eca01b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4544359-6fdd-43c5-a708-c548f5d2b526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "21965bd6-3b61-49e8-8d20-1f29d8a0182f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daf3c9b-0989-4a9b-8281-47de33618f53",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83b809d-123b-414c-9a61-40f71238d502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0245a201-5f43-4bbf-bbfe-31196361702e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9e03e1-3f91-456b-b03b-c35a5044e205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e61b4a15-3e19-4a25-9a29-06daef8bd515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2dfd26-3ce2-456e-986d-38d4d16de454",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31b897c-5790-4b35-ae69-b900e41dc902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c935dd-68a7-4902-8da2-da2751d52664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9e7f63-31e0-458b-ada6-92128a2eb67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cde3ce00-e15a-497d-b5dd-d9599cab5f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4dec69b-b13c-40e8-b10a-b006041dd6a7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80e2090-3a6a-453d-8b84-721c454cff97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aeb02e4-7e19-4852-8c22-4cb26efbcb91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097dfd15-2d67-4607-86a5-217095cd995d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a602d43f-6169-4413-8778-3e3f1c2d6dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9d3d15-02be-437c-98c1-0c807bb026ee",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bb674e-5c33-4ccf-9742-81d5d953bff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b947f1a-efc6-4053-ae59-3231ce4ec9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e1dcd1-37ee-460d-91b3-2c1943f28235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6489cd-4285-40e8-a7c6-44028d563fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1fe0cf-28de-45cd-803a-6fbe6ebbd25f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dc56f5-823f-45cc-a869-83aed949e5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc2370a-7622-48e9-820c-af5aad231ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f81174d-f73a-41f0-ac01-d9a7a9c9bd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa39842-f034-46f1-b1b9-4e067bbab21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87cd8a6-30c2-4b63-886e-461e6fad124f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72e06ab-33b7-47f6-92a7-363b99ef202c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eb15313-3484-4445-a9bf-93264d35bb4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb1ac4e-f73c-4151-87e5-33a8ccd117ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0e972b-df46-4712-9d02-b92d80e750b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e4610f-20f5-419e-afad-27c7f05022d5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509aae39-9077-4c3e-aa9a-0552731dbb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d6e34d-2508-46d4-84fe-2361d86e4744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b843860-f3fc-4cdc-98ac-2efc2d28358f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87941ea0-2dca-43f8-bb7a-2c4a1cfabd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e1ec3d-5917-45fb-8b9a-e9994eed95ff",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9695a2a5-e10f-4b27-9e66-d7b994dbe051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e686549-a388-49ba-b63a-b3943b6196ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec51578-8f37-45b9-ad3b-c749dead1ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "748e5a6b-7073-415a-b056-e95408d12caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97215a9f-5f86-45c4-bafe-2fcfb9632ee1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf54f11a-5ee1-4009-b7fc-d1a10aa725ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e517b0-019d-480a-9086-39d027824a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd032c5-13b9-448c-9877-2de907630059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f003f855-972b-442f-8a88-50fbdbda1d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be690159-2e27-41ca-8e79-e8815c7e16a3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e75082b-9403-4014-9adb-db3c7f7df87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9faac4c9-ad4a-4a23-a9b1-81de165fca1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2e6b47-293f-4ea6-8d2b-c44bcb289513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "677c8fcf-bb6e-48b1-9b24-2567818d43dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3091cf7-6ac8-4eb9-9e8f-85ba88d9c231",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c2d3e3-851d-408c-84e9-6d8c4d3e679f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f1bd458-0294-488f-ace7-1a546ee631c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8a2bfe-086b-4b98-a754-78bf927b47f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "52b13113-07fe-4377-983d-7e24dd057ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2d8b8d-3f6b-4ef3-bb33-84e603174cc7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a14da71-828c-4519-8e83-fcf48a18a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cb55d8-b904-4b5c-8955-473dac5434d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c8eb2e-cf3b-4ba2-a22b-df666316684e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f9173fcf-f847-4eec-91a3-3a775582483c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ad3446-043b-4a4d-ac10-e5866f104e23",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4ef544-0f31-42ff-a598-0f9ef50eeca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcab05f8-7168-462e-8565-d214faf091cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2931d92d-a846-4a52-9e0b-1e0f28bcdd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb2bbb5-b46b-4901-af27-c0e630c849f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982a4053-c3c0-4d3f-8988-795ddbbb58e1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ec65a9-c562-4a25-894c-aa64d00366f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4832ba34-0e46-4304-9d94-5650393da6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e46254-13ab-408a-a36a-77777961b632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cbca5ea-eab8-4fe7-82ec-ba9cc3ed0039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b6c5b5-d2d1-4eae-8cc6-d73a0831b6b8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb68a4a1-0758-4df1-82c2-1012e4fac072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50c2054-2394-460e-b34d-b3bc4d231cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9848071-dabd-438e-a887-bf3232e0926a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac93e4d-b09a-4294-86db-719174da28de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f64beac-574b-4216-ae94-7ebf70f03bf6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05351db2-1d5c-4027-9c10-a17c2cf1e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9690d0c4-3722-4c6d-9861-1ec0d8b33e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e99723-e7ac-4121-ac20-a3a3d5677f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5fda68-854c-4578-8f9e-e8ee7a978c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cef0cd-0166-4927-8756-dd3864709d66",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce18893a-293f-4e55-b203-0cd3b8fd1310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73476474-20fb-48c4-bf90-9f0de4ee62de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddd0e4d-2844-402b-b41b-173f4e3b0583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "427085df-73e9-4a2d-824d-dd7bb6c1fec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e482a4c2-8db0-4b36-ac3e-1c4578a3833c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f540c22-f234-48d5-842e-289b528e81ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47a4fef-2356-410b-a205-2a2ddfb4b495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b261c7d7-7856-44ab-8386-7333151bfa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0c0fdf-7bdb-44d8-a3ce-2935f94078df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc4f7bc-4f48-405d-a741-dc03fa21462d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbfe326-cab7-4877-9e05-6717e21c1b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60022b03-8c6b-49f6-adfb-82c3e3548763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae45e8f-8f38-43bc-afea-6596366adc4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e5088b-d88e-4193-a397-3d7be1350608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff39b36f-3cf8-42ee-9a14-9eeba695ce9f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d59ac5-9c19-4eed-8fee-e8e28330cc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd06388-76d8-4b78-8707-d9240167ec1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2751d18-2692-4f28-91fe-75c73c0339fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7de7f382-2bcd-4afc-b14c-3ec0dd4d9574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50439ed1-29a0-458c-a145-ba0711859d99",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906b801c-051e-4e5c-838b-dd27fea88011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed4e98c6-9222-4c2f-85e4-cc3b5090c2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627eddf1-126e-4c34-a042-bfcb985b573e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "32917201-38ac-44f9-a317-fb7e9063e92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2660d9dd-106d-40da-a7c8-978424d4e79c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592023be-f442-4063-a54d-f38bc6d0f054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dae39f3-4f87-4835-ae5b-622f7e55c926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad78dbfc-0221-45a3-bbc0-484fcf2377e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4614880f-c345-48ef-8d3d-46587716e689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d863f01-0656-4bb4-b840-6902fc161efc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a6d260-9d25-4ddc-857d-e97498c48578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedb35aa-6d7e-4d43-a486-08afe4086851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fa3d2d-d430-496d-b0de-4e5836eb7b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d81e1e4-d023-47b7-b13a-ba68b909d574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b2aea9-052e-43cf-b226-848edd17502d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a005ce-704b-4148-828f-b074ad2fee0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1f1ce3-2300-462d-b1f1-042be8ae98ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2232c1c3-ee79-4160-badd-9387fc286e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0261d636-9913-458c-bca5-1557956c9572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c754715d-83e3-43d5-b4bb-635e5c4998a8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9774607-14ce-4cee-8d9f-dae4e04aa4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1c3f29-588a-4066-985c-5995888abb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d291d356-b25e-407a-80ab-c3daaca193a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "533fbaac-70f7-4f2d-874c-9ff1a1c0cff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49dd68fb-f4b9-4143-951f-4aad22a040c7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8af7d4-9c52-4585-a1ab-ea78efb66b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6ca48f-fede-42e2-951a-d4fc1cd7d9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070332dd-7a01-42a1-a402-c7949808f4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8e93fa18-5bf0-4e8f-94fa-1dd1bdc0d63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5031d4e-7f44-45b4-a932-f17f0a197c5b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6bb7c4-3a72-4ec4-b8ee-255bef74bd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54227e11-bc1b-4d5a-b4f8-7d808c4ac592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a2951f-ccc2-45ad-8b1a-25975edd7860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f13e00-391f-4199-a631-fffecaa31c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461df4dc-d498-4886-8517-89743882c7fb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91334e2e-a27b-4a43-b0fa-409e4e456399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cbf0c2-e8db-4707-a1c5-7b86bdf09217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939dd773-acb6-42e4-8418-993e1356ccef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fed71d3-512c-4250-99a9-1f24f8c76fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b233852a-a5ae-42ba-bc16-fca541ba872c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4320e42a-1ce5-40ee-ae28-346e047a3b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa7092b-e678-4b06-a23d-892bda4b6d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb91c082-7167-4154-a15f-7b9e16e5854f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7716c2c8-2ac9-4f7f-b59d-349c407ed976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a6cb20-a90c-493b-8c1d-1f774f9034cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5784081-2ce1-461a-8226-b735f0b9da56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c965e49-b5b5-48cb-a715-f4aabf914a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000e3866-4b78-48af-ba4b-68053c6a16b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6676a0-305b-40a5-8efb-e397367066c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda62054-b5fe-46bb-b371-d063e6fc2af8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc37f2f-4426-4e05-84df-02711e77f12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14146b3-50de-405e-a1b0-6a4f4f4a4cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaa684d-1440-4f7f-8c8b-374ef89561d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b899f53-4c34-488c-ad46-aa28fcaf4c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10258a0-d784-46d6-8046-f02587e6dc3b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec625d22-4ee1-4c62-b87e-19fe12702ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea97ff5f-12b8-403a-8da0-b724c4b6587c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd269314-d9cb-4d1e-b476-37ee4722cdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "92906ed7-677a-4f1e-b62c-06f866adb229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2c8d23-d7ec-4e50-8f8c-676b859b100b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6961d03-3f80-4a44-b81b-059193a49980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d95e4ac-9b5d-47e0-8a85-dce1a6509590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bd1d41-69a9-461d-af0a-75a49c1a36f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e985d3c-93c2-4534-9986-644df9e803b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffe61d7-c6c8-4d6f-a9c6-4e18fe8a17c9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6504dfb-bb5b-4808-950e-a82fd5e8bd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25409758-4366-4800-ab0f-71cb9349f666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f8fdbe-f957-4570-9f78-0b349958fc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "533df832-7f63-45ea-9656-5653c01d0047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5ee871-65ed-4774-a911-b62793aa29ea",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c28a0e7-541f-4a65-8507-9005ff2a08f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d73c0a-7c74-479f-b167-c886246fdc3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e16d16-0d0d-4875-a440-03928e2ddcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "078dfde7-1b3a-42ba-9af0-c250357c1e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324b81d9-bc5b-4fbc-b06b-43878b17806c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a575bd6e-1583-4ab7-b12e-25008c80b96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc72496-276e-4b59-a64e-487949d1dd18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbeab100-dec4-40cc-94fc-e1fe9aa6a7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63d0d110-436c-42d5-abb2-fc93f6c77b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d9bcfd-b35b-4619-8582-e1d42d173043",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83791844-49c9-4c69-9382-ac4bcdb5766e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4221d843-4d2b-46a0-84b0-549586f6c2af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea39def-32a7-41ab-9fd5-0acc8ed4e231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5212ed01-7ecc-4110-8e1e-1b8c12a2c91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23550474-8523-41f7-aa8a-c97b2b7a39d5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae262edb-69bd-4413-a31b-98390bc34eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644ef046-96b5-4408-a477-484b55dc5662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c80432-19d1-41d0-af24-d700f18f87ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc2d762-fc70-4ccb-8fd7-d95c8d2e58da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5550c09a-9952-4216-b966-11e543df06ce",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fea5521-fa3b-4367-8e18-434f88b953d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b68ecec-26be-48b7-9d17-3f9938e71afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88570fca-ef5c-48b6-a28e-219870122afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "72cb70dc-9be2-4acb-82fc-b3606a8786d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015036c8-c687-4a0a-8454-7d5b44350c91",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c874d8c-59db-4155-8d88-64b8454ab6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0fc647-527e-4d45-a8d2-07c4017e33cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9f78f0-fbb3-4079-8651-01c965bbc5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8766059-bfd7-40e1-8516-05698ed06402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c968e4a5-8d0d-447c-aa74-718517fbab65",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3315183-e8ec-4da5-ab2c-9f73bf3885f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b9b7a8-f144-4e24-b20a-741dfc0533f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380ede4e-88c0-459f-b6f0-16f3cda2cee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c612fa1-941e-4294-bd8d-9d99f0a1bc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22a4898-1dca-456c-821c-19566498154b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae38ad2-eca9-48c6-a3f3-e2271081ec7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38057b6c-b702-40fe-8e93-10b21ba0935e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bf68e0-30fa-4057-9a7e-275d323abdc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96515606-4bf3-4dcf-a658-425977fddcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fc26af-85d0-41e9-905d-731d9a34253f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc987b8-e031-4ca5-b2f0-8565ea44a8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a85fc6-1441-4074-b319-8917256fca69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd22b3a-cc90-4314-8354-5ca75672c6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "84ab089c-52c7-4d3e-b312-c2074b9016fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1273bd1-0c0a-41b7-a04d-ce4b36a6a57d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6a711a-905c-48b6-8d9c-23e1dd7819d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b44d9d7-3ed2-446b-a117-a8a56a696025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bf7574-3caa-4319-b242-336a8dfd64cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81610ac4-b869-47e5-86dd-b2c3051f64cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3ecc29-db0d-44b5-9773-2dd4da392d8f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d977a06b-f155-44d0-b4e1-d95e6e6007c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21f7e13-86cf-4107-be4f-d49fe3f9d8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8d966c-ad23-4155-91af-fffd02dbda43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9ec485-40c8-4769-8313-be9e9f926f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d7f652-9324-46cc-b408-378052606c12",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c635a917-3b03-4860-8688-9bae31745a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c135588-f3f5-4c49-b845-1d27bc9c3061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de93d779-5974-420a-ac7c-0347ca7972b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95ef52e6-68c3-461f-be7b-9851903cd754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dfb0e4-09f7-4a89-af8e-7df68f5ee645",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71b5159-1fec-47a9-b97e-3829821b1050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f78ee4-4f65-4bf7-888d-70808f40cbce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9174a396-15a4-40f9-85e5-8fcffb62a7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c0d553-1df8-494a-940e-99e2ada8dc41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd40702-4e01-4a17-b3ea-78c5ae9b24e5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15826a0-dd09-487e-8a66-f1f6e9e8cbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0f11af-cfed-4c5e-8835-c1efdc865c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919ae435-4945-42a4-ad4f-5bef2befd581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9013ad22-19a9-4f07-af74-f1126b5f3891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89a1946-0b82-40c3-8157-faf3d9ce2dde",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "963ec1f5-7a28-4cc3-918a-4d52d724e198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec1a895-05ea-4ffa-9515-13d1efbfddec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ca2667-30e4-48ea-86e6-e62a4e6d9dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c340aec-098f-42a4-aa0b-37989e2e9fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ee74d5-f57b-4f3a-a558-6b5abf8ff3bb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b754ec-d3b8-4206-b3fd-00a814e52a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883f4124-ff6b-4775-8b19-519dca2c7c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13364f4-4eea-41a3-92b3-f05f417e723a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a94d119-a44e-4574-8957-ec5a7f7a15f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8e2a62-b3b7-4181-b065-2f4a398acf37",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dff2983-c969-48e1-9a46-2fe537851eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad83cad-ee13-44e1-8ed3-001704de0a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785d0bb3-3ca2-423d-b70c-4bc1f8432119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c3182f-1af5-489d-ad16-b68a8de54d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b0f3fe-c427-4e6e-9efe-bc23383c0e3c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642931ee-50d8-49dc-9fb4-b3543eda7f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a3014c-a024-4ee5-98cb-72e345911a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74547e3-ac31-432c-b6bd-6ebce54cca45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eca033e8-367a-4923-b47c-bc0242e4869b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280f4362-08d9-401f-8722-53ee8e892bbe",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a96a6b5-7f03-4340-96e3-81138b18d121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91a1403-1aee-4590-acc6-18b7199be3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae03cc7e-9fbd-48b0-8403-85551b0f72ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79ffe4f6-9a5f-461a-a644-bf1a2bc976a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b480cfd8-99c1-4353-9480-9af577510772",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379eeb62-29c4-47fa-9b63-b62acc52223d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15aed574-5604-4b69-9a4f-d829c7540932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f59c45-0531-4cc8-bee3-1cfa6cfe458c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcf76b3-e627-4e69-b5b7-a2c7a85f1251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ccb42a-20d0-4402-b261-319f6adc81a6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85615e70-a57d-40d3-92eb-875232f27b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f35107f-ba1c-47db-9995-fbb849771324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb73ad26-f9ce-441d-90b5-ed6238717958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f9b14c-2463-4846-a80f-7e5e8089b03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc863bdf-b27b-4baa-a6d8-2f98183aac0d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ac3c40-295f-44ca-b16a-82f21261a97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd08712-2a7d-4b59-a97b-d9abe38cdf2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680a307a-6f48-4c03-be1a-8ef428beeac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc8f6bf-0952-4cc6-b37a-4f60cbf5294c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f9b185-e5a3-4166-bbae-d91f7c162d00",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db37be75-d19f-4a45-87d5-81f7a3256eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efeb12f-de41-4413-9c86-1bf674de27c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e221e0-14e5-4361-9aab-23a422e37de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d632ae5b-e868-4924-b861-bbe574512039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fc26b7-586b-4492-be48-25ba158d5589",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350fed90-171b-4ade-9865-957f896f87a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc40411-5692-4f7d-b3aa-42da440e0f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299f89d7-ddc7-45f5-94ee-8cac889c99e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d29f1d14-b4dd-499b-b72b-ad948b4cfb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9124f166-c819-4b34-b522-73a221fed89b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45b7193-054d-4c9b-94e3-68a97b619540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb1e717-849c-4ef6-96ff-81ff64b0c7e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f8a6d4-ff8d-4cd4-8b72-0e8afa957b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb62b278-1f01-4b01-a7be-ffabbf2b1d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4905fc1e-85a3-4f1f-9d03-3110a36a5418",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69126d17-d44a-43d8-a0a6-496a202d20a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be238d0-e69b-4b33-a660-864a05be4ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7b0ac3-48ac-459d-b7a8-497e05cdaa07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "68889b10-78d7-4bfd-a7c9-dbd3913eec92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc9b0fe-a6ae-4f8f-b38c-fdbfd42d52cf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962c17c1-9ae2-4630-a928-6a3cecc563cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33c8094-d836-42d5-b0b5-98f81c18d961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cfae44-0efd-4056-aa31-68f94e4985d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "459f6d0c-6a37-460e-8806-12764a3d1ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b073c7-53f9-4baf-9950-5d3b07f64a89",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5908b236-2a05-485e-b242-d7934bde4134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f75d4bc7-0e09-46f4-911a-deac02f5cfee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc189f67-b36c-479d-9cb9-691209c3b598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "adc9f009-17c3-4e39-bb64-8cbf8dc95140"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30809086-15c6-448c-ba3a-5aa3155e2d36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a628ad6-96e2-402c-b0a6-68a64795e343",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5078c7d9-6c9e-4095-8b75-92be258d759a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79324a2a-14f2-4c33-99ee-42674b1af7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7034765-3d70-4015-b2dc-b735ae458eb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c850fb0-703c-4803-9bb7-1b0e3123bf35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1570808d-04e3-42e7-a7c6-c10e3d054af4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88a050c4-9bcc-4709-af8b-503f47aef49f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "abc4b35b-73a1-4fa4-9725-29d2fc9c03e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1013d7c-c6ed-486a-996b-04e8db67c092"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9af64db3-6679-478e-a320-d2a32264e045",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb7c2e04-a74a-4b72-b667-6cc9f96137ee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a14e023c-59ee-4e67-9c9b-e9668054c274",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b4cb966-22c0-4d2f-b751-022b3674c802"
                }
              }
            ]
          },
          {
            "id": "bf53ed48-7907-4ac8-93de-629ee381615b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "803af7d5-5129-4f42-ab60-bd5bb2cc8340",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2604aad1-009d-4fb9-8074-4802a3f9f478",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b6a7bac-6d5a-4ab0-a4ba-32b3a368a9e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d9647bc-20e3-4c22-8331-21dbd9b9bf62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f97c9c7a-333e-4b76-9500-fbfe45e39b38"
                    }
                  }
                ]
              },
              {
                "id": "28d42b0c-426e-47ee-bab1-d436b6ba4b4d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f4966ba-9699-44a4-8824-d57c7aa762e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "586e59f9-5d80-4f3e-9f4a-40e6ab70de53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b457926-2bb3-48e0-a910-1093ef3595fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dd0730a5-7155-431b-b7e0-be51abf06c6c"
                    }
                  }
                ]
              },
              {
                "id": "500bec82-07bd-463b-9c50-c307c853851e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "587739f9-e2cf-45be-a24f-ad32f3841752",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5739b831-b711-4484-8147-21cb16a546d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "215ffbac-5956-402f-85ce-459344970930",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ebc46a13-0caf-4928-a65b-833053c26fa5"
                    }
                  }
                ]
              },
              {
                "id": "613cff90-304a-4fef-8e57-5dba5c859092",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1be7b8af-b454-4c07-89df-52292840a6b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd20e392-cd3c-4b58-8c09-58cab8613238"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "916fd25e-d7bb-4454-bb49-030cbcd7c035",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "34425e11-4d33-414f-bb6e-d399bec94ab6"
                    }
                  }
                ]
              },
              {
                "id": "a24fec1f-377e-4bc1-b48f-8603da25f8f3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f0f3e7b-531d-49d6-8ded-a043afa3de17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4fd604d9-452d-4d66-b2cf-98282e060b73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "775961cd-a216-4082-8b15-6a63674364fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "996aecaa-2cbb-4183-a884-c444e70c53e8"
                    }
                  }
                ]
              },
              {
                "id": "0c1724ab-1729-41e2-be7a-769939bdf288",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bec4a42c-f081-4637-bd68-3e5228c04ba4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "541b168a-219e-4305-8801-fe49b1b9edbc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d3fe9a5-50c7-41e2-bdd2-153f215c2780",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "88fccdd1-5336-4a2c-a55f-fba93d8f57e3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29d1ff0a-18a0-4d99-9611-dd4a86d3e204",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8fb9af6-bd1d-4037-9904-1cc17ee370fa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a44c4d6c-7f38-4177-88ff-6a2060962c6e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14094111-9cdc-4f5d-b7d6-4561907432b1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2b29f14-a029-401f-920e-f61d469e7ed1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9ee5012a-cfbc-432a-b620-ef596defc111"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5480748-4b04-4328-b65d-acfa27a24cb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9c9ba23-859c-4f89-b4b2-cba05e3beb0f"
            }
          }
        ]
      },
      {
        "id": "366c56d9-fcce-4fe3-be49-dd4eb921cc39",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dc178ddd-e41a-4463-a5f6-684c0c4d4fae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed05095d-6e3c-457a-adab-ad6f27f0da31",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eec3d8c7-ceed-410b-a7dc-7c2ecdc803ca",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818b13e0-b57f-4744-889f-dde12c70822e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2750e3e0-9187-48bf-b039-a81be5e53fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4583f67-23d8-403c-bdfa-28294ab3758d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6655da-f2bc-4870-93e4-e20354f31214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c12d6e-4fa6-4f77-add1-be8cc7b0cf40",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef11048c-a98b-4b74-8a5e-d01d9c5adbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77983035-d8f2-49e9-9cc1-febe61a62f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71fe54d-98ef-4133-b9a5-90c94b700e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6a80f8-d538-4fec-b68c-51106862ced1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd66e64-4d15-44f6-b10c-9bf8799d16c3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a810823-3393-43cd-85ca-ec218ac2f80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ef2b31-0255-4e34-8a7c-59011e296061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2ed467-e3e2-424b-ae97-92ec3ef13dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f17abc08-4ef1-4535-a4e8-920951e43bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207a24ae-3b9f-496b-ac77-0829e282135a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9735305f-09a7-4b00-8686-918ae181c0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fffa8eb-d512-4954-aec5-e526d7cd4c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a954ab31-6952-425d-8f9f-547b3e714dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66569761-f6be-4c84-8841-525945bbaca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acab355-0b6f-4e73-96ac-8d347adae7e9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1deeec8d-ea8d-4935-b862-48bc5b020b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9006bc2-4c22-4bec-8a0d-a153cfec7c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a2f617-48fb-4394-8813-6eb050bc6bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46d39616-f333-4b1c-b448-2eecb73085d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2f313e-5a73-4e31-aa60-99d743af4f49",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eccc4ad-9407-4f3f-b194-72304f63cc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2895bf7-d3df-4c06-8e60-9b2321dedf02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad442dd-f5e7-4cdb-97fe-c3da9bb2fec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b09eeb5-e716-4c74-a9e6-850e308287f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486898dd-1e44-40eb-b9c2-21a3807b930a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd078e8b-a64a-4062-b232-2ee1d3b88d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5febc1cd-d46a-4b0c-accb-dedd5f8e75b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b2a1f5-22c2-408a-a100-796aa8cc6e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc5b2e8-1570-4d27-882d-9fef3ec0e271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5157a91-442a-4c34-97a7-e59bc7748261",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a19675-2e04-4794-a6ef-ceb3cdd6f3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "869f076d-17a6-446c-8b90-c6b046c4fbda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff58c067-5e0e-440b-8371-e3bebc7feb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "760f9a7e-449c-43bd-929b-8859245ac5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6577fb-43bb-4246-8f44-b598386c0125",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5193a23b-071d-4c27-97e9-f5b0a93a161d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9813702-04ec-49d6-864a-633145662f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e057c62c-ddd6-49a2-9c57-628c972ddd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "220ea014-bc78-4f5c-b5d4-ae2a2d829efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2cf734-85d5-475f-b474-f44f221d7e30",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4917ea-ba8e-4adf-bf86-a58f017a0a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370f1b4a-6004-4515-b10c-008018f4926f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19282b33-28ca-4a11-8896-2bde15f5044b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f009839-4f6e-4e32-8ea9-550872c6ee21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc512d4-6168-4ae7-8e53-45d9068c8da6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1c181f-4fbd-4ee6-8214-bd94e65cd888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80240964-7c36-4580-ad1e-9a7c65ad3a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721abeff-ca88-41a2-af5b-3d923b00c202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4ac9f3-f678-45a1-ab86-d430fa9fe666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b9635d-af9d-4396-a117-4977d906ec27",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc752697-23ac-42ae-81d8-769074fb7870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12059374-9fe1-419c-8b63-c1edfe86b92d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbf52ef-a914-4007-96ac-d8cc2ca9ce61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f09a11-58ee-4717-b1a0-fd375bfa48cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70a4299-e9e4-4ebf-b518-75faeec5fb5c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9113c4c2-8504-47c0-a9b9-70a593efc007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73236827-96f8-4089-913b-cd7e45488527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87ad60b-1dbf-438a-adc5-8af350395044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab64eb15-d76a-4669-96c1-7328179ffb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46c8701-0563-47c4-aca3-26eb6af35ca2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39665824-9b8a-4935-a3d6-2bcccc9d29ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c338de-5295-4140-99e1-80e05acf8ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8a02d9-e26d-4030-9d68-8cd32232dc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "397971d7-793d-40cf-ac59-a6e0c39cedb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdfa4c92-cce8-40fd-b7a2-3c664ed902ad",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfcef9e-ff6f-490d-9929-bcedc8a6af21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea8a349-e854-42de-b5f0-97db67caf76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922a3ea0-8727-45ab-8268-ec84bb7855da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "73fbf74d-f00c-452a-92e8-25de8f50707c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bfbe20-67e2-4a54-bbd2-391cb5769e57",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6232ed6-0add-4d42-b87e-5e0437e60fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae2df274-15be-40b4-8126-adf14dbb52c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ae6906-97d7-4adb-9429-2fba021c4e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a18eaa42-840d-453c-90a8-388210b03fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd0ba5f-2a21-48cf-b10a-f23141b44aeb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de77b6df-55d1-4547-a2f4-f3ebbe0c97d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3baa209-b242-4d06-bc35-26a5ba719a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f1f554-b001-428b-92d1-da1c9613b7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "52e4717a-5e32-4d80-8fc2-4126f1958a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a78b12-4428-4ce6-b7b3-abd125f329ce",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73e9adb-a375-41f5-9dd0-69084eea53cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56cf822e-58eb-4260-bd94-058ab2971007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135ab58d-133a-48d9-bbc6-d405f412aeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c142a3-2758-445a-9a48-4f484b6bfda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00de933-c3f6-41e9-b074-3550a19a9903",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fb0418-e49b-477f-86bd-8672e5075976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82910cfe-0e3f-4b9a-87ce-76d6b2b1e7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5d16f3-539f-4082-accb-8e9ee7ea853c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3782ccb4-f65e-418c-b20e-85eba03cb5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0417dc7-8033-4111-b40e-af6c7e56b149",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb997bdc-4ac3-4069-b3da-0c7762ad2cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c432a2-4e47-438d-bc62-b9e5f8a8f603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27c16ae-fe02-41e2-84c8-629f94764ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c0a928-95fd-4ceb-b2bd-cacd7e5d8214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c3c572-f05d-4131-89bd-ac305eae9c03",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7712eaef-e814-4c0a-b78c-1b871e6fb89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd67ec0-0253-4d85-b650-929936e024cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba884e51-1087-4582-b3d8-d28c900da728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7d3380-28a1-4a69-ab36-2569bd894b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5109de6-2b00-4004-a8ab-586be84a1860",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3a4e0e-1eef-460c-8520-25e40aae2268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fec5ff-f78e-44f0-b6f9-9cbec2e267c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10f9ac4-411f-4373-a578-4d105a46972a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e49d07fc-528f-4859-8348-d0c11d8ede23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a3dc95-87c9-4dbf-9cf3-859b5468659f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602e2f08-c1cc-4835-85b5-f1b8c0286ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7559ecb-2a63-4abf-a50e-3804da2c7d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2d4e64-f4c5-4e6e-bf3c-34e0977f1572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60fbfcc2-66aa-40e5-b7da-17ec6e6372c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc92bf7-a4ea-4e26-bccd-efd51f3fc241",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a0ea53-0967-4550-a7e2-af4b834c22e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5be33dd-80ea-4240-b30a-af9c1bb89f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e584bb-7121-4e11-bdfd-d73e380e4485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9326435-3520-405a-9b40-3d10d2a20964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58075a33-c39f-48e8-a29f-5c8cf88dbe3a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacd93cc-81f9-48d6-bbb4-72d07196f225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166e1ed9-820d-444a-8ac0-c075299b8660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5346027-10e3-4ed3-a0c4-48bf46deae41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76f0dc5a-e0bd-48ac-98d9-f08bfe5fb285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ebe281-ca3c-46d6-ad6a-dd12f4efec03",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3816316e-d45a-4e7e-90d7-13443c7cfa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5ebac0-f71c-4a33-8677-82ccca0f6068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1455983c-83d4-4e24-9a8d-6de508fbdd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e16f11-a555-46dc-a2ec-85cb11cbb226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81fbfe7-a08d-48e2-98c8-dacb37faeedb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35aa1751-a0fc-4f1e-8402-b41f249bb46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76fb25b-55f3-4128-9eb4-7edc183ec31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31751a5b-9c46-4da2-9a4f-25624ab5b4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c41a56cd-caa2-45db-9913-3ec1eb8337f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d208f83-4b83-4e91-bfc8-24f126eaec20",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2eefb5-506d-4cac-8933-ba0186db7939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a1a18d8-cc4f-49e2-adce-450f766d6ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2da637-6384-43b8-9a73-4ad11edecc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481edc99-9a8e-4232-95e8-34c826f5c614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8e4779-cb6e-4a18-bfa8-ca46fe536f6a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26422210-de15-4e94-a18f-cd69a1869f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f96403c-b652-4b25-90c6-d075f3a082e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9375e7bd-ce72-4673-9c63-120355458aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4ceb86-2965-4db2-940a-925d9064a28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7268a67-65b3-4266-84cb-72339edc2051",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6861c51-dc7a-453d-a73e-bcd9dafca3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b588da5-d535-40a9-9552-6503a6cdc8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a58dc0-6552-46bc-8481-7de41ce90b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "160fc9ad-7a51-4669-9117-c27f19019621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adc708a-9450-42de-a14d-1df5ae076fd0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e84e7c-a0eb-4a93-a67f-3c0ceec2ae02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b85b52-3e8f-45ff-aa51-90f9613961bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf2e3fb-e9d6-4600-b470-c1371a3fe5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a78dbd47-ed68-46d4-812f-d321b97449a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f9ca5d-e020-4c27-99d7-828cfa2601cf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eade026d-74a5-4d11-80c7-4767b23c8a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e70802-c743-4f4b-b052-af40446c5abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feab78de-b312-4597-aed5-f46c820423d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0817d41-03e5-459f-9a12-b960a5093ba3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b00cf26-9657-40d2-acd4-d9154c307d8d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b06b09fb-030c-433f-86f7-0528e32d4748",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b36a49-8b28-45e5-a217-87f9fd6849ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ea738394-f3ee-4d8c-8102-cd96b59c6b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9fd15c-bddc-451c-93de-2f68a4d765d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c5e4b6a-0664-4467-9de9-ba130592f833"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e91e9899-e8f5-4950-9121-6c5c359e519f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7611b2e9-4fe7-4aa3-a329-e0df7ec06937"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "150c85ee-9fba-4efb-8c61-d255a19510ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c46806f-67d6-4309-952a-8ad83cddb64c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ab56b79-8a58-482f-9fec-3e2c67309e70",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e7ea7f8e-5156-48c5-b2c1-27d17231a57e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c5c6899-dc9c-4054-89ac-380362f018f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a9b88b0-34c2-4132-9396-8185def45991"
            }
          }
        ]
      },
      {
        "id": "750c0f7d-ce9a-4d6d-a945-9ade9720ff36",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a50d4d80-3788-436d-bfd5-0c9c8ce29b1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a165acc-e2f4-49aa-a591-d505e07a4711",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e1258795-556a-4d30-9b12-79bd71dee2ad",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974403b6-07c9-4587-bdb5-35562d444b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32468c97-454e-4c65-8984-39a4a6c59814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8b38d8-9549-4cfc-b2ab-10daacf38673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d0c69da-a60b-4089-9f31-b1a9cc6fe1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189c1a45-da07-42d3-a535-265d8b5bfde4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2b726d-b4d0-498e-8562-b07de6af4ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acff29df-ae66-451a-bef2-c3dfcbc78fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74f10af-1be7-4fa7-b1a9-a7141f7ea85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f38b5a2-f970-437a-a0f5-a99f2ef0c2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09096198-d2a9-478c-9daa-20f7e10cd609",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf215197-f70d-45a3-b327-f814c7ee6e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3357ef-3c5a-4c73-880a-759b47886fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91c236b-d51b-44d7-a50f-eec4d8915e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9d8a5a-558a-4b67-be7e-21a58ae8b2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d74400-56b1-4494-8b21-dc12e5da9d57",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba72b8d-c579-42a9-ad5f-1d1539c6bb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb9c38e-cca8-40fa-a78f-c49fa5deba2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d032af-6080-4876-b697-f31b7c5c51f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "075a0393-b82f-4ab4-adba-ba3c1f43b9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0389a1-ddd8-41d4-9a1a-2d55f3387afa",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc861f4-58e7-4db2-a261-4b1a0362556c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa77141-4bc3-4923-9a95-5d738da44fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d512401e-dec9-4d31-8d94-6e535cd1a1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0944c650-0b11-472c-8edd-aae56b3e4c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97d5a6b-2771-4c81-89c3-e6b5db06131e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc0cb5b-b2cc-4afa-b3b3-fc5132e6e0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7e4ca0-a928-4948-9621-57b198ce0eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cec4021-4e4f-42e9-b231-9d304cc127a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d472f11-d683-4b41-baaf-ce808b5d373f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e9e3c1-a4e0-4fb0-9d43-0724f9788244",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d79cb7d-4941-4567-889d-d22243c88659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f628d3a-4fd0-47d1-b012-4875686f9c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79e5454-e5ed-4223-a1b6-5e25865cc593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6099dfb0-09dc-4cf5-abe5-a330666b5515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a573a77-1fd0-4ec5-9b5a-bb1032fc5a8e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97033723-d71a-4eb6-9239-23cbf4515a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8252a044-82d5-4b2f-a1a5-4a9151305d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0cd4f7-dd30-4230-95c7-585c2400ac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4891b0cb-bd0a-4cbf-b1d7-db1e23d5f73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad5b9c0-ca91-4702-8573-5ffa517f48ad",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171b634b-d5fa-4bff-bc34-c849c05ecbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959f18f7-dbc4-4981-8857-7e95d5b835c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d095930-4348-4225-b168-ff023198d553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56984680-8c71-4211-ba48-81ba7dcaa4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883688bb-326e-4dc5-8a84-1847554fbfce",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcae50c6-ff03-469a-a60b-136692de89be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4a9f9c-7975-4db9-86e8-b62cc0cee578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e694b2a-6914-4888-ac23-b2d1c4c5cb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1feaf29e-20ce-4808-92d1-539d705324b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5621be04-27db-4981-bad3-76f43e822abf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33997345-2c7d-4321-92a5-acbb9754f6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6db1cff-b23c-43fa-b252-ecb87f1139a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462766f6-b990-4177-ac06-30a46b8957e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3af4fa6d-8c28-43ff-b196-aa6bdfd976e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2cec74-959c-47ba-81ba-cd654671285b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafdf173-91ab-4236-a73f-5e78aabdfa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f7a226-3af5-4f35-93e9-d43f2ae39a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8949e763-1374-41f7-888a-f80b653444c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd1a5a4-e830-42f8-9b44-87950153e68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdc064a-aa09-4330-992c-fe4dbc88129a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5968317-52ac-4e53-a46c-3bfad80bf119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af5ded5-0b15-4163-bd75-5bca8f63ddf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b123fd-adf4-4cad-9fc6-22924260d29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e20aa720-326a-45b3-b768-e4d57ac04400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9cece9-6cf1-4957-84a4-d938a4a9770f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031e588d-f61c-4f31-b96c-92f618392f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d433f2-564e-4f90-8b65-c44d23738c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068e69e5-3b82-4e4e-bab7-04dc5c2b4417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e957064e-cb64-4caf-b043-f0e4ccd4b513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d438675c-e56f-414d-94a9-f73be3d760d4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a991da9-ad40-4d63-b0b0-779633e9cbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a53079-2513-47e4-b134-9fbf98e2188a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5935406f-3209-47eb-927d-10514ef8f077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "939805ce-36d7-4ae9-acb9-ddf5e5e22571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab8b580-1e7b-4434-8dce-b98278fb9183",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4b9112-7fab-4c89-b77d-b0fa786538d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113d9022-e53f-459f-bf71-f02b01063339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2268c3-9224-4e14-a5da-c16fb4e57325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f93f8983-4336-4a86-92e7-8a5f17213904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eede53ce-b56d-4ea8-8344-17e09f4316ff",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9abed4-6322-4f9b-8bd8-c26248a7ee04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b70f61-e74c-4aa3-8f19-f68cb4154170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24ef5df-7764-4dbb-9f89-6f2f87290b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a556998-a463-4d93-8234-c3ad4da6111e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f609be-0394-4572-bb7b-d413780775a9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760f6e07-2fbc-45fa-ae58-64de3fed694f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ecfa05-bde0-48a1-ba83-204eae9b868b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a008a223-c738-4009-bc55-e2c5acb9b9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "975a3570-520d-49c0-a388-b57626af7a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe7b52a-8a90-48f5-8eab-a41d33e0d546",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3094d59-02e4-4ede-b2be-a75804f812cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8893ab7-cb9f-410c-9879-e34c61610fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61edd17-09d5-4cdb-8706-d6e6fcb1bd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0910114-1289-4f4f-b558-403ed66e0836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46d79e2-6cfe-422c-9998-171eb5a3b653",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae844ec-4164-49ec-901e-b544fab383b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e8774d-1c1c-4a3a-9f35-8fd7e2976dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb56eaf-01a4-4d94-a857-23b6469b1583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "501eb4ca-65d9-4c71-8c51-a78789cfdc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bd38d7-476f-4cfa-89fb-f52032ed469c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea24e908-b8b4-43df-9b00-74914eba3fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b970c45-b1b7-43f9-afaf-79b5355e0401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce30c2b-9e5f-4eee-bb46-3be2269326dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47e85c01-ac3e-43b4-8779-08621a53a049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54b0b6c-8ec6-4b7b-8e65-d18ebb44b442",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30ba24f-2152-4c08-bd3d-306183544e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32cc992-700a-4d42-960b-908eb309b919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fde9928-5fc8-44b0-ab98-5aceaec71d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "062f0deb-d628-47f5-a0b2-2d9de8bcddd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a32ae3-75c4-4f09-a86c-b27497e0f45b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d624358-069d-490d-9044-f599a1350e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2126fdc-9b78-4bca-b4f5-bc70ab22af86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce607f6e-7025-43de-8f84-d66f66ed58de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f20915ef-2850-43f6-98e5-003a7a06d907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db03be9f-f340-4616-b016-856eeb45037b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7031d1ba-7d19-4b68-928e-4c14861e7b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa690e48-fdee-41df-8fa3-b29455235908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd9db03-f54e-467c-aee3-eacbf2a53105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2134c624-c693-4977-96e9-984239263d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be21346d-5c39-48ae-bc2e-309f3cd583f5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8949ed9-033e-45f5-b7fe-8f40d37ca25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4414c67a-ef37-43f6-87f3-1b8c7d5f5d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88227a4b-ce66-4922-b376-65c9ed420941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff16240f-cca1-41ad-9941-07654d3cea99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc10c8c-a30b-4bb9-93a5-2b34a0ff1911",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5260c12-3db6-4c1b-817e-38b88768f4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3ec601-fa81-4dc4-8325-20c3b9ef585d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f2cb7d-95d1-480d-a15a-8ab01062bbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6463fec-2f8a-48c5-8adb-2bd1ae9d8d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c83ce93-9fca-4512-81fb-bad734953d2f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac443a4f-deae-4703-b89f-744246254351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996c028c-1d66-42de-9a65-3bfab08d8a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65942f02-ac9f-4780-8a25-1effc6f1268b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e7bc86-decc-434e-bae8-318ceea41825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3deb4e2f-9a2f-43ca-ada5-37602d7640ed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64de837-082b-4022-aa0c-176d6fe5bbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41794fbf-17c9-44da-a294-cf6b5e9215e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5bcd6c-936b-4a44-ab6d-b6812a001c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc0d6ed-3ab5-4e78-8b88-8b81576bc7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f91ccbb-e587-4662-8b8c-024e730f11a1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3e889a-ceb6-451f-a5ff-c2146b02b3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5838725-c97a-4e8e-aca1-fe08b2173700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78e8d39-a082-4e52-b57a-d0ee61e64383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b40820-7d92-4725-9929-329cb51857a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fba63a-60c8-4fe8-8d14-53d44dab4eba",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457eb0ce-55f2-44ca-a69f-4345ffa0493a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d760970b-035a-49c7-b8e8-5782b15da836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2c35ad-16c0-41d9-80f4-a2bc92ba8cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0182e48-3e56-4080-9bdc-94f3da421f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab1d322-1cf7-40c1-b323-ad461a72837e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b97242d-3fc4-42b0-91b8-b585caae8d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b12ff8ca-2e72-47ed-bb66-875a189af73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2626f42a-16d5-4b79-a435-38b298c8fb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b32ee28e-2683-4539-806d-89d78728e058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d005d80a-c27c-4d21-85af-3d1864fc953c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1255f43-008f-4596-bf0f-62de00ed1c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e583810f-e534-4647-a530-fe9f897b8023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0a83d2-6823-45e8-b497-e3ed603c44a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72559e68-361f-40da-9917-dac01daf7f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f0e5d5-2f28-4279-aca6-543e7aacf5e7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836cc987-2756-4848-8e83-af2957e08374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b346798-f4d6-4132-9eec-a52bc71c3645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a82fc3-9c3e-41f5-98f8-4a6bd443839c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1b7291-7856-4112-9071-208d6af1eb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6352423-625a-491d-8653-f2dfcf13b7e9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970c6a62-ad43-4fb1-9cfa-23d7822c8888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "127d5843-b826-45e3-85c6-e41408f4487b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875e2acd-d841-4270-a03a-fe9cd46f7793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34d29e6c-6514-4c8b-9968-9cab7ec01eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ff2933-b836-4a5d-92f9-e542b6b0f70a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985a7940-d1b8-4b2b-8640-fda9045ac1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7f652a-36ef-4954-bd45-bca9d5006323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9d3cd5-41ba-44ca-aa3b-3b522c81dc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1a7827-d7b9-4450-8de3-eef9c47eab71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4186388d-37fc-4249-b1ed-b26a1b7e6b6b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d80d7a4-e6a2-4665-b755-730276701a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a019bb28-cd90-4250-bdd3-0c2dd682af2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f506ec9-7232-419d-96e4-f35c968fa00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4da76398-76a2-4197-9ddf-baecc7605a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0986fc-4ecd-4bfc-921b-4e534286d4c3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387bcd02-57a2-4de1-b5b2-d92369092a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "793e0261-07cd-4095-9a3f-248c9f642842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a9f600-0014-4daa-b458-21f8d27122cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb44678-af95-4b6c-ad64-42379774a72e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "046e63f3-eca9-4f62-929d-5322d9e0d47f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a00c64cc-3feb-4150-ba29-ef6a8df63c8f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0d2c35-a315-4fec-a586-9731418cc296",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "672696d9-81f7-4016-9ecf-f3d8c36c93f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a48c21-2207-472b-a51a-796ad954298b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f57dd51-aac2-4585-a10e-5dc294e2f6f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e430e0a-9fda-49bb-8c7b-e301997efde9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11d6ed61-c123-404f-99b6-0e77ac876c2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6f57a53-12af-49f1-bf17-b865955226c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "001b38a8-a599-461e-9d1e-be047f335c1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5b140af-63e7-46cd-b75d-43e1920ddf4f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "740fa0db-faf8-41a6-a661-05e2f0e7cf47"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8245d3eb-6b43-4b7c-9bed-901b8fdd3db0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc4f20f0-ee69-4d8e-9eb5-46bee479ee14"
            }
          }
        ]
      },
      {
        "id": "63827203-6f3d-474c-819f-33007ed3c9c8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d966b280-af3f-4c13-b527-ee1b8a5824be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ecb869f7-adff-4409-95c6-4cf67982eea8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e83053f-56ef-4d73-8686-8b33a1b05a0f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db371c4a-e0e7-436b-9663-01707aff92a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7cfa8c9-7ffa-4b06-98b1-0082ed0624b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439934af-97f1-4ce1-8026-da35574a37fd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38452d9f-4914-4bba-88bf-151b1ae8f878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c519d9d3-a9d1-4fd9-b790-7a9ad32116d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99544eac-4fa7-485d-9fe0-8b4847c9aae4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c78400-b2e7-4a64-9b30-b6fec7691ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4df1342-ff62-4a18-b7c1-cb98d6291697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69b5d2e-8fc0-4cdd-8c9a-e907c71fdacd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f6bbf5-f008-466a-a839-4e723ae4f3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748dbc09-601f-4708-aaa6-0aa9a5cfdac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cc3c6b-a7e3-4659-af67-81ef1d67f0be",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d881bcd-40b0-48e8-9155-aeda908f016f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be425bb-b588-4c60-8076-455c2088c2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de85f9e7-bd15-4533-8ac3-d6c8ab6c29bc",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a39957e-5f8b-4fdb-9092-590d9f94e214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c03ada-1873-4cf9-b216-d1aad1c17c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82441050-e39c-483d-a0bf-112a34e151db",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430b80c7-3d74-47b6-bc37-3b29f99c51e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb92821-d954-4f43-9a0a-b945dbf17248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5d583f-74d1-4d7d-a49b-a794659eb1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b7f2b8-1bca-4490-b238-ae868102ab78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b916cf-8a76-4495-8a7f-254da2e88b2e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f64ab2f-78f1-4ed3-83f3-1946126e00da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13645426-21d2-4d71-b200-eee8a94ba31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "741a5f5f-e578-4d9c-9b76-645fdd3dd8c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62fa336b-928d-4eab-b953-3e5879dbcc84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2446a65-a635-4679-9112-c14d918c3008",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73e81d8-a1fe-4358-b916-ae5808d3bd59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8955b19-bb0b-4aee-ae90-b4dff1bdd0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070cb107-9cc3-487c-8d0c-a755609af9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46bad276-efa5-4158-96c8-10191292fc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20407d6d-b04e-4064-bb09-b640fc30d4fd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4196ed8e-7611-44e6-a5a7-4a334fbb2d41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f1f949-4c76-4e15-97f6-ba67460734f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3c542f-af29-4b58-aa35-4243c4d5a998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ccfec8e-5647-44d9-856a-9d9d9f24092c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d4c535-6280-437d-9ad7-4b670f02a2e2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96171941-3d75-400e-8709-fb98884dedfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e286a80-3412-46bf-935c-c17f5f70fce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8fbc01-00ff-43da-a226-c1317aa750c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61fa676d-b73b-4f29-bf9c-85fe01ff5a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40f9e76-2ed3-4abc-8d6a-6e36c19a6936",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd02990-39b9-4582-bd7d-83f62fc41e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7703cca-bf01-466e-88ab-e90d574502d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1ca3f4-18ef-4299-8c32-5133560b4562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17696af7-1c9d-413a-a6cd-4a5c9adf01b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fdc823-5f71-4dc8-954a-a1e75750f7da",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898f728b-2638-4d3b-9bc2-be25d0baf786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f503cc4-56ec-400d-8c04-b312fcf2b440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d079764-57e3-4149-a46b-6bc8b20d52b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2052357f-0a45-4627-99ac-c26f4dad4b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bf852d-7d85-40aa-9dad-f4c1fa13bb3a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691fd6e5-43de-4cbc-a760-b98a1eb8be52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5705b041-e7f3-4b93-9aaa-ac150516ecaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153ffac3-9a49-42f2-9bee-c801af88093f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57db69c-9554-4bae-8a0e-76671d7faa3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df188f97-49ff-4d78-bba7-be6950d9f553",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9cb4c6-b060-4e65-a664-160840090acd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36cc8116-0127-43f6-9c20-4d9d92965dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51250041-c4a5-4664-a7af-05503a272575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5979cc0f-0d57-4419-8ad6-a47d8a1c75ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45dc45b-2acd-4938-9dc3-20399ebfc5c0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e5480b-aa81-4d12-a6df-de6a87dc6f46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9610463-1729-4480-9817-c7c6762d7f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740ee382-a965-4161-b546-af804f027cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db50945b-2e41-4960-90dc-52230c22d643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e1eb99-d924-4766-ad69-dd65d2fbf9af",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd62141-d7d9-4ad4-95c8-1c612cbf32e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e05a71-7904-465d-80d1-7e7dcbb6be57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4cbf74-5685-4755-b53b-e97544d68ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300c77bb-7b51-4bb4-8721-5f960deda9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76b19c4-fae5-4abf-8c8f-7391832aa5e7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43624f6b-d594-4b98-8095-a77dbce15585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0bacde-cc2a-4bd0-aa3e-a9cf84ae34ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "520c5e32-48d3-48bf-8ca7-c5d56a33a775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977d275b-e9b5-4610-a8b9-ea7737599fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d709718a-03ed-4b59-a4ac-9886acbd6172",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f726ab-e705-4ac4-9b0c-1f2bb338979b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef9b225-f7f3-4041-b894-ab229bf12090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7a4a63-f3d5-462b-a495-ef87aa35e43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8251302-4c26-41c8-a9d4-1d4bf3091d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e893466-78d9-4ac1-94de-601bf1b491ec",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd58831c-9922-4604-b7c2-1d74c11efae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b5f14f-72a9-4b7a-8112-eb0625b8c221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b8e73d-bcf2-4afe-af69-bb5e9d1ef049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188be85a-d3fb-45a1-9b67-f5d808cd9307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7a4173-34d5-4d4f-b062-01c158d3f347",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d1092b-6dac-4fce-820b-2b1f7b7d697f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10854198-a1b7-4f65-8f9a-4428ceefd494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a5b24e-9ae2-49cc-bd61-257763934a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f489c2-3168-415a-8b08-0d695e6e93a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23dd28f-842d-4fbe-b2ba-7be634d10244",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f281ab9a-e55d-40ea-b8dd-8cd8b8e87ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6597a3f9-7c62-41a8-854b-d071b6fa06d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f6aab6-50b3-45f8-802e-b0949e9637a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2da28f8-6646-46c7-bd8c-07b0267b2726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0afe3f-62ca-4600-9dea-24a149f510c0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fdf1b6-2270-412e-8eb3-942140370571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b453a495-2b06-434e-8ee5-63c79f2b9886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd33b7f1-0cc0-4673-8289-8229826278c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f4db87-0062-45c8-8243-139fd6ea2437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42e4c7c-2d88-4db3-93c4-e15263d556ca",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10aaf4f-9471-45cb-9f03-f8254047629e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45920c3b-e2f3-4417-953b-8502a9a0db81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "423a727f-19e2-4040-9aed-c753b443d7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17f5181-e60c-4296-a35a-ac4043cf0292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b64d77-0a6b-4f32-a335-eff1025122af",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1718f722-1486-49b0-b053-a567e20a130e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1303b6f-95de-4301-9969-6f20d3c70ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46219efa-ca20-4179-b619-695fc4367afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931eae8b-c01b-4089-94b0-06b62f982449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16741cb-7be2-4ff8-a515-5a45eab74a3e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918f0e35-3328-40f1-bc0b-76d1030b7868",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e040ea09-be12-4e8e-ae7a-78850b851f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4962b94f-3754-4974-ae3a-688a9348190f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c419f239-30c2-4aa2-9b2b-9ea5bd2a6449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dca1751-e9a0-4019-87f0-e497b4e59ff7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909eb486-cb07-4f26-a1df-50b8c49d0131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e795228-b95a-473c-bde9-876c117ed4a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bda2e18-6bb2-4943-b7ba-f132cb1e2ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa97d35-39e1-4b78-a328-00b0dccda7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9699152a-e6f8-4ad0-980d-57a99a322b7e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23ee95c-bec6-4690-b72c-7a6aaa5933ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9465ff2d-893a-4eee-b3e6-3e6150ec5da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65679645-352c-42e2-8ae1-e70a7b2932b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81aef86-74ae-4faa-84bb-821ae9827e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7dc12e-e118-46c5-830b-9d19de6d18dd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69ae7bc-4396-4b6a-8565-d893ae3406a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b500df39-939c-4fe2-bb2f-02078febdc3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3b3d6d-9119-4de4-9b0f-e00372414ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b0ac34-ac8a-4330-b1f6-4998f2f44a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2389b596-d875-483c-9b77-d1d994524600",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffb02d5-23aa-4b04-923f-fdeeaa5cbc32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44779e73-dbc0-4861-a938-24023abbdfa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8598126e-91b5-483c-b309-654b7990350e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d48bea8-d01a-4e2c-9114-ad5637a461fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e940d78d-85f3-4488-aca0-9a0ef2ad74db",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c94e818-4e5e-4d1b-87c9-8792b4b25c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df1b56e-e136-4bca-ab21-3f915b9c1333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ffc7e3-bc96-44e9-9085-0eae2a4eac1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6abbf9-29a8-4bbf-aaed-fc2bf4b7d59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1cc530-73fd-4e7e-8cad-dcce23c9ad91",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f2a4ee-5a4a-4a52-86c9-c784d1c0c63a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd33e896-f446-4a4e-8779-d1f62978defa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40b9ce1-2468-4712-b262-38992f59dc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcdff6c8-45eb-4dcb-a9bb-f22b8ab5e283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc134c4-354d-45ad-b3ff-f41039fe489f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0da4d0-d2ad-44f0-9ff6-605bd1c28455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed0142d7-4937-421a-ba41-4b7080f51579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bcbd79-6724-4b4c-8125-67344fd8751b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1352373d-a723-452f-bd6d-45caee1cfd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec02def-3837-475c-8f3b-ab1baf893dc5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b9dfc0-e67f-4b80-9542-e0ed11830c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fe2a4bf-150a-4a8e-b2c5-238840e12b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a4d84b-45ed-45d6-8e09-0eadb9ba4e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda80d66-4005-4789-a06e-bae124112409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8f099f-edc9-4778-8283-894848819244",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c1cde8-ca71-4811-8f3f-5cc6731e4361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adaed1a8-a3e0-4946-823d-7052e5fdaf0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755753f2-65f3-411c-bc9c-c467bda6ac57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7900984e-8e6d-41bd-9cff-48c166bc5950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24ef745-3a5b-4490-bd1c-a36d3ef35ca1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39c12fd-4fd7-40b5-9980-4d5277ee85b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6160442-40f9-4749-b863-856f55538d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe29bc3-7a4f-4f64-8c44-fc547aec6caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862e9e8e-f3b5-4ccc-9a45-973f95f1cf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235da616-db04-4fec-9dd5-93f12d313889",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577ecf24-45fa-41bd-bd75-cee41d7f686b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fdf9cb-9c66-4eb3-bbe5-ca48938efba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb619d3e-2d97-4ba1-96b9-7542dcc56537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13b9c21-93c8-4882-9898-0342abe983ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0df599d-9539-4520-b8cb-950b006f8146",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f780042d-1a66-4d27-963c-321ca2903fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5319c4ee-71a7-4c44-99d2-9564708abe92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c7001e-9c09-4628-9350-700e25b371a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b26448f-5bee-4699-ba71-390c48818045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953df99a-254f-4d5f-8ec6-4703f0f6abe6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5640c1d-a438-4870-8e29-7c99c726975a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2899bdc-bdf3-4847-9e8f-a88bfed09a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f35048-a22a-4037-91d1-ff66ea212afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b5bc38-9c64-4dbb-a000-6978937205e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f850cb-a492-457f-9b10-d90801c64a61",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8238aa2-b360-4282-9432-5513282bd922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45ddcdd-5d16-454b-87c0-9d7a9f6c36f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9be5d5d-ec0a-4977-a698-2ebb138e3834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37444b39-d97c-49d7-a8bf-848dc4afd9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434a787c-3018-44cb-8e3f-a7a7cc392491",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b70d037-64c5-475d-86ab-9f34c3966840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73c01a8-cefc-4031-9bd6-916f1ee312e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7508a7-1d14-486b-9355-f6c3f7e68c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b11e57c-832d-4455-bcd9-fbaba8328a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a082ac-08cc-4ce4-aa68-69eb278c274c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb819e10-465e-461c-bfb5-84196edd238d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd78bae-cd13-450b-9de6-b0c327e7cf97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22330b2f-e53f-401e-bade-d8d7ad51925e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa03d4c-2743-4674-b1b0-a514ee515b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd232f55-c905-483b-b837-ab784830681f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4e68dc-0cbd-4ced-b8ba-8e9e99658c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f27d5de-0177-4c5c-a877-27c8b5b57fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2232da12-c33b-4911-9fc7-eda2f1f4b2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bd65ec-8d8c-4fe6-a1cf-75339e03c987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274d641b-22ed-43c4-8a9b-db59d9713e9e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43d660a-61ad-4aa3-9a48-c44dc86ba463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f508dd92-968d-4582-85d5-fbfbd609b06a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc05c702-dcbf-44d0-86ab-ef2bf5fd78f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc269cf2-5626-4678-82b7-9ad7fac9686b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3d1114-d49f-41bb-951b-7e2f793432cf",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82790dd2-04a4-4341-ad3d-4635480d1035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0deeea-d406-4e94-82bf-79a9627be117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09be67e3-e2d0-475d-900b-c1042514d93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82b5aea-0282-4c97-9738-21aa0bb6b251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ac87f0-b55b-44ab-82bb-0c36c0dde3cc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8b6de0-671e-4351-930a-b1b229651891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb28113-622b-47d6-8541-721186027017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238e3ed8-9602-4e5d-b016-41e56d73367a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f133c1d-b36d-4b94-86f5-4c137b88dbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1460c251-e4fe-4e46-8fe7-753ce0dd1b51",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261dc00b-e71a-4ae5-848f-1f47a42c5dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a6b0e5-1d3c-46eb-bbf2-841d95a7a4d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2829558-6f9c-424f-9942-53aaf54e90cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8208d837-1e98-43eb-a8dd-1f278305ad71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90595df8-571d-413a-aa56-3c79dc1deff5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af26090-0b60-4a0c-be44-de51e771ec14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49d2a4c-9960-4532-a96a-19a24c87e46c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08705edd-1020-443d-9b28-696bacb65f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67323cb-a2a3-45c4-9027-52eaf7b31b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742705b7-9784-47f3-a423-17003130b842",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5384d5-8a5c-497d-8083-ca32e01edd02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fabde4f-23e1-4fc3-bf28-e9eca9682804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d11e8a-90b5-4b01-8b20-7d5995f1c180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096e2248-9c37-4a88-96ab-fb7045ee5d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f941f6-0755-4f6f-8018-68407ad5e97c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91da4162-9ae7-42c1-a4ea-6e7b22d30542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c49b0e-587b-4dba-869d-cdd91354a34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "540f6785-f2fd-43cc-8b23-f238eb52f1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbaf0bd-4101-408a-8178-9c385bd1c4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ef10c2-59fc-4219-81b4-aa75dd50396c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4080eb1a-d0c3-4cab-96fa-9b213517f144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505552ab-5239-4514-8e73-2cb445e9975d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e3357d-56ae-46a7-bd24-454650ef6e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87db468-952a-44fe-a56a-79c2cd051660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbb4db4-74aa-4286-b592-cecccad55ff2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e35e68-dae7-4c38-a66c-6de08e90f373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c69306-f13f-4125-b118-cb8b3df2e1d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df1e6b3-c840-45fc-a362-16cb47b3cccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7715049-2ff2-4c9a-97e9-605dd94970d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6150441e-9f30-4069-9518-26bcf7c98657",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bef1792-a2aa-4368-beb5-47cd0ec7b221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253e7f28-ce5a-411a-8920-54843c4286d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2125d707-65b1-470b-a341-9a6782dacbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa326fd-78ff-4872-b85b-447e0118add4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862328f0-26ff-49ff-886b-777ca5e1b25f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af1d1e7-b680-4537-89b0-3d23e0402def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57fe58c8-0efa-41ac-b233-a17dcfef0c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2a3fd7-f655-43cd-a86f-6ad78afea687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c419ed2-1c94-423e-8d3d-d813c7818a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f98c468-e124-4e3b-ab3c-cae0b460b70c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23b45ec-d405-4e69-8036-d82294da7094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3dabe9-6644-448f-8691-ab5654a9a643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7e61d0-5bad-4db2-aea3-90002d640258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c441df-d208-4bf6-aea7-bc13ad5538df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448639e1-da9a-47e5-830e-36d1c010425a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1731545-67d0-4b41-8534-de003ba2cf8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef348060-7a43-4869-9d59-f607fe1f4c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff078a1f-d85f-4eb4-8ff8-cd2a5b4be396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e06b24-f075-40ad-9cc6-d4f5a2571540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09c551b-8c75-4203-bb43-b3e08c9ec539",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6c3107-f9fd-4ec0-8aea-8d23e04f169d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242a9b90-40f9-464b-991d-ca0d8b5fe065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27655b13-78a9-4d7f-89b6-9b769291cc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504c7add-ccf1-4c54-a5c7-59c5d53bad41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a5fd16-c2ff-4d96-afc3-cc2d0fd431d5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d0450a-843f-4259-91c1-1f00ce8b5599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f04cd64-2723-4eeb-8284-f7ea44be1a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc848831-bef4-4d42-a304-1e0c032ca235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4b38bc-8be0-4cd2-91a0-e3db8a08c208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa630771-f498-468f-93d5-313aca78a220",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c96f2f-be89-4939-bc61-a9bb9316b4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09088457-5c82-486a-882f-f10e3b9954ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c74d373-ae08-4029-a6a5-f4dac2deb5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b821a977-eab1-47da-bea0-e257d7f44b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8687d3-28a0-4d0e-97a6-d35ae74acbc8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa7e95d-5951-4989-8783-14e55f35bb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5f3547-304e-4274-a54d-0bd74bcfa97b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2acd018-93b3-4c12-bac8-d25110c577a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1902c477-1b9d-4cfc-9520-d74338b1cc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da5d23a-e175-4bbd-8639-6aaefae71149",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee12694-ff4a-4cfd-a935-7ef65f82820c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1125d6-4383-4152-ae80-502572ec50c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7199ae8c-4544-42e4-b390-6e203e936d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca415bc-44b8-486f-9456-6826dab0ace7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36da6272-e3ba-4b9c-8cca-5120105870df",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f165fa65-3330-4847-b9b5-c0a47ead6052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908cbd4a-ba93-4430-95d1-edfd61e77fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174dcd8c-8198-4f35-a61d-c0af1b483834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47047db4-8382-44ea-a33c-9e7f9e4b8c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94e0ae3-3690-4d76-a576-97faea8ee442",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbd1040-8b3e-40b0-a835-4bf8c46d94f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5909e118-0c6f-453c-807e-9d414f4170ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c773fd80-304c-470e-a826-ea562674945f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0f358a-ccb3-423b-bea4-9686884d683f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b087fd3f-fbc9-4094-98cc-069be4a28d2b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c068c687-19c8-4a14-b008-3f836b7bb51f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52bd3ce6-9b3f-42ae-a067-fc269fd73336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f003431-3637-4fec-821f-2b193397423d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebfef78-5fcd-4736-bbb7-9cf82c94d8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1ef2e7-01c8-44a8-a5bc-4253c9f644a1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187851bd-46e4-492a-9191-a12097e7a4ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8327036d-bedc-4f6b-bc60-d5b7a03af268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50e2322-e7cf-456e-8cc8-0709160b0cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d50882-73bc-4929-81a7-1286f4a0944e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1e9764-0aa9-4001-9705-c45639b69e1b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e26e037-e9f2-4617-a30f-846329b05b92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "973112cc-2c7d-4862-b415-2636277980d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26343ef1-bea1-409d-936e-1765832cc3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b948769-a598-41d1-9f67-3431e9460bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf9fe00-4654-433c-90a9-71f772063e8d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb6d913-6e0a-45d8-92e9-6cc479a83b4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e41fe0a-49d7-4627-ae32-93b61b12238b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21d9863-0332-4988-a18c-bb5de9f29773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24328c6a-04dd-4eee-af24-079e1f45873b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748b01f2-a8cb-42db-ac35-f369753bae8a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1652b323-b877-4fef-9025-5efd1609501d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa64ebfd-39e7-42e5-a0a7-fec6b5875488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2115323-3571-47a1-8003-573b04333281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81657b2d-46c7-4154-b845-962ad3ab44b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34396c77-a737-4535-a1e7-abcf6d9c0ba5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56d64d9-da6b-4c70-84fa-72f20a662eb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58035966-8cb2-4bd8-8361-c880fc5207a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9106767e-0f63-47e6-bedb-49422a48a2d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3138aa6b-5abc-4378-a225-a29a7baca2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cf45fb-5810-4a6a-9f30-5ebe4277dcbb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a91583d-48fa-4cd6-8de2-38ef90439371",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b36b2e8-d893-46cb-91f7-962bf5c8d813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24189b2-91b9-41fc-b828-f5c4e1fc7f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1893bb39-9660-4225-a5f4-c5908fc35376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96115d6-8c0e-4011-bc74-244131e53627",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067fb55f-3d7f-43c2-8f66-d3a52beb6172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97c1308f-25c3-4afb-a7aa-10b6dedf5b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2795b75c-a150-486a-801b-3a1003f4ac43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014d3e7f-f74d-4a95-a4da-f2081e6317b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1e333f-83d4-468c-9080-7e1baf010b1d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95a5f5e-03fa-431c-98fd-a3906b9b2166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad7d0af-0053-4193-9ba2-80fd4289eb4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4bd387-35a6-4e9f-a162-6f7e34ff8365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76abb77b-ef66-4cee-bfdc-06c9ceff0010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15f6140-0a3c-4380-b356-e6779fc407f6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a998d2-6201-43e3-93ae-a7643564e79d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea72dbda-10d5-4df7-b024-4fd38c84005e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "771f90fd-3ad5-488d-9a9b-ea13eeafc77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca8414e-6300-4e79-9a54-d16fd048e222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93719ff-3432-4e11-9f14-3a018eed6d21",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfa6163-d004-41e5-928e-8ecc073a5a13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58175df7-96fa-4a22-91fe-1500d4489f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b345b4e-d00c-4478-b953-ac49720205b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb83745-9c53-499b-920c-2dbc616d3cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cbdcb5-7b43-48e6-9dd3-5feec2611240",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac57c81b-f56a-4463-a334-445c75531d18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14dade60-5a95-4d5b-9e23-8006f471f777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a432f1c-e762-4871-896e-5edef5b141b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70841b91-77fc-4de1-9523-02376ae43708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97306371-9404-4329-b727-14b5d17f8fc9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e90b83-b411-4310-a763-cafa5c8edf0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc9ccfea-68d0-4dc3-8c56-2d44f0659da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31103a3-a626-4b70-bfc2-835b49e5f37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438b5d96-c89c-4a60-8520-3d0e767ee175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cec201-b5e9-44da-9871-8e1948a18ccd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1f83d2-5dbd-4af5-9365-e632e9f8d8fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58464412-c7e0-4fda-a43b-f5e4d783c767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fd80c4-93ca-4c32-a4d8-388136ca660b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a8e9f2b-c861-47dc-9e84-a191d04ba593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274326c7-4f08-4f61-bb94-13eafb9aca4b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f67c20-8839-4a44-b5fb-c01e749f248e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15a47a87-39fb-4ca7-a8f3-ec5c439327b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32b9f53-b739-4ddd-9207-6c0787e8f1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e66eff-ee09-41de-ba03-c4533a28093d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761b0eab-bcbb-4652-abdd-04444b5dfd3d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f918118d-516a-40ff-8a35-cb3fee24f3dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a7b7916-2bfa-4212-ae40-ad9f459e2496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d5cbad-a2bb-44f7-895d-6a4b8ab523ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d258336a-3a34-4a24-b335-a6038c77b002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809cca16-1dbb-4e0c-8992-b6e20bf94761",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9d106c-3508-4e48-ab11-e618d3e486c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f21a00d-d6bb-4604-803e-1434c6102c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b18484-ec97-44a6-a7c0-82497ec8d154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cba5ad4-90d6-488e-af80-3df6f76f163f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af36627-00d5-4039-9a71-337ee1085143",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ddfb0a-bd6b-434b-86f3-6225ab4c1e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd9368ed-3505-41d0-94b6-e555dd21a11b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2da92a8-01cb-4681-ab9a-618fc5bbf2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5992faee-3e17-41f8-8879-c37a7102571d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf14b7ef-8595-4fc7-83f6-acc852064511",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504976e2-4f30-4b63-9d0b-5d4634523a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f234bd89-571e-4410-a101-dea32789ab4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d94998-907c-4811-a86f-bde25b04a063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c471bb-18e1-4632-a502-b51ec988972f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e58904e-ef1f-41ed-acda-c9779b22cc89",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e1b09d-9dd6-423a-a82e-6a22ed6bd785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b92b67d-5a45-46d8-a38c-8e4dc25d4f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26da4215-7a57-4cd3-bb95-ccc991563003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7e40d3-be30-4b94-bb30-dfa5558a290f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4633207-6bc5-43f2-8c61-b6bf480d1da5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8217a876-f813-468b-bfbe-4a2503c63761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30778c25-0a66-4efc-b81f-07a75830e340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89c655c-f580-4e6b-bc55-8482fba59c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23088878-ad8e-4657-bd77-14ef9dfebccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45dbd195-ff62-41b6-92ad-fbb7a6ecf1b4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2319151a-04f8-4a40-8707-c60b234e25a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a6ce1da-67d5-493f-897b-5b0fd03730b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1600d477-9efa-4cac-b32f-dcba8922ce63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c98a9c2-5b73-4725-b40f-e61ec3ab905a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d28791-e8ea-4ef3-a3b1-1f9f3e9dc774",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9201b3-53e2-4431-9f99-ce24c261125e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ad85dc-9ef0-46f8-b6b3-e428bf1e81f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ce64f3-99c5-4989-8523-ad352403da17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e3577a-690f-4038-8bb3-75e57ddf0f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14798c0c-4e74-4e7f-bd3d-3bda2db37fea",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223f9ecd-3d3e-4ca2-9434-f5d2ac76d4e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a67f489-bd0c-4aad-b49d-a672ba9859d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15819ea-9a6a-4272-a845-e379ed450cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ceb6f82-e851-49b6-8517-98c513864697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52417c4-5c28-4062-8ee3-14797afacd64",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a568a60-0ad5-43ea-bb75-b509b531d215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa882869-5d09-4090-bd53-cec2a7a11506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c53b468-19cc-425b-85f2-8837bf18613b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8d05d1-a7bf-444c-946f-be3e18bd25cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9f7a9d-4fcb-420e-a4ac-f8350401946d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8ed049-b495-4833-8069-4c5eec4616d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e964bb5b-31c9-4527-b38f-01504bb85fab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7348c43c-b52b-4200-8425-8bc06591b983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b288641c-fef6-4aaa-a5d1-1732b69fb6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb78ddb-b538-42ee-89ee-c06e7ca91ce7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceee68c6-6c45-4ea9-8ac7-caeb9c3285bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f60807ac-f1d2-4b3a-beb0-de1f70f71e85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a6d0c6-7476-416d-91ba-c05ac9b8f86e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4824a4-19bc-4bb8-b1a4-af2804efac20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084dfc60-bf1a-41c2-967f-f91f7e727a6b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbf1877-46e2-42d9-9704-06961766b597",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f508225b-f21a-4a56-ab84-12f4618ab176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe3580c-7a43-45e8-9784-c1260cab2ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477cd8fc-ae8a-4fc4-b86d-2460381e746a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d820c7-18a7-468f-836c-0b2ba0f6ec0b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee83a141-0d1b-44ab-835c-2dd2280213c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2104928a-dbae-43d9-87b2-b338b6264a07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ad67f1-4ef5-488c-bdc9-8b108f02d991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7b695d-c2e7-4aa2-ae86-0d65765d803e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94b054f-3e7f-4234-825d-357121593a94",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1564d0-994e-481f-bde2-045fcb5b9b17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d2ab0a5-1e4f-4042-8a9e-c6bacc52870e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6d5ad0-8f20-496e-8495-27251425cc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd30efe3-9b89-45e2-acf1-4944c9103c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a826ea31-067b-4724-a190-89fddb5fe0e9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5c1cf7-dc71-4e33-87e8-244849c2b30e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba24f8e6-f5a3-4009-9fe5-96e754a931d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2696f72c-e5a0-48e8-bd69-ba57a06697eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4487558-3ddd-4b33-9275-bc1ffd027bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b6f1c3-887b-4c0a-a343-7c0075f0b501",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684e24aa-4743-437c-866e-a6084af538d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9989d256-9d72-43a4-9611-f983d3736d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c03884e-1300-4c71-8c6b-836e53985b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639e677d-6032-4647-ba31-100db91042dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6053fe7e-166e-49eb-8338-89eaf50ca168",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4774446c-2d53-4515-8b64-cfcd01c6507b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2778827-b9da-4ebc-8a73-07c0bb457f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd3bedc-a615-4bbb-b31f-cf0c6aa46243",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022bcf7b-94e6-4e63-9f86-6a6643bdd7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ab2776-af90-43a0-88f5-c29e12dd9405",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8c7f64-241c-4aba-b931-5acbd99a8be2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd436f06-873b-4169-9634-7fad85afd9cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8d3b9c-9f88-4090-9aa1-ac2bd709681b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925b789f-2a58-4ccf-bea6-3745bbaf28b3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94e75ab9-079a-4d7d-992a-cd922ac6f217",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b5a3868-a425-4e5d-9da5-b9bafb6ed0db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8743b5c-5b7a-4d5e-9d49-a1c323465fbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfb0075d-26b5-4916-8ca1-a64d23d2d80e"
                    }
                  }
                ]
              },
              {
                "id": "734f61e3-840b-40da-86cd-ff0839f39cf7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fc54f95-14ea-4132-b5e1-29c807e6a8f7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9ae023-a9ae-4d7b-846a-d97e76f51c92",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a2dcb004-fcd2-45cc-ab56-249b55263891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe213ab6-4ed8-4578-8911-d3dc27b4ed04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63aa6093-7493-44cd-a062-9110adf6ab16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80290691-ced2-4ac0-bbd7-4c3e9f8f5ef0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ef88932-7067-4781-a81e-9a0af7c6040b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f16e4369-7270-4a84-8ec6-e808536638d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8de16e1a-ee43-41d1-80f4-ebbe09c5295a"
                    }
                  }
                ]
              },
              {
                "id": "33fa917e-4a66-4408-896a-c3a6716c2ade",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e98abd76-eb13-4f11-9403-3f897294a4e7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8093f2a-0a65-454d-be9a-1ed10fe574ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "88757f16-6cd2-46e9-be86-a89cc4ab9390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c578254-b900-497e-91ce-5e96cae2262e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b4caf5-fc81-47c8-a9be-3d63a9d3f083"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ba06e38f-6713-4eb8-bebe-546934ba0b9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "001e3243-5858-44e9-b29a-3880958cf249",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9299de77-8725-42ed-8f88-2e28810a1266",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "96f7df82-0ea3-4411-9317-2bbd946ff5ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d7664a2-ae4c-4020-a6b9-38db5a1333ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "487b8fad-e948-4944-85c5-7ae0607e1433"
                    }
                  }
                ]
              },
              {
                "id": "5b618e57-69ea-4977-b849-4a33a7e070f9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98ca023b-3a82-4960-a62b-12357de9be14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7bd92bb8-b2ce-459d-ac33-91912f8ed35c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79e7ee51-dc0a-4d37-ac31-039fbd267d9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "021ee2ce-b169-45c7-bd42-04c421c210c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a15dde79-0b52-41d0-81a3-9a9010b95133",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c4719e05-caa8-468b-bd41-e3e8ba1ad752"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93a9c03e-f390-4b33-b1e5-f40fcda4a02c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ebf71ef-65ba-44b6-a005-9bcf71dba2c5"
            }
          }
        ]
      },
      {
        "id": "f5bd9147-0178-4bf8-90cb-52dff178f71d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "63ee1c80-bc3a-4b49-b37a-03606c96edeb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb39b25c-d467-4bd5-bdc6-7cfb4a9f8633",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5fe0ff88-cb85-4f4c-bd83-47a8397c3916",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fcda86-638e-413d-a9e0-20061ad53faf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dc61db89-ed46-445a-9ea5-529c91804abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d95be2e-48e0-4426-a38d-3267a3a5df76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecd73d98-1d31-42bf-8a73-5a1967e3bd60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80e3a5a3-6315-4522-bc34-8ff785ae5881",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e001c8d5-5fb8-4fa7-af7e-a6e20afafc8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a71b0cb9-74c4-4dd9-80e3-9427e1f5857b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e46972e2-e328-4bfd-90c0-eafbd8fabdff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac4fb6f0-ca19-40df-a12f-8b5ac056f7f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fd0e0f65-cee8-4ab9-a9eb-accf5b791407"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de504aea-df5f-4022-a3e2-d21587d45c12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fcb5d62-231d-43bf-b882-48736ce5b2b2"
            }
          }
        ]
      },
      {
        "id": "a8afe432-ab94-4d73-821c-dce0bdc477cd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9b005c32-b4e7-44f9-9d5e-fed041667969",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26a52ce7-ab0a-4a9b-bff9-9439d02867f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "efa82b9c-fa31-45d8-b773-4febf9b8f66f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff9a6b8-dd8b-4785-acb3-0b0cf81ea260",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04ea1276-8933-4c09-9d3f-85b10345f40d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cec4e82-457d-49a0-b351-3dd439bf418d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c486468-207f-4dac-878b-c61aac2882b4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d31021d-9bd9-4afa-ba89-c73403b38f73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a90e52fd-c1ba-4f6b-97bc-afdbf12d05bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "159af4f0-02de-40af-b3a8-3b50f00e6424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ea1a6b1-7e8c-455a-9782-a1e1c71c35d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "898ac1ac-cb6d-4205-881d-7d11fe5bfb28",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "af836b2e-d2a4-4ed1-8e97-58f59322ec7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43fe56ce-c39b-42e1-a0b4-68ce4d2a3d05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c0ac1d4-e7dd-480b-a278-f53111bcf33b"
            }
          }
        ]
      },
      {
        "id": "3a1ba0ff-6b86-46ea-a9ff-5aacc7d6c9a9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "11176a42-0b44-4426-8d10-6fabe213f5aa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31e0a08f-241d-470a-84c0-e4089d9a2456",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e0f37c5-abf8-4257-a903-093ce283dd31",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ced82bc-8527-4223-9377-cfaca555d6f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2dec29d-ae7c-4f19-bf3c-214f3ffbbfb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "097eab10-c991-4f0d-ab08-f65085711e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ecf4d6e-e830-4103-9c13-f20a6159d05a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da02cbb2-a5d3-4c60-9ff1-e2d6819093d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c16cbf4-0460-4602-9df0-7e43c78754ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26bc6cc5-bbee-4626-b201-3877538c8db8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a875d458-ea08-4005-9b6e-a8f9692bb4e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5cebf09-1ad0-4520-98a1-2f8e1e77bfee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "257b4059-aeac-48f7-b796-8f92ebb7d9aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1dcf3851-4ac1-4660-a5f2-78d657fe8d28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36fbf917-9eea-4e92-8300-ead429cdcb52"
            }
          }
        ]
      },
      {
        "id": "e741042a-8d7f-45d3-8c89-8a1616f51975",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ed7e04c-057b-4ea8-9ea4-9b38abd933c9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "459eaafb-e0ac-4599-86b4-0e6be648bcb7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b8ff9480-dee0-4ea3-8e7d-f522dad4ffca",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3dfe7e09-fa3a-4806-a56a-adf682be81e6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7528df37-c12d-4fd1-8165-cec2b24a09ba",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 64
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 150.7183098591548,
      "responseMin": 20,
      "responseMax": 1966,
      "responseSd": 252.89603904798025,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691713874720,
      "completed": 1691713929361
    },
    "executions": [
      {
        "id": "90cb5a59-338c-44a0-b1ed-41e9f67c1f95",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8205b91d-9f3b-43a4-b5e8-ad96914b852d",
          "httpRequestId": "085f6907-981f-464e-97ef-f4a000e32c8b"
        },
        "item": {
          "id": "90cb5a59-338c-44a0-b1ed-41e9f67c1f95",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "61950de4-90e3-44e8-8603-1616f933e573",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 0
        }
      },
      {
        "id": "51ed722a-c8b7-451e-8dbe-30949826c880",
        "cursor": {
          "ref": "e2760c63-955a-4054-bf38-cc11f1853b86",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "07c40390-0e1e-4ff3-affd-a6c57f06597a"
        },
        "item": {
          "id": "51ed722a-c8b7-451e-8dbe-30949826c880",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "76b239dd-8c68-414a-89a4-af4e0247c35b",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "f13a8eda-fb26-43b3-b066-6b79a0d778ec",
        "cursor": {
          "ref": "9fe03b29-6d4f-4484-ae9d-6b80d5972c01",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1583336-5c8a-474e-8fde-bffaf94931f4"
        },
        "item": {
          "id": "f13a8eda-fb26-43b3-b066-6b79a0d778ec",
          "name": "did_json"
        },
        "response": {
          "id": "aec2a33a-8b0a-46d2-b95e-5c7977e1688a",
          "status": "OK",
          "code": 200,
          "responseTime": 663,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8133c06-d875-40e0-b8f5-e033e060b3fd",
        "cursor": {
          "ref": "2b34cd97-9b55-48c1-b93b-86e6300d5acd",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "010c03ef-27e2-48ee-975d-5a5099eab939"
        },
        "item": {
          "id": "f8133c06-d875-40e0-b8f5-e033e060b3fd",
          "name": "did:invalid"
        },
        "response": {
          "id": "66cb5081-a87e-4dbd-a393-5d59704455a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8133c06-d875-40e0-b8f5-e033e060b3fd",
        "cursor": {
          "ref": "2b34cd97-9b55-48c1-b93b-86e6300d5acd",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "010c03ef-27e2-48ee-975d-5a5099eab939"
        },
        "item": {
          "id": "f8133c06-d875-40e0-b8f5-e033e060b3fd",
          "name": "did:invalid"
        },
        "response": {
          "id": "66cb5081-a87e-4dbd-a393-5d59704455a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e106eefc-d7ed-43c6-be52-5eac791de7ae",
        "cursor": {
          "ref": "fb50cc08-195a-4b1e-98d1-cfb22d0d6eba",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "15d3dc0e-14f5-4033-82e1-cadbb4dd5cdd"
        },
        "item": {
          "id": "e106eefc-d7ed-43c6-be52-5eac791de7ae",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9f6b96b3-8afa-4c07-8034-402322975a94",
          "status": "Not Found",
          "code": 404,
          "responseTime": 137,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab76fae0-9566-4fe1-bd70-a20ccf5a08f2",
        "cursor": {
          "ref": "bb33a756-3680-4288-bea8-dbe79fcf3627",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "99973e8d-fc62-4d17-9eb6-467d814b8c7d"
        },
        "item": {
          "id": "ab76fae0-9566-4fe1-bd70-a20ccf5a08f2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "61dce080-7ef9-4c3b-bdcf-f822100fd3a4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 83,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9b87e7-d712-4e64-a422-4e0663fdfe05",
        "cursor": {
          "ref": "1ff95fa9-9954-4a72-b9df-4a5212cd5491",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "eb87a0f3-6f9c-460a-bd18-f868f927bf6a"
        },
        "item": {
          "id": "cf9b87e7-d712-4e64-a422-4e0663fdfe05",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "26caf548-9538-4404-933f-c8fa5fead501",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f56793e-88b7-4c0e-aa8c-266c7af30efe",
        "cursor": {
          "ref": "49eec85a-5436-4aac-b061-8428f64f128c",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f0aad885-00fc-485f-ae1c-00996d29189a"
        },
        "item": {
          "id": "3f56793e-88b7-4c0e-aa8c-266c7af30efe",
          "name": "identifiers"
        },
        "response": {
          "id": "e2c0bc60-d510-4b70-b2f2-28396f39ca2f",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663b7d70-88a5-4dca-9b0c-e613dcd61ca9",
        "cursor": {
          "ref": "c5f30f78-24ef-41a5-a1aa-1cc422e5d92d",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1ab3a983-6657-40ca-a7c2-847962b3eb1a"
        },
        "item": {
          "id": "663b7d70-88a5-4dca-9b0c-e613dcd61ca9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b6f88a86-4ad4-4eaf-bf58-991149e39eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d75832-a797-4e7f-b357-7ee7befa26ed",
        "cursor": {
          "ref": "eb610a38-bab0-4b9f-8310-0931d93aa12f",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "342516e4-9eba-420f-9b68-925570c08fdf"
        },
        "item": {
          "id": "84d75832-a797-4e7f-b357-7ee7befa26ed",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "12cb167b-2634-4ed7-a243-57bdeded7538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5033bfdb-eee0-41f4-9aed-d04c9045c212",
        "cursor": {
          "ref": "e1e84063-e64e-4beb-ba11-48aaf21450ed",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "12b64d76-de42-47c1-b11b-c774cc9a7e24"
        },
        "item": {
          "id": "5033bfdb-eee0-41f4-9aed-d04c9045c212",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4aa6da95-9a46-442c-8309-42881cadf4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eadcf14-3ddf-40f9-bb37-6943b3a46212",
        "cursor": {
          "ref": "8695c92a-dc33-4adb-9160-55c61aa5c5ab",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8d286c9c-9169-4fe5-b0bd-39d9adb2d38b"
        },
        "item": {
          "id": "9eadcf14-3ddf-40f9-bb37-6943b3a46212",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4f20b7e9-49c6-47b2-b4e3-f1c3f7bec123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11ea13a-581b-4ea9-a912-e25f1b4dd3e6",
        "cursor": {
          "ref": "9193fa64-8d35-475b-a4ac-9e145abbb267",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "877c314b-c7a0-4a5d-ba5c-ee205f5d5280"
        },
        "item": {
          "id": "c11ea13a-581b-4ea9-a912-e25f1b4dd3e6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dd23c0be-0794-4b9e-9150-875e0e75a70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2272f0-73d3-4bbc-b11d-a8e14c807f83",
        "cursor": {
          "ref": "4cd61fe0-a345-40c2-958c-6a03efbcb0aa",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "59f6e07e-868d-4cc2-8d86-f241fbdc5875"
        },
        "item": {
          "id": "6d2272f0-73d3-4bbc-b11d-a8e14c807f83",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f5a6435a-966a-44b2-855e-a2dc36e75e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e064502a-27bc-4f02-8b86-5e248745da79",
        "cursor": {
          "ref": "abd6a037-b683-4588-8ef1-32c385aef830",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a0f81932-96ca-45aa-bb5c-af4aa51a1e7e"
        },
        "item": {
          "id": "e064502a-27bc-4f02-8b86-5e248745da79",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6ae3ea39-8cc4-4adb-8528-36a9e2b8be99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5490658-ef7a-48ea-8b86-b7d25f10b3da",
        "cursor": {
          "ref": "855252f1-40e0-4162-8c84-c1021b2e0df6",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "41d040c7-81ac-41b9-ba65-e487b48da7df"
        },
        "item": {
          "id": "f5490658-ef7a-48ea-8b86-b7d25f10b3da",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "33d4dcb7-97e3-485d-a822-43ffb4e2c440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37269528-115f-4084-8fe2-bb5872599d65",
        "cursor": {
          "ref": "d506609d-b2ee-4511-a84e-11cb82545857",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5f1c5281-6870-43ee-affa-2c7a5019f7e7"
        },
        "item": {
          "id": "37269528-115f-4084-8fe2-bb5872599d65",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2a2cac2e-62ec-4540-b4b1-40d7fb3329d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ce450e-0ff8-437b-8e0d-560cf5d970ca",
        "cursor": {
          "ref": "ffd09d24-54ad-428c-8922-c63e163e86c1",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f877dc21-911f-4be9-a0cb-91a7942c3e2f"
        },
        "item": {
          "id": "14ce450e-0ff8-437b-8e0d-560cf5d970ca",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c5b2d94d-46c0-487b-9ef0-93bb0f4f47a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a16392-24c3-4c67-af89-4d0054c1bad1",
        "cursor": {
          "ref": "358b9ebc-eed5-4caf-8376-c85794ec71bd",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "07008918-8548-4ab1-911a-a35a152316f4"
        },
        "item": {
          "id": "82a16392-24c3-4c67-af89-4d0054c1bad1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "db1534c4-ef82-4702-bf2c-837b5294b72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf0529e-916a-4f94-bfd3-36eafc72dc12",
        "cursor": {
          "ref": "f98f8f9d-16c7-4cb9-a65a-0458de36570b",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3fe091fa-7bd1-4932-bc6a-ca07f1ffe95a"
        },
        "item": {
          "id": "9bf0529e-916a-4f94-bfd3-36eafc72dc12",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "aab6198f-9172-4570-b864-a9165d5d2623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57592c75-5225-4eaf-8fb8-65f6baf58b79",
        "cursor": {
          "ref": "72be7109-5a3e-4570-8fa5-61549cb846f1",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f2da4cd2-311b-4d8d-a0d4-ccd90478ee5f"
        },
        "item": {
          "id": "57592c75-5225-4eaf-8fb8-65f6baf58b79",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5e30fbfa-b106-4eb7-9112-bc22e3291b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365d43a5-8f10-4c61-92bb-0a8120051507",
        "cursor": {
          "ref": "457874eb-95cd-4bb7-baab-faa5828217f8",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "df5e6149-ca12-43b5-a0d5-1c7dbdb1b9f8"
        },
        "item": {
          "id": "365d43a5-8f10-4c61-92bb-0a8120051507",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e9caa888-5511-45b6-86e2-617c6e5280aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065b65b9-b3de-406c-81ac-83e6d67eb90d",
        "cursor": {
          "ref": "42fce93e-1651-4412-9d72-f464ff4f8c47",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c14affcd-09a3-437c-978c-b9a76702a3e0"
        },
        "item": {
          "id": "065b65b9-b3de-406c-81ac-83e6d67eb90d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fa60d6db-82b2-4c6a-b3b6-645a48058e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4f588d-0d58-426c-8bd8-0bacc20d94e2",
        "cursor": {
          "ref": "d674a350-ddd4-4198-8ac8-5c726fb15037",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "27e29967-28bd-404d-b62e-5047bbecb595"
        },
        "item": {
          "id": "cb4f588d-0d58-426c-8bd8-0bacc20d94e2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "58d1bb84-abdd-47a6-b4d2-caa6e4605140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd3239e-6c8d-46d6-b9d6-0697f8ce481e",
        "cursor": {
          "ref": "e954a996-3220-4c24-a2b2-d32e114bd24d",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8e987295-0b10-4b36-8ebf-e9bcce93891d"
        },
        "item": {
          "id": "3bd3239e-6c8d-46d6-b9d6-0697f8ce481e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "82bc4641-90fe-4f88-8626-227cd5d40040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfe6991-95cd-4c25-91b0-e3a83ec7b7d4",
        "cursor": {
          "ref": "ed1ec62e-6399-4801-886a-12ea96cb16a7",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "77359c28-6e40-463c-818c-8dedfbbe116a"
        },
        "item": {
          "id": "bbfe6991-95cd-4c25-91b0-e3a83ec7b7d4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cb06d470-7ecc-4f7d-8f2a-76c45a8446be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c253a79-ccf5-469d-86e8-ba6cf645bf0c",
        "cursor": {
          "ref": "25978a27-4758-4128-91ff-df113261841b",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5a3e1859-0bc4-4d6e-bbd7-585143ec3207"
        },
        "item": {
          "id": "3c253a79-ccf5-469d-86e8-ba6cf645bf0c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bbf9d472-f04c-46be-a6dc-974c5f5eb7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5370911-4af4-4601-aecc-cc7b2e396dbc",
        "cursor": {
          "ref": "12e8642f-8aa0-4213-ad10-e2a40de852a3",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "15ee95f8-d2ba-4139-8c22-f6f248ef740e"
        },
        "item": {
          "id": "a5370911-4af4-4601-aecc-cc7b2e396dbc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ffebfd29-2fe2-446d-8902-55056119325b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897f7b36-9bbe-4178-bb53-2ebaf1b64147",
        "cursor": {
          "ref": "dfc39ca1-0652-4940-8c22-5d0b63e29c6c",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2ee1d273-d460-4450-98e7-90db4af9b840"
        },
        "item": {
          "id": "897f7b36-9bbe-4178-bb53-2ebaf1b64147",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "96a0630a-c56b-4e19-befa-031117606f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9562ce-4058-481e-b3c4-356c03212ef7",
        "cursor": {
          "ref": "c88c0e11-56b7-4bc9-b39d-40fcbbf7e256",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "12dd7e54-4998-4067-870d-f579764246f4"
        },
        "item": {
          "id": "1e9562ce-4058-481e-b3c4-356c03212ef7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ac3ba155-7ee5-4708-8b42-5372a3f39e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0f4b83-07de-47ec-b784-271e76caab6a",
        "cursor": {
          "ref": "94e64147-01fc-482c-a35b-5977f4a836a3",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "177978f1-4401-4ad8-bf7c-8734ef938b03"
        },
        "item": {
          "id": "bc0f4b83-07de-47ec-b784-271e76caab6a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ebe3119d-7821-46ae-a6b2-663c8b1afa38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddb871b-8440-4976-ac2d-59d6e3608145",
        "cursor": {
          "ref": "2b96a757-3084-4bd5-adb9-25b175eae7d6",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6f616d93-a79f-4841-ae29-4e0f2a7bf837"
        },
        "item": {
          "id": "fddb871b-8440-4976-ac2d-59d6e3608145",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "562467de-e4ca-42db-8ccc-950c3cc26d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e21512a-6686-4923-bd58-b2b5f1beaab0",
        "cursor": {
          "ref": "8a62aa5b-36b3-4b71-96a3-bb5725a9b4d5",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0abc3244-0cb7-4da8-99e6-f68c714c3db8"
        },
        "item": {
          "id": "6e21512a-6686-4923-bd58-b2b5f1beaab0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "38c41721-4bd5-4329-b560-83aa54a92923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5988cd3-4b7c-48ff-81ad-b764ee748c2d",
        "cursor": {
          "ref": "d764a264-d6df-44c8-98e4-db17f7e13eff",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ff283c77-2fd3-4e08-bd82-149ebe46a5ea"
        },
        "item": {
          "id": "b5988cd3-4b7c-48ff-81ad-b764ee748c2d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c5bc95d1-9458-4c23-abff-5b862cf9a1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702a5d95-b6e5-4268-b5db-328a6cbb3865",
        "cursor": {
          "ref": "f3badb77-f3f5-4071-9bb5-df8335fbb421",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4c886cbe-d09b-4e40-9a5c-444b68078d7e"
        },
        "item": {
          "id": "702a5d95-b6e5-4268-b5db-328a6cbb3865",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d2ce44e4-d8a0-4a87-8393-b36583628dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34c7a3c-f4fc-47cd-a64e-44d66bf82c03",
        "cursor": {
          "ref": "b81793c4-5d8f-4197-8089-75064004ed59",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c3042c41-de0d-441e-b76f-9f90d3843495"
        },
        "item": {
          "id": "b34c7a3c-f4fc-47cd-a64e-44d66bf82c03",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e5087f77-c0c2-40b5-800f-e17d316bedd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99205039-2d22-4788-9d50-552893cffa0e",
        "cursor": {
          "ref": "6c582516-91a3-4664-97f3-a3671a6a9e28",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6d50c792-1ba6-4970-bc18-56c205ed552b"
        },
        "item": {
          "id": "99205039-2d22-4788-9d50-552893cffa0e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c0f6f065-9174-44c6-9cb1-136475628f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b26996-f8bc-41a2-afc2-80c41b189277",
        "cursor": {
          "ref": "dc7665f3-34aa-46ea-b489-3dbc2246c99e",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "303d163c-e1d3-4d50-934c-70e02a48d7fe"
        },
        "item": {
          "id": "e9b26996-f8bc-41a2-afc2-80c41b189277",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cde5cb70-2e92-42c4-9046-7ee528f66804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daf3c9b-0989-4a9b-8281-47de33618f53",
        "cursor": {
          "ref": "a5595063-2b72-423f-af49-ac88e17255c9",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4a826348-aa5a-4755-900e-b0784048c819"
        },
        "item": {
          "id": "6daf3c9b-0989-4a9b-8281-47de33618f53",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "42011dad-0e12-477c-9fa0-0cd134ecaebe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 198,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fd2dfd26-3ce2-456e-986d-38d4d16de454",
        "cursor": {
          "ref": "71eec843-3e6e-4b8c-82d4-1654786878e4",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "23892eb5-b641-4cf7-afd3-dcebf710fc79"
        },
        "item": {
          "id": "fd2dfd26-3ce2-456e-986d-38d4d16de454",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a4197693-b7ed-44ec-bcc3-d78ccc5d3460",
          "status": "Created",
          "code": 201,
          "responseTime": 1966,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b4dec69b-b13c-40e8-b10a-b006041dd6a7",
        "cursor": {
          "ref": "e38a36a9-c29d-4ba5-9369-3a3242dcddd9",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "43f02eb4-f7bb-4847-a638-650872d73da2"
        },
        "item": {
          "id": "b4dec69b-b13c-40e8-b10a-b006041dd6a7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7d8f6770-3d72-46b9-86ac-8a4e25806363",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 166,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8f9d3d15-02be-437c-98c1-0c807bb026ee",
        "cursor": {
          "ref": "4488128d-a717-456e-b626-ff9dd7370a89",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7919c54b-2faf-4a7f-b02c-a618c79e8075"
        },
        "item": {
          "id": "8f9d3d15-02be-437c-98c1-0c807bb026ee",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "51579f20-4ab1-4901-b8c8-6da5fe009f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1fe0cf-28de-45cd-803a-6fbe6ebbd25f",
        "cursor": {
          "ref": "968292cd-f343-4d7d-bf7b-dcb349eb6ed3",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "669219e3-7e04-4997-9e87-bbc9c226a598"
        },
        "item": {
          "id": "3d1fe0cf-28de-45cd-803a-6fbe6ebbd25f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "62f30cf0-8285-4d16-be7a-2d43a19d2506",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 177,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c87cd8a6-30c2-4b63-886e-461e6fad124f",
        "cursor": {
          "ref": "e94884cd-5b33-4040-97b4-ca86287c6b36",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "64143ed5-163c-42f9-a08f-f8566da71027"
        },
        "item": {
          "id": "c87cd8a6-30c2-4b63-886e-461e6fad124f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "056b8a48-1ef2-44c8-a7f8-a6c3ba555a50",
          "status": "Created",
          "code": 201,
          "responseTime": 1125,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "02e4610f-20f5-419e-afad-27c7f05022d5",
        "cursor": {
          "ref": "78475def-fc6c-42b0-ba82-f6b054ad3aff",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "77b425f7-d935-45e4-90dd-b20ca06266ea"
        },
        "item": {
          "id": "02e4610f-20f5-419e-afad-27c7f05022d5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cdf01925-80e5-4cdf-9f0a-0ee168a1ab67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 166,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e6e1ec3d-5917-45fb-8b9a-e9994eed95ff",
        "cursor": {
          "ref": "09ebb4b9-3473-4e59-9dc1-e529f5c929ed",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0c8d937f-da33-4b67-bae6-93044d7a5766"
        },
        "item": {
          "id": "e6e1ec3d-5917-45fb-8b9a-e9994eed95ff",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "80a38661-ce1f-424f-abfb-ccc7a87b1ce0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1030,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "97215a9f-5f86-45c4-bafe-2fcfb9632ee1",
        "cursor": {
          "ref": "54c7246d-3e8d-4a03-a343-56e83704c1d9",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e54a570b-17ad-4273-a53d-35d1dc72170d"
        },
        "item": {
          "id": "97215a9f-5f86-45c4-bafe-2fcfb9632ee1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a1541ab9-1e50-4a2b-a0d0-0a916739c6bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 142,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "be690159-2e27-41ca-8e79-e8815c7e16a3",
        "cursor": {
          "ref": "1e6b4ed1-0839-47c7-9014-311a2d18a53d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3ff0af37-d7c8-4686-a81b-4e3e2cdbf22f"
        },
        "item": {
          "id": "be690159-2e27-41ca-8e79-e8815c7e16a3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7e7beb27-a9c7-4219-976b-835ebf8d8db8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 146,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f3091cf7-6ac8-4eb9-9e8f-85ba88d9c231",
        "cursor": {
          "ref": "daad38f8-f400-4ba9-af59-cbdac106f5a5",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "08aea694-83ee-48db-a183-784380507851"
        },
        "item": {
          "id": "f3091cf7-6ac8-4eb9-9e8f-85ba88d9c231",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "990189cb-b270-4334-aaf3-ef752a0b77b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 165,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9a2d8b8d-3f6b-4ef3-bb33-84e603174cc7",
        "cursor": {
          "ref": "83008f53-0cb7-4942-9335-43898a6d96fe",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8852ba3b-27ec-4ac0-bece-2b4ffccbe38a"
        },
        "item": {
          "id": "9a2d8b8d-3f6b-4ef3-bb33-84e603174cc7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c675a29f-0458-423e-b5dc-4eb73526ac41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "87ad3446-043b-4a4d-ac10-e5866f104e23",
        "cursor": {
          "ref": "80efdc13-12b7-403b-952b-c531294b2da1",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3618ee7c-8c76-4cef-b81b-25baddfec928"
        },
        "item": {
          "id": "87ad3446-043b-4a4d-ac10-e5866f104e23",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4a26d739-33e9-4d24-9cf9-abfce5d95c77",
          "status": "Created",
          "code": 201,
          "responseTime": 1085,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "982a4053-c3c0-4d3f-8988-795ddbbb58e1",
        "cursor": {
          "ref": "1a3f26a4-3ff3-43a0-bab4-1bb8fdd90614",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bf12218d-0d61-466d-849e-a6d3530e372c"
        },
        "item": {
          "id": "982a4053-c3c0-4d3f-8988-795ddbbb58e1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3e0f2995-bb69-4114-90d4-75aebf6af194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b6c5b5-d2d1-4eae-8cc6-d73a0831b6b8",
        "cursor": {
          "ref": "59a59c87-1d81-4595-bd51-f1893148d818",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b2a138f7-3e63-4002-9679-68f16116db74"
        },
        "item": {
          "id": "90b6c5b5-d2d1-4eae-8cc6-d73a0831b6b8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5b6322dc-e395-429b-b839-685b547fc16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f64beac-574b-4216-ae94-7ebf70f03bf6",
        "cursor": {
          "ref": "d6cc7179-9401-4675-974c-924b4d7a5c7a",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4fea1a0a-f067-4b1c-89f0-c0d93759eba0"
        },
        "item": {
          "id": "5f64beac-574b-4216-ae94-7ebf70f03bf6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b661c80f-85fa-4e81-95ab-cc575d9c3f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cef0cd-0166-4927-8756-dd3864709d66",
        "cursor": {
          "ref": "66159708-000d-4f30-8262-647b1d03a83c",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "83e1d13c-827c-448e-a604-3027a7cadc35"
        },
        "item": {
          "id": "67cef0cd-0166-4927-8756-dd3864709d66",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "89d7b330-0d0d-4c38-8da2-c19ed6b25628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e482a4c2-8db0-4b36-ac3e-1c4578a3833c",
        "cursor": {
          "ref": "189e217e-d0a3-42a6-b9a4-e691ce9f0897",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4d7b6ff8-29b0-4d97-bfbe-2e327ba510c5"
        },
        "item": {
          "id": "e482a4c2-8db0-4b36-ac3e-1c4578a3833c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e6dabc74-05b0-4abf-8892-9c777cd7283e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc4f7bc-4f48-405d-a741-dc03fa21462d",
        "cursor": {
          "ref": "c41e1888-5dc5-4e25-826b-cf615aa9e13b",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cddc590a-cafc-4dde-9896-befc7878f1cc"
        },
        "item": {
          "id": "3fc4f7bc-4f48-405d-a741-dc03fa21462d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "10c20f4f-b2e0-44f9-8c89-feeab6812156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff39b36f-3cf8-42ee-9a14-9eeba695ce9f",
        "cursor": {
          "ref": "ab2a7ae1-8aef-4208-9fbe-fafdeff91918",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8c2810bc-dcad-4586-a801-ace9c179af54"
        },
        "item": {
          "id": "ff39b36f-3cf8-42ee-9a14-9eeba695ce9f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d11124d1-c660-4647-b93e-c203be53d645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50439ed1-29a0-458c-a145-ba0711859d99",
        "cursor": {
          "ref": "1afb70f0-c44a-4e1c-880c-baf750271944",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6105e4ef-5a4e-4f1d-9a01-209227d19a9b"
        },
        "item": {
          "id": "50439ed1-29a0-458c-a145-ba0711859d99",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "26940c23-e71a-43d8-936d-f685b7faf116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2660d9dd-106d-40da-a7c8-978424d4e79c",
        "cursor": {
          "ref": "53e2c5a9-7158-40f2-ad61-cae0e6f261df",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b8c6f877-6576-474e-aaeb-3985f9c9e8b9"
        },
        "item": {
          "id": "2660d9dd-106d-40da-a7c8-978424d4e79c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "076345ab-bcf0-4120-9606-45506e57376a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d863f01-0656-4bb4-b840-6902fc161efc",
        "cursor": {
          "ref": "b55b199e-98eb-4451-b719-6c7712d208cb",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7d77c1e7-b46a-4c32-9b54-94a751bbe462"
        },
        "item": {
          "id": "8d863f01-0656-4bb4-b840-6902fc161efc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "81fabbbe-71d2-4e29-90f0-8bce057f9b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b2aea9-052e-43cf-b226-848edd17502d",
        "cursor": {
          "ref": "3b509a1b-2ca1-40a6-8a29-13294a2bd040",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ea6ab2d9-731a-4723-b04e-41926edfbbd5"
        },
        "item": {
          "id": "96b2aea9-052e-43cf-b226-848edd17502d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8f643b23-160d-479d-baf6-04d114ebb9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c754715d-83e3-43d5-b4bb-635e5c4998a8",
        "cursor": {
          "ref": "c794288c-ce05-458d-a3c6-3fc354ea301c",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d747daee-66f0-4191-91bc-2d95ce62a30c"
        },
        "item": {
          "id": "c754715d-83e3-43d5-b4bb-635e5c4998a8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5d34ba8c-88ee-4a9e-af6a-a6deffa923eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49dd68fb-f4b9-4143-951f-4aad22a040c7",
        "cursor": {
          "ref": "b2d92793-e5ed-4328-840f-d0d306ddad5f",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "196a125c-ef77-443b-920f-7a66ca7dcb1e"
        },
        "item": {
          "id": "49dd68fb-f4b9-4143-951f-4aad22a040c7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "daa8a59c-f0f2-43a8-a2c5-9bcc48469610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5031d4e-7f44-45b4-a932-f17f0a197c5b",
        "cursor": {
          "ref": "c67515ca-3545-4d07-8207-c33f64857408",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8f25adf8-a10d-43e3-b1ea-4de553cff55d"
        },
        "item": {
          "id": "d5031d4e-7f44-45b4-a932-f17f0a197c5b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e6e592bb-c82c-4595-b785-5d9aaa2549d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 831,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "461df4dc-d498-4886-8517-89743882c7fb",
        "cursor": {
          "ref": "de8fdefe-bba5-4c5d-b679-19a9e243a81f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1f05dde0-a855-4739-9665-7623f54ff96d"
        },
        "item": {
          "id": "461df4dc-d498-4886-8517-89743882c7fb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ac79a30b-ae56-4c1f-96a1-e8cdfc35eb85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1146,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b233852a-a5ae-42ba-bc16-fca541ba872c",
        "cursor": {
          "ref": "57362cb8-697f-4110-bfab-4a2a31f3535a",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a541fe88-a3b6-4f1f-9074-8f16ac1d2652"
        },
        "item": {
          "id": "b233852a-a5ae-42ba-bc16-fca541ba872c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5dda7125-97dd-446d-b337-f777c6a62675",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 199,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a5a6cb20-a90c-493b-8c1d-1f774f9034cf",
        "cursor": {
          "ref": "9f035440-f253-4717-8f97-023c60baac58",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "26707dca-b690-42df-aa28-73cdf9545c9e"
        },
        "item": {
          "id": "a5a6cb20-a90c-493b-8c1d-1f774f9034cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d5d549e3-24fd-4da9-af2f-11c5bb2266c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 816,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "eda62054-b5fe-46bb-b371-d063e6fc2af8",
        "cursor": {
          "ref": "fdd1e299-ab2f-4615-9a99-da8dfd512150",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ad64901f-bf98-4fad-a597-b8cd9e553c6f"
        },
        "item": {
          "id": "eda62054-b5fe-46bb-b371-d063e6fc2af8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6996c53d-2adb-499f-a6de-4e1af087e895",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 139,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d10258a0-d784-46d6-8046-f02587e6dc3b",
        "cursor": {
          "ref": "ef510a9e-f9a2-4caf-a6dd-fa766a45b565",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bc602da5-21ae-42ea-80af-ad6c0f0eb38c"
        },
        "item": {
          "id": "d10258a0-d784-46d6-8046-f02587e6dc3b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "27b36524-76ae-459e-880f-0160fdbdacf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2c8d23-d7ec-4e50-8f8c-676b859b100b",
        "cursor": {
          "ref": "64779421-a923-4ff0-9df6-851f318fe704",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "60cc40e4-97d7-44d4-ac8c-b1640a684c06"
        },
        "item": {
          "id": "3d2c8d23-d7ec-4e50-8f8c-676b859b100b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ea4760d5-d37b-481a-ac04-8a7784352533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffe61d7-c6c8-4d6f-a9c6-4e18fe8a17c9",
        "cursor": {
          "ref": "1ac34286-25c3-4793-8224-92cb85c27420",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ff7a291d-96da-4869-95b5-395804e2d049"
        },
        "item": {
          "id": "7ffe61d7-c6c8-4d6f-a9c6-4e18fe8a17c9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0906e6a0-2a74-433d-a125-dd9e5562732c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5ee871-65ed-4774-a911-b62793aa29ea",
        "cursor": {
          "ref": "31d22aa7-845d-4925-8c5e-be993c0b9e00",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "81711043-e6c3-416b-8c19-db55def6c02e"
        },
        "item": {
          "id": "9a5ee871-65ed-4774-a911-b62793aa29ea",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "59602ff7-ee2f-4f14-867f-5a99be1d9aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324b81d9-bc5b-4fbc-b06b-43878b17806c",
        "cursor": {
          "ref": "2e3c6e9f-d2cb-488b-82f0-3fb5a787aa6f",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0b0d47cd-a7af-4c34-83f5-9951ced0e5a9"
        },
        "item": {
          "id": "324b81d9-bc5b-4fbc-b06b-43878b17806c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0bcd8930-32fe-432c-bad5-27fc17f6b2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d9bcfd-b35b-4619-8582-e1d42d173043",
        "cursor": {
          "ref": "dd22c6e9-ef3c-4aaa-9dc4-f34d808f54a9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1c686661-fc45-4b7b-9b9e-6bb13fc5df47"
        },
        "item": {
          "id": "93d9bcfd-b35b-4619-8582-e1d42d173043",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6ae54918-a6fc-419e-b290-de7483a4b433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23550474-8523-41f7-aa8a-c97b2b7a39d5",
        "cursor": {
          "ref": "f9734aaa-045c-42a3-ae90-f1a0826034b4",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6ab8718e-fbe7-4f9b-8043-2837e021e7cc"
        },
        "item": {
          "id": "23550474-8523-41f7-aa8a-c97b2b7a39d5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "21a259bf-61a6-468e-bf0f-682041ed4b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5550c09a-9952-4216-b966-11e543df06ce",
        "cursor": {
          "ref": "6b3d3ee1-a97b-4c78-aab0-7a6103e47aa9",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c859d8ce-9619-4004-a459-4976468a3881"
        },
        "item": {
          "id": "5550c09a-9952-4216-b966-11e543df06ce",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5f365b15-fc21-4953-8056-a0e32bf4f2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015036c8-c687-4a0a-8454-7d5b44350c91",
        "cursor": {
          "ref": "84237a73-c6e2-4090-9317-432323f1fc7c",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "31896021-7bb4-42af-ae22-c6bbf1959369"
        },
        "item": {
          "id": "015036c8-c687-4a0a-8454-7d5b44350c91",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bfbd19ae-4f83-4862-999c-ccebc11ee190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c968e4a5-8d0d-447c-aa74-718517fbab65",
        "cursor": {
          "ref": "71740014-526a-434c-b879-d7be44d12b3f",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5762bc85-4957-45f9-a1b8-8685e5a6981b"
        },
        "item": {
          "id": "c968e4a5-8d0d-447c-aa74-718517fbab65",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b877dde9-54e5-4513-8b31-104ef05df016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22a4898-1dca-456c-821c-19566498154b",
        "cursor": {
          "ref": "e857c52f-f53d-4c83-a4d4-5bc7dc15692c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2f7605af-4ecc-4861-93c6-7b16e480c84f"
        },
        "item": {
          "id": "d22a4898-1dca-456c-821c-19566498154b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5cb0aed4-3684-495a-8455-34f1ff3257f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fc26af-85d0-41e9-905d-731d9a34253f",
        "cursor": {
          "ref": "f43f09e7-c5dd-4bc6-b7f1-c1c83816c3f7",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c9dd013d-dc49-496d-8d0f-0ae6eeed17f0"
        },
        "item": {
          "id": "21fc26af-85d0-41e9-905d-731d9a34253f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4f2f0597-06ce-4a46-8967-30fbb9dc8f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1273bd1-0c0a-41b7-a04d-ce4b36a6a57d",
        "cursor": {
          "ref": "be61f553-8036-4142-be1c-a113f2547658",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7668a0a9-6bd3-4d4d-802b-de49de66cfbf"
        },
        "item": {
          "id": "c1273bd1-0c0a-41b7-a04d-ce4b36a6a57d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "936032bc-38d4-491c-89f8-eb202ff88fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3ecc29-db0d-44b5-9773-2dd4da392d8f",
        "cursor": {
          "ref": "78dd1b14-76e9-4a8c-abd6-e6d14dcdd494",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9fd53ee4-ef41-4142-8163-b00ddea7c9cc"
        },
        "item": {
          "id": "4c3ecc29-db0d-44b5-9773-2dd4da392d8f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3b2adf3a-87d3-4f60-b232-ccc5e4932a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d7f652-9324-46cc-b408-378052606c12",
        "cursor": {
          "ref": "b6dcb3d0-f29a-43de-853d-e974cfdbd323",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a48f6543-8bef-4dbe-b793-651e7bb208d3"
        },
        "item": {
          "id": "69d7f652-9324-46cc-b408-378052606c12",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3697676c-48e3-4c46-b980-481501f30b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0dfb0e4-09f7-4a89-af8e-7df68f5ee645",
        "cursor": {
          "ref": "b8c220ba-aa96-4203-96b3-39c293b0279b",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "56a9280c-3e53-4615-84aa-a4273eba4b4f"
        },
        "item": {
          "id": "b0dfb0e4-09f7-4a89-af8e-7df68f5ee645",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cebc7f05-a826-455c-b175-7f297e187a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd40702-4e01-4a17-b3ea-78c5ae9b24e5",
        "cursor": {
          "ref": "15f6d832-1830-4755-b9a3-33d580ad79ac",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d4a31f7c-010b-42d6-ae51-8037d4fd72bb"
        },
        "item": {
          "id": "5bd40702-4e01-4a17-b3ea-78c5ae9b24e5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ca166728-8f1c-4349-9658-2b913e53edfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89a1946-0b82-40c3-8157-faf3d9ce2dde",
        "cursor": {
          "ref": "621d2291-e61b-4788-b1ca-edebfde791bd",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fc1a709a-9897-4b1e-bdce-3e4d786510a8"
        },
        "item": {
          "id": "b89a1946-0b82-40c3-8157-faf3d9ce2dde",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3ebefcac-572e-43ce-b59d-9be6372e6387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ee74d5-f57b-4f3a-a558-6b5abf8ff3bb",
        "cursor": {
          "ref": "578bf323-1d36-4a8d-b034-d787fd959d41",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f0150233-438f-4770-8d01-63e7550a902b"
        },
        "item": {
          "id": "d5ee74d5-f57b-4f3a-a558-6b5abf8ff3bb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4239a9d7-0b4e-4d16-96b0-7220c49bfbe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8e2a62-b3b7-4181-b065-2f4a398acf37",
        "cursor": {
          "ref": "f97b4f21-1cd7-4d78-9748-1d1ba8015c0f",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bad3823f-5d20-4582-ad19-1a02f9802954"
        },
        "item": {
          "id": "ec8e2a62-b3b7-4181-b065-2f4a398acf37",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "72180a8a-abbf-48aa-b4b8-1ddad8f01574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b0f3fe-c427-4e6e-9efe-bc23383c0e3c",
        "cursor": {
          "ref": "2a3043c9-857d-4085-837f-2b30121e2778",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7a932bf7-e805-4c57-ba9c-bcd27abc3478"
        },
        "item": {
          "id": "e8b0f3fe-c427-4e6e-9efe-bc23383c0e3c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5d0296a8-3900-4dea-9699-16cf8101a7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280f4362-08d9-401f-8722-53ee8e892bbe",
        "cursor": {
          "ref": "6831e471-0f48-4f83-8250-607e55782385",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0a09ae05-fe4a-48f7-b13b-ba5e5f3601a0"
        },
        "item": {
          "id": "280f4362-08d9-401f-8722-53ee8e892bbe",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e82af125-6851-47b8-ac91-18ca60abf8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b480cfd8-99c1-4353-9480-9af577510772",
        "cursor": {
          "ref": "1b905d94-f67d-4864-ad2d-e27a4141432d",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0da19548-552d-4da3-84de-950543a8e296"
        },
        "item": {
          "id": "b480cfd8-99c1-4353-9480-9af577510772",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "164fe0e7-f423-4ef5-a625-1f4b5def5a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ccb42a-20d0-4402-b261-319f6adc81a6",
        "cursor": {
          "ref": "9a901afc-6c26-449f-a9b6-f14dc70058c9",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5ccd6aa9-7603-40bb-9e51-67cc8d92a842"
        },
        "item": {
          "id": "f9ccb42a-20d0-4402-b261-319f6adc81a6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4da67f8e-f761-4334-baa7-20a9beb49956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc863bdf-b27b-4baa-a6d8-2f98183aac0d",
        "cursor": {
          "ref": "db6e2110-c6e2-4195-ae6c-858ed6e6fa4f",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0d0c0210-7eb8-4703-8284-6b0be3d67a9c"
        },
        "item": {
          "id": "bc863bdf-b27b-4baa-a6d8-2f98183aac0d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1ea9438c-2a32-4a37-8ed0-532f86a1f346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f9b185-e5a3-4166-bbae-d91f7c162d00",
        "cursor": {
          "ref": "3e9bf724-b5d7-4e4c-aa64-35bfdb214f79",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "18131ebd-72b8-449e-bc4e-64fff4b13db5"
        },
        "item": {
          "id": "a5f9b185-e5a3-4166-bbae-d91f7c162d00",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b75a2224-4359-49a2-8cc0-4f3701bc0888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fc26b7-586b-4492-be48-25ba158d5589",
        "cursor": {
          "ref": "287f3db5-095d-4e13-9172-f7a09e971ed5",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5432b99b-6020-48af-9d15-a0543576b4c5"
        },
        "item": {
          "id": "75fc26b7-586b-4492-be48-25ba158d5589",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "95b2e168-6084-49cb-be5f-822924a8b3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9124f166-c819-4b34-b522-73a221fed89b",
        "cursor": {
          "ref": "863a9f88-260a-499e-b6db-6aabd0bf57a0",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "65bf3c26-27f9-4663-85a0-57530a559450"
        },
        "item": {
          "id": "9124f166-c819-4b34-b522-73a221fed89b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "20697621-6ecd-400b-8a9c-1b1aab6a7d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4905fc1e-85a3-4f1f-9d03-3110a36a5418",
        "cursor": {
          "ref": "a17cbd2d-3c14-40aa-926e-76e2f7120bc7",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c182469b-75f8-4bd3-a6dc-a13b6eeba651"
        },
        "item": {
          "id": "4905fc1e-85a3-4f1f-9d03-3110a36a5418",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "38a60098-d25c-401e-a173-328bc0dbc574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc9b0fe-a6ae-4f8f-b38c-fdbfd42d52cf",
        "cursor": {
          "ref": "3b09828f-9ba1-42a1-b8b6-6947c857f677",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a9908aa2-dba6-46a6-9947-12c10bc9fa34"
        },
        "item": {
          "id": "edc9b0fe-a6ae-4f8f-b38c-fdbfd42d52cf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e6aac9e8-c9c3-4f9a-b9bc-603890e551e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b073c7-53f9-4baf-9950-5d3b07f64a89",
        "cursor": {
          "ref": "bf581e7f-077b-481c-b5ed-ed494a21f09e",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d00ab770-b558-4ac4-9b14-d6c7631ac3eb"
        },
        "item": {
          "id": "e5b073c7-53f9-4baf-9950-5d3b07f64a89",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4a388c39-9ad3-41e3-9777-32bb6721ae49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a628ad6-96e2-402c-b0a6-68a64795e343",
        "cursor": {
          "ref": "9a954090-8c05-42d3-bc40-e4c5377aafdd",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0d4e2020-bcf6-4124-97ed-42d9f920d675"
        },
        "item": {
          "id": "3a628ad6-96e2-402c-b0a6-68a64795e343",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e97c84da-5467-4d4d-8988-0d9b51d5acca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803af7d5-5129-4f42-ab60-bd5bb2cc8340",
        "cursor": {
          "ref": "0fe41776-6f23-40e3-b13a-76231d2603e1",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e6b2d743-ce73-47a2-ba75-070d250bb399"
        },
        "item": {
          "id": "803af7d5-5129-4f42-ab60-bd5bb2cc8340",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2c9991fe-ac46-4ba1-b71d-4313d77cde53",
          "status": "Created",
          "code": 201,
          "responseTime": 1115,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d42b0c-426e-47ee-bab1-d436b6ba4b4d",
        "cursor": {
          "ref": "f3f569aa-ef94-425b-b2f3-5284de6cdde1",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8d9e653e-a3c5-4a62-994f-0234e49aff3c"
        },
        "item": {
          "id": "28d42b0c-426e-47ee-bab1-d436b6ba4b4d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6159aeda-d077-4565-bf62-4579c3704021",
          "status": "Created",
          "code": 201,
          "responseTime": 1043,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "500bec82-07bd-463b-9c50-c307c853851e",
        "cursor": {
          "ref": "6a27bf2e-0609-4ad1-a786-ac2bbe1171b4",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ee8016a3-73f8-442a-be4e-ea5bb20810fd"
        },
        "item": {
          "id": "500bec82-07bd-463b-9c50-c307c853851e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fd6bcdd0-b514-4934-b9e3-7cb1d92effb5",
          "status": "Created",
          "code": 201,
          "responseTime": 1043,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "613cff90-304a-4fef-8e57-5dba5c859092",
        "cursor": {
          "ref": "d53f6228-8b15-4696-8aba-5f2e43b2d64c",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "763721b0-fda2-4b32-8910-2ae29e15e661"
        },
        "item": {
          "id": "613cff90-304a-4fef-8e57-5dba5c859092",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e59e9d58-3634-4ba4-b850-c15a986cfd6b",
          "status": "Created",
          "code": 201,
          "responseTime": 1036,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24fec1f-377e-4bc1-b48f-8603da25f8f3",
        "cursor": {
          "ref": "ae4025c9-5fc8-4135-aa33-b527d9cc193d",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "71923fbf-9d93-4d04-a481-3452acbe49e4"
        },
        "item": {
          "id": "a24fec1f-377e-4bc1-b48f-8603da25f8f3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "78c6a431-e7a3-4e40-939a-5103e60ac4c0",
          "status": "Created",
          "code": 201,
          "responseTime": 1482,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1724ab-1729-41e2-be7a-769939bdf288",
        "cursor": {
          "ref": "03f0fb09-606b-4a59-872d-d5fa79f6d10c",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1c0a9bf3-0da4-4670-8b29-4874332f0bb5"
        },
        "item": {
          "id": "0c1724ab-1729-41e2-be7a-769939bdf288",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "96a70bdd-5e40-475c-8089-c30299fdc46a",
          "status": "Created",
          "code": 201,
          "responseTime": 1037,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec3d8c7-ceed-410b-a7dc-7c2ecdc803ca",
        "cursor": {
          "ref": "a43db71c-f457-4a29-87c4-13afea705f8a",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "24d76059-5cb1-4fdc-855f-07d10bbf741d"
        },
        "item": {
          "id": "eec3d8c7-ceed-410b-a7dc-7c2ecdc803ca",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6ceabefa-fa9e-4fb6-be9b-10acecd99906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c12d6e-4fa6-4f77-add1-be8cc7b0cf40",
        "cursor": {
          "ref": "7e693c5e-8f33-4720-b533-a9a6bfc58655",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bf38453c-e0cf-4b46-abd3-6874cb5dd856"
        },
        "item": {
          "id": "75c12d6e-4fa6-4f77-add1-be8cc7b0cf40",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e9afa755-6926-4fbc-a4be-57d9b8670399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd66e64-4d15-44f6-b10c-9bf8799d16c3",
        "cursor": {
          "ref": "01efb462-4c85-4c82-9a02-024fecc8a86e",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bc0513ee-43ed-47a4-86f9-a0315bfbd449"
        },
        "item": {
          "id": "4fd66e64-4d15-44f6-b10c-9bf8799d16c3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a6738070-9906-4865-aa2e-d99975607dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207a24ae-3b9f-496b-ac77-0829e282135a",
        "cursor": {
          "ref": "39e5115e-699f-4640-af11-10bb399b028f",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8c5f5f1c-d9c0-4f53-877d-d32add666c6a"
        },
        "item": {
          "id": "207a24ae-3b9f-496b-ac77-0829e282135a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "de4620d6-ddec-4461-8708-3268fb310264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acab355-0b6f-4e73-96ac-8d347adae7e9",
        "cursor": {
          "ref": "99f1b09b-a7d7-4e50-a338-fdb1fc53757b",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "13af65b8-5b75-4bf5-8589-73cdcd8605fa"
        },
        "item": {
          "id": "8acab355-0b6f-4e73-96ac-8d347adae7e9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fae2b95f-869d-4e7c-9f7f-3687aa060d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2f313e-5a73-4e31-aa60-99d743af4f49",
        "cursor": {
          "ref": "f4c07f7d-01cd-4a90-bcd5-b58891a45f72",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f30ad86c-f821-42cc-a4c3-f0c4c1a1c414"
        },
        "item": {
          "id": "2b2f313e-5a73-4e31-aa60-99d743af4f49",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b5a3fc45-6933-4b59-bda1-5d8f9a6b12b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486898dd-1e44-40eb-b9c2-21a3807b930a",
        "cursor": {
          "ref": "a70ff17f-e8a3-4652-8319-2fb4fe28ca86",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c0627a97-7c7b-408a-8a68-667ddeb767cf"
        },
        "item": {
          "id": "486898dd-1e44-40eb-b9c2-21a3807b930a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "867b2dc8-c2d1-49d7-949d-60a2eb221b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5157a91-442a-4c34-97a7-e59bc7748261",
        "cursor": {
          "ref": "15fb067e-f9c2-4064-af7e-5555745083ee",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9e0b1d59-ad27-4d04-b821-e73ef2cc0764"
        },
        "item": {
          "id": "e5157a91-442a-4c34-97a7-e59bc7748261",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "378cc51d-fbac-403e-a05a-dcb878d2dc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6577fb-43bb-4246-8f44-b598386c0125",
        "cursor": {
          "ref": "f5c61d70-ce57-4441-8d7a-7e7bbb2ff8e5",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "75b3e95d-a25f-4aab-9987-2fa5461905d8"
        },
        "item": {
          "id": "7f6577fb-43bb-4246-8f44-b598386c0125",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f3ccfa48-9330-4d15-ae5c-231e4435b4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2cf734-85d5-475f-b474-f44f221d7e30",
        "cursor": {
          "ref": "8205f6d2-4f6e-4b46-89c0-0a608ae99975",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1233c66c-5439-491a-99e2-c947b9e783c2"
        },
        "item": {
          "id": "3c2cf734-85d5-475f-b474-f44f221d7e30",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7a1a1a0b-12ec-4be1-818d-f0011f9a2a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc512d4-6168-4ae7-8e53-45d9068c8da6",
        "cursor": {
          "ref": "1b49d356-c874-407f-9806-38f0a8c92a43",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b45c3ae9-4fdf-4c55-8c80-e095df2b2be6"
        },
        "item": {
          "id": "3fc512d4-6168-4ae7-8e53-45d9068c8da6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3a1a8645-bb29-4e1a-8fb5-36ea173f3347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b9635d-af9d-4396-a117-4977d906ec27",
        "cursor": {
          "ref": "a372082b-8dc6-4535-86bd-e9c654390340",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "207b495f-7f98-4f08-8adc-7c9ffa05ec7d"
        },
        "item": {
          "id": "f9b9635d-af9d-4396-a117-4977d906ec27",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c4e45b5a-b944-459f-80af-82d7a8f42613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70a4299-e9e4-4ebf-b518-75faeec5fb5c",
        "cursor": {
          "ref": "dfb53bc4-fd24-4642-9a13-3b6d130c46a1",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c4859254-c0cf-422f-a694-210959acb284"
        },
        "item": {
          "id": "e70a4299-e9e4-4ebf-b518-75faeec5fb5c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ce270bef-51f5-4b8a-8a7b-94a9c275eac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46c8701-0563-47c4-aca3-26eb6af35ca2",
        "cursor": {
          "ref": "89fd6abf-5035-438a-b7af-f1a9b8c2dd00",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "188f36ad-4020-480d-b331-1510e7256e85"
        },
        "item": {
          "id": "b46c8701-0563-47c4-aca3-26eb6af35ca2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "658c89ab-2635-4bfc-9157-aff120cbb127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdfa4c92-cce8-40fd-b7a2-3c664ed902ad",
        "cursor": {
          "ref": "64f3479d-cda5-4085-b11d-12845b53a902",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b5731420-5954-4a51-ae54-9e6a8009ec7f"
        },
        "item": {
          "id": "fdfa4c92-cce8-40fd-b7a2-3c664ed902ad",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6112836e-6c2f-43ba-9ce4-e5ac0c7cdd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bfbe20-67e2-4a54-bbd2-391cb5769e57",
        "cursor": {
          "ref": "647595c2-a31d-4f4d-9e4a-aca34c4bd48b",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6641ceb4-83bd-4071-9dc6-ee1e5cbd4e65"
        },
        "item": {
          "id": "f9bfbe20-67e2-4a54-bbd2-391cb5769e57",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5141d31e-df12-4a1c-9f2b-5bebfebe269e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd0ba5f-2a21-48cf-b10a-f23141b44aeb",
        "cursor": {
          "ref": "d3b57ccd-8c97-43ab-bfa8-e1030d09e058",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7b41e6d7-b1dc-4619-aae9-a7da814be386"
        },
        "item": {
          "id": "0fd0ba5f-2a21-48cf-b10a-f23141b44aeb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cea7ab87-2b70-4080-85e5-b00755bca7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a78b12-4428-4ce6-b7b3-abd125f329ce",
        "cursor": {
          "ref": "0fab1507-5002-4926-8295-34c53871faa4",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "34d038ca-8a40-4699-bfed-9338316d73c1"
        },
        "item": {
          "id": "d9a78b12-4428-4ce6-b7b3-abd125f329ce",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "82945adb-804f-403c-b303-a1ce84f01d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00de933-c3f6-41e9-b074-3550a19a9903",
        "cursor": {
          "ref": "b9e54021-ab88-4e96-889a-41b3c9adad11",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "395facce-2cdb-4d9b-ac52-b6848bcefc46"
        },
        "item": {
          "id": "e00de933-c3f6-41e9-b074-3550a19a9903",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "70e8f767-6cc9-44cb-8697-8b5601e7a95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0417dc7-8033-4111-b40e-af6c7e56b149",
        "cursor": {
          "ref": "fd40747e-6eb9-4ec1-86eb-fef3780f67a7",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "190c0825-72cd-4f9b-86d7-88f31653fcc3"
        },
        "item": {
          "id": "d0417dc7-8033-4111-b40e-af6c7e56b149",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bab83d2a-15eb-4458-9480-f8fbb7bec3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c3c572-f05d-4131-89bd-ac305eae9c03",
        "cursor": {
          "ref": "656b5073-5750-4e1f-9cbb-7b67f163b218",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "536f66e2-718f-4b6c-92cb-e034d333344a"
        },
        "item": {
          "id": "37c3c572-f05d-4131-89bd-ac305eae9c03",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "40139461-507e-49be-980a-78f0545c46ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5109de6-2b00-4004-a8ab-586be84a1860",
        "cursor": {
          "ref": "4e7c83b5-9e79-48db-ac35-354f6661e0ee",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d06d27ba-8089-474c-ac71-dfbd7bf6916e"
        },
        "item": {
          "id": "c5109de6-2b00-4004-a8ab-586be84a1860",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d65ead30-39c1-4bc5-82e0-0731456a251a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a3dc95-87c9-4dbf-9cf3-859b5468659f",
        "cursor": {
          "ref": "f357aef1-0bfe-4ea7-8e49-05d22ec74629",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9a8408e7-7a0a-40fd-80c2-bb9fd4206b93"
        },
        "item": {
          "id": "a3a3dc95-87c9-4dbf-9cf3-859b5468659f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8c184e51-14ba-4fc8-8418-4a001c584f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc92bf7-a4ea-4e26-bccd-efd51f3fc241",
        "cursor": {
          "ref": "93555a78-6a37-484e-a280-b8dd363ec7d6",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3ac5f546-a8c7-43e0-966a-626efdfd151a"
        },
        "item": {
          "id": "abc92bf7-a4ea-4e26-bccd-efd51f3fc241",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "436a9c7b-9442-4a8f-8820-02c27f50b015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58075a33-c39f-48e8-a29f-5c8cf88dbe3a",
        "cursor": {
          "ref": "68d0846a-bd53-4c4b-aa65-66f6408fe66f",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8caec4fd-8da7-4bb6-a6b7-0f6a2b37eb14"
        },
        "item": {
          "id": "58075a33-c39f-48e8-a29f-5c8cf88dbe3a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2bf3a5d2-8577-478d-b0d4-e1d37f2a06a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ebe281-ca3c-46d6-ad6a-dd12f4efec03",
        "cursor": {
          "ref": "db1c2d03-7f4b-49ce-8107-50dce5a02393",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "78c1881a-d881-4040-b3c2-9c1ac9708951"
        },
        "item": {
          "id": "d7ebe281-ca3c-46d6-ad6a-dd12f4efec03",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f3f446e5-3449-4c82-a63c-44704b3c46da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81fbfe7-a08d-48e2-98c8-dacb37faeedb",
        "cursor": {
          "ref": "30688d8f-fa18-42d7-910e-2afd307003bc",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "60ef66df-14ac-45dc-87fa-c7c28777a0e7"
        },
        "item": {
          "id": "a81fbfe7-a08d-48e2-98c8-dacb37faeedb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "985f19b3-4022-4d69-b93a-d2f315fd4fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d208f83-4b83-4e91-bfc8-24f126eaec20",
        "cursor": {
          "ref": "2c762d89-2c02-4597-9fe7-b15f19488021",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bb6985d0-6734-4262-b582-27774510c1a7"
        },
        "item": {
          "id": "0d208f83-4b83-4e91-bfc8-24f126eaec20",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fff0325c-d971-4a9d-8595-628620f4b0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8e4779-cb6e-4a18-bfa8-ca46fe536f6a",
        "cursor": {
          "ref": "f9ee3047-e95a-4832-89cb-3691ddf34140",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e9685004-dc10-4710-8c7b-139f015c5f6a"
        },
        "item": {
          "id": "5f8e4779-cb6e-4a18-bfa8-ca46fe536f6a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0f0c41ee-01c6-46a4-82dd-3836ef650540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7268a67-65b3-4266-84cb-72339edc2051",
        "cursor": {
          "ref": "cb79bd25-69fc-439f-bd6b-ddbf43e70763",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fcb4949c-bd16-429b-b3f9-f38a0d7c6fba"
        },
        "item": {
          "id": "a7268a67-65b3-4266-84cb-72339edc2051",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2e641fdf-87fc-490e-a9c3-fe4564c2daf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adc708a-9450-42de-a14d-1df5ae076fd0",
        "cursor": {
          "ref": "65af7bac-7bf9-4cfc-a2eb-92966a960fff",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1e13e80f-2642-4310-8df6-40b0a90f9239"
        },
        "item": {
          "id": "9adc708a-9450-42de-a14d-1df5ae076fd0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b8ccec2c-2cf8-40bd-b437-3bf0acfc9924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f9ca5d-e020-4c27-99d7-828cfa2601cf",
        "cursor": {
          "ref": "fbab26d3-71bf-428f-8ca8-9196862bb2a4",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b6eea99d-4215-444a-a334-d3f77374a0c2"
        },
        "item": {
          "id": "13f9ca5d-e020-4c27-99d7-828cfa2601cf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8411bcd9-5aba-4b53-a64e-de67f7340f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06b09fb-030c-433f-86f7-0528e32d4748",
        "cursor": {
          "ref": "6edfb4c2-3cb4-411d-8e9d-3e5a218c56d0",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6a6e38a9-e29d-4dde-8fe1-666f5451fd21"
        },
        "item": {
          "id": "b06b09fb-030c-433f-86f7-0528e32d4748",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ecfe146f-f226-49b0-80bd-8ad2e4257b0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1258795-556a-4d30-9b12-79bd71dee2ad",
        "cursor": {
          "ref": "40527d9d-4707-4f21-8657-7bb185a72945",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "92219af8-2275-4a18-8078-ebb79c1d8e7b"
        },
        "item": {
          "id": "e1258795-556a-4d30-9b12-79bd71dee2ad",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4a035c7f-b246-4490-84ad-ad45647a51d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189c1a45-da07-42d3-a535-265d8b5bfde4",
        "cursor": {
          "ref": "8205fc59-e3bb-402a-bf32-13b933e4eceb",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8fa3871e-e396-4a92-b433-a742036c6ea6"
        },
        "item": {
          "id": "189c1a45-da07-42d3-a535-265d8b5bfde4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f40279b7-6056-4ebd-a56d-23a6894f679d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09096198-d2a9-478c-9daa-20f7e10cd609",
        "cursor": {
          "ref": "9c39cc47-c9fe-407d-b094-5bcfb511e4aa",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9135e17f-fe61-4ce0-a31d-03a9451aa35c"
        },
        "item": {
          "id": "09096198-d2a9-478c-9daa-20f7e10cd609",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b496f43c-6bbc-4a36-bbfd-db909fbf1cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d74400-56b1-4494-8b21-dc12e5da9d57",
        "cursor": {
          "ref": "9ebfdd36-3de7-4ec9-8987-a58d5e771912",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "29081c24-f094-4471-985e-3ec87cfc8576"
        },
        "item": {
          "id": "f6d74400-56b1-4494-8b21-dc12e5da9d57",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8d672d13-c3cb-4747-898f-46db1f4daca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0389a1-ddd8-41d4-9a1a-2d55f3387afa",
        "cursor": {
          "ref": "56229888-d3d2-45b6-991e-508a33b92e0a",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "eb52cb37-1bcd-4a5a-bc58-80c75000ce38"
        },
        "item": {
          "id": "8c0389a1-ddd8-41d4-9a1a-2d55f3387afa",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2f173fa1-9a36-4756-ba26-15d81fc54f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97d5a6b-2771-4c81-89c3-e6b5db06131e",
        "cursor": {
          "ref": "9b432d72-c4de-4c47-a537-e02a7423c4a7",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bedaeb55-0b72-4bec-af6a-3dd147d76ea8"
        },
        "item": {
          "id": "b97d5a6b-2771-4c81-89c3-e6b5db06131e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "913c581a-fe3a-4f99-8878-2ed1c7d40599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e9e3c1-a4e0-4fb0-9d43-0724f9788244",
        "cursor": {
          "ref": "660c928f-2146-47f3-831b-60ad9dc6755e",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bbbe1906-f9b3-425b-8162-867b3239d8f9"
        },
        "item": {
          "id": "64e9e3c1-a4e0-4fb0-9d43-0724f9788244",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c7cd2557-69b8-44b8-8452-c4109d3554e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a573a77-1fd0-4ec5-9b5a-bb1032fc5a8e",
        "cursor": {
          "ref": "aadaf3d4-5760-485a-b7c9-2b6ec79d4406",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "eaa6d134-79f6-441f-a03d-9c516efc16eb"
        },
        "item": {
          "id": "7a573a77-1fd0-4ec5-9b5a-bb1032fc5a8e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4d8f3092-cd46-4e22-b08f-abc11cfda8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad5b9c0-ca91-4702-8573-5ffa517f48ad",
        "cursor": {
          "ref": "337ee9d1-1f7f-41cd-bbd5-ccfdb27bbfdb",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "97b8321b-0915-476e-8e63-8657ee28bfa4"
        },
        "item": {
          "id": "1ad5b9c0-ca91-4702-8573-5ffa517f48ad",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3dbe8114-b63d-4a00-9753-d601ed6a8056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883688bb-326e-4dc5-8a84-1847554fbfce",
        "cursor": {
          "ref": "ce58d7c0-8883-4dc5-bc8c-34d1133dface",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e3bd08a9-c7a2-48aa-814a-5a3689e9c532"
        },
        "item": {
          "id": "883688bb-326e-4dc5-8a84-1847554fbfce",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "62020e1e-726a-4420-aee8-c000c0893469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5621be04-27db-4981-bad3-76f43e822abf",
        "cursor": {
          "ref": "13148d17-cb94-4aca-8a72-8338e6010fe7",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f29d20f7-d555-471c-931b-035395909ebd"
        },
        "item": {
          "id": "5621be04-27db-4981-bad3-76f43e822abf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0dc08aaa-59a7-47da-b492-6060ccb980f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2cec74-959c-47ba-81ba-cd654671285b",
        "cursor": {
          "ref": "96d11ce8-6e23-4340-b791-41efc3f7d468",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1525e74b-7554-4753-9cf9-6e63cb1011dc"
        },
        "item": {
          "id": "4f2cec74-959c-47ba-81ba-cd654671285b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b4267798-7084-4741-8a37-811b3e931c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdc064a-aa09-4330-992c-fe4dbc88129a",
        "cursor": {
          "ref": "1c1cccfb-e18d-4772-bcb0-960e90d5022a",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "30884382-3595-4d21-97e2-c920521c0521"
        },
        "item": {
          "id": "dcdc064a-aa09-4330-992c-fe4dbc88129a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8308ffe9-1347-466f-9c0d-64c98243c7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9cece9-6cf1-4957-84a4-d938a4a9770f",
        "cursor": {
          "ref": "10312d36-2760-4b2a-aead-7987a1bded48",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f02e28aa-927d-413b-a819-917b0fb14781"
        },
        "item": {
          "id": "0f9cece9-6cf1-4957-84a4-d938a4a9770f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0cb2ee6c-f510-42ee-a9d6-044b38a02306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d438675c-e56f-414d-94a9-f73be3d760d4",
        "cursor": {
          "ref": "1f3a36de-4b9b-444a-b97b-afd3657c3bd6",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a2834363-d35e-437a-bb68-c24dc17577b7"
        },
        "item": {
          "id": "d438675c-e56f-414d-94a9-f73be3d760d4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "22b9fc51-50c1-46bf-9652-024af11d2bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab8b580-1e7b-4434-8dce-b98278fb9183",
        "cursor": {
          "ref": "deab86c6-e476-4179-8d15-f65386669fa7",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9bba0f5c-50af-429e-8799-d97b495e863b"
        },
        "item": {
          "id": "eab8b580-1e7b-4434-8dce-b98278fb9183",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "74907745-b8ef-463a-921a-5ed74cbbcaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eede53ce-b56d-4ea8-8344-17e09f4316ff",
        "cursor": {
          "ref": "006ef5ef-e863-4fbb-82be-09d82e4156cb",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0ba61983-963d-4d80-9217-bf16eb2967d9"
        },
        "item": {
          "id": "eede53ce-b56d-4ea8-8344-17e09f4316ff",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a4fdde0c-3ae6-46f1-8e23-8463442e2e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f609be-0394-4572-bb7b-d413780775a9",
        "cursor": {
          "ref": "229b0254-73cb-4349-8571-2502b5066a3f",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9991a8f5-a9e4-446e-9cff-5d42b678615e"
        },
        "item": {
          "id": "e7f609be-0394-4572-bb7b-d413780775a9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "72e1a79c-7e9d-4a4c-8ef7-48418b8a2759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe7b52a-8a90-48f5-8eab-a41d33e0d546",
        "cursor": {
          "ref": "838b939a-db50-41ab-b010-02574e3f15c2",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9ee33a5b-4dd5-4d72-bf7b-fc4e579d0a08"
        },
        "item": {
          "id": "4fe7b52a-8a90-48f5-8eab-a41d33e0d546",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0563b825-006f-40d5-9ba7-9a07fa01fa92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46d79e2-6cfe-422c-9998-171eb5a3b653",
        "cursor": {
          "ref": "03df9077-152d-4078-91fb-211b10820615",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "dd1c7bf9-5b63-4294-b487-cc53191fd103"
        },
        "item": {
          "id": "d46d79e2-6cfe-422c-9998-171eb5a3b653",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e519c9c8-10c7-463e-a707-b34a50450624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bd38d7-476f-4cfa-89fb-f52032ed469c",
        "cursor": {
          "ref": "a05c4d1d-7365-41d5-beb4-c224ef5606f2",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b72212b5-23e2-4e3f-b132-c4a4887d53ed"
        },
        "item": {
          "id": "18bd38d7-476f-4cfa-89fb-f52032ed469c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "309511a1-163d-4208-8b52-ce38c1ab18c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54b0b6c-8ec6-4b7b-8e65-d18ebb44b442",
        "cursor": {
          "ref": "e0d30812-7ce9-495d-9060-b81619655882",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3e8d4d04-4b6e-46ab-b113-7f5829bd95ef"
        },
        "item": {
          "id": "e54b0b6c-8ec6-4b7b-8e65-d18ebb44b442",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "40655e10-63f1-4799-a803-9d1f0f5b9619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a32ae3-75c4-4f09-a86c-b27497e0f45b",
        "cursor": {
          "ref": "e0083430-eeb3-48c7-8df3-12fd19cf247e",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "757f992c-745d-448a-ad1a-09a4390161b7"
        },
        "item": {
          "id": "79a32ae3-75c4-4f09-a86c-b27497e0f45b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5bfb4b11-c8b8-449a-9402-884565885726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db03be9f-f340-4616-b016-856eeb45037b",
        "cursor": {
          "ref": "4cd5a9d6-fdc6-427e-b9b0-a86ec15983b3",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "23f9bdc6-ff59-40a4-ab0c-72caeea46ae8"
        },
        "item": {
          "id": "db03be9f-f340-4616-b016-856eeb45037b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "83613eb8-069b-4ae4-81c7-125abe6ad28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be21346d-5c39-48ae-bc2e-309f3cd583f5",
        "cursor": {
          "ref": "f6727534-7942-4ed7-83a1-158d864f88e7",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "25537d54-5a9c-4a23-a33c-33884f9c6b9a"
        },
        "item": {
          "id": "be21346d-5c39-48ae-bc2e-309f3cd583f5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "38b1869a-4ade-469a-99c0-f0593e55fce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc10c8c-a30b-4bb9-93a5-2b34a0ff1911",
        "cursor": {
          "ref": "c9b3185a-9ca5-4d5b-816b-79c3e4127eb1",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "eabcde8e-34ce-44a7-922c-84899fd0b11d"
        },
        "item": {
          "id": "abc10c8c-a30b-4bb9-93a5-2b34a0ff1911",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1f2c7082-f03d-47c8-ac50-afa66825c60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c83ce93-9fca-4512-81fb-bad734953d2f",
        "cursor": {
          "ref": "2da3a7f4-d5bb-45b6-9828-7726ec5a0347",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e132d215-a487-4ed7-aedf-a548dbfdb484"
        },
        "item": {
          "id": "9c83ce93-9fca-4512-81fb-bad734953d2f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "590ff1ec-0ff5-464a-9cca-74b0f2dd2c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3deb4e2f-9a2f-43ca-ada5-37602d7640ed",
        "cursor": {
          "ref": "72b66504-5e84-4ef7-b781-1b7211878dd0",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fe3a460b-f7dc-4f04-b7f8-a68f9b7e0a3e"
        },
        "item": {
          "id": "3deb4e2f-9a2f-43ca-ada5-37602d7640ed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e4c60d0e-8ff1-4806-852f-74f43a89bb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f91ccbb-e587-4662-8b8c-024e730f11a1",
        "cursor": {
          "ref": "b7fa180a-ce1c-479c-b4df-b12b0ab2b0e3",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "937e28d5-e63b-4cb0-9806-bda374e2fea9"
        },
        "item": {
          "id": "0f91ccbb-e587-4662-8b8c-024e730f11a1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3ad0229f-d807-4962-87e9-86b37abf4d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fba63a-60c8-4fe8-8d14-53d44dab4eba",
        "cursor": {
          "ref": "2405f872-e590-4cf5-af20-ef4db76ced61",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7704db93-ba7b-48e2-9d2b-bee80ef0e65f"
        },
        "item": {
          "id": "f4fba63a-60c8-4fe8-8d14-53d44dab4eba",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fd7a4626-8ffe-4d14-8810-f28ec9744a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab1d322-1cf7-40c1-b323-ad461a72837e",
        "cursor": {
          "ref": "23965e53-be86-4e7b-bd3f-a9d3c0e60d6d",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "22848ae4-a64d-4673-9a49-59992496bb5f"
        },
        "item": {
          "id": "cab1d322-1cf7-40c1-b323-ad461a72837e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fde8bc39-36c0-4ae8-9b52-04632bf157b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d005d80a-c27c-4d21-85af-3d1864fc953c",
        "cursor": {
          "ref": "a42fe301-de8e-4615-b9a9-90997daff525",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ad220b83-4304-4333-83a3-e7b6552f2c81"
        },
        "item": {
          "id": "d005d80a-c27c-4d21-85af-3d1864fc953c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "10435a82-c8bd-4d03-aaf4-7ee6603b4d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f0e5d5-2f28-4279-aca6-543e7aacf5e7",
        "cursor": {
          "ref": "1e71fe88-cd24-40cc-aa9e-72d466de06ee",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e06bfdf6-5bd2-4f52-b23e-ef1a06e6b314"
        },
        "item": {
          "id": "02f0e5d5-2f28-4279-aca6-543e7aacf5e7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "dd78743d-b09d-4c26-b674-45ff0903cdbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6352423-625a-491d-8653-f2dfcf13b7e9",
        "cursor": {
          "ref": "21790759-2068-4039-8710-b82cfe5c8c8e",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "461f2fad-0fa2-4932-a144-b2208173889d"
        },
        "item": {
          "id": "c6352423-625a-491d-8653-f2dfcf13b7e9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "342d1a25-6a33-4da7-84d5-74fa3fb0b187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ff2933-b836-4a5d-92f9-e542b6b0f70a",
        "cursor": {
          "ref": "ef59437e-7ead-4994-93bd-80c6584968e3",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9a788669-d7eb-4a52-95ae-71de965f38bb"
        },
        "item": {
          "id": "b3ff2933-b836-4a5d-92f9-e542b6b0f70a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "60bb51fa-e550-4e4a-8151-a25d9d6d8375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4186388d-37fc-4249-b1ed-b26a1b7e6b6b",
        "cursor": {
          "ref": "a7a1441c-a37f-4af7-b346-a95e06cb2c17",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d615d1d8-2e80-43eb-97ae-28b951735974"
        },
        "item": {
          "id": "4186388d-37fc-4249-b1ed-b26a1b7e6b6b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "76e5c26b-ad9b-4be3-93ba-96183754c105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0986fc-4ecd-4bfc-921b-4e534286d4c3",
        "cursor": {
          "ref": "5f500a4e-e3ea-4183-9438-db14c8dfc867",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6d6e8bd0-ac46-479e-a886-70602eefde4d"
        },
        "item": {
          "id": "fc0986fc-4ecd-4bfc-921b-4e534286d4c3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2be9bdef-ae47-488e-b529-4a6d23bf066f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00c64cc-3feb-4150-ba29-ef6a8df63c8f",
        "cursor": {
          "ref": "83d774bf-9b55-49e3-a3aa-93ae862dcd79",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "44afb3c0-aca3-459a-a6ba-9209b5154d11"
        },
        "item": {
          "id": "a00c64cc-3feb-4150-ba29-ef6a8df63c8f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "db2625b0-92f8-4cc8-8cb9-71b94615ab94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e83053f-56ef-4d73-8686-8b33a1b05a0f",
        "cursor": {
          "ref": "3c0b768e-d9f3-4cb3-9445-b1961db02a86",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1488a893-3b9d-4698-96dc-9eddd386e8ba"
        },
        "item": {
          "id": "4e83053f-56ef-4d73-8686-8b33a1b05a0f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "07deca13-4c96-4a7e-8aa2-57d07fef1bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439934af-97f1-4ce1-8026-da35574a37fd",
        "cursor": {
          "ref": "16d3e639-60a3-4b6d-b118-674963f9b860",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "270e93d6-76e0-46d3-93c6-02206eeff92e"
        },
        "item": {
          "id": "439934af-97f1-4ce1-8026-da35574a37fd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "10be268c-c667-468b-b829-bb736bd6ee03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99544eac-4fa7-485d-9fe0-8b4847c9aae4",
        "cursor": {
          "ref": "c1d825a4-e565-4ab1-8100-3ef3507a90b0",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5ec7cd30-f1b3-440b-8f46-0f7f8c7c34a5"
        },
        "item": {
          "id": "99544eac-4fa7-485d-9fe0-8b4847c9aae4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c9cb5e9b-37b6-4d37-b09b-aa2cdd46e31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69b5d2e-8fc0-4cdd-8c9a-e907c71fdacd",
        "cursor": {
          "ref": "6fd673fd-a227-4cf1-bb0d-40d80c53550d",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3353daf2-07fc-4a85-a63b-79d1ba8c4a1a"
        },
        "item": {
          "id": "c69b5d2e-8fc0-4cdd-8c9a-e907c71fdacd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "660b9f7d-aeaa-4d6b-854f-4c17de0c741f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cc3c6b-a7e3-4659-af67-81ef1d67f0be",
        "cursor": {
          "ref": "d9254c64-99fd-4b86-a6cb-f8ac14c72b03",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "506bb649-839e-45c4-a649-4f4c955c150c"
        },
        "item": {
          "id": "a1cc3c6b-a7e3-4659-af67-81ef1d67f0be",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1f0899d8-d5de-48e8-916a-9d7a4234978f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de85f9e7-bd15-4533-8ac3-d6c8ab6c29bc",
        "cursor": {
          "ref": "cfbba937-5ee2-4a8c-bc7f-0f6410ea28b7",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "332dce47-d744-433c-87ce-7201d2f9842d"
        },
        "item": {
          "id": "de85f9e7-bd15-4533-8ac3-d6c8ab6c29bc",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4f74d901-576c-4db7-979a-f4a331acc600",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "82441050-e39c-483d-a0bf-112a34e151db",
        "cursor": {
          "ref": "837b78b4-37f0-4f0c-97bb-d465b79e633c",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "15f9eb2c-6a69-469a-bb84-b6d2b8879227"
        },
        "item": {
          "id": "82441050-e39c-483d-a0bf-112a34e151db",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ff5729a4-2a2c-4903-839c-2924365c03a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b916cf-8a76-4495-8a7f-254da2e88b2e",
        "cursor": {
          "ref": "4e7feaae-5ace-414f-a5d8-a26b72259d83",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "09002a1c-a32d-43e0-a650-9a1e3bbc1cb4"
        },
        "item": {
          "id": "97b916cf-8a76-4495-8a7f-254da2e88b2e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "82286428-46bc-4324-b5dd-7b4717f79ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2446a65-a635-4679-9112-c14d918c3008",
        "cursor": {
          "ref": "86af3755-3009-4529-86e0-cf31ce28a94e",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4bf45240-99b6-47a2-abf8-584f5a9fe121"
        },
        "item": {
          "id": "a2446a65-a635-4679-9112-c14d918c3008",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "170ae9dc-576c-4d8e-8022-48083d0c1e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20407d6d-b04e-4064-bb09-b640fc30d4fd",
        "cursor": {
          "ref": "1bc1fd29-023e-43ca-890e-09b872c613f2",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8aec9285-dff5-4443-87ba-f1796fe150ed"
        },
        "item": {
          "id": "20407d6d-b04e-4064-bb09-b640fc30d4fd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6fb393bf-e664-4768-a58a-a6c6aab74f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d4c535-6280-437d-9ad7-4b670f02a2e2",
        "cursor": {
          "ref": "988df0a6-b30a-4186-9898-3b60420d85c3",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cd28c323-8060-4a16-83e8-651c5b9ed917"
        },
        "item": {
          "id": "e3d4c535-6280-437d-9ad7-4b670f02a2e2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0b45db8d-752a-44a1-ac9a-d7aed403a293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40f9e76-2ed3-4abc-8d6a-6e36c19a6936",
        "cursor": {
          "ref": "6e4daf13-ccc4-4c06-b0dc-7cc9a01170b5",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3736b6bc-2ae0-404d-97d1-8a21a6c65b41"
        },
        "item": {
          "id": "b40f9e76-2ed3-4abc-8d6a-6e36c19a6936",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6b459e9f-7447-4daf-a77b-d1260690eedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fdc823-5f71-4dc8-954a-a1e75750f7da",
        "cursor": {
          "ref": "e3fdf122-1932-4a56-90c1-b2164d2fe1f8",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "85837109-785c-4fa2-82e9-3c1b68c48cc3"
        },
        "item": {
          "id": "e3fdc823-5f71-4dc8-954a-a1e75750f7da",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9bd3659c-0b09-4f24-91f4-ededcfcdf638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bf852d-7d85-40aa-9dad-f4c1fa13bb3a",
        "cursor": {
          "ref": "73dc3cad-8f9c-4aa6-a281-e9befe6c1f81",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b437f21d-6e00-4ae8-9d65-042b1f4f1428"
        },
        "item": {
          "id": "f7bf852d-7d85-40aa-9dad-f4c1fa13bb3a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fcefc873-1f58-4ae7-b8e6-5145cb24b305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df188f97-49ff-4d78-bba7-be6950d9f553",
        "cursor": {
          "ref": "57488888-12bf-48a1-8c19-32d230f35006",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "db100d5f-2f18-4df7-bb0d-9410bbb07aa9"
        },
        "item": {
          "id": "df188f97-49ff-4d78-bba7-be6950d9f553",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "27d66459-b25d-41b0-965c-4d5686a7ae5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45dc45b-2acd-4938-9dc3-20399ebfc5c0",
        "cursor": {
          "ref": "d9b2a375-9ee3-439d-8cd4-8d122b6bab1b",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a17a8272-7bdd-4298-9e5e-17bdafd384ce"
        },
        "item": {
          "id": "a45dc45b-2acd-4938-9dc3-20399ebfc5c0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e0176fa7-1d7e-46bb-9beb-2220b83a37de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e1eb99-d924-4766-ad69-dd65d2fbf9af",
        "cursor": {
          "ref": "3502a1b4-4f1f-4b69-8a9a-42917f431712",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "49168ee5-9b06-474f-98c6-f80ccdeec05b"
        },
        "item": {
          "id": "d9e1eb99-d924-4766-ad69-dd65d2fbf9af",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "52069cf4-f5c0-4ead-8f44-606acfe2b3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76b19c4-fae5-4abf-8c8f-7391832aa5e7",
        "cursor": {
          "ref": "f4271b14-8d78-4e6c-bf39-5fb215de97d5",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "68383818-f03b-4902-8d9a-cb43114eb7eb"
        },
        "item": {
          "id": "a76b19c4-fae5-4abf-8c8f-7391832aa5e7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fbc27997-1cd2-4120-a451-561e2c616cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d709718a-03ed-4b59-a4ac-9886acbd6172",
        "cursor": {
          "ref": "55814e14-92c5-45b9-88b1-8b1d5ed082ad",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "28c4365f-9315-4eec-9f5c-3e8f788da341"
        },
        "item": {
          "id": "d709718a-03ed-4b59-a4ac-9886acbd6172",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d0c57758-567e-4501-bd01-eaa65ef58f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e893466-78d9-4ac1-94de-601bf1b491ec",
        "cursor": {
          "ref": "af893a45-ce50-413f-a517-4cf78e645c94",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0d7ccef5-df0f-41cd-89ee-ceda74161f79"
        },
        "item": {
          "id": "2e893466-78d9-4ac1-94de-601bf1b491ec",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "65b8f744-4b77-439a-b9b9-96be8230b54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7a4173-34d5-4d4f-b062-01c158d3f347",
        "cursor": {
          "ref": "dc7bf109-26dc-4896-b865-d67d07b0bff6",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a6716c19-02a2-41bf-b407-15c79557809a"
        },
        "item": {
          "id": "9f7a4173-34d5-4d4f-b062-01c158d3f347",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0dd07496-df7a-4de1-9ff1-9afb1adbaf14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23dd28f-842d-4fbe-b2ba-7be634d10244",
        "cursor": {
          "ref": "378e66a9-8c7a-4115-a9e3-b85b57452536",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0b5db999-3c4b-4856-87b8-3c2a50f58c03"
        },
        "item": {
          "id": "b23dd28f-842d-4fbe-b2ba-7be634d10244",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ffd41e12-b6ac-4d77-b5ff-b80610d5fa5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0afe3f-62ca-4600-9dea-24a149f510c0",
        "cursor": {
          "ref": "5b674f9c-afad-431c-904c-7a426329e6fe",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "47579956-dd14-4be9-b06d-6adb6db09855"
        },
        "item": {
          "id": "ee0afe3f-62ca-4600-9dea-24a149f510c0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0df85fe2-1bed-47bb-b7b1-243e5f478332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42e4c7c-2d88-4db3-93c4-e15263d556ca",
        "cursor": {
          "ref": "bbc8458b-1219-47e2-9108-3ea972ccbf5a",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3c438050-40b6-4079-a70a-15578b1fc95b"
        },
        "item": {
          "id": "c42e4c7c-2d88-4db3-93c4-e15263d556ca",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2ba9faf0-dafd-4613-ae1e-909f4b12a27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b64d77-0a6b-4f32-a335-eff1025122af",
        "cursor": {
          "ref": "f910d8b2-b308-4392-8035-025ddd8e0433",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8c23910c-0a9d-4ac4-8332-66b263f1bceb"
        },
        "item": {
          "id": "a1b64d77-0a6b-4f32-a335-eff1025122af",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "20fd7756-7811-407c-a912-408780f7c127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16741cb-7be2-4ff8-a515-5a45eab74a3e",
        "cursor": {
          "ref": "481f16c7-10a4-49de-b098-a2854310afcb",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a2fc2d90-8d97-4a03-a2a6-d086c701afb3"
        },
        "item": {
          "id": "c16741cb-7be2-4ff8-a515-5a45eab74a3e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0488ed6f-ffa8-4315-9a37-742e1445fa1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dca1751-e9a0-4019-87f0-e497b4e59ff7",
        "cursor": {
          "ref": "dffb7235-f53f-4c78-add1-97ed19480af3",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "810e839c-24c4-41cd-8e4b-06d08a48fd73"
        },
        "item": {
          "id": "7dca1751-e9a0-4019-87f0-e497b4e59ff7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e870d580-b80c-4825-b8d9-f37a45545363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9699152a-e6f8-4ad0-980d-57a99a322b7e",
        "cursor": {
          "ref": "0ffcc3ce-fbd7-48cc-bd68-e0e2abd0ccbc",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2dad9c9a-94b3-4127-966d-e4a3e12003a8"
        },
        "item": {
          "id": "9699152a-e6f8-4ad0-980d-57a99a322b7e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "47b6bf80-94fc-41de-9263-8cdfab6ac0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7dc12e-e118-46c5-830b-9d19de6d18dd",
        "cursor": {
          "ref": "fd961b94-6307-4f6e-915f-2449431468b2",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "361956a1-a13d-47a9-b3ad-ffac1b2e1df6"
        },
        "item": {
          "id": "4f7dc12e-e118-46c5-830b-9d19de6d18dd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b796a20a-cc3d-4a10-8ef6-048b8336844e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2389b596-d875-483c-9b77-d1d994524600",
        "cursor": {
          "ref": "8c9643ca-e7ba-45bd-bc6d-309991f013e8",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4379ca20-1fcf-4f66-926d-f194f3ccab1d"
        },
        "item": {
          "id": "2389b596-d875-483c-9b77-d1d994524600",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b8332e30-f31a-42be-8c14-94156663ee2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e940d78d-85f3-4488-aca0-9a0ef2ad74db",
        "cursor": {
          "ref": "55cbc256-5d2d-49ed-9868-8d6ed0cfd494",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b69e2a47-30f6-4f4e-b4f0-58a10c0d487e"
        },
        "item": {
          "id": "e940d78d-85f3-4488-aca0-9a0ef2ad74db",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0ed502a2-4f14-4136-a8cb-c96676b95859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1cc530-73fd-4e7e-8cad-dcce23c9ad91",
        "cursor": {
          "ref": "2679a34b-8f32-4471-af97-d5303f4b9cf5",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2e7b70d9-805f-458e-9cad-ca834f79f3ad"
        },
        "item": {
          "id": "6e1cc530-73fd-4e7e-8cad-dcce23c9ad91",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ebdd4b8d-7949-46bd-9bf3-72e2de702549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc134c4-354d-45ad-b3ff-f41039fe489f",
        "cursor": {
          "ref": "356e9cb0-deea-4f71-b5bb-d8f2073f79c4",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8c8495dc-408d-4ba5-984b-b5d2774fe210"
        },
        "item": {
          "id": "0cc134c4-354d-45ad-b3ff-f41039fe489f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4874ebad-e508-43f4-b86a-6e9c0f634d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec02def-3837-475c-8f3b-ab1baf893dc5",
        "cursor": {
          "ref": "acd5cc0b-87e1-4c6b-930f-35af1230d6c5",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0e5d1b4c-2d83-4f71-a5ca-8aca20da5661"
        },
        "item": {
          "id": "5ec02def-3837-475c-8f3b-ab1baf893dc5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c4d6e049-d99d-4f50-ab43-9c29bbcf4dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8f099f-edc9-4778-8283-894848819244",
        "cursor": {
          "ref": "3548b41c-21d8-4fe8-9230-10ade6386b0e",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4ad6cf5f-677f-421c-bd05-1a8bf3cc59b9"
        },
        "item": {
          "id": "5c8f099f-edc9-4778-8283-894848819244",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6182a207-c5ad-4a73-8785-6f09c513b48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24ef745-3a5b-4490-bd1c-a36d3ef35ca1",
        "cursor": {
          "ref": "3ca44c0e-65b4-4fb7-bee1-a0d7ad22601f",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f3805051-e9c0-4d58-aae8-1301c4386645"
        },
        "item": {
          "id": "b24ef745-3a5b-4490-bd1c-a36d3ef35ca1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1f1e7ca0-0035-4bd2-b7db-8c35be1c1c7c",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "235da616-db04-4fec-9dd5-93f12d313889",
        "cursor": {
          "ref": "4c508825-e49f-42d1-83ac-07a5515e0c37",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "353173a7-341c-41b9-b082-8f74a836c90a"
        },
        "item": {
          "id": "235da616-db04-4fec-9dd5-93f12d313889",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3f46d350-0c88-400c-ae7f-5236ef97b348",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d0df599d-9539-4520-b8cb-950b006f8146",
        "cursor": {
          "ref": "b7f8b6ed-dd0b-4445-ab98-ff8090430ff9",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9b4e7ebf-a02e-4ee5-9c31-2256bbe35c3b"
        },
        "item": {
          "id": "d0df599d-9539-4520-b8cb-950b006f8146",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5dcad43e-184c-45e3-9726-0810d8c1edd3",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "953df99a-254f-4d5f-8ec6-4703f0f6abe6",
        "cursor": {
          "ref": "527b0e63-6f26-465d-8830-2087742ba6c8",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "368e0252-d329-416d-8276-7c7944eb13db"
        },
        "item": {
          "id": "953df99a-254f-4d5f-8ec6-4703f0f6abe6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "aa00c5a4-cd87-4c3c-9f15-ab8e51d1ebf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f850cb-a492-457f-9b10-d90801c64a61",
        "cursor": {
          "ref": "08e0acb3-01e4-4f51-bf7a-4ea15cbf0552",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "267edbf3-d5f2-4063-a4e7-bc682c2f60f2"
        },
        "item": {
          "id": "13f850cb-a492-457f-9b10-d90801c64a61",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f2990bd8-5d24-4cd3-a558-ddf2309b1c37",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "434a787c-3018-44cb-8e3f-a7a7cc392491",
        "cursor": {
          "ref": "42a4e278-e418-492b-9db3-2d940b01ed6b",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bce90779-af3c-45c4-b0e8-98dfae1b1dd2"
        },
        "item": {
          "id": "434a787c-3018-44cb-8e3f-a7a7cc392491",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3ac6c461-e574-4b28-828e-aad0eed0e89b",
          "status": "OK",
          "code": 200,
          "responseTime": 926,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b9a082ac-08cc-4ce4-aa68-69eb278c274c",
        "cursor": {
          "ref": "cfabd8eb-b1b4-4142-bd99-4d2491973037",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6f5e9562-40f8-48c9-bd7f-d605f2254f51"
        },
        "item": {
          "id": "b9a082ac-08cc-4ce4-aa68-69eb278c274c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6f3a1805-a4fb-4d05-a0a9-e69e227654ea",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "fd232f55-c905-483b-b837-ab784830681f",
        "cursor": {
          "ref": "33fbddaf-5f0b-4632-b24d-a222e2750522",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "158c901b-4be7-4816-9003-13a57575e5a4"
        },
        "item": {
          "id": "fd232f55-c905-483b-b837-ab784830681f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e3d8529c-ee64-4a5d-8b39-a20ebf1813b0",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "274d641b-22ed-43c4-8a9b-db59d9713e9e",
        "cursor": {
          "ref": "2d123069-f4d8-4164-b296-4c9e619cc42c",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8d25dabc-2a9d-47fd-98b4-c320f8112609"
        },
        "item": {
          "id": "274d641b-22ed-43c4-8a9b-db59d9713e9e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a8dbdc7f-5157-4a63-b0a5-0c6cdcfac727",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "bf3d1114-d49f-41bb-951b-7e2f793432cf",
        "cursor": {
          "ref": "4f154746-8af7-48b1-81d1-896359938e98",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7d35ecae-3283-406b-8d40-457544b772a6"
        },
        "item": {
          "id": "bf3d1114-d49f-41bb-951b-7e2f793432cf",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "dad4b7a7-16f8-45db-bfea-2e7b45336c01",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "06ac87f0-b55b-44ab-82bb-0c36c0dde3cc",
        "cursor": {
          "ref": "593fa414-3fe2-4689-86cd-091cc1022f78",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d1d9b8da-58d3-4ea2-9736-5d7491edf37d"
        },
        "item": {
          "id": "06ac87f0-b55b-44ab-82bb-0c36c0dde3cc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1ffbaf2d-add2-45d8-aea9-59870cf1dadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1460c251-e4fe-4e46-8fe7-753ce0dd1b51",
        "cursor": {
          "ref": "d414ea3d-49e9-4ce7-9bff-eb5e6216a0c7",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "03ea5ad9-a888-4c40-8cb1-53f8209f15b6"
        },
        "item": {
          "id": "1460c251-e4fe-4e46-8fe7-753ce0dd1b51",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1ce8f3e5-a2e9-4d41-85a7-e5a434def377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90595df8-571d-413a-aa56-3c79dc1deff5",
        "cursor": {
          "ref": "a7e46204-415b-4f70-b51d-08fcdbb3253c",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4cd9a5cb-b621-457d-84d8-08053eeddb58"
        },
        "item": {
          "id": "90595df8-571d-413a-aa56-3c79dc1deff5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9e010e47-96f9-4912-9dfb-e404fb63b665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742705b7-9784-47f3-a423-17003130b842",
        "cursor": {
          "ref": "2d9c0c65-8506-4b61-a062-538b4c055948",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "670ce36d-5b7b-4df2-80ec-3f2d907601ae"
        },
        "item": {
          "id": "742705b7-9784-47f3-a423-17003130b842",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d246f0d5-bb80-4c74-93ce-21a4ee81738d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f941f6-0755-4f6f-8018-68407ad5e97c",
        "cursor": {
          "ref": "6cf6f669-fb60-441f-b64e-56dd9a1b3f6d",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "18f8ad51-86a9-4639-af1a-c8d009c5bfc2"
        },
        "item": {
          "id": "20f941f6-0755-4f6f-8018-68407ad5e97c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d0331301-6e07-42a4-8195-5a3f20131aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ef10c2-59fc-4219-81b4-aa75dd50396c",
        "cursor": {
          "ref": "29d163e7-fdbd-4da6-9e58-5c9849c0e860",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0ffa44f9-7d75-4b17-9fe2-968fd8fd50fc"
        },
        "item": {
          "id": "80ef10c2-59fc-4219-81b4-aa75dd50396c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3aa01a38-828c-4002-b84a-506caebd64e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbb4db4-74aa-4286-b592-cecccad55ff2",
        "cursor": {
          "ref": "a70e24e5-3282-44aa-8060-8446d4a79207",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "57cb69ef-9e50-42ac-bde3-a4158ca59d92"
        },
        "item": {
          "id": "afbb4db4-74aa-4286-b592-cecccad55ff2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "07a111a6-5df4-43eb-b935-327ed4f11bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6150441e-9f30-4069-9518-26bcf7c98657",
        "cursor": {
          "ref": "0ef7a0b4-99d7-4e10-aed3-aea2283cf04a",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bebafc57-17a8-4e12-a6d0-8ebe08156eea"
        },
        "item": {
          "id": "6150441e-9f30-4069-9518-26bcf7c98657",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f9732ab5-4cb7-4b6f-bb7f-02d29882a300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862328f0-26ff-49ff-886b-777ca5e1b25f",
        "cursor": {
          "ref": "41d050e9-1b00-42df-98b1-b630ef7ede36",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4c09c492-f8ae-4bc4-84ef-ab2b0458ec42"
        },
        "item": {
          "id": "862328f0-26ff-49ff-886b-777ca5e1b25f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9ac3e4eb-135a-429c-80a7-10e1534501ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f98c468-e124-4e3b-ab3c-cae0b460b70c",
        "cursor": {
          "ref": "201c3000-58d6-4410-9391-c363a098ba22",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8ad80aa3-4175-4c60-a206-09e199d47fe1"
        },
        "item": {
          "id": "5f98c468-e124-4e3b-ab3c-cae0b460b70c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "162c75f6-bb61-4c06-a6bd-3ee8b088019c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448639e1-da9a-47e5-830e-36d1c010425a",
        "cursor": {
          "ref": "e6792960-2463-48d4-abc9-f3a10b663ba0",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a86e05b2-e4bc-4a56-82d6-9b678c72dcc1"
        },
        "item": {
          "id": "448639e1-da9a-47e5-830e-36d1c010425a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5f5c2aa8-d288-4822-bffa-49372552f840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09c551b-8c75-4203-bb43-b3e08c9ec539",
        "cursor": {
          "ref": "06b373c3-1da3-412a-a854-ad377b227c83",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "29987367-2d99-46ed-80a3-f18139cf4470"
        },
        "item": {
          "id": "c09c551b-8c75-4203-bb43-b3e08c9ec539",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4d831e5d-e79b-45b8-bb81-12c1e7097b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a5fd16-c2ff-4d96-afc3-cc2d0fd431d5",
        "cursor": {
          "ref": "14fac756-8624-47cf-bd78-6621bf7b7ae4",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a7aaaf57-cb6c-444c-93cc-3096a1a817fb"
        },
        "item": {
          "id": "51a5fd16-c2ff-4d96-afc3-cc2d0fd431d5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9423d12f-a2a9-441f-a1d1-41099e0271c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa630771-f498-468f-93d5-313aca78a220",
        "cursor": {
          "ref": "32897373-d9c5-4f73-bce9-3d455561600b",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6f9caac0-bb51-42da-a813-2ab733546a82"
        },
        "item": {
          "id": "aa630771-f498-468f-93d5-313aca78a220",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fd52537e-a7f0-435c-8194-0fc0e403f7de",
          "status": "OK",
          "code": 200,
          "responseTime": 766,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "be8687d3-28a0-4d0e-97a6-d35ae74acbc8",
        "cursor": {
          "ref": "f8227542-a8c3-4fa7-9419-68129652b77a",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1e99b526-27bf-449e-ad52-e449a3c8fea6"
        },
        "item": {
          "id": "be8687d3-28a0-4d0e-97a6-d35ae74acbc8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e93d2bac-606a-49ff-9732-8ecc89a8d20d",
          "status": "OK",
          "code": 200,
          "responseTime": 789,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1da5d23a-e175-4bbd-8639-6aaefae71149",
        "cursor": {
          "ref": "48bf2321-585a-4815-9e9b-250fc4b1c29c",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "84853f73-9862-4c48-af0a-5057fb1d8e5e"
        },
        "item": {
          "id": "1da5d23a-e175-4bbd-8639-6aaefae71149",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c23e7bc4-42ee-4a30-92f9-65fcb9e4aca7",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "36da6272-e3ba-4b9c-8cca-5120105870df",
        "cursor": {
          "ref": "a14a87d8-2426-49e4-a791-2d9423f405e7",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5e0fb528-633e-4a66-9319-6940a0661323"
        },
        "item": {
          "id": "36da6272-e3ba-4b9c-8cca-5120105870df",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a1f0db27-a473-492f-8fbd-6463c1503b8f",
          "status": "OK",
          "code": 200,
          "responseTime": 815,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c94e0ae3-3690-4d76-a576-97faea8ee442",
        "cursor": {
          "ref": "086c5af6-07ef-4d2a-92c6-8d9b7bdd8c74",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "770eb040-e407-4a44-a55a-07e8a81e3542"
        },
        "item": {
          "id": "c94e0ae3-3690-4d76-a576-97faea8ee442",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "aa7e718c-bc43-4b84-895f-17b9ea9a2a49",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b087fd3f-fbc9-4094-98cc-069be4a28d2b",
        "cursor": {
          "ref": "9bf6db9c-4864-4c5e-a3aa-a2644c6e536a",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c22b2ab8-fe18-4f5a-a348-72af77b7cadc"
        },
        "item": {
          "id": "b087fd3f-fbc9-4094-98cc-069be4a28d2b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5b092767-c98f-4dee-888e-15a62aaaf94c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1ef2e7-01c8-44a8-a5bc-4253c9f644a1",
        "cursor": {
          "ref": "39b557c6-d32f-495a-b011-1c7496cb462e",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d211b2b2-970f-43fb-998a-bfcc85cf8d5f"
        },
        "item": {
          "id": "dd1ef2e7-01c8-44a8-a5bc-4253c9f644a1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "be5b4d2a-a544-4bc5-a518-816b93320172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1e9764-0aa9-4001-9705-c45639b69e1b",
        "cursor": {
          "ref": "04c68144-bd18-4f48-921d-585fe3df8f73",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "71a959ab-45ee-490b-b1e0-4956b9d0bfd4"
        },
        "item": {
          "id": "4e1e9764-0aa9-4001-9705-c45639b69e1b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "481b7d85-1e1c-484a-a426-1ed558b49eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf9fe00-4654-433c-90a9-71f772063e8d",
        "cursor": {
          "ref": "9355b4cf-09d2-4c1e-add5-d97bf1355922",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "317093bd-4360-46c2-aa54-84d755a5d245"
        },
        "item": {
          "id": "5bf9fe00-4654-433c-90a9-71f772063e8d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "adc22a7b-4cfe-4b12-9a5d-95d6c1c71f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748b01f2-a8cb-42db-ac35-f369753bae8a",
        "cursor": {
          "ref": "7cb20913-7a03-4c90-9489-ae7a65dc3c0c",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "78f9e7c9-c786-4276-b651-20a505558977"
        },
        "item": {
          "id": "748b01f2-a8cb-42db-ac35-f369753bae8a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c8ddb3cc-99ca-4d76-9514-a4aab5cb6578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34396c77-a737-4535-a1e7-abcf6d9c0ba5",
        "cursor": {
          "ref": "a9084af7-eb50-48a0-bb12-3b91184c3267",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "aa9e3acd-399d-4521-b7ef-d1b5215ee6e4"
        },
        "item": {
          "id": "34396c77-a737-4535-a1e7-abcf6d9c0ba5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5751b351-cd2b-4c20-926d-3053d9058793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cf45fb-5810-4a6a-9f30-5ebe4277dcbb",
        "cursor": {
          "ref": "5483baa7-d35a-4f59-a06c-567fd961a61c",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0557f8bc-5dda-43da-a40b-673ab89878bc"
        },
        "item": {
          "id": "71cf45fb-5810-4a6a-9f30-5ebe4277dcbb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "acdfc184-9532-465f-b151-1328237023a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96115d6-8c0e-4011-bc74-244131e53627",
        "cursor": {
          "ref": "ecd637fa-0406-45e8-97e8-dd7665417fc7",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "88fc1e92-28cb-4ebb-a74e-3d6cb0196222"
        },
        "item": {
          "id": "b96115d6-8c0e-4011-bc74-244131e53627",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "557eacee-6f65-4b1e-8f18-73223fe6b044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1e333f-83d4-468c-9080-7e1baf010b1d",
        "cursor": {
          "ref": "4dc49bff-145e-41d2-8a6e-94adf5664919",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6a48af56-c48b-4aa3-8eb8-177edcf97180"
        },
        "item": {
          "id": "db1e333f-83d4-468c-9080-7e1baf010b1d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7b7500e6-19f1-4d2c-903b-8988724b69d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15f6140-0a3c-4380-b356-e6779fc407f6",
        "cursor": {
          "ref": "e01b3495-4fd3-46de-87ad-e3b8a5255d8c",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5801a86b-6cc0-4836-b81c-8b613ce5ae4f"
        },
        "item": {
          "id": "a15f6140-0a3c-4380-b356-e6779fc407f6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fbc13d73-6bce-40da-99f9-9656edd36197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93719ff-3432-4e11-9f14-3a018eed6d21",
        "cursor": {
          "ref": "b2ba08b0-dc12-4b1f-a7d6-aaa37754dd78",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "4273b685-32e5-49ce-86f5-b95776dfdfaf"
        },
        "item": {
          "id": "c93719ff-3432-4e11-9f14-3a018eed6d21",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c91c3bd1-6af8-495d-99cd-f913de8196e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cbdcb5-7b43-48e6-9dd3-5feec2611240",
        "cursor": {
          "ref": "e936a6cd-07cb-49c1-b1a9-574b26d181ab",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "897146cd-bae8-4db9-982d-fc329a8e358b"
        },
        "item": {
          "id": "a1cbdcb5-7b43-48e6-9dd3-5feec2611240",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a8d844de-e67e-4be5-bdf3-4516bc522dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97306371-9404-4329-b727-14b5d17f8fc9",
        "cursor": {
          "ref": "58389253-a31e-41a4-be37-a0d042f00cfa",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f78c0a65-4101-447c-974d-fec77322fe16"
        },
        "item": {
          "id": "97306371-9404-4329-b727-14b5d17f8fc9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "993d35e2-56c7-4333-b352-ab62c883b19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cec201-b5e9-44da-9871-8e1948a18ccd",
        "cursor": {
          "ref": "17a566d6-efce-4f8d-9795-8d97faff4a5b",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "2d36aee7-7a3b-4432-8f41-87b3651f003e"
        },
        "item": {
          "id": "47cec201-b5e9-44da-9871-8e1948a18ccd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7e2f5bc9-9e96-4eb9-a906-d7eaa9399120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274326c7-4f08-4f61-bb94-13eafb9aca4b",
        "cursor": {
          "ref": "fa7e575f-f842-4fba-9c42-31163a2b2c1f",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "1ab82853-c723-4875-ad04-3674c53fd379"
        },
        "item": {
          "id": "274326c7-4f08-4f61-bb94-13eafb9aca4b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3cbf83b8-64cf-431b-8f7a-1797fa35ffa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761b0eab-bcbb-4652-abdd-04444b5dfd3d",
        "cursor": {
          "ref": "02b97005-3bb1-448a-be3b-92f89497746d",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "32d3db4f-3301-4cad-a315-1f8b27c27d98"
        },
        "item": {
          "id": "761b0eab-bcbb-4652-abdd-04444b5dfd3d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "74c030d6-2a6d-495f-9771-f6051019679c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809cca16-1dbb-4e0c-8992-b6e20bf94761",
        "cursor": {
          "ref": "aab186d4-79f4-4a6d-b19b-0636b82ae74b",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0963dd29-ba9b-4ba0-870a-0eea7cf642ae"
        },
        "item": {
          "id": "809cca16-1dbb-4e0c-8992-b6e20bf94761",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0a17dca5-037b-4fa5-b649-e08773b18fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af36627-00d5-4039-9a71-337ee1085143",
        "cursor": {
          "ref": "2dd24568-6bfb-4c72-8908-0f6a12eef9b4",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "a015ab14-0b9e-44cb-b59a-41a9088b3392"
        },
        "item": {
          "id": "3af36627-00d5-4039-9a71-337ee1085143",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "df6dbfa4-2a0f-4f03-9f94-3d633c59271b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf14b7ef-8595-4fc7-83f6-acc852064511",
        "cursor": {
          "ref": "ad98be9c-3e76-4e1a-b97c-931e43146e89",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "488a5163-5991-4a25-b8e2-affdd4cd2f53"
        },
        "item": {
          "id": "cf14b7ef-8595-4fc7-83f6-acc852064511",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d3e5ea38-4575-4ff1-bebf-959b5be6f124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e58904e-ef1f-41ed-acda-c9779b22cc89",
        "cursor": {
          "ref": "9dc85534-2577-474b-ae76-8b57e211c6d2",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "96deda89-6030-4142-bcfe-c898583145b3"
        },
        "item": {
          "id": "0e58904e-ef1f-41ed-acda-c9779b22cc89",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6ea45c59-4a97-49a5-8a70-4aff5fa5806b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4633207-6bc5-43f2-8c61-b6bf480d1da5",
        "cursor": {
          "ref": "b36adf03-26bd-4b5d-bcc4-e57aef74e70f",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ac135b9b-97e4-4e5a-a4e4-975699f93ba8"
        },
        "item": {
          "id": "d4633207-6bc5-43f2-8c61-b6bf480d1da5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "150467a2-a8cd-425b-b6b5-1af978c31da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45dbd195-ff62-41b6-92ad-fbb7a6ecf1b4",
        "cursor": {
          "ref": "e49f31a9-ce9f-407b-a819-dbc862817422",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d28c0d3c-748a-4121-98ce-4194b9aa4c79"
        },
        "item": {
          "id": "45dbd195-ff62-41b6-92ad-fbb7a6ecf1b4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "897bd07c-c813-4ad9-91e3-ccbdacfe6ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d28791-e8ea-4ef3-a3b1-1f9f3e9dc774",
        "cursor": {
          "ref": "a15067c1-30b7-4e98-a2d7-6ed6d31438b0",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e430d22e-58b3-497d-8d28-37a295170719"
        },
        "item": {
          "id": "e2d28791-e8ea-4ef3-a3b1-1f9f3e9dc774",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "99e37549-699d-4aa0-b8b3-191a898125ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14798c0c-4e74-4e7f-bd3d-3bda2db37fea",
        "cursor": {
          "ref": "4c22b972-987c-42a5-8fe8-cf3f4f75815a",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ff5f2c41-5d8a-45bf-868b-0769f9eda617"
        },
        "item": {
          "id": "14798c0c-4e74-4e7f-bd3d-3bda2db37fea",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "70ef0f68-f464-4589-9f6a-d640b1c31ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52417c4-5c28-4062-8ee3-14797afacd64",
        "cursor": {
          "ref": "15ec5dea-de3b-4332-baf8-cc7be5b3135a",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9e116ef2-f1cc-4206-9465-7baa337729c6"
        },
        "item": {
          "id": "d52417c4-5c28-4062-8ee3-14797afacd64",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "42857bf6-1cfd-45db-be5e-1789a716edc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9f7a9d-4fcb-420e-a4ac-f8350401946d",
        "cursor": {
          "ref": "ff3ff6f3-3441-4d7d-8e4b-b10e8abb879c",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "5e596c50-5930-4eed-9a05-e13e10c7fa6b"
        },
        "item": {
          "id": "ec9f7a9d-4fcb-420e-a4ac-f8350401946d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "35401566-39bb-4426-92fc-1629e647f012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb78ddb-b538-42ee-89ee-c06e7ca91ce7",
        "cursor": {
          "ref": "bbdf5a7f-c0c3-427e-933b-dbe22bb6c29b",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a4046dcb-7ecf-473e-aad8-58199200393c"
        },
        "item": {
          "id": "2bb78ddb-b538-42ee-89ee-c06e7ca91ce7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "83f7a818-ae66-49c1-8746-75a8c327c5d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084dfc60-bf1a-41c2-967f-f91f7e727a6b",
        "cursor": {
          "ref": "85889ace-88ee-4ac7-ad8d-cddd0bc204ac",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "dc3ba141-d0e9-4b64-bd99-df4a071c852c"
        },
        "item": {
          "id": "084dfc60-bf1a-41c2-967f-f91f7e727a6b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e48a166b-4832-4569-91b5-ccc7aaea4840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d820c7-18a7-468f-836c-0b2ba0f6ec0b",
        "cursor": {
          "ref": "3bfec314-e9fb-49d7-87aa-13d8fc5273a1",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2593ea0c-273c-4120-b006-0ab6b3b4f870"
        },
        "item": {
          "id": "18d820c7-18a7-468f-836c-0b2ba0f6ec0b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "bb3fca84-a252-4881-a6cb-9cd685555c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94b054f-3e7f-4234-825d-357121593a94",
        "cursor": {
          "ref": "7bf85d26-84ad-43cb-8787-b20aea9a5c93",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "427d5849-4a0f-4c23-b7a6-cf26954e51a3"
        },
        "item": {
          "id": "b94b054f-3e7f-4234-825d-357121593a94",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "29e97f37-bf60-4dd1-848f-fe4949127f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a826ea31-067b-4724-a190-89fddb5fe0e9",
        "cursor": {
          "ref": "5414bec8-dfca-494e-9fde-752b0b211610",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "97c475fa-89cd-4e8e-8194-266bcbc9b6a7"
        },
        "item": {
          "id": "a826ea31-067b-4724-a190-89fddb5fe0e9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a7aad795-2c9b-4074-9b8a-7a04a07a7a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b6f1c3-887b-4c0a-a343-7c0075f0b501",
        "cursor": {
          "ref": "d16503fd-8204-45d1-b51a-a9757f825d47",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7a69590d-f093-4452-bda1-bbf93a0b07dc"
        },
        "item": {
          "id": "56b6f1c3-887b-4c0a-a343-7c0075f0b501",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3f8bb73a-585c-4b8a-afc2-72e88f22f49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6053fe7e-166e-49eb-8338-89eaf50ca168",
        "cursor": {
          "ref": "0fe7323a-9039-42cf-9302-53e9222f0fab",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2b0f0f34-d077-4257-9bdc-9404b0aded0e"
        },
        "item": {
          "id": "6053fe7e-166e-49eb-8338-89eaf50ca168",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3eefc7f6-6815-4d53-b067-ee8625290b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ab2776-af90-43a0-88f5-c29e12dd9405",
        "cursor": {
          "ref": "9b4ed9d5-ca94-415d-8128-c6aa36966803",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0fe05884-8d85-47d4-86b2-028a072d0ffb"
        },
        "item": {
          "id": "d5ab2776-af90-43a0-88f5-c29e12dd9405",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d1e8e9ad-6899-41f2-bc8c-9439d7e541db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc54f95-14ea-4132-b5e1-29c807e6a8f7",
        "cursor": {
          "ref": "20c00d62-0464-42da-b3cf-5f4cdb010441",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "befb8364-963d-4714-9b12-5197c4184f49"
        },
        "item": {
          "id": "2fc54f95-14ea-4132-b5e1-29c807e6a8f7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ea1aea88-5573-4316-951e-5098b70c03dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98abd76-eb13-4f11-9403-3f897294a4e7",
        "cursor": {
          "ref": "f4c31470-46ad-431b-b9c5-7377386e0dc9",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8abfec0f-4e92-4fd2-aee8-33c1430e86a9"
        },
        "item": {
          "id": "e98abd76-eb13-4f11-9403-3f897294a4e7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c7eb827b-2239-4c5e-9457-8b767c265c77",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "001e3243-5858-44e9-b29a-3880958cf249",
        "cursor": {
          "ref": "da4fe326-2dad-4f39-a8a9-bcc4d264801e",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "101dde28-0474-4fd0-9a60-dfca3f91c2aa"
        },
        "item": {
          "id": "001e3243-5858-44e9-b29a-3880958cf249",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f7b83a74-c39b-47f8-9e90-6d39dd570b01",
          "status": "OK",
          "code": 200,
          "responseTime": 873,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b618e57-69ea-4977-b849-4a33a7e070f9",
        "cursor": {
          "ref": "311bfbbe-e65d-4ea4-835c-33e577ea6a2b",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6345da39-8926-43f6-acf6-c189ffa6fed5"
        },
        "item": {
          "id": "5b618e57-69ea-4977-b849-4a33a7e070f9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "179bbcf1-0875-4038-9104-72e5d3337b87",
          "status": "OK",
          "code": 200,
          "responseTime": 934,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe0ff88-cb85-4f4c-bd83-47a8397c3916",
        "cursor": {
          "ref": "30333b9e-a5d3-4d5c-912d-69e27988b045",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "01bd9d0c-272d-4701-9277-4033322f2020"
        },
        "item": {
          "id": "5fe0ff88-cb85-4f4c-bd83-47a8397c3916",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "db007bb1-982f-4285-962b-98649e0b3373",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe0ff88-cb85-4f4c-bd83-47a8397c3916",
        "cursor": {
          "ref": "30333b9e-a5d3-4d5c-912d-69e27988b045",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "01bd9d0c-272d-4701-9277-4033322f2020"
        },
        "item": {
          "id": "5fe0ff88-cb85-4f4c-bd83-47a8397c3916",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "db007bb1-982f-4285-962b-98649e0b3373",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa82b9c-fa31-45d8-b773-4febf9b8f66f",
        "cursor": {
          "ref": "78ecfcb9-cf27-4cbb-8655-e95d1e1133b4",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e60d6fcd-5538-40c5-9542-93a0a0d10174"
        },
        "item": {
          "id": "efa82b9c-fa31-45d8-b773-4febf9b8f66f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d544f4b-1b04-44c7-879b-65e77852c3b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0f37c5-abf8-4257-a903-093ce283dd31",
        "cursor": {
          "ref": "eab0574e-b778-4afe-a7f1-ecde94263aaf",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1ead216c-044a-449f-a8df-3f9cdefc4e9e"
        },
        "item": {
          "id": "2e0f37c5-abf8-4257-a903-093ce283dd31",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "230598f0-847d-43d6-8394-c1733075b43e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}