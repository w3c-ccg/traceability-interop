{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cb83c972-4f30-4f29-a5ce-4f4301a2b89d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b0a85657-f619-49a5-8b5c-509c56711528",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "915f35d3-f12f-4aba-9033-a94c96a99018",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fc428751-6246-4102-9bac-6023bba3553f"
                }
              }
            ]
          },
          {
            "id": "1e7b7127-386e-414a-a869-f23212eaa82e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18fd7c83-6c30-426f-b203-69479ecf7126",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "01e15669-b2f8-46d1-8fab-d625b85d22c0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bba91a5d-3e26-4e3d-a44d-42772d5d9e5f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a2727b01-5293-419e-903a-e58d06de9487",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7452b713-c938-41f3-9380-e8229be139e0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed4a607f-7ddf-4375-b23b-89b1ef7191cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "472dec86-90fe-4e03-8710-ea495cf8feab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6c7e50b1-afff-4493-a0d9-1f56539f4a08",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee4b77c5-2eb8-4868-9f3d-831e1994efb4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ba75dec-e41c-482d-adaa-f3efb8657c2f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f131f07f-5430-4370-ab1a-e8736c449c5d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9acf394c-05f8-4462-b1fd-dbcfc88dbb1e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "79d710a2-4708-42c2-8f49-4c6851f0f389"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3a16c9a-f4f2-415c-9056-223b44e7a629",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "645693b1-a795-40bc-b0e4-6f585bfad604"
            }
          }
        ]
      },
      {
        "id": "6aa247c8-8686-4d58-964a-b46afe208930",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "211afa12-89f7-4f7d-ae2b-738d3b02f7df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97476984-275c-4ea0-9fd7-18322c9ed436",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "944887af-3d77-4c07-8e9f-7b30a57cd510",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d85161-6318-42ac-bdad-ec21a6db33d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaa9aba9-f265-43a2-a638-a437f2d42c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c14a24-fb2b-41d0-961a-89c463117f9b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6c3dae-4663-4ad0-8530-4e1d7b2db097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8805818f-ee55-4ed8-b530-744d98042a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddbf352-b24b-4165-aa85-d9be7db3e2ba",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2384abf-c5a3-48fe-be95-0361e4d5b2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef225642-ee2a-45b4-900a-a048dad06e84"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6bc0416-f3e8-4e0d-b0d5-215a8e1118ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8024f7ca-4909-4643-9cf5-73dd31c25687",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d100c65-79e7-47a5-8e82-e9d974177445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c9628ed-9d6a-4c62-8dbe-f3f463d42686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f662d2-20ee-4e78-bdd4-06a5e35f4194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23736de3-bce7-42fd-a258-4660bca54d00"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3e81a0ae-a031-4cd5-8041-be652329b998",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a81312c5-9975-4189-b4e9-6b967dd1849b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09a88af1-d0ec-4088-bac1-e7ada11bccea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d5f4f8fa-50fb-4ff2-8367-59789dc9bcc9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d98b703b-3255-4d33-9b12-920cd389070b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5e5f1ba0-95bd-4f73-988f-afd36dea80d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97c14ee6-7480-47b3-beea-5f9c58b34283",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76c942df-a699-4155-bd73-dd1bce74e9ca"
            }
          }
        ]
      },
      {
        "id": "c744728f-4a84-4cd2-a857-36a8824c5377",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7b8d561a-9045-4ee1-9801-f3748a826a8a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31e52135-6d5f-4b46-952b-b459c6e09bf9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5b9dd745-df8b-4a75-a74e-eb48f979559d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f27959-52d5-43b1-b21d-f266c5cdaee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca997faa-5113-4c60-b2e4-7b8331e02295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fb2d4b-6ab0-43de-8deb-53583b255736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e6993ce-9fcc-41ed-8aa0-f48c144b75b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7790676d-5f61-41e0-86e5-d45ab2edfc52",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430de40c-50a2-49ce-a9ea-e27b838d0fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47335cd0-6861-41d7-9828-b855b0f667be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89221072-ac48-4b36-8bd0-52d48b48e5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d66bf996-fa1b-44ef-921e-811b33d7f347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d01c6c-74c9-42ff-9641-f5213f47761d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4636cb-6f94-4a9f-b575-9512524938c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2d73e7-53b9-4917-8c0b-e46d7230eb0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8523b641-d914-4c4e-9a78-e421111e45c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0055cf0-011c-42b4-a654-ef2e26f3e4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3aabd9-26fa-465d-ac6b-870474efdd3c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf31b74-4ae4-4365-a7c2-734c22b92c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdac3a47-5e99-4c15-8b0d-ab6f2b9cf9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bf2384-de15-43a2-ab4d-85c9c8e7e700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fbd476a-30b9-4564-a645-7111ccfc9551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c60e2ad-ad88-4a24-a808-be9af0e8abf5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd1589f-08b9-4ce3-b65c-0d8e4c7f7965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42c8350-fd80-4c74-a612-f5d411efd665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c70eaf8-ef58-48ec-a353-1689d35e3a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dc29c23-39d1-475c-b021-59d703fe58e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab3ab36-e0b6-4d5a-94be-d3b8985ee911",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5949d7ec-6e34-4acb-8fbf-1ed4f4640a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f724149-2776-40c2-b249-0d09cef84a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ec626f-d174-4000-9287-e55d5278d546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c39973bd-0acb-478e-9540-efbc2776c02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a802f7d-e69d-41a1-bc63-06fa77d4d742",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4ace61-c889-45e0-9d59-f122d9493c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e084573a-93a8-4ecd-ad77-2d5850ad3850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a545c10-1ff1-4c32-8136-e3bd39ea2c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de639877-d82a-4bc0-8f5c-cd5ddd052d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd734c3-f8a8-4606-946b-240b7dfc4229",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154258ee-6e54-4bdd-8802-5e7c2da15ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614ec46e-6cfe-4483-8351-406203cfcc53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a32ffe1-9549-4a07-8176-eae21eaadd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e3563a2-3d73-449e-a1da-b284c4ff8c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2156e5c-2f98-4391-9fb8-a9118dff123f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a9efd0-4dfd-4c58-9b1f-18cb14745d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2b7435-fef9-4b98-82fa-82af1ddf2766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa146d0-c0d9-4bfc-bb00-9f9bd913c0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76fcf7c3-34cd-46c5-bac4-d5b6c905a463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cce22f1-117c-4ef9-b5b5-96c77574a914",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99137cc6-6dae-48b6-a56c-5453e5754c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5a2044-e062-401b-88d5-7810dbb5a9ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3902e3-333a-43b2-9d8a-876c74cc4c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c81e8cf-feb2-4c9b-916f-3922a40ba783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff0d843-8d82-460c-ab47-a9dc96b43625",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c71385-988f-418b-99ff-f395cc6f89fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5e2fc3-7b71-41e8-b1a7-89067d9f1ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d0abfc-4773-4803-a013-bc118cfa4a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc6f4921-8aef-40fb-937a-7c5d2ecb2021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138bb77e-acc1-4c83-befe-d0a56edb81ce",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d468ee-f86b-4cbb-b485-6d25fa5bc3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ef249e-4498-4a45-956d-fab0ca63f23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0083ff90-3a57-4537-977c-745b30fa99ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a6b6bea-2907-4be6-b8fc-96ba6362291e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0160161-b712-42a8-a6c4-769770251dde",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c97dfb-8061-466d-8033-89a3dabebe71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712878a6-08e5-4a92-80fc-d3ac432edfb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227a4c7b-91e1-46e1-aaba-6620bd4c0a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6420bcc7-6619-4008-8281-637ab32dd4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037b75b7-dd36-41fb-ba23-66c5dce9611d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac73a5e4-e914-4c3e-a78b-3dae1ebf3d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0afc850-a807-4364-85b7-912a5aa33825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c17c685-d5bf-4a58-9751-8e46e6650290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "185bf463-84b9-4f09-bbf9-566870187ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf2f2bf-73a3-4b5a-aa8a-806cd54837ae",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfad2f6-df1e-4568-9a82-0effb95f50db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65a93cc-e161-4d47-825c-9b208c9f20c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cf6239-e7f5-4f05-8395-967d1a505d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "788b4b8e-d0ef-49e0-b8ff-27bca7c1a7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861ab3b3-e611-43ff-a1fd-3f01e5a1dca4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c21c82-20c7-4349-a689-d62935e71a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d8fa09-b615-44e6-a5c7-efa5e7e7c3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad093a5c-48e7-4fdd-b969-a4b275a6b406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72a52bc9-907f-449f-b588-2c2aefd28844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629e1b22-26c2-4dcf-84dd-f98d7e4c5a72",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a580e3-b98d-4b8d-b22d-65e52ae9f4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5869fed6-efb9-4586-850e-e48cdbedd603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51596866-3165-41ce-9f8b-e97d8cf0f724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb2f69eb-56ac-4a0b-b757-b81c3fd7e617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c831c916-84bd-4917-b0f7-86e6071262df",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41269fd-1015-4441-9290-d24213c767b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fca663e-0c29-4474-823a-64e705552ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d30e953-df25-4557-a593-0251d57630fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "66b8ab65-8c98-47a2-b192-90fe73d94d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a1516f-815a-4b2a-a22b-1b1c13bf3df8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55785d79-f064-402a-af94-fd5d70cf7f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0805557d-40e9-4cc5-8fcf-42e57f27a500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b44f90c-0287-4d88-a9de-eb408e7ace70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "570b2a4b-0305-4eca-9a9b-c38599eb75aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f05b72c-20be-47ba-8509-81e1f0cc3720",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed02c05-43bb-4981-b6cb-d45fc2b725a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658e101b-17c8-4ff4-b211-f39b7277bd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51879ff7-5d94-4bcc-bbf2-67140acf2bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c075082-1829-4d84-9101-0e6d91f0b869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e20d83a-a445-4750-bb9f-12d4cf167b10",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ba8b2a-42f6-412e-93a1-26ab13b1ed7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03aa79bb-5004-4ab3-8292-8b19ea1155ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d006d40-22bb-4d83-8912-bd534e577b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b36f3bd4-06e9-4761-ab32-e71b23b58d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16d75d9-f040-4b37-a018-7d164de65d9d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7979ff-de6e-45e8-9018-38334a80ffcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6a08b8-387a-41ec-8278-236e3624dfc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edd97db-344f-46b7-a903-7677dc51ee86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "047a0a82-22f6-4ffa-866f-bd32378226fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cdc08b-b5be-4026-988a-16e949d24927",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5835f5f-4c24-4f06-9e54-b6776c551da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b5c0ac-9ef4-4231-89c3-addba38e5078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4020dd58-660b-459a-a547-34b26b267f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4728c151-9603-403f-82c5-abec47814665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d782c7-ea89-4f60-b2de-169f788f1476",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a774c533-1c78-46dc-965d-ee0519e035ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f75a3c3-9a9a-4ffd-990b-329298645dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcf41af-0ee7-41a0-8338-3a53b637a19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b06846cd-1f07-43d5-b4ed-e26d58c03e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b75817-f61c-4955-9d54-ca15f4250be1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b577c831-2129-4641-8118-15bd8af2180c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57393aff-2137-42a1-b3cf-f888675c10ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173e3298-f755-4465-83e9-383274f0e921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4d157a-cd0e-4949-b00f-773144bde1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41079348-8512-4863-bd05-1a547eb38ec4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15459665-673b-4f27-8831-3fae56aec206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8c03a0-83c4-44e0-8ad8-3785b2cfdbc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0055d019-317f-4b37-940b-a0071477dd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "644316f5-cb19-4b81-b711-e90195db56df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6b3b87-c7b4-4461-9cba-0da566c925ab",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0075b60-1888-4bcb-b878-4aab489d1010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca80811-49de-44dc-9bf6-6a70cddb0b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fb89ad-fd66-4203-a6d0-cec3a42be1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9788cefe-9c91-40c7-be8a-7a3cff2024e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0963bd72-b52e-4597-92e6-12fc085dcd08",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c9d3a9-8c0c-4c76-ad5c-d0752969be6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39603614-b05e-47ef-85c7-6886198b3aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2fc943-f6ef-4e50-97b0-2a2909d2c088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83de0f15-adcf-4b31-a06b-25c6e435372d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e95b37-3c96-44e1-9da3-26717f6bab33",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022342c5-d892-476c-82d9-385d5e1a2ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13aade43-930c-42b3-92dc-3a7931979d48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaffd6b-1cef-4ada-8b50-a67f62e3bef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8d9f6b-1435-40bf-b5d0-2d48696fe8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43f75b2-16f0-4774-95df-0b804b1f73a9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6b1eea-8764-460a-b3e7-34cd8d39158d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e2f546-696c-48d0-8da2-62be48b681e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f216d1-9a22-4f38-964e-28c24d2f8a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "33614f15-15cf-4b80-a773-1be8a908abf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959f6ee5-110b-4518-acfd-ff63cd5fe559",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3667dc-ae09-46fb-add4-9743ef08cc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1fd0f4-b8b1-45d8-acdb-42db00f56ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31b0a18-62c8-4b84-a7e6-4e3d418b017f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de8c9b90-c814-47b9-ba59-cf9a18b683e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e12f161-94e3-448f-8ea5-b91b614ef861",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f9a926-b9f3-458e-8649-dc6c9589a4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726c20c6-1ea6-453d-a078-f9a84671ef23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f54108-2ee1-4c0a-bb0a-3e2dc596ed45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61c3fe3a-97bf-4a24-8b07-d66cab87caac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824c7ac3-fad6-4fde-a75f-0d41b15ac374",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e3004a-80bd-4b9d-aae8-bdd9437d6495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e574cb2-b17b-4dca-8371-bca03f66a17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55caeeb9-62e1-42ad-b083-8781fe64a82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4144f6-8077-43ad-ba50-781cde7adf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6540bdd7-f890-4fc1-a230-e0de9f0e7349",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bcaa07-63a8-45b4-979a-5ab51c77cd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b21db82-5e19-40dc-9503-b46c83ce311b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d612fddb-f007-4630-8ff5-d1a1b88644ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95d7fb76-0297-40f7-999c-86cd96919ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b97fcea-ed8c-40fa-aa90-d80068a1f666",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a4aedd-b7bd-4b9c-b2e8-e8d2b8a411a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83681fe-4ab1-4fd7-85aa-ef4070f880e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bbf64e-bbeb-4934-9602-1b019b69b0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7296863c-5d98-44f7-b01a-bb88115872da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac8dc4e-c368-4f09-8d2b-239d743aab8e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ea95a3-fd20-4119-893d-72d9b7271c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12066e07-da53-4577-aacc-34384e93e1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eab5082-2480-43e3-a6f7-aba55f038f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c4f3b5-4cca-4ff7-b1e5-2ea44bbaece9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a13edb-8998-4d9f-b3b9-20af1757d47a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c0542b-a8f2-47fb-9558-12062db80edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6191750-3d12-4831-beb9-4f2c98410eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbf638a-ebdf-4cb5-8345-22a926a3411d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "15e393a0-9b65-4161-b3a7-07a99a0708c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383fb286-5d5b-4333-b9aa-6f3bad5b2fac",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0704823-16e4-456f-b616-04ca9d8978b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce2c03a-c22c-4b63-bdfb-9cb7a52d03a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5e5ce4-3f5e-4341-99e3-4abd5c8cdfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cfe91ae-d402-43e9-bc20-37cedcdc20c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446e5867-978a-4242-a830-14d3e9081f1e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1409336-d4bf-4d16-8a98-ccba1b9caad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077a25e7-34bb-49c1-8837-7ce565d1eaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32ce85d-29e0-47e5-9773-9467748e2ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "11e29053-5757-4933-9f04-f1bbc27c7d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e11a52-c4ee-415b-8b40-6d255b35bbb2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f7cdbd-529f-44f7-ba4d-36e0928ac44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92a3e22-61c3-47db-8509-a81f2dc3ee53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f240177-444d-4b54-ba70-b3ec1990943f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "86b5f833-0d69-46b7-9bcb-cad240c803c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce2a231-4d8f-4652-b044-5d378322f77a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547c02ea-ce96-47f4-9c90-69d4d2a073e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01717078-c9a3-442b-8f9b-1ff99752b577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61b3e5f-b02e-4c75-8928-d2a77c550bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b7f85c-579e-407a-ab16-9c809eec0626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c449ead8-f370-478c-b9a4-4cd2eceaf946",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07599b5f-74fb-43cf-97a1-2e15b893588f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d5cdf3-b3e5-4884-8812-716075875455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13af350f-caec-48fe-be65-51a257709beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1d2a13-1f01-4a5f-b65a-421795eb9831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88d4524-1af1-4e07-8a10-13ba668eb8a7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac98f18c-20cc-4b3a-baa7-4f612131453e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913433e7-5d75-4c43-8859-5e43ae632f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3301f50-a309-448b-bf69-46fe46a04cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b816519b-962f-4d7a-8325-c482baaacce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b283f725-c355-4212-b8b5-91d7677b4519",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc162a7f-cc99-42c1-b538-a040277cacc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe0e5fb-8ffe-4b12-8002-1c24d644c860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995ad98d-0016-41bb-af0c-b04015a10bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1642cd6e-64d2-4c21-8476-5f0eaa9d1658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba40528-d33d-46ee-8753-0860979685d8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276adc0c-5211-4b62-be50-77f251e78657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3f4c51-04ec-4a35-942b-2dfd7206cfa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d150f8ae-74e1-4ade-a601-1a620a563994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f7c5ab7-a38a-410c-a95a-24483cbb9a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3993331a-9176-438e-87d4-ce99866ab0cd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df57d0a8-66ee-4048-9b1e-f7a85001111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45b2c77-6190-4164-aabc-3c5eeca98943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771e06b6-00e2-43b2-a783-2ed4185e0339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "420fddb5-b9ba-474f-bc2b-672370d7f11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd672c8e-2106-4928-872e-fcdce00cf76b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc197a89-451e-4c0a-87d5-ba60b1b314f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533d8376-e0b2-49f9-a524-9287d311c34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712d1591-3e16-4f0b-8459-5f8c623464b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c666d6-2d8e-4647-aa28-821862ae9e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ee9fff-a160-4d3f-a1ee-bbdf6431b163",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbb4361-d4c6-4394-b3ab-cc08190d0263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61906f8d-a387-4690-878a-ec253bd7f79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4b11c2-4fa8-4b1b-9239-c370ddb7bfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71fd61c4-a784-4448-85a9-15dab958d33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d7eed1-1dd2-4077-bacd-1ddc7a29a0c2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87e572c-1f3b-457b-bb3b-ee71d967973b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e42943-e430-4823-ada8-f2b6650855e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae133e3e-957f-41bf-8258-85826beee832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4425f726-9402-4854-ad56-dd219a8d8e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445d8310-4281-490d-934a-a46cf0815f51",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce70db87-099e-4576-94d9-86fa2dbb7a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8c3c18-fe87-4ed5-acac-12fcb6e35d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38ed347-30c6-4dca-a3b5-de726f9baf57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e07fefd8-1097-4942-9607-275bda26132c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c398e2c-10fb-4b92-b3c5-c866b1e7d6fe",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4a985a-fc4f-42be-8adf-07d9971cdf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cae8a0-b911-4ec8-8a22-c4646e91234c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393464e7-55d5-441c-b95d-3e3157e43a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2737e6f8-7644-42bc-bb24-2a57e9cea9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46092e42-77f9-407f-ac5a-387cc971b0b2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def85174-e876-4cec-ab24-1bb117fea392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12cb0658-9d0c-4479-ae87-d2ce18d5d8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a02f1f-13a9-48ea-9f1f-ce802c8ac5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bda65b1-0477-4b8a-807b-898554edd198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1652711-e4b2-455f-a5bd-9dc0b88200a6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0235a48-1290-46a1-a2f2-16ae61ff7e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fbe879-d1bf-49f3-b679-843c5e7a5794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1d230a-3d45-4eda-a391-c609209b4108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "945c60fa-7246-406d-8077-7ec5fb46c4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff6099a-c1e6-45a0-9048-13876b6ef8b8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0903d7b-817c-45e4-b450-85b42e5b6505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1113436b-58a9-4a96-923a-b1570df35144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ab0203-2602-4242-95dc-82cd8e6814d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca5ce01-30c6-4c24-b634-4aa17b95984b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa6d1a9-7f2b-4e0d-aa83-bc99554c4043",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9463f3e-f215-4cdb-9759-bbf0c6de1b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52955f1-168e-4ebc-895b-7fb6702bf406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec120853-d18f-423c-9808-f6276c0c6b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c897b8cd-aa21-4fa3-be4e-52f6b7ba17c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70374197-bd88-4800-8b97-4b998ad73ba4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4bf045-0aa6-49a5-80f6-4a5913bb3f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d78ea04-2816-4213-a7b1-a9acae482d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4e7163-dd26-4c46-a550-9607d2d9e9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "984d227e-cafd-4183-8c6b-5d413425104d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a471e2e3-0dc4-48e7-b36a-35af6c82ccf0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485c890f-1712-4f7e-af0e-4ef894b09d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d765f44c-181f-49d8-b09f-583c2cc72885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d340d4e-64fb-4a1d-9afc-fd878255394b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "090080ae-af3b-460d-a2fb-a7fc865ed01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddb43a0-ed21-48da-9475-322b4f4d979d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb6da9e-5447-46cc-a2f5-8650c1da0600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ce0b64-d630-4ae4-afcc-247a0e609ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04131a83-5083-4b39-862f-3849430d7066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "47506bac-7a22-4d76-9ac4-58f1cc399389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc1e3f8-3b6c-43bc-8a40-fb2a206719ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac23bb4e-833b-40ab-9c01-a24cc8ded005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6505c2-1b28-4efa-8766-8eae9e4f501b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f7f37b-ae9b-495c-99c6-70552e283206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "76fcb41e-b6f4-411b-8920-08dc27284f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc2afdb-b16b-47e1-8f63-6cd26e241258",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aebafcb-54b0-4784-993b-5efc1a9c7267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed36d484-7c37-4e42-95d9-f732c23487b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e90953-1d12-40b9-8f1d-4340dbd093cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7084cafd-5c95-4894-b328-3670b3b47e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3a4051-722a-49c4-bcc7-cd2d827194cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927fb254-6a45-4fa4-89fb-a1d854910b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e39be1-95fd-43ae-841f-24be818c38bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a27486-f424-4f03-9dd7-0efad293e66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0b4b1a-2c3c-4f55-b72c-908c04960185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d8b53f-5c5b-4f33-8b1c-4ca0e9ee1ba2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae824ba8-d99b-4784-b2f9-daedbb06b18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d111cd2-13ae-47e9-b643-c42294d3b621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48a99cc-a95c-401c-8eec-3deacb7aef7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8a5325-0f2e-42ed-8f2a-222383570c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37a1450-dc73-4ace-96dd-5a603e2dd033",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2181dbec-20d6-4a6c-916a-ba8308d74262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32712a80-2f48-4891-930d-6fd4871a34aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40157336-487e-4eb5-8f57-afbdb72d08f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c41d6334-7e58-4d2b-be49-717fde8379cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6999518-9517-4966-8c2c-5da3599ad563",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9b373e-6053-4f7f-aca8-024335537305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd03d40d-1257-425c-aa69-cef53c6e3da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15946215-5786-4e8b-adfb-95da000b0585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d614cf-d6e4-4d70-96b9-da1caf2ba8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4a06eb-d167-464c-b3be-f54ca7d368d6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bfcce3-f57e-423c-a493-c36272b7ee59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2261d694-e81f-4b04-b034-c7d3c2e98e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6246df6-6d1d-45af-841a-62bf1b1b321c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da3a04ae-f76b-41f6-8591-de1c8732da25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011c68db-75c7-49b9-8a1b-c1f50c980191",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad6d185-d083-4aea-97c2-bacba2f886cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9d4082-8200-4d40-adac-5b2775b9e786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d66e6a-90ef-44d3-b775-c1e881564ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed0b5d43-1b2a-4600-b4fb-14dcbda533a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecea32ab-38ae-40d6-a870-7a8cd8d50ab9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57008ffb-3483-4d7d-8903-3eb8fea2402e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adbf2627-e7e5-4795-a685-0ed0e191f1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b282bf-8078-4a9b-9019-12f8afe65041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f432e041-1e1f-4b6e-8792-a917924f10b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487076e4-be0f-440c-b133-518f89f259e4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a7bd1b-5225-42f2-9e7b-2a1170dc6028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3bf1a4-e0ef-440a-8b33-e490fc7f73a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c2f528-4b41-4c37-9efe-87d7e766563d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "331d59ad-05c3-4fd6-a235-89e542fd0f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8675579a-f06d-4a32-8950-ee9d4c3404a4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc37670b-462e-4820-8e09-df3725702bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70efb0e3-1e08-4814-b755-9658b7bbf507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857ae33b-e912-4abf-9ef0-5fa6c1fbf5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bed934fc-949d-4dc1-a5f1-0cb54478fe66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee1a347-801e-4025-8ba4-93826ede38fa",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3bb381b-fc5e-4a8f-8172-effa35b31264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a6439a-61da-43be-8296-e583b35c8e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f44965-36f6-4e24-a484-7cd9d6ba4566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ad5533-9f66-41d5-ba0f-3fe994a1a833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ec6ab6-1521-4e53-a8a1-1b6bca2bd782",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d148f4-8593-4b14-913c-86d94d22765f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d876c026-a797-43c6-90fa-900d84f72d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7972472b-eab6-4bf7-97c1-319de411d6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64038687-ca50-4337-bf99-5b0e582f6d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7428da-96e2-415e-be69-bf481a6dedc9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ebe0a8-ec6b-4915-9ada-64cedac8a341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09095f7b-5d64-40ba-a92b-784b2696dea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc3123c-d953-4722-94bb-d20781743d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0602d0b-4fb6-4180-822f-613169057c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dba6960-289e-40b9-8121-8f95b70b13bc",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2115b72-d1a0-4429-8b9f-ddafc29ccffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d829bd7-5e39-4618-89a5-73d10a1b9444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c331349d-906d-481d-9e6f-35a751666045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2361cc12-e644-4c9b-b818-f45acaeaac8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e6a786-902f-4dd6-a339-3e896ee76310",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7f1e73-4f8a-4a61-a6cd-df5f45c0aa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e368cab-7111-44af-96c9-3cf89e8d8054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba27dcb7-db24-496c-ad36-23fc42ff98af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef51949-ec8c-43f0-b18e-69663e928d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d15433a-94be-4e5b-b04b-b8cbdab78c36",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36ce040-4679-460b-b416-693d66897333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca89ee2f-089e-4643-af4e-472ff84149da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4549a8cb-d37f-41de-b442-591a8d7958b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3965c091-3154-463f-a46d-49640a2fb7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7335745-5dbd-4b54-8bea-2862b10c099e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364b561f-aeb2-4e6b-be55-3f561168bd97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4c5351-f4e2-479d-a034-34993e58e979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e86897-26dd-4719-bb2a-eca80a55231f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1760b782-6f26-4db8-9e27-dbb518f09e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6c1bc2-ec64-4ed4-b117-bcea98d66266",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d559c4-8699-4d19-9de2-eff71de0d1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115b5221-4104-4a82-bed9-0399b82f1498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca776b5-e69b-4697-8135-7cc504639cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be87d9a5-9044-4f6e-837f-73af6ab6ac92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cef9d2-f1ee-407b-81e1-5bdd60d42d7b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbadc421-f7d2-48e3-a8db-a33990cb133e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297998ba-9c04-45f1-812d-7a3a8ca9d31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef592a56-39a5-47a8-8822-2353b795de3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e07b04a9-5428-48d0-b8a3-ab6f4f157a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cea0c5-28ac-42eb-9427-70066e6e2711",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a81bf4a-c8c7-41ca-b924-3be65c1f96b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05e7799-1e4c-4ecb-922b-373cf2a98de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eaadff0-4af7-46bf-8155-95b6fe0a4c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5cd00fa-6c5e-4827-8322-cb9fac9365b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c81923-f0ea-466f-8fb2-bf76983899cc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcac6ef-58ea-42e9-bc0a-3ebd1cdac144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c59e51-79d2-4c11-ae7b-0977a08a91f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b610c73-b5a9-4db3-8c4d-59f13f31460c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b690f2a-490e-468d-b15b-6b86aafe5f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89869b86-c48e-4fad-b131-844ca3a148a5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0ae590-7200-4159-86b7-a9b5ff1abab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a3b7c9-3fa7-484f-ae65-c9b10a7a3602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebb8c33-64b5-4760-aa57-5536a807146a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "912637d7-bcd6-4035-824c-afa7ec34b0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7207e5e-aa1a-4dad-a697-200e460d7654",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a20e60-80cf-4b70-b17e-0bc03accc830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7af8e35-480d-4b74-bdff-c1e837512ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1bce85-c612-4a32-8c3c-6d900cf87c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a981aef-6b76-4d17-aee3-f1527f859c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5dd0af-0b71-42ce-b599-58e976b7457b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d239af-6ff5-4db6-9a38-11c2ad81aeca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def71d9e-f195-490d-8f13-525a9f730707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7e85cc-d310-4eb2-8e21-1ab2f5bfcfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42b8ed22-583a-4056-b07a-6b394c968bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014fd3b1-62fd-4441-a6e7-29723133f030",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b45793-ac01-4414-9092-7a23c7458f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7939fe53-7ad5-4b92-8683-e7d6d958922c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce22493-1409-4577-9afe-8002f48121b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79b52f4f-a3f9-4801-b90d-a805961948d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98a34cf-9d5b-4d82-9566-a25ebf091307",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947a7c3d-0740-4486-acb7-3eb92536dade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d3f09d-6fca-4814-abab-d34f033e5f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e7de5c-b4d5-42f7-add9-5e4bd1ffa30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "395bd515-c619-4416-a153-a6995c0e4970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80914f0-4ae0-4943-9fae-927a370042a0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46894a5-796f-4f22-b7bc-5ab874baf5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8a1db4-ca74-4236-8f72-6b306470372e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a26b42-03aa-41f6-89ed-120811ddedf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcee92a3-f6cd-4c7b-b018-6ba804f97b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b404319-71e7-407a-ab52-7048bcee9068",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca647685-af59-47b4-913b-d853b8ac95dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04f31c0-393a-4452-949a-95a6585218df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bace81a-7582-4d58-9c44-622494d08ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "50bc9b30-8ed1-47ab-b045-c715b0cfb43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c77736-8eb4-45f0-b871-ded33cbee292",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bb3bc3-4c89-4c0f-b39c-bd968d6cc68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce557aa5-f12f-44e2-be0f-a1284fa6aeca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce41355-d4ab-4fc7-ab19-9fc7247a2c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2623f3-fadd-4be6-bf40-beca5daf4acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edce6753-cbd5-4e17-aaa4-4191feea858a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a47bf33-63d7-405c-802a-422d702d4dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8700febb-14eb-4418-9aed-e3b5be8713fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d07a2a7-4a31-47c8-8392-7aabb4b2c672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba899ceb-dcff-40d1-87f7-0b2ba8e33f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75362f1-b684-4ee9-8802-bc55bc476952",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3341e394-9475-45a0-b56b-d8c57baed3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fbfe4a-aef1-43cf-9456-5d5d8fcbecc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16605ca6-b63e-4aa3-8e2b-b616c0b69e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d602527-fc9d-4b21-a096-8da3301b2e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b972b631-aae5-40e4-b4ae-a19dca76539a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a7c3e0-39a1-4929-aad4-ee99b549a149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a786aed7-a00f-4494-8ed0-9b4d2c6708e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b26665e-c4df-4a99-8431-f929fb6859a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce2f1c8-7c45-4b34-9aba-4fbb98a12d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f321fc-a65e-4051-b076-3d53812f7d20",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3039bf-f7d5-41cb-aac5-413cb6f5e565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e9ee8bdc-7e60-48d8-a904-0ca86a6651ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aced0a3-2ec7-4b58-9c59-fe44a57e4537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f124b4d7-8b17-437b-a0de-0b22a1726838"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2250795a-0650-430c-bcfe-8b335acb5105",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c92c238f-06d6-4a7c-bcef-145efe710c0b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9c146f-4e08-4875-9acc-529615f8c777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2462198-4e14-4df5-a97b-6c487caeacb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e60b253-5fca-48e4-a7ba-25ffa5456994",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd1a69cb-a8e2-4be7-85ca-16fc49615096"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d23c09ed-5468-44fe-80c8-ddfbc68b577c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68be5d16-9458-4ab0-8ae9-2e523f7719e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02b341a3-783e-4437-ba75-8ed2b4fbc764",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1881dc74-409b-4a17-b5f5-fbfb87ed2e9f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "434174c6-ee4f-4004-bba4-857659b357aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dce7cbbc-19d5-4cf1-8199-99ed25da217a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e15b08f6-a840-4dc6-9529-7192280e6b18",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68f5eaea-8771-486b-a7de-58acb694ec25"
                }
              }
            ]
          },
          {
            "id": "a43842e0-adef-47c9-90d2-cab5b7f0f747",
            "name": "Positive Testing",
            "item": [
              {
                "id": "77520fc1-a09f-4640-8889-3c06b400da35",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2fec778b-3bf2-44d3-9851-6b7302dae53d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b2acd2-0b12-4871-b399-cba22f95f061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5640d6a9-44c4-4e8e-bb1a-ff7d142cad0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f53a477-ca5f-4852-a4e9-d96191e3e596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c905fc-d3b2-4d0b-9ace-fead6cdfd8db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f884183-aa8c-406b-a52f-4fa5bdfc02db",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f766dd1-0102-41a4-bafe-c29e35994be8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39c08967-06c0-46da-b181-d22216cd63a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b2b3e89-ad48-44e6-915e-436178c5bbe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b4b8558-67bc-46b7-9b72-28801cafcdfc"
                    }
                  }
                ]
              },
              {
                "id": "824136cd-d12c-4290-bc93-19c4ae4a8425",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b80300a2-4016-4359-8592-e499d16b56a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8642845b-11d4-4c3d-8c44-3a6fd6ff6547"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1df9b50-55fc-43d5-88dc-b2bd4b58386e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c549fe4c-3fd0-4285-98d2-c1310f4325f7"
                    }
                  }
                ]
              },
              {
                "id": "61bd769b-d927-439a-8609-2ec396543ace",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f594c850-02d9-4972-a54f-89d23810a668",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c0412a4-5e24-40e7-8a7b-33295871925a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "818197ae-16fa-43e5-a646-1a192744d9fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "05d37603-faa0-4412-b617-ad1d2639cb65"
                    }
                  }
                ]
              },
              {
                "id": "58d21fbd-19eb-443d-aa63-99e66a44b99a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e92588b-2fc3-4475-a2f1-2b69e7bb6cea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7d78e7a-0cff-4493-884c-78dbb24184ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a05b2cf-2a80-4dab-a4c5-076519be6c0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5a66d69b-68be-48be-aeac-9b521ce614f2"
                    }
                  }
                ]
              },
              {
                "id": "64568442-7b85-43f3-af77-0fdf461c7015",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95dfb6d1-44a4-43f6-97fc-f3979907ae62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f9be3f0-6b36-4c80-af6b-40b2a636bdfc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a45975c-7e77-4356-a221-6f4c4aadd1c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c6a7559f-f5fd-4d3b-bde5-210e1c368ab9"
                    }
                  }
                ]
              },
              {
                "id": "bcd5272b-2b62-488d-82b5-7bfe34b60a03",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26e4fc1b-b163-4938-8208-4bd0808443ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21c39b02-e2ee-4f13-9223-ad744dcc186c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "615ec060-8851-42be-b02e-3b65fa70dd26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1fa5a744-fa47-4db3-b3e9-0b7d2903f024"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34c35a8f-2788-423d-9080-eeb9ddf948b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74c826ae-cc72-4703-8b83-d396f54ddae5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fbbb4711-e580-46c8-830a-f75bbff75dfc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a1285af-c0f2-45ea-ab53-0e885472b219"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9a53ab6-8e1b-4fd1-bd57-4d53b380e8fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f91ef11e-a61a-44fd-b206-a88bcb02c5d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "927e83c2-f1c8-4ac9-b78f-4db66d22cc7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1d73c72-c1f5-4796-8106-2ba50a7336c4"
            }
          }
        ]
      },
      {
        "id": "792b861c-43f5-42ac-93f6-8b8848e05ffe",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2017aa18-70f8-42b8-b602-3bd2e04f5330",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be6c55b8-7410-4c99-9556-f540cf9d190d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c3c14a53-0d9a-4af6-a411-4b89044576f2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172f4172-dff8-4cec-a17b-eacd00fc9b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7516a73f-2aa3-41b1-81c9-af0414200f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f0c436-ae63-47dd-abf3-f2506f7d8236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "298b4691-e530-454e-abda-af7d072f6bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d1c612-dd55-4862-a5d9-342eff1873d6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8becf8-d85a-4a57-b836-c70d56b4dfd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c0f7fe-5c9d-434f-8a54-6670b86d5985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1a3483-e32a-49a5-aaca-c8f4275c3bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1c281b-6832-4536-9723-a0373be4bb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db23773e-327d-4ed7-96b3-b46e589ac229",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b6ff0d-13cf-4eab-9024-7d533e1f01d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f17b361-2968-463e-89cf-a6bb4f7fd891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556d25c1-0750-4f15-b111-5d9890644787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdcf685a-b3c5-431c-8f94-faf9954090f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9764770-980d-4846-99c5-f152cc80f31f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd84427-35af-4ff2-8ff7-953bec8c6f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cda9a57-38e7-44c7-91d7-5b119f80f56e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf1c0fd-7813-4294-a3f7-1d384054d152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "612746a9-c378-46cd-aca8-53e82b8dce86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808d9296-d728-4b32-8e42-196d0558cead",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc23f07-c5db-456c-8574-276844300c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d626616-310e-4b7a-9063-65b3a0170dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdf2e75-9414-45d3-8370-5ea53683136e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a872c49e-4a65-4243-b774-ee490d418b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bc5349-e062-4b72-9e5e-7ab714a4f8e9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d503d5-dd02-4eab-99b8-a8d9fbc679b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec47752d-a25b-4299-9346-1b0fe493191a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa487197-efaf-4f29-9f6d-77187d39e5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f088b3-6c9f-445b-a1d2-39149760c3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6628e9e-6a3c-46d6-ab13-b3491e46dcf9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667bfdef-c6d3-4473-a81f-4408c8f04687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762f4b6d-81eb-4821-b5ea-a41001b11336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728f2c9e-18d5-4597-8d8d-563577a55c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "528c060b-c3b4-4ade-aa89-56cec19c8e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b41a02-2c52-4f6b-a75d-d48d25d2b80b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0cb9cf-f939-4d9f-adec-3c27f5c00b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e150d57-34bf-4108-9576-824d8f0f88a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8944617-cd0d-4fbf-9f0d-c8f531ce1754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b459ed73-7484-4290-9d79-68dc9bd3e85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4ec703-12a2-40a4-b812-3a236a60449c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895e6b9a-db3e-4858-874a-486a6d22a1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab3f47b-ea39-4f67-a681-e97faee67e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f950fa-02bb-438f-bf2b-8bb547aed956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c96583f-f889-48b4-b0d4-ee00b5177c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d321ad6-1043-4702-9faf-6438096c3047",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29fac3f-c651-4c4b-83ab-2d233fc52e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fea2c72-6883-455b-b4e7-4dd46222fa4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785acbad-1ef5-486b-a524-16417937773b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ef1177-3384-420c-91bc-44477754ee43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da282aee-bf85-42b9-a337-698e2e5fb605",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed863026-cc70-4243-80fa-a5bbceba0065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053856c5-fd6f-4859-8d0a-b202f6e843b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0abc3f-2d5b-4eac-9c47-fb458b183198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "23ae1ef1-2c7e-430a-9f27-2ec5a0afd767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8285e531-cc37-4dd8-be4d-49d4bd61cb64",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164df199-d9cb-4c95-a0aa-3694cee295fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30f104b-4e03-42d6-92a4-ad6963c61c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4286b034-efa8-428b-96cb-c11cea925226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6af324fb-04e1-4e7e-891c-ea69d283fafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede627ea-e5c8-4be8-97ce-be4810bfc0cf",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f0b42f-133e-458a-b348-102d5c477017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3801126-d911-4193-9bd9-8e3db4a5f1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0294c7b-f4fc-413d-b4af-065036108d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ff52df-a322-4926-b2e7-5da9fbb43959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a85189c-58ae-4753-9633-926431239069",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650af467-d09b-4415-855c-e4b6df638235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39c23f4-9039-4c3c-a1a4-97276a554b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc38f17d-d638-4b35-b110-4e552aa0b419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae31718-81d2-4446-824a-c20b75d30568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c458b2-877b-46e2-9a20-6d2276dcf69f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c6f74f-98c8-49b4-9f85-47fbe4190031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5e3663-4e2e-4dc8-b808-33f53ada36d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30cf974-e41f-4200-a96b-76fd5c5f4449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "583876c7-af71-4cf9-b9d4-66d5a1b956e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545e9f66-910d-43f1-a2ce-1ddc0d05a91d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10035c63-bea1-494a-b326-8e9d63a8523f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a97f45a-844e-4e3d-894f-1bcb08bcc666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a736157-a851-4968-80ed-ca3fbf277788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e059e1fb-47f5-44b7-886e-cc87472d02f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a0f884-70fa-4548-b956-436debe185c7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93bb7c6a-73f3-4857-b7ea-2e2e37f70c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36876cd2-7290-4e36-9bb2-9e201c6a8d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0ed571-ce1e-47d7-bdb8-d0466f94c8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "275e8f71-e747-420b-ac59-055c0227664b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05646d3e-803b-4607-b3c9-1a6171fbf145",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253c22c3-cbbc-43cc-8e9f-0a9db3163a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57dacbf0-18b3-4720-b33a-43cadc35f566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b976b73f-99be-456c-8e73-046cc18c08bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea19af94-ae73-4ce0-a947-2d3378489b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb18736-b27b-4f7f-9665-4cea7452ea33",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4ad8f1-b14b-4ad4-b5a8-bfd835c5ba0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0b9c48-2754-4cab-81d0-a4a4e3873681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1049d6f8-563d-4eeb-8771-0fdad3858c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c23dffaf-495d-41e1-92d8-da728325400a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e22edd0-ef4d-4005-81d6-b22266ffa74e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0365cb0-4364-483b-aeea-b33023c04c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81665dd5-f89a-41a2-9451-475405371129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6cd59b-1e5b-4860-8b8b-28291c9c4f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "095761d3-46d9-492e-bde8-beadf4153d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a579e57f-c389-4358-b629-290cd116baf2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153bac38-e292-4bfd-ac6e-1b039ebb906c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3d58c4-0f35-4770-a226-25de75446fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cd329e-a4f6-4d95-a2f7-3747a922ae7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f775aaf0-4479-4cf1-bf11-d3c8ef4d7623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c91af0a-3e6a-4c65-864a-31ea78df820a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4892c88c-1067-4bef-9e98-65fc1721ac75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bafc3643-7b61-4399-b2b7-60236e7c421f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640e28a7-edae-4db0-9f91-99d9a058be6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32faa5de-b571-4003-aad3-9b83f731fc0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864d782a-76da-4b89-913b-b231e7549085",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b30e06c-4a77-4275-8280-7071e6290bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14716139-2195-4788-ab19-93b871f4d7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4159131e-53eb-4d07-a11d-053c87eefd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7981c04c-6cd6-44d5-a7a6-018ec0b861bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4efff63-4205-4695-8188-237df690c758",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9cc049-2806-4832-8f4b-cf43348e95dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81756a0d-94eb-4d67-9b25-952cd65204cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dba7ef8-d557-4029-8340-47767675fe59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab89f514-8ec9-4e6c-9f3b-e013955e527b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba018d6-eab6-4aaf-bd3b-b9acfd5858e2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f10e3ff-730c-4cfb-9bfa-788534f70f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2960a70-9e43-4107-be7d-fdb5ad527e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9701061-37b4-4e4e-aa40-db56b174e69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8baa7a9-852d-437c-a05d-9c8413729cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e9268d-a30d-4477-9bb1-793c4eb7601b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b30b07-b9eb-41d1-8cb1-8b34cab1c767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0d9d49-7667-4901-b0cf-15bd5e89a451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd17d773-7e71-44e3-85eb-505723e94ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8331e92b-6a42-4679-bc6f-481fdafa9a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be1b56a-75c4-4933-9e76-edfecfcb3673",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8da17d-20a2-4aa2-8779-8683f6bc9861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f412cc-bec1-4edb-83c8-3a7a989e587e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5890f0d2-8d38-415a-a813-83a12ab6408f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e0a6804-7fac-4ae7-a6eb-f23bf912d632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53de8e72-78af-4f66-8ef7-e57eec6d65b8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671a85ba-ad46-4995-91f3-808da4c65186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94de3e1-ea87-4819-8bab-b476df9b86f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60030e17-4884-4746-848e-0cd5f44fe9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b885336-a509-4100-9035-bb2be3fe1d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee2c719-3406-4554-9838-fd9b16f78afe",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f01849-ae2c-479b-ab90-8354bf73754b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dabbf79-11f1-4529-9ac4-354bd810af9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1866582-81dd-4b39-b01f-058124f97dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47b6b570-cdc4-4a44-9a9a-5761d1f4527d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd83bfa-02f2-4042-aee4-c0f7e11388ca",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7f51ba-edfa-4a95-83cf-3ac9cc9822db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca244977-e835-4dd1-b900-797df3e54d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6d538a-7131-4bea-8c54-359aedaf0bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b48f15-bb63-4eba-b13c-7f9958c28c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4b2602-d9d5-44d8-a50b-4d5a9c7f9fc7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f961ec1-dfea-411d-b7c2-ace54528fb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c19a5e-1aa0-499a-9c04-4c5fe19ad06e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9599f4-a97e-4f79-8603-44edb067b0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0502c23e-4450-4030-a4d1-230c15dbc726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15ec147-12e0-4213-bd5b-10b35c2dd9bb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc0480a-e25f-4f80-b4b9-ce6990715842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64ad561-faef-4b54-8b94-617fecc32fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27ce71d-3af5-4807-883f-e6e2c550ddc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51f4792d-836e-4de7-99bc-03a4f191ed4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f7f38ab1-9d85-4779-9742-15bbea46fbbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1de16f3e-ca75-45d6-86e8-7cb32c69b298",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9c356e-e7eb-4577-802e-7de248cd03bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e2602b13-0116-492a-a38e-9fb0eec7bab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "552e8ce0-b614-4dd9-89df-9a93625f4376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4c990d2-66d3-49bb-a394-914b47dd0f5c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56861183-6822-4fba-9009-a8a2f67e8f21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a05d4c38-db2d-4859-82e0-a9506d494f47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7982f496-e2f6-459c-a28d-bd347d51cbd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91d7dd36-f962-4c9a-aabe-ea00b8b24431"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a29e672f-b0c3-4b33-8a64-ccd71bf040f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "71dc5d00-99e7-456f-90fc-972593277124"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f10e330-faf8-4cb0-a7e8-8b39552f5f47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1270a33d-1cd6-422c-8ad3-dcd6e4180016"
            }
          }
        ]
      },
      {
        "id": "86e2c582-1161-4331-a597-2977ccbe3430",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ed60d240-b339-4ada-935d-5b3a872e63b2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2ca9d60-289a-43c1-ae69-25ceb99fd6b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e2a153cd-4b7d-44b0-96a7-c5709f904e21",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428b33dd-4833-4103-bcd7-f52788415331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387b39e4-d631-4a0a-9b17-1ffe487f73e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e8412d-dba4-4d69-9f05-7b7f20fa550a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa403ad-a2a2-4e55-8af0-d1a36193e9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d81c5a-25d8-4b3c-852f-55501f0810fb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8299ca22-a562-4999-8bcb-186826bb913b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016a0dae-4cc9-4d28-97e5-5a0295249658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489c3819-d6ab-456b-a32d-666565e02498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe03855c-7a8a-4fba-a87f-e41180d95760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d723fc98-6f6d-49c2-9c63-2d85fd92a1a3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6fae77-2f2a-4d58-8fc6-dd33b1b8f0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41fc2b9f-cc7a-46d7-a7a2-c8235cde5ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a5adec-a9c8-4e41-bd13-694da7aae9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "240a7f89-ff97-41c0-9231-42f6de2e9428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39363562-8005-4c66-92c2-fd8ef66bde5c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68749c0b-5e6a-4729-9cd2-7d09c6525638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d4cafb5-03dd-4889-b56b-9ffd43a850e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9ca164-dc72-4cae-81a3-e96f0ed763f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2551e35f-097c-47e3-b4fc-b3396809b1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033ece60-dfb2-4ee7-b0aa-4933ca79899c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ba64fe-8f07-40cd-a8ac-6ea0b9849ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dcbceea-f91a-482e-a6e9-359601fc1c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9035ef46-fd87-4cf9-820a-841a0bc90dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5baac44-1dab-4a51-a43c-e978ef8c30ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5eebe08-c5f2-4087-900a-9a642038d749",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4102bd6-2335-48f9-850a-45cf878e5a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65f3c0f-480a-4a64-91c7-8f199fa82f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b2b92d-7f5a-4cfc-b7f7-a9680afb72b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "614e0882-2c56-40c1-83c5-a5fd62c40414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de682731-887f-4f2a-8727-0002369b508d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9eb8f6a-26c7-4fdc-8e70-9719795c5995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe87a8a-b886-4fb9-8ab1-883f55fc03ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f68dba4-5bbc-41d2-8911-8ce88b45c19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "51366459-138e-4f6e-accc-55c0af850775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3609b2-05a7-43f9-b7a9-9c1f2efae9d1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5f842c-6b3e-419b-9396-9f1dc8859656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452c54c4-e688-4d77-8b30-f5725157d2aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b281ad-38fd-4f74-bc0a-32ebb5418945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d91f7a-843a-414a-a30b-ec5801e3190e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eea8aa9-62a4-417d-a4cf-f18d971bee09",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d89d4d-8ef3-42b3-baf8-22033f8f611e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4452f3fe-d26d-48ee-bafa-a9953b2d3e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1fd264-3e45-4a48-a774-30504f80a823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85616870-c752-4099-929c-e0244239bba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76f669c-158d-44b8-9b5c-0b09e3bb4d78",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19aa2f05-f3d6-48a9-8469-0287c93103a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f683dc7-add1-4625-89cc-59684e4c5bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7414cbc-cbf7-4312-8d89-c50335435809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd514da-cecd-46b5-b1e3-7b6a4ff4856d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d209c4-d94a-4280-a77e-f871252cbea1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bc8376-1c12-4071-aa16-7a91c823ddbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78795d35-3b9b-4305-bfa4-b1c808b181f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff3ef1b-5662-4631-9bcc-4ae44d0aea31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2f31971f-7161-4db7-9b1d-ca223c134e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189f556d-04b3-4bd1-a630-2deb2447362b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7368b90-cbaa-49e0-842f-1d5d8c1a7f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685493d3-0f8f-4481-b14e-b594510e679d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ebe46a-aeb0-408f-a4e0-ebabd719d21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a1ed1bb-d095-402b-a6b7-8522e7dea561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13b9fec-a2eb-4668-8948-f7a13b71e24e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816c93e9-dab1-4530-a7af-25b321d0dba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f506e8-1a8c-411e-8f7d-a2cba591ca8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852caac8-2e29-4e8a-966a-397dc0387341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9258260-a8a0-400b-b134-81ae2085d732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ace0a1-15b5-45cf-804a-cb52d14ceca8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4ad4d5-4691-4d3a-a8af-c8ed50353694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e604ef-1824-44e4-8b99-4c15800c205e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125c3670-4261-4bb7-bb84-5be6e98b516a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "417c409e-7676-4ebf-b668-2223367a73de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e345709-7ef4-43b2-9ea1-1d4fa9cc5a70",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e42d09a-c99e-4240-ae34-095d4c683eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb96106-49c0-4863-bdf2-bf25859b33e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb28c00-ca5a-4753-a6b3-a05ed0985508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "212563b3-3f0e-4c3a-b7f7-b74711da7e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976e64da-267b-43d0-9aab-69ceb5a5a5b6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489bc742-a299-4d3d-94cc-ad21ddffd1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a4a86b-c885-4b3b-932d-12e7ab3b0ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7492689-a23c-4cb5-90f3-92853ad1b1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "41fc4e3d-0356-47d7-851a-4f00c87704e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d95428f-d5b7-40b7-8561-0307dd1d7a84",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bce082-c3b8-480d-b433-60fa5fd904bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb2b1e6-d78b-4492-9527-a76a7c834867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b0efb5-4123-41f7-b0eb-e42f11863954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "59e7fd96-4400-4d46-a132-e1d31591b9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9872e01-704f-4119-bb93-57e12fb41988",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c309bbb8-d861-469e-93a8-529318c9ab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd3b2f0-ef11-40ed-8179-a540fc364e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca5e528-3946-44fc-8996-66056a2ed4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a63c93-9596-42c8-8b87-9d988ded4864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1480bab4-01d0-490e-92fe-c0e8d9a282a3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8421e049-eb33-471c-8933-7c0f66b576cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c542975-4ca5-4595-acf0-581a0b292eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5682b6b-b404-4537-8d3c-0b012f71bdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "846d5495-260a-40f3-8e42-8682a0962fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c22489-abc4-4b51-a87a-758d8959b546",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93954c3-c858-4ac9-a131-53bf6fdceaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5f8f12-f4d9-4ca1-8ce6-c7b27e0ca671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a46a6a-031b-41b9-b885-5a3ed2bf01f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8782688e-5ea2-4362-a73d-76e06c9fade4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7453cda4-a4c7-45eb-897e-935765b40fb0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec02b6b-194b-437e-8f4e-08bae96bbd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e450a679-e78a-410f-beea-fb02651892f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9b1ed7-c121-4f12-95c5-819ce76a3f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32717a3a-8c33-4700-885f-1458d36cb921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a295931d-d1d0-45d7-b27c-14f96c3559cb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd73390-8a05-49cd-bb1a-8b8abefd6b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61978a01-6b6d-4d17-bcbf-23afa08846aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4256efe-285e-46bf-b48e-bbf5fa71e298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61cadd44-4f9e-4d61-94b2-145e53232576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800c88e4-7290-4907-9986-77d49213f196",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423324db-6b53-4930-86c3-d75f4f3cc758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87998d16-f06a-49ab-b0a0-92182ee8dd1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d50f559-3104-4690-b682-e3aea09dc598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbee2a5b-0348-419a-aef4-0663de02061f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9496781-ff0f-44bd-b397-2b74fd177b42",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62c870a-cea7-4369-ae7f-816aa652d07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bf524e-b8e1-4eed-806e-0d4a3ec48ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20beb85-080b-4537-84f8-9b6348332649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7209b183-b374-4e91-82a0-0249fea0e3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5724a461-fc33-43a9-b351-eca9cba75cb7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f72897-014a-4a03-8a86-c3a2eec9199e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ea5855-1827-482c-860f-63e524a6f301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacdfdb3-50c9-4969-865f-06cc51ab6e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea46e548-bbf3-4ce5-a207-77c70334d82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f877e8b0-6a57-40dc-9bc6-80ab34b4690f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757b07b7-a69b-40ff-8d79-2687906c99d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284de091-628b-4576-8f78-90552ea51e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc7cefb-fdc8-407f-812f-15261aea1f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad32810-6691-48c1-9132-3acbdfa459e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b07cb2-a449-43fb-b2f3-ebbd330f0ca3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d806ac30-7e0d-4ad9-9cfe-af3ecdc61d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa34c60-daba-4009-b221-28959f899287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d349cf-5af4-4574-8cf7-fcb31b593a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31e01d24-a58c-4a78-8e28-f180093c2ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634f8d16-1b91-40a6-89eb-a2ca490bc513",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53aa38bd-9153-4537-a968-3c754e512df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f0545f-2b1c-4cf3-8108-35681e38d7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4328419d-7aab-4fec-be58-6db005e50b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f000fe7-94c3-4034-b873-93a0b0694451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb12a253-3c89-4b5c-89a7-2ab08e003a42",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12aa6afe-3199-4fa5-8a3b-aa0d9c9cbe4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da5e2d9-d1d5-4bc6-8a5c-a2171894c033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c2a9f1-a05f-464f-ad7e-af7a37ea41e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fc4b4d-907c-40c7-9791-e2818b19d7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227fcfc1-4fc9-45c2-a2b6-96830209f4b0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0a7714-bc07-4a0a-809c-2b79d5fd1b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ac1823-cdf1-4180-8b71-35400b34710b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e121dc-9842-473b-9085-ebd63c2e0046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f47d6991-afc9-40f5-9ada-9fc70a320c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5b9576-257c-4a4c-b55e-75419dd675a6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6efb36-f023-4e8c-a8d6-1d4e92256e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8d980c-0818-4a0b-b691-dd6508883478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032b4725-e14f-44a4-8d30-1bac9883a246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cefc5ff8-d29b-4fd7-8dff-8963c7341c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2526ba-5b3b-425c-9902-885534663f2d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7cd938-0c86-45f3-9176-3e5f10c7f8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b8201c-a33b-4d92-8d8c-204f316bd874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564274ff-06e2-4f48-9215-93bce14fa64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e223f68-9298-492c-8c9b-56f9c89d3dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c38d426-ac4d-48bc-a539-3255d9b7bccc",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04f5cab-b94c-4159-9c07-5f36bde111a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53f6442-fd55-4e96-9e58-b784c3d401f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f449d12a-6215-44ff-a471-c8ed7e494c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e5c37f-a0ab-41e5-80aa-119d96512513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0ced53-6a2d-40df-ae25-bdb5edffb07f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf35cda-62b4-4150-ae53-3a82b6b1e73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff6f04f-45e9-447b-95d5-fc6664096478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74818ed7-27b4-4d47-9be3-1f058d40e377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae254db2-a040-4118-881e-8aa6471877cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5feefaf7-951d-4728-a44f-145642efd170",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938b9b9c-520c-452e-9838-35359090d90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e546c72e-e450-487a-950c-c264287a27b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ed2af3-6fb2-46a9-8c49-3a873eb23e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "523c2ae4-659c-423e-99e3-6fb20ee43b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840d4636-eed1-41c7-aa3f-12b6883bb2d9",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9ed28d-7fcf-4aa8-94ec-11bf823c1ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dacc29a4-9e7c-481f-9c4d-2dadf7e336f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81da247-7da7-4f35-860d-337abd04d0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab97ca57-98af-4d2d-8902-e4801535aca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d9808e-81c1-4b8f-8039-2ec81999a694",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c18138f-0c00-4a4a-901a-982eac37c120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbcc028c-fba4-4cbd-bd1b-3480bdf7962e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43eabc45-35ee-44dc-809a-5915ad84d722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59a68082-1068-4d3c-9eaa-42e42bddc73e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3a2ef2be-31ed-4f8f-b337-e28dd1e31d33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27492572-a398-46db-856d-2cdfc3e60c0a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e97115e-0ff0-4a08-8108-ff5e442647fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5960bb8d-84de-446d-b3f8-b8bea47b5f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71b0eef-b90a-4637-89f4-2809f5fc7e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46096dd4-ff8d-403c-a778-3e1851241a7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "998cdb7c-d905-4d30-a764-9326c284a26f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "172200ed-336c-4f8c-af95-ffdcb4ad35ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f0f6bd7-101d-4b00-94a7-4e0cf2ee879d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "916287e7-e0b7-451a-b611-04d66b8f7052"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b7a75b8-79fa-46b9-8b6d-68e69515bdc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "92d8184e-6242-40b6-9a82-7641fe46519a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c812889f-2d69-4b01-8fdc-d9a71dbb32de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "103e59a8-9c5c-4d75-a917-fa1d58d77835"
            }
          }
        ]
      },
      {
        "id": "262cce93-1c9a-4991-8b75-174d865d11d7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f757d4c9-b721-4830-846a-b3b673c0898b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b3ddb8d-03f0-4694-a22b-f59747b58343",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3eb7c431-1649-45a3-80e6-2d99606c31e5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2026a8-febe-424d-a99c-6b4bbddc5b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167c54a8-b1c4-4eb4-8444-8b34901ddc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe9a780-2db1-4135-8c3b-214d74fe03d5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99345a3e-902f-4e93-bd2e-fdb261ecf5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6cf9cd-90b0-4207-b0ac-8386901ca4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee90de9-12e6-4e3e-939f-27f484d9a900",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa750997-3314-42fb-88fe-36c8e73ac629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714878c4-77ed-42ae-bef0-29ddddf96835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545affd8-66c2-412e-acd2-221950413d63",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c4d40c-12ee-45b3-b0fb-cc40fbc4c9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2beed70c-39f2-48c3-af79-68135c62cd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4504f1b-0991-4bba-b15a-88eb9c5016e6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e976b5-3e01-4069-9c6e-49790b6ef167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2f9315-c112-4228-bf8c-04bcaa1bc662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61606208-391c-49a6-96d7-c2916098b765",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706a1de8-af09-4d40-93c5-42aceecdc4d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ed109f-ef9a-42b1-9330-cc4785970d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cdefb3-3c44-4ece-8343-9ebe7442473c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928e301b-b76b-41d9-8529-d675584acc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491f3827-b86a-497d-8ff5-effa78b5d408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddaf30c-90ae-4f4f-b18a-4ffe0898aaa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad3aaa6-f0af-4244-b14c-19a533043c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cb411c-b14f-4e93-9dc2-77b4c59f0dd2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24eae9da-74b9-46b5-b4c4-f818b3a0cc08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "304cdd9b-050d-4787-86f0-fb7d0f8d3c84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfc0119-f298-4a0c-8cff-30cf201b72fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf38d613-91f9-48a3-88dd-1b4f5b749f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cca742-b761-4c8e-be96-d0ccf7112620",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f96be99-d0ba-43e0-8c11-f9c7180b7a97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cbdf921-c4ff-4448-bde3-65e64a997d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ea7290-b2ab-415f-9cfd-d2897a94b951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e271e934-1488-4a3e-b86e-65af154d548d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7ed637-0b10-49f6-bf7f-01bc8b9a23a2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9672d4b3-ca5c-44c1-9dbe-ee52af880381",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "710b0deb-9efe-4ef7-97a5-0fdb7f316c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2b94cc-e07b-43c2-ab02-cf2be5062a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7459f6bb-b1fe-4b4b-9573-8e981678e52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18b5a20-151e-4701-8997-7ca318ce472d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c8f198-e191-4ed4-a1a7-0d9446a5f27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b98fda-1a60-4fd4-8b29-f625f13c63ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa8ee44-17c4-4d1b-a7da-cc8795ddc818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c64b590-c8ec-44b0-bf5e-273ed3b5a2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a2739d-ccc8-4d6f-9687-884d1a144225",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498560c2-6877-47e6-b6e7-36243062c088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec2d712-f658-4461-acc7-b32506b3b0e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3c9524-f449-4cea-9325-4fd2caf3cb9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05547459-3a90-4f7a-bc7a-12e50bc685ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e95dca9-d2a3-4c9b-bf34-203302c58324",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b4d1a3-afd5-48ee-a186-cca621f7ccfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbd6112b-8b06-4656-9848-eecb0cbe404b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a989e6-30ef-4d1a-bb1f-eacd3c100d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9919218-1dd2-4542-bdcd-569762372289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e254395-ffcb-4259-91b2-d528d0e1a6d4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93df84a-3325-4f6d-a348-acc5d4a2d82d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f9484e-091d-4365-92a3-ec3de572bc63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "076d1a21-055a-4b7d-8bd7-0de7471bb322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3416aa-1cb5-4000-939b-ec79b3b26184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23144bbb-82d3-4794-85b4-b63b075bd2ee",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a32588-5d83-48af-8c95-cbd1099f9e55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de45ac47-cc7c-4a33-b97a-c10d0502b3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e65afc-6b1c-4b0b-9967-70639d33dfe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d994e8b-ec03-46cf-88da-4bc28d6419a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7863758d-d7a5-4879-906b-777af793def4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbf0b4a-0917-4b56-8565-b14d69f39cdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "172003d0-3959-4105-be28-9c7e3de27ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da1e5d6-0772-4a3f-9bab-104967153908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88fb9761-7b94-4573-bb33-bebe1a994405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cc30e8-8144-402b-b859-06143b1f0532",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff3dbee-ddb9-4c3a-abf2-b614f99380a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e125752-f7b3-4005-bb51-0fb4fb79cb01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b88dc18-185a-4bf2-bdc7-7552c5b858be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10428a4-885e-4d55-9d49-3212fdc22e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dad9f1-2b16-4ce0-a38f-a7d20b2e8424",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e6a22a-d3ee-4d61-95c0-1d8538f6433e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395cb5ec-5dd2-4950-9b3c-359d50918a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a56117-9c18-48fa-856e-e5a35d5c1fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ad23eb-d75c-4ec4-979d-1cfea9d9e563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3fc01c-e141-44aa-8f88-bf055eb340d2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65275e9c-6fe7-4de5-bbdb-c6c966c15873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41203e6b-82d8-4af2-ba1e-6b175e511d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b71d21a-10ee-4dbe-842c-3a7586e472bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc17cb6-1452-46fd-ab2b-891ae64fcf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7391029f-d45c-497f-98ed-af071a1cdff3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2fd9e5-06cc-4f73-918b-a1080669e369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31cc10b-258b-4a52-a421-6cbf82f036e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9b4bd8-0eec-4f11-ad91-fa224ce3b1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2a88db-dfc8-4595-884d-d9a99cbdbf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87456c1-11d1-4d3d-8aca-2e1841b54e6c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3fb1a0-da75-4ea0-92d6-0b8c598ccc59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9510f7-a647-4930-a514-7782349aeb26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038d56a2-afc2-43e8-a513-1f31d15ae246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f645784-a58f-4b36-8c40-9acff93f5b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9324469-dc6c-48b9-8809-4b076e75bdc4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cf89b2-389d-41b6-b83c-67ff264a9e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c228cfa1-23b0-457b-b0f2-01ed8a33da42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6ba7ca-66ef-4cd0-8494-e107647283f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8539374-af59-4533-a686-d05212143989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2be8deb-efdc-4174-a7c3-6fd87d72a0a4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30873a18-e802-405f-887b-d08713ebcb0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a54ecd-87fb-4cdc-82d9-942c567e9f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c769b3-5192-4214-a218-2b2b433a3d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe09d132-aef5-4b1e-aa73-4565d6b3749c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b736a9ed-c2e3-44b8-8a47-ede25f30a4d8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ffeda4-bc7e-4c8c-a44a-d45240efed50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe05c2d-d295-4a29-9578-ba40d041a632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10e201d-10e1-4b50-accc-eb05f562da4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e80833-a70d-4d08-a8fa-ff97ee809d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aac80c3-a3c4-4c73-9ceb-5cac42adfa5f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b63791b-85ac-4cda-b952-155712443852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de119c0-61a9-4a24-adaa-92148c64f294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d4b5db-b7ef-43bf-91a9-5cdfa53c5fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988de27d-86a5-4618-8b6b-973e678a51f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1969efd-d033-4d28-82ff-fbdf4a25c776",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d2177d-cbb3-4c34-afe9-9579ea678119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a296dea-5db1-45e3-b05b-6a52c5443f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92df85a3-b16c-4f4f-ab39-cf9bb8c22e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1958e71f-86a3-4618-909a-9feca1c40303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7d6082-637e-4fc3-83bc-337147e17cd6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1772b8-7cbd-4024-ad3d-a5d8c642267c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8915785-56ba-4494-93f8-b4d624bc0116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c623d27-0716-4b7f-a4b9-1d7e5d56c017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391fc2ac-4a07-429a-9434-97894d3e7d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5751a3e0-2b01-4892-a272-2a984504d2da",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc01e94-c0a8-4d2e-b709-630131b02a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9aee87-0898-470c-a815-71037d8e9e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf299ab-9dd8-40fc-94f9-4c9aa0d825ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a8ef2b-8f96-4c72-b6d2-994f07f42bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7fb0c6-4730-4107-9917-b8038a9a7f41",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48396f6b-bdef-4860-86cb-01e2ba99d469",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5303f586-9f1a-434c-a507-8fa3afee7d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62127e74-03a6-49fd-8f67-25228650aa60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7bbbffd-7c2e-4098-88b3-cfbd7a1e3bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d888be4-9120-4fb4-a64d-a618e011d71a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccd8149-dec2-4944-820f-e79f8e7f9e8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77fcbebf-c94a-44bb-b2d7-486c51a75232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c3cd3c-ff6e-415d-9763-6d258ac25ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f252b4c-266f-4b0d-b9a5-ec65321345ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5714751f-f51d-4f8d-adc1-045d9e255440",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70c0766-fb0c-4ace-9c7b-775c5e6efdbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53ae922-c57b-496f-8752-23cd8754fb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a96ca4-c0f5-43c1-86e2-49f33a5157c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad49071-56b4-468e-b433-d757ab05e97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669c58ea-2378-447a-9681-ae2db31d106e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e29df5f-7315-4d02-b6e8-09a285d6327a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a734fb4d-4602-4322-9903-3e550f7bf028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9284f0-d04c-47bf-942e-943ce77e386c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2400bea1-3581-4268-9818-f0149c972dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76877714-04b1-467e-a37f-69a42a7925ee",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66bd24b-236e-4d17-97d1-e53d4fda738c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a8c6223-7460-4c47-8cfd-b3799ef2932e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a74a4ee-83ae-4eb1-91d4-0ec64a362d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796f0160-295f-4ecf-ba0b-b66139807086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cfbb5d-3985-4b4e-b860-78127614915d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508d37a1-a686-4be4-9fb8-9c5607a628ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c258828d-5023-4872-9109-4d0600ce1409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e913e33-40f4-489c-9fe4-a9a69facc606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5023d3-451e-44e7-9629-e7b8331c66a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbf5a79-7bb4-4d83-9b2c-d2c339651a12",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f41b1d-bf6d-4944-a8c3-5f066675a9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312c772d-9c95-4b07-b4df-0d3d056dd830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4f3808-6d1e-4ae3-bb17-0d16c0d7af43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696e07d9-f3d7-498e-bd32-01679898fd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ea03bc-7d31-47bb-88f5-464408df88f8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cf9103-ba6e-4112-8237-2f17732eceed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19dc315-f7ba-46f6-a8da-102146b0d341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95249bd1-98b8-41ae-bef9-470379c793d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52cd06e-e9f9-4fd0-a2b5-444f680cf10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf72b98c-82a0-4088-b499-ada28cdefff5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d47a18-f8d8-4c72-b86c-0d4696cfb333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bef35d7-a010-413d-8ba2-4ac65e3296bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62aa7ff2-3765-49f0-a3c5-8574f69f6879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daab7ead-8f78-4e9e-bdc2-4a0efdf1c5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf518598-910e-4125-9b7f-28c9fa921344",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3760389f-920a-4cf2-a15c-cf1881a59f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9cd036f-a8f7-4197-9e25-599a4ba1d6bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6f71c7-f25e-46f4-95ea-78adb061ad3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502a6db8-2fca-45a4-ab5c-d1220b30090e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cff11e5-b226-41b4-954f-75b333fc8af0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3049b11e-b723-4101-aa6a-0b571d16ffdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179e0dd0-12d8-4ff5-bb59-bd8b932c14c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38daa397-6b4d-49e8-b657-a9858a777474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc3cfb4-e7b1-49c5-b6da-3fa49fe01dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0d4045-54b4-4376-9636-daf1793fd61f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0071535b-a581-460e-a3c2-6bcb26540572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83adcdeb-145e-4b90-944c-9673b5729ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2355e398-a114-4d04-8f86-016febb0fce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679d7ade-4841-4495-8670-f66497a38e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f54ce4-da1e-4289-aaaa-0a863ab47ca0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2ddcbd-851e-44c2-8a9b-24fd42ee9131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94188646-aa77-4cda-8eb0-bb03d781cedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc43152-f401-4c66-b70f-a5bf897a6233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494e77be-1734-4b1b-b5f1-de5c1b3dd6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c69b37-56bc-47d2-85db-b5795edd823c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79d5dab-d7e6-40e0-8e49-c611abcdfa21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44fd03c-12f2-4ff0-be10-b9b2d0aaf78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8313129-9368-4359-89a1-05760de92b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec1efa8-10c1-4cae-8c0d-fbe3791bb220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455ed501-2b02-4272-a7ec-9a51bd0fa154",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a65c60e-0ef9-4b7a-970c-b2d6d5f74af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed917b2-c3c6-4ae5-bdab-b87b2127b154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232add0d-f2ad-424e-b6b0-72f98042aa9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d0c203-d851-4cd8-8936-89b757e575fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401d1d4b-503a-4edc-a5a8-be7bf5b3bdfe",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd56fe0-2449-40f6-b9ce-7d1c79801117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87535e20-8f5f-4f0f-a7ca-6401ca8a5909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1ab8a2-4820-44bb-aec8-73ac1761e5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b682b2-9c2c-4a0e-91ca-20c3f406a313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377f4178-e5d3-459b-857f-685f0860df1c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f6b02e-c33b-4691-9086-fa34bf217a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5926b486-a549-405a-9def-3d97e6320847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "953527ad-4a40-402a-ad70-60bdcec8f530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5f756b-0846-479e-97e1-e531408ddf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f264854-3391-4862-b73f-2a596d1141bd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c83bfbf-8dce-4ee1-b1b6-0451749c55c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a5b8b7-d7be-4acc-bd9a-d34475917f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4aa55e8-caca-491f-aa32-74516bd618aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0deee64-3e4a-4e50-a806-3f6b311a441b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ba72b9-b429-4807-b911-6a341c1fd588",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e489eb2-f86e-4859-8373-3eab10c78422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16c0062-12d0-4540-a8dc-725af4869701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b74f29-411f-47e2-a257-d592c9e40a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74f3fd0-a1ae-42a9-ba2e-0ec5f7ba110c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454e3243-0d69-46ce-bf01-47d635b66fee",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e24ee64-ea88-4173-955f-14273736e9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ac3d97-a06f-45ca-a0b4-533380407f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d2cf62-87cc-4ddd-bfc4-ffb85d7cf21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04eb9aa-5783-40da-8c6e-2c36564b05bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449cd33b-b2be-4771-a927-e431db81f065",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709f8ba4-6487-4f9c-aa72-f0ad10186cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b455d93-16de-4f43-9c0f-db8206c75809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba69348d-c88f-4d69-a427-7f64d0ebdc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0c793e-827a-432e-b479-e5a0efb03274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340ee713-79b9-4df0-91f2-e57c82c201b1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15cd6e2-5cb0-4f30-8450-5752c9bc69e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a5eda1-fd7b-4935-b757-6a6b7693c134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d0d737-cf54-45af-882e-3c8d7e5d519c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ea62c9-900e-4931-85c2-256b15362618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8bd6672-2c45-4925-a78b-fd72e084c788",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a75dbbc-75b9-46d1-b5a8-2dd456edc4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4601cea8-88ca-4944-aa90-e3c8bbe72325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e6a773-3faa-44ef-bc5b-25bf38b149b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da77c02-e651-4bd2-8cb5-f2880baaed1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa21fde5-a512-4579-a33e-509ac158f79e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7babbe4e-cb4b-4b31-a3ca-30f640de06fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554a3db3-db88-4cb5-a962-e0456cf47bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd34700-f95e-4c72-9cb2-cd8715653fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430f8fe5-0d7f-496d-bc61-a535d728b334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43c036b-4213-4bad-a2ce-6b8097e39790",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb790dd7-b827-4bdc-b794-2c092cc0f999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a048f56-dbb0-4dc2-8e28-b9863dce4baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3bb8c3-6134-4972-bdcd-b5bd667eba34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eaf942b-c144-4d82-8e7c-48aff13cdb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8c7338-5ede-43a4-a0d2-a889ad8b3f5e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17066116-4dcd-4022-839a-563d1df3a718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b003805-ec43-430e-90f1-4470c9d57171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacb8da4-d855-464e-aa53-b987948a16d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6a3bae-0f9d-44e4-a13a-73afcac654b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa8d4c4-bec4-4f48-a728-d87f7e842f3e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88e9173-febb-40b4-bc82-5b790a60ee47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb9f91b-8787-4eb9-b50b-1ae1002e540a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d270cb-06fb-41d1-9048-8439c7b02751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298eb45c-2921-414a-b12c-af5e0b9001f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445d8b33-36fc-4fd8-a4fa-552d63b4bd83",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721f4a88-1404-47e2-8619-6b2e0842578a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4716eb-4198-4bec-a44c-6759761f12f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3dfbbd-e337-4e73-9f5a-585cc969218d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8fd372-618a-4df3-b4b5-2043f04cf474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55223061-5fd5-41a7-9c96-e358e0b71c82",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755c3675-4d81-43f3-ae69-7424a8175452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c6f876-b3cf-4356-adcf-3831e4415634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfd9b5c-b568-4e32-bff9-f55482d91318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82dfb4da-aea0-4171-8e6f-414609726a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e07c21a-e3a9-4f01-b3f4-dee8942abfc5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73608b2-9808-4e07-8176-8a29db8e61a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f512cbf-f0be-4b3a-ac4c-5fd400b6e914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdd8eb7-6b68-4578-8575-883b4ca7daba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbfaae7-c278-4327-a9c5-23824a6815c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d962744-36a1-4d2e-aaab-87a3a59a9ad5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c67a486-5452-4e14-973c-9de8f5d4a5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7b34d9-86bb-42ef-a7b4-c59d4071f983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6df859-d5f7-4dec-adfc-b1630e7887f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac8a788-0f0b-4ff8-8c68-6b5a7807a2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4ce4c8-c13c-4d24-a6d1-e7dee8fd657c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d70d988-0f5b-4c0a-ad10-f69bae2e46a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35eec9b4-1dde-48e8-afe8-3fa4ad2cc4a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9134a87f-6465-4d57-9e8d-0982ab90e872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49885b9-5a52-452d-80bc-38f3803e8f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b97e760-6e1c-407d-afac-bc77d7683641",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ffe314-f898-4ee9-87a4-b0694d99a43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e67661-981c-4e80-b8c9-821205f6c8d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec2f8b7-5503-41e3-b0f6-501579aa1335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686d3d96-be3f-4e48-bf6f-41f17b0049de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67621fb-ead0-4230-a0f8-abc02a1ef4d2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2963c4c-2199-4e0b-81ea-d3dafa3e7ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a0de25-a88a-4c79-900f-53f9c835b123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbaf513-18a6-4c22-bb34-ce0ccd19fe97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f9ea2c-4e95-43f4-809a-7094ced137b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea73abf-d3c0-4c07-9e65-7bae58e67c25",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d909d64-6f81-40d1-a4d0-08eb1d803770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46805978-1f5b-4924-a70d-5efc41c2e6a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9675032f-6673-482c-9bd5-bb16098a32b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df89bc6a-fb14-4e07-80ec-a092e5c6a728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a505944-ecfb-4037-bd35-e31e2ddf18f3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac3506b-80e3-4d10-946b-f806856f5e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bee6f7d0-91df-49a9-9a06-e34b0191dbbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "302f5d8b-f2a4-43ae-9cc9-10c1d4dd902b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab75aa92-1780-40a2-84d8-c94ab4571f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede9732b-be37-441e-8c8d-23019cf6ecb1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ec019e-8163-495b-a75b-e9d896bc1125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f2392b-0afb-49f4-824a-335571fb24e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c787030-60f6-4386-9abc-443647d1a0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356be52f-2f73-40e6-bc42-5a6eec995b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0d6c73-a8a6-454d-b714-9f49a8fad73b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af55eaa-8f8f-4b59-8da9-6aa0933dac87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a41aee47-9bd0-4b2e-b59d-0cb07e3e42c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8071d4-d676-4859-baf9-e428146bccc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2319920b-ad8b-4dce-978e-6f09d9bd521f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac1e2bf-bed5-4f75-a799-3d7c3ee03713",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87ae2e9-1ef8-4fde-b61d-88c95ff612f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278812b0-fec3-4b59-9d43-1aa545c619b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86441389-88c7-4e74-bbd4-514fac0b2ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e446ee04-051b-4884-a409-a44ed4829d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b519da2a-cab1-4828-ab3b-a6f73d3c946e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49fa050-ed7b-4574-bbc5-3c8eecf9ba5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66accedf-de07-4536-a2fa-7691b344551d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e52527-b6d6-4cc5-8af2-605937630e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26bcfaae-345e-4b68-aa74-e31dc3dec18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f67a85-ecae-4a9c-9398-cdde40109f06",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacf11e2-085e-4a29-a62d-328b2297b4d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcf18eae-ff3f-48da-94c0-0ed324df6fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5cdc4a-3c9c-4a5d-9b41-5dbe3bcefea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e2985e-6ce7-41b8-aafc-4997f5f486ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501022a9-593f-4359-87e1-a0aec62a7fcc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1273b30a-0e6d-44f2-89cf-5773f90d8628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "978bef8a-1351-4548-bde1-7fb84865892d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ce7e94-fbb2-4910-97f5-e67e2c40bff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a785a6e8-fd20-4876-923a-1af9fd277cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f473c3f8-7f2e-45bc-bf85-a698083548e9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef08167-be3a-4f15-9fce-84739e8f0ec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728af924-ed30-4978-a823-fe90e4fba2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a488d8a7-0457-42ab-9796-3df0059e3aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7dd79a1-2fc0-46d1-aae7-361bf2908a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc43d346-13f0-489d-afcd-d92c231b0688",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf90be0-91dd-48f4-92c4-7d982ccbf612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a471b3d-e6bc-45fc-981c-be28efd731d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4024821b-c01c-491a-95ea-b15c212e9f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f7b668-89a3-45ed-a5ff-8bb136f34943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4b7098-fb3f-41f9-9691-a86a55c832c7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de78df90-8623-4cac-9b97-f11077bdfe4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a231e993-fc7c-4d10-a5c4-d50234a29763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bd2f60-d233-476f-a65f-41a3156dfd85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f312a67-57e7-42c1-9c67-36d98c6464a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10777db1-a798-43c3-84c7-bba2a3036643",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10183690-bc91-4b87-b9ac-3108a9fde9bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f427a4f1-5107-4954-922c-b6fb44f48b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfb486d-3866-4aee-9e28-fcd485b501f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0028c927-6e7f-4d4a-972d-db2dd77b0574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9d5b3a-95f8-468c-9b1e-bfd4e1c80fb0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63224cae-8668-4f46-b145-01a0e02f32ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32720903-eb7b-4bbc-a59c-c63499b93b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492302b7-0230-4a7e-a11d-1d3de54c4c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd42fedf-1741-48ed-848a-e8c3f2b71dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb91ba5-6f05-41f1-bd2f-5cf8c88fd52c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611ae30e-b6e6-4d1e-a3e0-0a1d17cb3d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85a53019-b15b-4482-89d0-63929b8c323c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98f1504-2e65-44ca-8830-a0070db92582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81f1fc0-7fe5-4e36-ab22-4d32a979ca60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b911df36-c21b-4ecd-b5c5-c4fd1815b7e7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21265ba-515a-4ba1-bb98-132b9d63d9a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c311fc9c-3338-47da-92b5-c5cc6c981adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59ef536-7299-44db-abad-ef1357a20f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4380191-ded8-4006-91f3-337e72d266ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9f1c36-f1b8-412d-939d-bb29672c6440",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be49c7f-f7b0-4620-9592-e9bb22fe8751",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba440b6-4bca-4555-b4a5-e4430760c55d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b8a20a-9ed5-4ba6-a48b-bbbe14fee42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989cf276-5d39-49ce-bb8e-e8329a798432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56165f6-9b4f-40d1-b344-583cd349250a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0a67ef-c835-458b-adf6-8b8c2e57a3bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1933e92-7079-4c68-b855-f07ca9aafc11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c216b11-84bc-4eeb-8e4b-1c565dd66bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f51dce4-532a-468e-92dd-a3641e0cb410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ac6aaf-c633-4a3e-aeef-9fadd7d6c43e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef16597-e42f-43c2-a50f-f5f8e81ec35a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be0f9576-ea3b-4676-8d25-e6e8d9493c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e96ddcb-6360-46b7-81b6-668d9a7631e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3118f5-3005-4e05-966f-df39db62043b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ceb334c-6442-41f6-9f07-43be3a78e08f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3d6c9e-af4d-4365-bc27-a82a5f99ced9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f0ee560-b024-4eb0-85a8-e025ad860c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb6d193-35d6-457d-ad95-725b20100700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1480e5a6-49b8-42fc-b738-3dd2932a676a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddffc65-2fbd-4554-a936-641868956dc8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce4ea8e-72f9-49e4-9938-03d471e93c06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "051edb1d-3c66-4332-9d44-5e4748a1fb0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14fd28c0-7f4d-47e2-b633-9a78ef3c3679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f8f740-6b94-49f1-bae8-694669337822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d89a1f4-2879-430d-ba6f-f8b193fcb84b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ca1310-a6fd-431b-8196-e67a427d2624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b60a85c8-227c-4dc9-91c5-edeb0b2e236d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d91740-4fc3-4152-8db7-2eec8bc9e7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e59de3e-eba7-4343-a90d-0350c6ba963d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3acacf-2d68-4e74-b895-f7be4864ff41",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91395004-3d1c-417a-8a3f-81fb9ae16452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cb828b4-7694-4d40-9311-ff3ad2c1ab6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60805fba-a9f7-4e0f-ad60-9b09cd2076af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87eb9af-dfa2-46fc-93e8-94f8d85f7636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfbfd49-ee45-4587-9f41-275530476420",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ab96e1-5cd8-4840-abdb-da07c0774012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "393016a5-1166-43ad-a8ac-0999870ba56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4ed076-fc77-498b-8f75-3fd1e0a1d007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2492d8ab-f466-42f3-9750-0b3bce809e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc82abe-5a6f-43b0-8a3f-39606f35be88",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204f36df-a16a-4be2-826a-482e83ec3b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecfc0d36-f81b-4665-a7f4-2d3d33af6807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79f883f-2a1b-4f96-ae87-11f73fd7f86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9bcaac-6854-4667-b0db-9b3c2369748a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0145b804-2543-4f10-a2d1-6a7ff2d07c7a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a65d32f-71bf-4d5f-9f65-5c9244303ef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3263b44e-efe8-4bf9-83fd-aa0c70de1d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b468c13-cb8d-4ffb-81d5-76bcf3cf503e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f225cbc4-e20c-4b69-b139-2d44f3a98fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47049376-a159-4be0-bb1a-6bd38fe64eb6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fcd75d-7610-4a42-9924-40ff8ab33e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dfb290c-c71e-4b9b-9b61-abc932f0e54a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1dc117d-e396-4a88-8ebb-1104a4cd89f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f19377-9e02-4690-a79c-e812be1df88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b7a750-9679-45d9-ad72-31d2935226d6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9850672c-0306-490b-9ecd-58571bd12da9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b364c6-d9e9-426c-998b-a8fb630609d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "985a755f-25d5-4a45-a27c-3d40e74ebdd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85c8de4-1be3-4965-bb2f-6b712ac938cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e05463-c6d6-4120-ab86-e1523f1cd8dc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7522fe-09b9-4edd-a6eb-5aaab8dada71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e4189d0-8333-4be9-9092-12e956a1513f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66932c4a-06d1-43c0-be04-b74fa340cd75",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb4b07a-151b-4f27-8b76-93fd97b8d563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a3751f-05ef-46e0-bbee-42ecbbbc7e7b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210fe13c-8f7b-4079-b00c-329c961a7fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3095853a-81aa-4995-a8a2-00f94bd7a7e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afaf1ef-af91-43f9-942d-3e567d68e4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7ad250-8fd7-4ed0-a5b4-eb8f85db116f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d418caa-951f-468f-b3f8-c885328e2d60",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8627b7ab-d6c4-469c-892b-c7293482a186",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afbf5d00-5fb6-4a1f-b6ff-37848c943b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580b0d1e-41b7-4367-958d-a35b15bb8c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ffbab89-012d-4343-96d0-c066aaaaa812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62b06fa-6e04-477a-aca8-7f2847366847",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193c08d3-13f2-473d-8e59-f3a9a80c9bd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de5d38d-4e14-41b2-85a8-476b18754a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4669ed-09c6-4e4d-a048-9494bd3adb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1dc6ee1-5d65-4cf6-b620-ef466510242b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665e7ccb-bce8-46d8-8aeb-17a99fca12c2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcff44d4-7af6-4573-8d25-64b9ce3f16d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb403ea-bc7f-4eb8-b504-471c1e7738be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff48313-0c60-4783-ab89-137e2ebaa85c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc6f75b-70c4-4c3b-8e98-e53265d19efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb954fdb-66d0-4288-81f8-63dc12596e38",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805ba4b0-b49c-4629-a20f-e617fd779f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b13b923d-049a-408b-9661-32f749630f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3bb607-e0fc-4139-a584-b41650e5fc74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb95995c-d1a5-42e1-b260-722e1f00170f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea54d4f-2160-47b8-91e5-81963d7eedf1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24f129e-b5e1-45b2-9b44-e9adb78141c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f39835-03d8-4ebe-a56d-9165cbf8ed6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180cba6d-fe8d-4013-8b35-0c0eb9b1a427",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbcc779-b34a-4dda-a572-01668ae8e57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b653e374-c477-4dea-b14d-cc13af446469",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee6888e-0e14-4d5d-ab63-358664e1d4ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75372174-ab1f-48aa-8fa2-f88492af0728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce730f3-05f1-428e-bf17-407b63a6d8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d11a8f1-9bda-4884-86a9-178ce02a6fc1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acc32b30-5c9d-4a51-85bf-dc308725a500",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b01325c-e692-450b-b1c7-dae5202b9b8e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28910323-26a2-41c5-97dc-98794cf72936",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0e8846a-e10e-4230-b3f5-cba149a694dd"
                    }
                  }
                ]
              },
              {
                "id": "04a06bbb-9eb4-4293-89b9-c287b24fcf32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "faaec09b-b626-42cb-951e-b85063639ca0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203d1c9d-223f-499c-81d7-180fb181a91a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "80fecda6-ffc7-4d90-a9cf-846a97433d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a003ea-6e2c-482e-89bd-9b8d8a760a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "165aa43c-ef6c-48f5-a707-652a4d1f63e8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2770d026-770d-4bed-b588-fe16ef746f67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e10c5fdc-c1e8-44ff-9d46-25da0f01cdb8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f60be11d-02b2-4db4-95d1-73296ab8a274",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8876a9f6-4053-4224-8277-9f8697166387"
                    }
                  }
                ]
              },
              {
                "id": "1c470282-2595-492a-845d-f90bc0cf0ba1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e46f889b-1955-4098-bfd7-1902366f5c1e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689cf969-7b6b-4836-9b16-76ba5d0fd50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c6660621-5c27-4d56-9fe2-8cb19f8715e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affdfbb1-4c7e-459b-a3b8-b2e39a024b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde7d5d7-4d93-4acc-b802-b6f49ebd972d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e7441a5b-9543-4eb0-a960-14ff160231dd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d3f9812a-45c6-4ad8-aedc-8371f7c6e711",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c44c9bff-d26a-487b-8766-4427d67ffa0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e07e723b-1317-483a-8444-fdc1bcf1c204"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41d2cfe0-b8c6-4e51-9a46-83d2d32405ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a76e51e9-8f4a-4d80-8bae-d051d0c987f2"
                    }
                  }
                ]
              },
              {
                "id": "27d5e852-4677-4f5d-a9e3-8fdf1f4d71dc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56510af1-fc40-4152-95d7-7a9450cdd1e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0d5234aa-b42f-4d1f-bc7f-eaf2f198f7e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "086ba70e-122f-4594-8c85-ae7a382e44d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "633a61d5-e8f5-4b63-a1cb-a96ddf7bea04"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0584e304-01bf-4d24-b34e-5193b7ffae0b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2cf5acd7-a3a6-4f07-9157-43e1b6a35256"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fefc5377-a216-4c36-90dc-f57fac792920",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bc0beb4-22e3-470d-82f7-f294267b0357"
            }
          }
        ]
      },
      {
        "id": "e314d9c8-5065-45ed-b30c-6bb65e85a53c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9ca64188-86b8-4019-a05f-9467636d28f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b405dbe-5411-4baa-819e-43848ac465c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2541fec7-f09d-4f14-916c-e90c9847991d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a22c93-b351-4cf6-b53e-ccf7b72399ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fe9d6f9b-2a95-42ea-8c61-0a466746e4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5e58ad-7d0e-4f39-b2ee-d817a1d18da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e31183c0-5c69-4405-a727-f1551c2cb094"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0074f288-e0c0-40ac-a8cf-4d9595eb5db6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a52e8ed-d9de-42a9-a3c8-786608dbb813"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1f409e6-4e99-4e1e-a19a-1ffaf9deb749",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43c5656d-44e9-4e5f-a3e3-f922370951db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b547130c-eaad-4e50-8c26-42c87b489bdf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eb104e0a-6f42-4522-bcca-e6742b3f98c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93341c98-610c-4b76-9aa4-735bc45f9e23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea2653a6-8236-4853-8aa2-c66ae3a7f297"
            }
          }
        ]
      },
      {
        "id": "f357771f-c89a-4a55-8e97-81d8a16e3033",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5bfc9c9a-c1a0-42a2-95b9-a5cb405513a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efd8f8f2-86e3-4a46-8222-fb1d303a2ff8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a2ea5f3-07e9-4bea-97e0-a07098808731",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dd7791-9532-4557-91d8-76f4cb87aa0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "542a2a97-1aee-492c-9be4-f104a64a2ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ac447e-aead-4269-b2fe-2329e511deab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "360bd953-24e4-4ddb-9cae-6825d0288ae8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d46db33a-78cc-46c0-af78-12e7b25a3153",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a70f15a-843b-401b-b2c9-8a634a404eff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a60c7197-8446-4405-8b3f-d6196e571238",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0292ca09-495c-4ec2-aee6-670fc030a224"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07b83c0b-ddf3-49ab-ae5f-474132a43968",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a05f07af-28f7-4593-b366-7102ebc3bb4f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4b0af6a-1e2e-44a9-a566-62b57c66bd9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b9e4977-cdfb-4d5f-8e1c-5fc6d3646eb2"
            }
          }
        ]
      },
      {
        "id": "050ca3da-4173-4594-b7d2-ad1ddbd0d117",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f6afd30c-a087-4c83-85d4-71392567749c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e649a4d8-ae95-4552-b97b-03664442149a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e096fcaf-a529-472e-bdf4-76fdfae232cc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c346e620-adb4-4b97-9f89-93d34347f349",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c6c8c62-307c-4c13-9e98-eeff343cd3ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f435b820-01ee-4bc3-a5c3-5bcd02cccf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de0d00eb-8743-4d64-8184-183da40ce840"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98a24f8f-fbae-4fb0-8290-812355e9b056",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e065b67-5559-4400-8ee0-d6ed9f83c947"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51696b33-fe50-4857-af5d-fc315c4fb7c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "639bd281-4a38-493d-896e-eb9897c3d57c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4380baeb-89d4-4781-8402-77d5a855d55a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "834c658d-27f8-47b5-83d3-b21a809b5d5b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60009b9a-a247-4e04-91c7-b0ad20cb4c2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea7b2954-186d-4661-935a-e6928f12bb9b"
            }
          }
        ]
      },
      {
        "id": "19f1fb90-c6bc-4213-858b-bc875dbae020",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c4be60d-9e1a-4f5d-a5b0-bf953ba537af",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42c22de3-d4ce-4e50-b60a-98a270da6e03",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "eec0baa6-c398-46db-8d00-6fc26c8e7999",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56f5a879-dc82-4cab-b8f8-f4ec8a51c12e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "305e14ab-61bd-49ae-b3b9-bdad10f794c0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.76140350877194,
      "responseMin": 6,
      "responseMax": 524,
      "responseSd": 65.52856014381352,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704846997131,
      "completed": 1704847023691
    },
    "executions": [
      {
        "id": "b0a85657-f619-49a5-8b5c-509c56711528",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7af49b8c-4729-4eb7-a6b8-8e5031674bbd",
          "httpRequestId": "0e47518f-a531-4219-b061-954deb96a632"
        },
        "item": {
          "id": "b0a85657-f619-49a5-8b5c-509c56711528",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0ce6e111-0210-4c19-83d3-ae575b5d5bfa",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "1e7b7127-386e-414a-a869-f23212eaa82e",
        "cursor": {
          "ref": "52ebc13c-2b3a-4a84-80e2-86e8fd0ac004",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0533e76f-9fbf-4c3e-afa6-73659b0590d9"
        },
        "item": {
          "id": "1e7b7127-386e-414a-a869-f23212eaa82e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "089a4e90-e955-4fa0-859a-f4445d8f769f",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "7452b713-c938-41f3-9380-e8229be139e0",
        "cursor": {
          "ref": "6fa5e17a-6f8a-4df4-8bb1-1a4fcbb404d3",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cbc6025b-bfe5-4b79-90b9-e2db08ec1664"
        },
        "item": {
          "id": "7452b713-c938-41f3-9380-e8229be139e0",
          "name": "did_json"
        },
        "response": {
          "id": "181ceb59-6284-419d-8f0d-54ced44bec88",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944887af-3d77-4c07-8e9f-7b30a57cd510",
        "cursor": {
          "ref": "70491d40-669b-4872-8ca4-80450a2bdacf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "634f7bdb-b6ce-489a-a604-7e783f139074"
        },
        "item": {
          "id": "944887af-3d77-4c07-8e9f-7b30a57cd510",
          "name": "did:invalid"
        },
        "response": {
          "id": "2dcd88f2-a5bc-4f03-9e23-74bedd769a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944887af-3d77-4c07-8e9f-7b30a57cd510",
        "cursor": {
          "ref": "70491d40-669b-4872-8ca4-80450a2bdacf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "634f7bdb-b6ce-489a-a604-7e783f139074"
        },
        "item": {
          "id": "944887af-3d77-4c07-8e9f-7b30a57cd510",
          "name": "did:invalid"
        },
        "response": {
          "id": "2dcd88f2-a5bc-4f03-9e23-74bedd769a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c14a24-fb2b-41d0-961a-89c463117f9b",
        "cursor": {
          "ref": "74664c3b-c29c-4d97-b192-dd48e9aa8cf8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "187999d6-9ea2-4abf-aa4b-64c8969767f1"
        },
        "item": {
          "id": "b7c14a24-fb2b-41d0-961a-89c463117f9b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "db5e23e6-52cf-4488-bc9c-29e482e3f2f8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 143,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddbf352-b24b-4165-aa85-d9be7db3e2ba",
        "cursor": {
          "ref": "855094cd-f186-4557-9cc8-71e73172b975",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "82a3ca5e-7b44-4dce-958d-8f94a62b0e01"
        },
        "item": {
          "id": "5ddbf352-b24b-4165-aa85-d9be7db3e2ba",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2649b93f-2c2d-40a5-a072-d578e927977e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8024f7ca-4909-4643-9cf5-73dd31c25687",
        "cursor": {
          "ref": "52c530c7-52e8-4e8a-bcf6-b641f859c12a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4a0c0347-d762-465d-bcaf-b4f2d093c90a"
        },
        "item": {
          "id": "8024f7ca-4909-4643-9cf5-73dd31c25687",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "23b0fcb3-0408-4d7a-a5c6-4bbe41dd84ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81312c5-9975-4189-b4e9-6b967dd1849b",
        "cursor": {
          "ref": "3b96b3d8-44bb-44fa-801f-d79df0ece27e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "87619b3a-0010-427d-b1a6-fda5cdfd4a73"
        },
        "item": {
          "id": "a81312c5-9975-4189-b4e9-6b967dd1849b",
          "name": "identifiers"
        },
        "response": {
          "id": "97f0c996-4446-4d4d-8c8e-fed3d7ea7c5d",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9dd745-df8b-4a75-a74e-eb48f979559d",
        "cursor": {
          "ref": "be79cb80-869c-41d7-9da8-b588ff12e8b6",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "37154ae8-20fc-4377-9d1f-776d430d2474"
        },
        "item": {
          "id": "5b9dd745-df8b-4a75-a74e-eb48f979559d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a3f348a5-306b-4fbf-9489-90fe19148ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7790676d-5f61-41e0-86e5-d45ab2edfc52",
        "cursor": {
          "ref": "e7ee0a87-6c3f-460d-b8ac-3a0a427bdb1e",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1cf3ae7c-5d81-4fd3-bfb1-e9f31bf2b581"
        },
        "item": {
          "id": "7790676d-5f61-41e0-86e5-d45ab2edfc52",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0f008117-aa09-400f-b588-7641044fd21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d01c6c-74c9-42ff-9641-f5213f47761d",
        "cursor": {
          "ref": "5b1b8d11-0e69-4451-8fe5-daf6536cd9e6",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f54490d0-5732-4f15-aacd-7cb9644e81e3"
        },
        "item": {
          "id": "45d01c6c-74c9-42ff-9641-f5213f47761d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "29009674-62de-4758-87df-eff2e55d95dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3aabd9-26fa-465d-ac6b-870474efdd3c",
        "cursor": {
          "ref": "f0c45286-090d-4062-ab64-2cd7a6f5e107",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "72513fff-6bbd-4c77-a934-a2b03ce8ef8d"
        },
        "item": {
          "id": "ee3aabd9-26fa-465d-ac6b-870474efdd3c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9a98c372-de25-4cf8-aae0-1b09923d114f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c60e2ad-ad88-4a24-a808-be9af0e8abf5",
        "cursor": {
          "ref": "48aeacc4-875c-4bcc-997d-7b5b0a656cf1",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "15cfac89-8078-48c8-8c84-8777c1dbf10a"
        },
        "item": {
          "id": "1c60e2ad-ad88-4a24-a808-be9af0e8abf5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8ed03981-112e-4b8b-b755-9cfbb5776a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab3ab36-e0b6-4d5a-94be-d3b8985ee911",
        "cursor": {
          "ref": "69bf1466-d488-4323-83f7-bf64f9e9ec57",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "123faabf-f1c6-4bfb-945a-dad16593c079"
        },
        "item": {
          "id": "7ab3ab36-e0b6-4d5a-94be-d3b8985ee911",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9245259b-077e-4ad1-8f8d-ec1df36ca285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a802f7d-e69d-41a1-bc63-06fa77d4d742",
        "cursor": {
          "ref": "26e5a770-2d81-4e5b-9d6a-7ce0549ae28d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e42cd247-1d7f-4379-8b7f-4984846dd01f"
        },
        "item": {
          "id": "4a802f7d-e69d-41a1-bc63-06fa77d4d742",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8f5f8163-13d5-484f-b60d-8fa8a1280d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd734c3-f8a8-4606-946b-240b7dfc4229",
        "cursor": {
          "ref": "e95c811a-a030-46ee-b9fa-065ca75a2079",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "61d39fb1-eaa9-4e08-92f6-dfdff8cb6548"
        },
        "item": {
          "id": "bbd734c3-f8a8-4606-946b-240b7dfc4229",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "922d2832-8fa2-4658-959f-2f7c0ce007c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2156e5c-2f98-4391-9fb8-a9118dff123f",
        "cursor": {
          "ref": "9f329544-6e53-43e2-89f1-1681fde7b917",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1515d2b9-69db-40da-b272-a0364c16b8d6"
        },
        "item": {
          "id": "a2156e5c-2f98-4391-9fb8-a9118dff123f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "407e5ae9-a4c3-47c0-b254-761dccbc5875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cce22f1-117c-4ef9-b5b5-96c77574a914",
        "cursor": {
          "ref": "0b53029a-a204-4f74-bd7b-97736191e49c",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ed7f8470-5a45-4bdd-aee9-98b57025960f"
        },
        "item": {
          "id": "6cce22f1-117c-4ef9-b5b5-96c77574a914",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "366633be-ea05-431b-a439-939ff152f324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff0d843-8d82-460c-ab47-a9dc96b43625",
        "cursor": {
          "ref": "993ee911-d426-4a51-ab7c-adde8e23ade8",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "36c251f5-e3b7-446f-8248-f6abcc0b0a83"
        },
        "item": {
          "id": "eff0d843-8d82-460c-ab47-a9dc96b43625",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "49b2dfaf-f747-45c6-b929-c26de32ba9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138bb77e-acc1-4c83-befe-d0a56edb81ce",
        "cursor": {
          "ref": "cd79e3b9-989c-43eb-9ef8-2ef3e77d8be2",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d7f1ad33-e99b-45dd-819a-903f0a931f08"
        },
        "item": {
          "id": "138bb77e-acc1-4c83-befe-d0a56edb81ce",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d725ab13-fe04-4d41-82f0-40ec01f72c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0160161-b712-42a8-a6c4-769770251dde",
        "cursor": {
          "ref": "7da2ea85-47f9-4174-b04b-c1ab8fd5e4d6",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3660ef41-d8e7-4d4d-b2cb-a299572d42be"
        },
        "item": {
          "id": "e0160161-b712-42a8-a6c4-769770251dde",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "efcec2f1-2b40-42c3-b53e-f9b4235a0e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037b75b7-dd36-41fb-ba23-66c5dce9611d",
        "cursor": {
          "ref": "49791014-f2b3-4bab-8086-36b6b76a87a1",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a14c3117-ef52-49d5-9ca6-59a2b968a1e1"
        },
        "item": {
          "id": "037b75b7-dd36-41fb-ba23-66c5dce9611d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "976dc682-50b9-49b2-88cc-dac5a0e0cd02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf2f2bf-73a3-4b5a-aa8a-806cd54837ae",
        "cursor": {
          "ref": "ba5b1788-72bb-45e6-b440-4b428d72a415",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2bcd8a62-72ad-41dc-b8ef-9ab348a9ce9a"
        },
        "item": {
          "id": "bbf2f2bf-73a3-4b5a-aa8a-806cd54837ae",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fd2d35c1-712a-49bb-a2dc-420585319aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861ab3b3-e611-43ff-a1fd-3f01e5a1dca4",
        "cursor": {
          "ref": "ef06d090-eb0a-4ff9-83f8-c4d7e7707da8",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "74ce914b-a5c0-4975-b53f-33e4e754889b"
        },
        "item": {
          "id": "861ab3b3-e611-43ff-a1fd-3f01e5a1dca4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ba239a63-f4a1-4faa-9e48-590dbcd5d1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629e1b22-26c2-4dcf-84dd-f98d7e4c5a72",
        "cursor": {
          "ref": "f365dce4-8f3e-4410-96c2-6591122d51d0",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "694a8ed9-4544-449e-9198-7281cdf3a387"
        },
        "item": {
          "id": "629e1b22-26c2-4dcf-84dd-f98d7e4c5a72",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8ec6a0fe-2455-487e-8f1a-e7a33ef3ae01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c831c916-84bd-4917-b0f7-86e6071262df",
        "cursor": {
          "ref": "a197fe8c-8a5f-4815-b899-ddcde8729a57",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6aa407e6-395d-4fbf-9748-02e1b29f23b9"
        },
        "item": {
          "id": "c831c916-84bd-4917-b0f7-86e6071262df",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8a2a91ca-1e22-423f-85cf-0e739e81a36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a1516f-815a-4b2a-a22b-1b1c13bf3df8",
        "cursor": {
          "ref": "82e237c4-599f-41ba-8692-46eb7ff6c40e",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "681598f4-40f0-48d3-aac2-1ffa8ab2bd4a"
        },
        "item": {
          "id": "97a1516f-815a-4b2a-a22b-1b1c13bf3df8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "460f476a-78ae-4fa2-b772-58b39dbee945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f05b72c-20be-47ba-8509-81e1f0cc3720",
        "cursor": {
          "ref": "0e3daa55-552c-40d6-a7d9-2a8bd3f31016",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8b5add85-5b12-4e39-afbf-26745ed59423"
        },
        "item": {
          "id": "8f05b72c-20be-47ba-8509-81e1f0cc3720",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b9afa914-b468-4924-a7bc-203bb8d2007c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e20d83a-a445-4750-bb9f-12d4cf167b10",
        "cursor": {
          "ref": "c97beeab-2590-427f-88b4-74a5e4545a2d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8cce319f-ce86-4189-b2a7-d846755f03cb"
        },
        "item": {
          "id": "7e20d83a-a445-4750-bb9f-12d4cf167b10",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ebceab55-08e0-4a56-8c5b-a2109a5c18a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16d75d9-f040-4b37-a018-7d164de65d9d",
        "cursor": {
          "ref": "a168be4b-5c0b-4a87-b101-a63a3ecc556b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d07da736-9e0d-41d7-8157-b1ccc3b8a9df"
        },
        "item": {
          "id": "c16d75d9-f040-4b37-a018-7d164de65d9d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b012afa5-2746-4df6-a195-609f0820a197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cdc08b-b5be-4026-988a-16e949d24927",
        "cursor": {
          "ref": "e0bbafdf-1ba0-485e-a398-16423851bdf6",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "422b845b-c69f-46ad-92cd-367d19698d56"
        },
        "item": {
          "id": "e9cdc08b-b5be-4026-988a-16e949d24927",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ab0a0d48-54b1-4382-94e9-4bf9ed8a3fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d782c7-ea89-4f60-b2de-169f788f1476",
        "cursor": {
          "ref": "b1e82eea-be9d-48f7-a063-560458033428",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5ac0e485-0123-4a71-9063-147718b74c3e"
        },
        "item": {
          "id": "b9d782c7-ea89-4f60-b2de-169f788f1476",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "34913dec-7be4-4457-a02a-b8245ebc5de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b75817-f61c-4955-9d54-ca15f4250be1",
        "cursor": {
          "ref": "5ced85f3-0756-41e8-88fb-eed014401c49",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "29b08a71-b59d-46d3-854b-2b27b778009d"
        },
        "item": {
          "id": "21b75817-f61c-4955-9d54-ca15f4250be1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1d745d5e-3f35-424e-b801-3eeebd05e81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41079348-8512-4863-bd05-1a547eb38ec4",
        "cursor": {
          "ref": "556d837a-f8c0-478d-a40a-3f15a664e9b2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a90335f9-70c8-4c44-838f-e161f558651a"
        },
        "item": {
          "id": "41079348-8512-4863-bd05-1a547eb38ec4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "978c3beb-24ce-433e-a346-1ed24d684c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6b3b87-c7b4-4461-9cba-0da566c925ab",
        "cursor": {
          "ref": "35424f72-a95e-4796-b365-bf0033ed38ec",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e4690ee2-faf4-4e46-8bb3-408b820eecff"
        },
        "item": {
          "id": "ad6b3b87-c7b4-4461-9cba-0da566c925ab",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9c45b6b9-bb88-4931-8708-d4acd254cbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0963bd72-b52e-4597-92e6-12fc085dcd08",
        "cursor": {
          "ref": "68395f1e-0a60-42dc-bfb2-70f00129217a",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d5d1b155-8e90-4c77-ad4c-7e6182da5648"
        },
        "item": {
          "id": "0963bd72-b52e-4597-92e6-12fc085dcd08",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ab902bae-d483-4129-add3-136dc5b47bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e95b37-3c96-44e1-9da3-26717f6bab33",
        "cursor": {
          "ref": "3491f355-d9f0-4afe-ae01-7d1c4261f4f7",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "75fb9775-af92-45ea-994b-2caffe9aa8e2"
        },
        "item": {
          "id": "e8e95b37-3c96-44e1-9da3-26717f6bab33",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9be722f8-c953-4b7a-b2c9-4280097016bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43f75b2-16f0-4774-95df-0b804b1f73a9",
        "cursor": {
          "ref": "83a59cc7-2fa2-40af-9b76-5d7c74aac03d",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "371a0d8b-5b1b-444a-a6e5-2039ce5b2d91"
        },
        "item": {
          "id": "d43f75b2-16f0-4774-95df-0b804b1f73a9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c5c62a4b-8e1e-4c30-96de-181f9e21edb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959f6ee5-110b-4518-acfd-ff63cd5fe559",
        "cursor": {
          "ref": "d0aa04e0-46b1-4c38-8cce-7e89cb2e1077",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a61a84f7-96ca-49ec-bd4c-cd6163889677"
        },
        "item": {
          "id": "959f6ee5-110b-4518-acfd-ff63cd5fe559",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "86ebf3aa-c176-4b66-ba2b-242df7ca6e26",
          "status": "Created",
          "code": 201,
          "responseTime": 524,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1e12f161-94e3-448f-8ea5-b91b614ef861",
        "cursor": {
          "ref": "94aac199-1b77-40c1-94de-e2166580fa8d",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ab83e2c7-6b01-4a5f-b501-0850121caccc"
        },
        "item": {
          "id": "1e12f161-94e3-448f-8ea5-b91b614ef861",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b719aa3b-85e3-4ef6-a484-8d9c67479cb4",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "824c7ac3-fad6-4fde-a75f-0d41b15ac374",
        "cursor": {
          "ref": "440e57fa-654c-4526-b325-95f2fbc6a92c",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "95366d4c-8dc8-41ce-b53d-4d450977b7d2"
        },
        "item": {
          "id": "824c7ac3-fad6-4fde-a75f-0d41b15ac374",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c140f7e6-f6c0-4faf-8c8b-388b18018acc",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6540bdd7-f890-4fc1-a230-e0de9f0e7349",
        "cursor": {
          "ref": "b03e54b7-c076-4beb-b51f-1d920728f2d9",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d9679b70-b6b1-4b48-a3e5-a3eb9dcbd5c1"
        },
        "item": {
          "id": "6540bdd7-f890-4fc1-a230-e0de9f0e7349",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "65b4e468-8a59-4834-b03b-fbec7b8178ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b97fcea-ed8c-40fa-aa90-d80068a1f666",
        "cursor": {
          "ref": "7769ab49-c5da-4ce7-83c6-3ac088160992",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c1230894-70e1-4e11-b487-7cce6fedacc2"
        },
        "item": {
          "id": "5b97fcea-ed8c-40fa-aa90-d80068a1f666",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4c5fe669-0dfd-4120-bb1a-38675ac78997",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2ac8dc4e-c368-4f09-8d2b-239d743aab8e",
        "cursor": {
          "ref": "9c7ff142-af55-4bfb-9395-2d1349a8d2f3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "77731701-25c5-418a-9c6c-b97081b973ca"
        },
        "item": {
          "id": "2ac8dc4e-c368-4f09-8d2b-239d743aab8e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3aac8504-3c0a-4a34-99bb-4c5f81c849ff",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a7a13edb-8998-4d9f-b3b9-20af1757d47a",
        "cursor": {
          "ref": "b84440c5-daae-431b-9194-c9c209e2599e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e1898b40-3064-43a3-b8b9-1eae1925ccfa"
        },
        "item": {
          "id": "a7a13edb-8998-4d9f-b3b9-20af1757d47a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "af529c0c-174d-4153-a135-3de61b5549eb",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "383fb286-5d5b-4333-b9aa-6f3bad5b2fac",
        "cursor": {
          "ref": "fb438c0b-f672-4fa6-aaa9-2f8c347c3674",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d1097f46-a9ad-4952-808e-2b8c12045611"
        },
        "item": {
          "id": "383fb286-5d5b-4333-b9aa-6f3bad5b2fac",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2d7d165a-3348-4cba-8e2b-dce9dbff3e5e",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "446e5867-978a-4242-a830-14d3e9081f1e",
        "cursor": {
          "ref": "90ba0302-ef7a-4694-95d3-e18e04dcaba3",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6731c927-bb1d-4f2d-9f2b-b485a173c4c5"
        },
        "item": {
          "id": "446e5867-978a-4242-a830-14d3e9081f1e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1dd39a97-290e-4a8d-aa74-dc4d3b0129ce",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "81e11a52-c4ee-415b-8b40-6d255b35bbb2",
        "cursor": {
          "ref": "af9a39c0-b7c5-49ca-aa27-9477b052b425",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "829d6203-c08e-448d-bd72-ebae171b4f6b"
        },
        "item": {
          "id": "81e11a52-c4ee-415b-8b40-6d255b35bbb2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "432e14b4-2543-4a82-a103-f654bc9b6ea9",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7ce2a231-4d8f-4652-b044-5d378322f77a",
        "cursor": {
          "ref": "caea16f1-65e1-41b1-9790-704d49be5a4f",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "08078908-cc66-4f02-8efb-317eea16ff2e"
        },
        "item": {
          "id": "7ce2a231-4d8f-4652-b044-5d378322f77a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5dfe7454-efd0-4178-81fc-325dd7594cca",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c449ead8-f370-478c-b9a4-4cd2eceaf946",
        "cursor": {
          "ref": "22062a22-4f84-45c8-a382-5164a4534292",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "84dca6ff-76c6-4b84-a873-ced1c5442f5e"
        },
        "item": {
          "id": "c449ead8-f370-478c-b9a4-4cd2eceaf946",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d525a13c-8003-4ebe-9bb0-9f38b4b537e3",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a88d4524-1af1-4e07-8a10-13ba668eb8a7",
        "cursor": {
          "ref": "659e6bfd-78ce-4e4d-9d23-f41cbcf519e9",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dea8f7e6-2b84-4520-94a8-3e6e916928e0"
        },
        "item": {
          "id": "a88d4524-1af1-4e07-8a10-13ba668eb8a7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f196aab7-45dd-4822-8e82-7d4bbdb474d1",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b283f725-c355-4212-b8b5-91d7677b4519",
        "cursor": {
          "ref": "3f55a54a-54c5-4731-a11d-dae452fc6e40",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3ac54c01-8bee-4cc0-8013-e04d53079042"
        },
        "item": {
          "id": "b283f725-c355-4212-b8b5-91d7677b4519",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a60124c6-448d-4c01-b7cd-f28f6c930743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba40528-d33d-46ee-8753-0860979685d8",
        "cursor": {
          "ref": "fa1ef305-7c70-4935-9e7f-83923ef4f234",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "acbdd821-1963-4e06-a840-f3d5febc5bb3"
        },
        "item": {
          "id": "2ba40528-d33d-46ee-8753-0860979685d8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8c131ca7-26a5-422d-8e7e-ee7224045075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3993331a-9176-438e-87d4-ce99866ab0cd",
        "cursor": {
          "ref": "a2ae3df5-16e4-421f-aa12-fef19e335b0d",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "29e04beb-d75f-4131-adb3-7ca35c53936d"
        },
        "item": {
          "id": "3993331a-9176-438e-87d4-ce99866ab0cd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c43bd51b-66a7-4cc6-b86c-e40021f5f8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd672c8e-2106-4928-872e-fcdce00cf76b",
        "cursor": {
          "ref": "bb41643c-3ff8-469e-91d2-32894fb66f20",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "51297d36-192d-4b3b-947a-b4c7beea6c45"
        },
        "item": {
          "id": "bd672c8e-2106-4928-872e-fcdce00cf76b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c77d8055-5081-4923-8d6d-94c248c0ca1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ee9fff-a160-4d3f-a1ee-bbdf6431b163",
        "cursor": {
          "ref": "3fa1cf6e-f0f4-4bda-9082-8ade245a3e39",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0483b21f-323a-4f66-838b-fea8b9f5beaf"
        },
        "item": {
          "id": "f8ee9fff-a160-4d3f-a1ee-bbdf6431b163",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "67466ce8-b6b9-4e07-a33f-baa9d9bc0944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d7eed1-1dd2-4077-bacd-1ddc7a29a0c2",
        "cursor": {
          "ref": "9fd97e4a-82e0-4fa3-890d-c0dab13f9494",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d44bdee1-f6db-4f97-99a0-7b71ae65a425"
        },
        "item": {
          "id": "04d7eed1-1dd2-4077-bacd-1ddc7a29a0c2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b3c3b6e2-2e63-470a-a006-1aca33b0d4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445d8310-4281-490d-934a-a46cf0815f51",
        "cursor": {
          "ref": "fa78beea-2dc6-44aa-b5e5-6baedbd99d68",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6835071a-ca95-477e-b559-b3eb4235bf33"
        },
        "item": {
          "id": "445d8310-4281-490d-934a-a46cf0815f51",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f38f79f1-b649-4550-bcca-1a5fa49aa16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c398e2c-10fb-4b92-b3c5-c866b1e7d6fe",
        "cursor": {
          "ref": "c2e587ac-a696-43c8-ba89-ed6d8d8cd1ff",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5d00f71f-9cd1-4004-a310-809686654fd7"
        },
        "item": {
          "id": "9c398e2c-10fb-4b92-b3c5-c866b1e7d6fe",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9003fa14-f15e-4de1-99de-a0654c18cea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46092e42-77f9-407f-ac5a-387cc971b0b2",
        "cursor": {
          "ref": "b5d80121-727d-408e-a8be-35f529f8649d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f77f2cba-a370-4bbb-9906-d593a1268551"
        },
        "item": {
          "id": "46092e42-77f9-407f-ac5a-387cc971b0b2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "305a23b1-2569-4f96-84cf-6920a740dbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1652711-e4b2-455f-a5bd-9dc0b88200a6",
        "cursor": {
          "ref": "ca3634e1-3aad-4c5a-b8db-9e4200eaf66e",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "917ea349-7209-46f8-9a7c-7b17fdd8373b"
        },
        "item": {
          "id": "b1652711-e4b2-455f-a5bd-9dc0b88200a6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "edca475c-273e-49b1-a632-6d0d9fba801f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff6099a-c1e6-45a0-9048-13876b6ef8b8",
        "cursor": {
          "ref": "00e6b3a0-8e59-4810-8373-b4a96b54432a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a46b1eb6-a211-4ca4-9aaa-82be88d2d5af"
        },
        "item": {
          "id": "3ff6099a-c1e6-45a0-9048-13876b6ef8b8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0785da77-079e-41d7-9ad5-db2b30df99a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa6d1a9-7f2b-4e0d-aa83-bc99554c4043",
        "cursor": {
          "ref": "d5d4242d-4a3a-475e-a3cf-a2eff9e5b87b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2f0c9e24-26a9-40bb-9705-1bbd37babbfe"
        },
        "item": {
          "id": "cfa6d1a9-7f2b-4e0d-aa83-bc99554c4043",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "484d3523-8364-4ff9-8f9c-0e4dc57fa426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70374197-bd88-4800-8b97-4b998ad73ba4",
        "cursor": {
          "ref": "a3f0c42a-860d-405b-9a1f-e94779fcedf2",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "71203251-972f-47f7-a3a0-7acf09530e45"
        },
        "item": {
          "id": "70374197-bd88-4800-8b97-4b998ad73ba4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4fdade9a-558f-4464-b203-d8057dfb2220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a471e2e3-0dc4-48e7-b36a-35af6c82ccf0",
        "cursor": {
          "ref": "b6652eab-c806-4e9e-9a04-ac47eeed2a7d",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "63d1fb13-1fbe-4c68-8d40-7220147637e9"
        },
        "item": {
          "id": "a471e2e3-0dc4-48e7-b36a-35af6c82ccf0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "33144d58-042f-43bd-8bcc-4e2b5a1eee15",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7ddb43a0-ed21-48da-9475-322b4f4d979d",
        "cursor": {
          "ref": "0a7865cb-83f0-463c-84bd-8a98066b1d68",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c71a6680-8c9f-40d9-83e1-88f8f1800ead"
        },
        "item": {
          "id": "7ddb43a0-ed21-48da-9475-322b4f4d979d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "680a8c6c-b39a-4254-b6e9-482d14f85ab7",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "bcc1e3f8-3b6c-43bc-8a40-fb2a206719ec",
        "cursor": {
          "ref": "4239105f-284e-4a4b-a097-4f61c8770331",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "32e9863f-db67-4761-afb5-1cdc510914e8"
        },
        "item": {
          "id": "bcc1e3f8-3b6c-43bc-8a40-fb2a206719ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b050b93d-46b6-4ad4-8991-c026facc8dad",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2fc2afdb-b16b-47e1-8f63-6cd26e241258",
        "cursor": {
          "ref": "bf9560f3-faea-4a80-ab66-12cbb5f8912c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dc4aac8d-b780-4f5d-a2d4-09a41e10f9d9"
        },
        "item": {
          "id": "2fc2afdb-b16b-47e1-8f63-6cd26e241258",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7449d603-83fc-48b6-98b2-c04daf366bd7",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2a3a4051-722a-49c4-bcc7-cd2d827194cd",
        "cursor": {
          "ref": "cc913606-8b00-40ed-85a1-48093d6b5c9c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "72968bc4-08c4-4a88-9cb0-10b620abfc27"
        },
        "item": {
          "id": "2a3a4051-722a-49c4-bcc7-cd2d827194cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "31d2f8c2-4801-45c5-8228-3dff28c056df",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c5d8b53f-5c5b-4f33-8b1c-4ca0e9ee1ba2",
        "cursor": {
          "ref": "cce9f886-1d89-4e95-b0fd-5ec403352c9e",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "de2b348b-6caf-4e98-adac-244b8faf9923"
        },
        "item": {
          "id": "c5d8b53f-5c5b-4f33-8b1c-4ca0e9ee1ba2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d26e1cbb-df86-4e54-8e5b-6a45d83d090f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37a1450-dc73-4ace-96dd-5a603e2dd033",
        "cursor": {
          "ref": "62e11c7b-a280-45df-afb2-e96e7a44d770",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2cc30bc0-51e2-482b-a1bd-18b524689f77"
        },
        "item": {
          "id": "f37a1450-dc73-4ace-96dd-5a603e2dd033",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "29deb17f-f7e3-490c-9cf2-ca0f00f58796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6999518-9517-4966-8c2c-5da3599ad563",
        "cursor": {
          "ref": "c76c0e1c-6c8a-4b59-aa3d-aecf370cea32",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "82534098-5b43-4177-a6e8-bfd21a4c73a4"
        },
        "item": {
          "id": "f6999518-9517-4966-8c2c-5da3599ad563",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "43d14abd-ce34-486c-afc1-f6c3da67e9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4a06eb-d167-464c-b3be-f54ca7d368d6",
        "cursor": {
          "ref": "acc515f5-caed-486a-848d-76d0a79522f2",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "64c0b7f3-3379-45e9-aa31-caf179b59586"
        },
        "item": {
          "id": "cb4a06eb-d167-464c-b3be-f54ca7d368d6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "694ebf76-2953-45a9-9e26-c4aa19c5b709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011c68db-75c7-49b9-8a1b-c1f50c980191",
        "cursor": {
          "ref": "158824f1-88db-41d4-8d85-e7e96bc9f174",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b29ea631-c9e9-472f-9d46-fb72747d8239"
        },
        "item": {
          "id": "011c68db-75c7-49b9-8a1b-c1f50c980191",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9d9cd910-ce36-43fb-aa4a-eaedad32de3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecea32ab-38ae-40d6-a870-7a8cd8d50ab9",
        "cursor": {
          "ref": "d7ab30db-c09f-43c8-8a1a-6b32f11a6f78",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0f460fea-62ba-4027-b603-bc3f8b96882e"
        },
        "item": {
          "id": "ecea32ab-38ae-40d6-a870-7a8cd8d50ab9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c2759bd7-b17b-43c0-9944-814ef430ea92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487076e4-be0f-440c-b133-518f89f259e4",
        "cursor": {
          "ref": "19d5c745-e9ef-485c-b38c-f914d23a6b52",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cbb35f64-543f-4205-b23c-07e4d715af2c"
        },
        "item": {
          "id": "487076e4-be0f-440c-b133-518f89f259e4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ed87ffee-70ea-452a-8baf-34cfada6ef27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8675579a-f06d-4a32-8950-ee9d4c3404a4",
        "cursor": {
          "ref": "f85610a4-9aca-4fc1-9303-a4f696ef88f7",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0a0118f6-4734-43d7-8891-d3e404702da4"
        },
        "item": {
          "id": "8675579a-f06d-4a32-8950-ee9d4c3404a4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b1c11c02-1804-488f-873c-35b63b27c79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee1a347-801e-4025-8ba4-93826ede38fa",
        "cursor": {
          "ref": "9bfc8c43-d41f-4b5f-8d48-a854b5413742",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5bf49ba7-e1ec-4e8a-85ed-06317655a1e8"
        },
        "item": {
          "id": "4ee1a347-801e-4025-8ba4-93826ede38fa",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "47585903-85c7-47c8-804f-d3a2174dd3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ec6ab6-1521-4e53-a8a1-1b6bca2bd782",
        "cursor": {
          "ref": "8fc81db0-473b-4ac8-9313-b7b0e4f6ee45",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d34ac3df-1d8b-4a30-8d15-851e4f663fe1"
        },
        "item": {
          "id": "28ec6ab6-1521-4e53-a8a1-1b6bca2bd782",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ee171356-4a45-4d31-b3b5-4ea536641417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7428da-96e2-415e-be69-bf481a6dedc9",
        "cursor": {
          "ref": "0cbcdd30-cbf5-4b19-9df2-96e4321aafae",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "79288fe3-59d1-49b5-8626-db0d449fb404"
        },
        "item": {
          "id": "cf7428da-96e2-415e-be69-bf481a6dedc9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d7d773ec-ae79-46de-9f45-2a88062c5426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dba6960-289e-40b9-8121-8f95b70b13bc",
        "cursor": {
          "ref": "8c481f20-b4a1-4d28-8b8f-f83915493822",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9c6d832a-4fe9-4683-92d8-dd701af9cbbb"
        },
        "item": {
          "id": "6dba6960-289e-40b9-8121-8f95b70b13bc",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fc2af087-4847-4c72-8ad8-435a7b0ade67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e6a786-902f-4dd6-a339-3e896ee76310",
        "cursor": {
          "ref": "be30492a-8b89-4efa-b207-8eb8014a1b42",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "47d5b9ac-1b4b-42b9-9c73-7379bcaf7003"
        },
        "item": {
          "id": "c0e6a786-902f-4dd6-a339-3e896ee76310",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "34d34809-5cf7-46a8-89e1-242415e2dc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d15433a-94be-4e5b-b04b-b8cbdab78c36",
        "cursor": {
          "ref": "146ece78-ad23-4ed0-b90b-d9cee291ea53",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7267477c-609c-460b-8898-feab02e6159f"
        },
        "item": {
          "id": "8d15433a-94be-4e5b-b04b-b8cbdab78c36",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d7ca0bdf-3862-4ecd-a610-75e03225a7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7335745-5dbd-4b54-8bea-2862b10c099e",
        "cursor": {
          "ref": "4d02f2f6-408e-4cc5-b351-419a2608062c",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "34e2c217-0edf-42dc-ae50-195fe4e6c4b4"
        },
        "item": {
          "id": "c7335745-5dbd-4b54-8bea-2862b10c099e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5642cd54-6ad5-4c49-91ee-9b174af485c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6c1bc2-ec64-4ed4-b117-bcea98d66266",
        "cursor": {
          "ref": "5580e186-3cce-47b0-9aa9-ca381b8ca5fe",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "186df01c-83de-40cf-a826-552028e2c81c"
        },
        "item": {
          "id": "5c6c1bc2-ec64-4ed4-b117-bcea98d66266",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4c9a5216-ad90-40f5-8de9-71076902b8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cef9d2-f1ee-407b-81e1-5bdd60d42d7b",
        "cursor": {
          "ref": "7e61eda9-38a8-4c17-865a-2a069e0e0434",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "752e1bb5-8943-4675-8b60-ffb4ad386a30"
        },
        "item": {
          "id": "c8cef9d2-f1ee-407b-81e1-5bdd60d42d7b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1970784b-76ec-41ae-abaf-ee55b96ae92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cea0c5-28ac-42eb-9427-70066e6e2711",
        "cursor": {
          "ref": "26096df5-66b5-4430-9d8f-c5e40de8daee",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d1ec5e39-a3ae-44bc-8d96-e0f32ad2ef9d"
        },
        "item": {
          "id": "e8cea0c5-28ac-42eb-9427-70066e6e2711",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fdc043d3-2eb3-437b-8505-eef381b15ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c81923-f0ea-466f-8fb2-bf76983899cc",
        "cursor": {
          "ref": "7524a9fe-d58e-46b0-a231-619c291d5228",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e2395600-ec93-4a9a-a919-f282d0c2b0c3"
        },
        "item": {
          "id": "60c81923-f0ea-466f-8fb2-bf76983899cc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c10adc43-6df8-4da7-8004-e31a83145206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89869b86-c48e-4fad-b131-844ca3a148a5",
        "cursor": {
          "ref": "9174be86-7cd3-4688-9a5d-9bb8aa90e07c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "099aaa97-41ff-4558-96e1-75f0ceaabfa5"
        },
        "item": {
          "id": "89869b86-c48e-4fad-b131-844ca3a148a5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0d3ab1a9-09fe-453b-a279-4941902d186d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7207e5e-aa1a-4dad-a697-200e460d7654",
        "cursor": {
          "ref": "54153590-8f28-4adc-88db-0388e4f6869c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b8405ba3-b7a8-4beb-b00b-da2ad9d88c07"
        },
        "item": {
          "id": "d7207e5e-aa1a-4dad-a697-200e460d7654",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2056086d-118c-416e-954a-cef1624dbf09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5dd0af-0b71-42ce-b599-58e976b7457b",
        "cursor": {
          "ref": "dd772e85-0563-42e9-89d7-f8ac6d214dfd",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2e7c7a35-67cc-4cda-8617-3491b9685b3d"
        },
        "item": {
          "id": "cf5dd0af-0b71-42ce-b599-58e976b7457b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f9fc5926-337b-4768-ae83-573213d42a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014fd3b1-62fd-4441-a6e7-29723133f030",
        "cursor": {
          "ref": "3aec7b27-77aa-4999-b858-53845e2fd82f",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "089a525f-9691-4c8b-a47c-d7fc166a1016"
        },
        "item": {
          "id": "014fd3b1-62fd-4441-a6e7-29723133f030",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9af1a939-36fa-4efa-b142-8c0374c8b693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98a34cf-9d5b-4d82-9566-a25ebf091307",
        "cursor": {
          "ref": "5bae4c3c-833e-49bf-9a57-114ad3248b19",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5c84efea-35b5-4aa1-a48f-11c9c347cd0a"
        },
        "item": {
          "id": "b98a34cf-9d5b-4d82-9566-a25ebf091307",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d2a39b03-1d43-4e11-9dab-e03674372226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80914f0-4ae0-4943-9fae-927a370042a0",
        "cursor": {
          "ref": "0ace11f2-868d-4de3-a081-52941b0400d8",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5d1065dc-c1d4-4f62-abaf-34bf924bafa2"
        },
        "item": {
          "id": "a80914f0-4ae0-4943-9fae-927a370042a0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2ec6662c-d1d6-4b95-9fe2-8e54b15cb27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b404319-71e7-407a-ab52-7048bcee9068",
        "cursor": {
          "ref": "1c833a37-b859-428b-bc21-ee7b51435d1f",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6aa0a6d9-0096-4362-92d1-1d152a230d2d"
        },
        "item": {
          "id": "7b404319-71e7-407a-ab52-7048bcee9068",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bd0f124b-9dea-46a3-97bf-2cb80e8437ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c77736-8eb4-45f0-b871-ded33cbee292",
        "cursor": {
          "ref": "e57fb8ee-f185-4d71-bc3a-b60a82fedd0a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0ae674df-d47b-4df0-a5bc-08a35926aca9"
        },
        "item": {
          "id": "b7c77736-8eb4-45f0-b871-ded33cbee292",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "132f31b8-9a5b-4bed-8754-eb58e3039e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edce6753-cbd5-4e17-aaa4-4191feea858a",
        "cursor": {
          "ref": "2a8bc880-4d39-497c-b33d-c7242b81724a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c094e438-65a9-4a02-8649-26ede913f1f1"
        },
        "item": {
          "id": "edce6753-cbd5-4e17-aaa4-4191feea858a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "88e1a95c-c5fc-476b-8492-cfed76a985fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75362f1-b684-4ee9-8802-bc55bc476952",
        "cursor": {
          "ref": "67bc0db7-18f6-47d1-afaf-50045e079a0d",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "93d4ee44-fb29-47e7-81c0-417becb16c08"
        },
        "item": {
          "id": "e75362f1-b684-4ee9-8802-bc55bc476952",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8800aeba-e5ff-4f24-9717-6ad49ae4550a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b972b631-aae5-40e4-b4ae-a19dca76539a",
        "cursor": {
          "ref": "b1f9720c-55dd-4b0a-9260-eb8c96f6ae96",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c2ecbefa-d352-4c59-8962-989cff0a8e1b"
        },
        "item": {
          "id": "b972b631-aae5-40e4-b4ae-a19dca76539a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e9b0c545-6f95-4592-88e1-e54f8904322f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f321fc-a65e-4051-b076-3d53812f7d20",
        "cursor": {
          "ref": "4a953a19-cbdd-4532-8bde-2166b57f0f3a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "68fdc653-9b71-4ba7-aa34-69f44a803d95"
        },
        "item": {
          "id": "59f321fc-a65e-4051-b076-3d53812f7d20",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7875eb1c-5a08-43f2-958a-bfddf4d75926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92c238f-06d6-4a7c-bcef-145efe710c0b",
        "cursor": {
          "ref": "e206f0d4-d144-4828-a3f3-876967b50c64",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6336ee86-772a-43e5-8dc7-f54643f5fa1c"
        },
        "item": {
          "id": "c92c238f-06d6-4a7c-bcef-145efe710c0b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "47997fa6-eb70-435e-811a-80c9eb728ea6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fec778b-3bf2-44d3-9851-6b7302dae53d",
        "cursor": {
          "ref": "40463811-33fa-4de2-9ad5-00ed62ebf668",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bf8600a2-079c-492f-b2e4-750f01545951"
        },
        "item": {
          "id": "2fec778b-3bf2-44d3-9851-6b7302dae53d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "450bc285-9223-41ab-8f92-c42c961f3abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1f884183-aa8c-406b-a52f-4fa5bdfc02db",
        "cursor": {
          "ref": "123a64e8-a009-4a1e-afb6-498da9d83779",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "01fb8160-0d5f-4d86-9141-bcae98ba98fe"
        },
        "item": {
          "id": "1f884183-aa8c-406b-a52f-4fa5bdfc02db",
          "name": "credentials_issue"
        },
        "response": {
          "id": "64ea32de-9d81-4f81-929c-d367833911d1",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "824136cd-d12c-4290-bc93-19c4ae4a8425",
        "cursor": {
          "ref": "fd1fe0d4-60be-41b8-b56a-f86c12639104",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "599df283-4da1-4875-b752-6b003a5a63f4"
        },
        "item": {
          "id": "824136cd-d12c-4290-bc93-19c4ae4a8425",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "48cc1406-8641-4c8d-b049-46c50b7e4159",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bd769b-d927-439a-8609-2ec396543ace",
        "cursor": {
          "ref": "494b1567-0bd9-42ba-866c-99e31cce6054",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7338117e-7451-40d6-85ad-cac1b5883947"
        },
        "item": {
          "id": "61bd769b-d927-439a-8609-2ec396543ace",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d0126377-6bb4-4bb7-ad36-e935aab1f175",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d21fbd-19eb-443d-aa63-99e66a44b99a",
        "cursor": {
          "ref": "419e0b71-181e-4cd3-b21a-31cca26bb732",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "34587b6f-abe4-4ac2-96f6-8afac4c02082"
        },
        "item": {
          "id": "58d21fbd-19eb-443d-aa63-99e66a44b99a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "571abad9-2f05-46a0-ab83-25b10a10c4df",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "64568442-7b85-43f3-af77-0fdf461c7015",
        "cursor": {
          "ref": "7f028ba0-32f5-436c-9708-f67a0160b7d3",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3dec82b7-14da-4b56-9be3-635f517fdba5"
        },
        "item": {
          "id": "64568442-7b85-43f3-af77-0fdf461c7015",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "24b1e6ce-5c93-44eb-be22-2d3de71f6b1f",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-10T00:36:50.241Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-10T00:36:50.241Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "bcd5272b-2b62-488d-82b5-7bfe34b60a03",
        "cursor": {
          "ref": "fc357038-6c50-4aef-9d6c-ef53c5a3bc0e",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6b2bc4a7-9983-4a24-bbae-8f81dca8a446"
        },
        "item": {
          "id": "bcd5272b-2b62-488d-82b5-7bfe34b60a03",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f60c4d4b-e182-444b-902a-7ea53a6113ad",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c14a53-0d9a-4af6-a411-4b89044576f2",
        "cursor": {
          "ref": "c1622d7a-0e0c-42cb-9c06-4e44dd46fb5c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "22eb0831-8658-44b5-8474-17c22598a2a9"
        },
        "item": {
          "id": "c3c14a53-0d9a-4af6-a411-4b89044576f2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c6cb4ae6-cee9-4e43-ba7d-72449df72ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d1c612-dd55-4862-a5d9-342eff1873d6",
        "cursor": {
          "ref": "1aba55ab-f532-474a-a230-6808490d4a3e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7c53e3f2-c475-480f-a156-145aae2fbb76"
        },
        "item": {
          "id": "27d1c612-dd55-4862-a5d9-342eff1873d6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "013405a4-f145-4ad0-9c84-dfb07eec67d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db23773e-327d-4ed7-96b3-b46e589ac229",
        "cursor": {
          "ref": "a65d3497-23d6-42a8-90f8-b1bf4d70f192",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d981737a-910f-4695-958d-4cfd90d8940f"
        },
        "item": {
          "id": "db23773e-327d-4ed7-96b3-b46e589ac229",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "729fa349-412d-4ed3-97af-acacb8890ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9764770-980d-4846-99c5-f152cc80f31f",
        "cursor": {
          "ref": "f6101c09-4ea5-44da-a4db-fc19c3bab69b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dacdbcce-927f-4fe7-b87c-d13980123d41"
        },
        "item": {
          "id": "c9764770-980d-4846-99c5-f152cc80f31f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "53cd5628-f1fa-43fe-8ff4-44f3f217a6e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808d9296-d728-4b32-8e42-196d0558cead",
        "cursor": {
          "ref": "2af12446-41de-4190-8d40-870e2d069ad3",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fae6d2f1-e6ad-4216-877b-c806222a621d"
        },
        "item": {
          "id": "808d9296-d728-4b32-8e42-196d0558cead",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e59a077a-19e9-48dc-b9d2-de16b104c165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bc5349-e062-4b72-9e5e-7ab714a4f8e9",
        "cursor": {
          "ref": "3d17a723-8d8a-44a9-bd53-fb450d89350c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "34d8574c-91d9-42e6-8355-a3f6a1a1635c"
        },
        "item": {
          "id": "47bc5349-e062-4b72-9e5e-7ab714a4f8e9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d15a986c-3346-4136-945a-0ff9a2736371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6628e9e-6a3c-46d6-ab13-b3491e46dcf9",
        "cursor": {
          "ref": "0aaab026-1472-46da-9088-08e725c1cd87",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1bce6d3c-a0e2-4e54-92aa-0d9d65904a56"
        },
        "item": {
          "id": "c6628e9e-6a3c-46d6-ab13-b3491e46dcf9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d407041d-d845-4083-b9f5-bc360ce130c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b41a02-2c52-4f6b-a75d-d48d25d2b80b",
        "cursor": {
          "ref": "cadd5d84-7bc7-4c34-9052-2f9dcce92894",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "781e47f4-d3bc-462f-86fb-42cebf778812"
        },
        "item": {
          "id": "36b41a02-2c52-4f6b-a75d-d48d25d2b80b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e8ab96bb-a518-43b2-babc-b776b52bb7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4ec703-12a2-40a4-b812-3a236a60449c",
        "cursor": {
          "ref": "f6dc6a02-ad4a-4745-a511-5657f4c373f4",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "35017281-b50b-4b30-9ce6-63a69c40aab8"
        },
        "item": {
          "id": "bd4ec703-12a2-40a4-b812-3a236a60449c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "66789a3e-8901-40f2-8a24-6e31b4c270e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d321ad6-1043-4702-9faf-6438096c3047",
        "cursor": {
          "ref": "3e91a784-5d7f-42fc-9830-500b6d864ab0",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f1415d5c-c2f4-4e17-ac38-11c42641c275"
        },
        "item": {
          "id": "8d321ad6-1043-4702-9faf-6438096c3047",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "081d92d7-9164-4d04-b081-c03fda678cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da282aee-bf85-42b9-a337-698e2e5fb605",
        "cursor": {
          "ref": "21acda18-3b59-46f3-913f-47753760b09d",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "36546ef8-e513-4e84-be33-dfebc3ef6bae"
        },
        "item": {
          "id": "da282aee-bf85-42b9-a337-698e2e5fb605",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1c3c1fe7-eae7-47c3-8f82-552c743ec711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8285e531-cc37-4dd8-be4d-49d4bd61cb64",
        "cursor": {
          "ref": "e4de9296-9fee-48af-bb98-0dab58aaa5c2",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b133172f-726d-4aa3-b318-b17b10cf1902"
        },
        "item": {
          "id": "8285e531-cc37-4dd8-be4d-49d4bd61cb64",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "50121ee9-f36c-454c-bc9e-dc251a7e7621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede627ea-e5c8-4be8-97ce-be4810bfc0cf",
        "cursor": {
          "ref": "c7f0b972-5903-4633-af89-b8c6eb2acceb",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "01a045bf-e5f3-41f1-bac2-aa95e4e5616c"
        },
        "item": {
          "id": "ede627ea-e5c8-4be8-97ce-be4810bfc0cf",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1c5d85be-feba-461e-8ebc-62ecf93e2843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a85189c-58ae-4753-9633-926431239069",
        "cursor": {
          "ref": "6d51d708-50b4-4faa-8dd1-7121869a1487",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "031a753b-6539-423d-a66c-75c53042c9cd"
        },
        "item": {
          "id": "6a85189c-58ae-4753-9633-926431239069",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "47095081-9ce2-4f11-bdf0-72c75207ab12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c458b2-877b-46e2-9a20-6d2276dcf69f",
        "cursor": {
          "ref": "a2190d17-3ed1-4855-8202-e525647dbf5c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c7df6987-a355-4b0f-a7ec-9796473d91a9"
        },
        "item": {
          "id": "f3c458b2-877b-46e2-9a20-6d2276dcf69f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f21b274f-9923-4b62-81ce-9327de405523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545e9f66-910d-43f1-a2ce-1ddc0d05a91d",
        "cursor": {
          "ref": "7e0de49f-1f93-442d-a62d-5963ce9db356",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f6f2936c-8a04-48b4-8dd6-e9e83aa01f0a"
        },
        "item": {
          "id": "545e9f66-910d-43f1-a2ce-1ddc0d05a91d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0add4a44-39ec-4364-a312-87a76b66769b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a0f884-70fa-4548-b956-436debe185c7",
        "cursor": {
          "ref": "f2409a27-4ea3-4101-88dc-63298d464ce2",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d290c03a-983c-4ab6-a745-e08c92af058f"
        },
        "item": {
          "id": "02a0f884-70fa-4548-b956-436debe185c7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "11ea4905-1e85-45c7-8d5f-7a41e620138c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05646d3e-803b-4607-b3c9-1a6171fbf145",
        "cursor": {
          "ref": "08994243-9000-491a-8969-9191e5d9698d",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2dbbdeb6-e75d-457b-9681-aee357bf377e"
        },
        "item": {
          "id": "05646d3e-803b-4607-b3c9-1a6171fbf145",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6378f411-8cf0-4054-8ba0-423e55b5fe60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb18736-b27b-4f7f-9665-4cea7452ea33",
        "cursor": {
          "ref": "6d0ff9b3-e54f-4ee0-a328-c1cc48ec74ac",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8a82eff5-24d2-425e-a574-514e34a271e5"
        },
        "item": {
          "id": "ebb18736-b27b-4f7f-9665-4cea7452ea33",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "65a82840-ea3b-4950-8d90-4d7b6cb1199d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e22edd0-ef4d-4005-81d6-b22266ffa74e",
        "cursor": {
          "ref": "6691a9cc-502c-4f78-bfcf-46ec132898a5",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "652ada5f-a1c0-4d9f-9eda-5bf6ae09204c"
        },
        "item": {
          "id": "8e22edd0-ef4d-4005-81d6-b22266ffa74e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5ef224be-34a0-4b66-965a-55e8b90da6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a579e57f-c389-4358-b629-290cd116baf2",
        "cursor": {
          "ref": "2c08ab56-8008-4d1c-bec3-5f206fbfe667",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "da051b6a-5d25-4ba5-b1d1-a99287b9e02e"
        },
        "item": {
          "id": "a579e57f-c389-4358-b629-290cd116baf2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7f395eb0-39bb-4797-9bc0-3f4dea4131bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c91af0a-3e6a-4c65-864a-31ea78df820a",
        "cursor": {
          "ref": "c887a399-8395-44c2-978c-7bce1f794d59",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "49d6acda-a3b7-474a-982a-c4f5f4687a1f"
        },
        "item": {
          "id": "8c91af0a-3e6a-4c65-864a-31ea78df820a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1f9322e0-5580-4a51-ba39-289ce07c99a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864d782a-76da-4b89-913b-b231e7549085",
        "cursor": {
          "ref": "2dabc7e5-a220-467b-84b6-d4e51392784e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "10f63215-ba8e-4cda-8e46-6f2b434575cd"
        },
        "item": {
          "id": "864d782a-76da-4b89-913b-b231e7549085",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "89ae4842-4915-4c21-b311-bbe4e334e76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4efff63-4205-4695-8188-237df690c758",
        "cursor": {
          "ref": "12579049-90ad-453e-bd72-b4b6cffb1fd5",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "61dda11c-f058-4526-aa6b-6566340f7349"
        },
        "item": {
          "id": "f4efff63-4205-4695-8188-237df690c758",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a042a21d-a1da-4b56-8071-0c89c1eefb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba018d6-eab6-4aaf-bd3b-b9acfd5858e2",
        "cursor": {
          "ref": "2e0f2365-4bd0-4442-a9cb-8336e1b4d613",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2450974c-1701-446d-a7c4-f55db382d2ae"
        },
        "item": {
          "id": "1ba018d6-eab6-4aaf-bd3b-b9acfd5858e2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7881438e-9723-4b8d-8265-ad39ca5ddeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e9268d-a30d-4477-9bb1-793c4eb7601b",
        "cursor": {
          "ref": "2de23807-ecad-47ce-ac2c-805cc77b115b",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f895688a-c130-431a-a00f-55b7b7604072"
        },
        "item": {
          "id": "86e9268d-a30d-4477-9bb1-793c4eb7601b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4434b3e5-2ff1-4ee1-81d2-d94d0d68d386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be1b56a-75c4-4933-9e76-edfecfcb3673",
        "cursor": {
          "ref": "a72c3cab-948d-4748-bc8e-ed2bf4411eab",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ac1088b2-cbec-44a8-b879-0be7df83b71a"
        },
        "item": {
          "id": "6be1b56a-75c4-4933-9e76-edfecfcb3673",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "430bba19-e5b3-4dba-a601-5076f77ef2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53de8e72-78af-4f66-8ef7-e57eec6d65b8",
        "cursor": {
          "ref": "8c4371a8-e368-406c-990d-38cb6b35fdf6",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5708a565-b1ac-4e47-a0f4-db07f208bce0"
        },
        "item": {
          "id": "53de8e72-78af-4f66-8ef7-e57eec6d65b8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "558d5f81-38af-4124-a893-408e5b700163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee2c719-3406-4554-9838-fd9b16f78afe",
        "cursor": {
          "ref": "e3544893-53ab-4057-8e02-58350502b534",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a9597a60-742d-4c36-8afd-a2e4794a151e"
        },
        "item": {
          "id": "9ee2c719-3406-4554-9838-fd9b16f78afe",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ce60d0fc-1d58-42d6-a041-7f6a8fd98914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd83bfa-02f2-4042-aee4-c0f7e11388ca",
        "cursor": {
          "ref": "11697881-294e-40c9-bc57-16f6af7e912d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0e8a7fd0-d866-4307-b07d-184fe1919b94"
        },
        "item": {
          "id": "ecd83bfa-02f2-4042-aee4-c0f7e11388ca",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "207cabc0-2bee-439f-960c-370e44009c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4b2602-d9d5-44d8-a50b-4d5a9c7f9fc7",
        "cursor": {
          "ref": "131352e9-05ac-404a-a03f-f372476aa883",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c991239f-e990-4e5a-b829-efec73dfb45a"
        },
        "item": {
          "id": "cd4b2602-d9d5-44d8-a50b-4d5a9c7f9fc7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2180686a-e943-4009-a113-3b2539d38bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15ec147-12e0-4213-bd5b-10b35c2dd9bb",
        "cursor": {
          "ref": "65c1aa98-936d-415b-8d91-8e46e911f7fe",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3e275f24-130a-41f5-8e43-111484ddddb1"
        },
        "item": {
          "id": "e15ec147-12e0-4213-bd5b-10b35c2dd9bb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b6753904-afb6-471b-9ea5-f0c947edbdfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de16f3e-ca75-45d6-86e8-7cb32c69b298",
        "cursor": {
          "ref": "a728330f-48b6-4d7b-bb10-5e95266135ad",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "01eba25d-5246-4972-8622-a0928e1b9955"
        },
        "item": {
          "id": "1de16f3e-ca75-45d6-86e8-7cb32c69b298",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ee704268-1313-4daa-9670-f9b2d3b3fcb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a153cd-4b7d-44b0-96a7-c5709f904e21",
        "cursor": {
          "ref": "409a56b3-aaf8-4a96-ab14-2869254a35ac",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0ab5f120-d3f5-473e-bfc5-758719da88b3"
        },
        "item": {
          "id": "e2a153cd-4b7d-44b0-96a7-c5709f904e21",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "83324618-81a7-415c-867f-5700524e75bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d81c5a-25d8-4b3c-852f-55501f0810fb",
        "cursor": {
          "ref": "bdb43ca0-3d93-42c7-89c2-7c9157737881",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3a6f64c8-61c2-490a-b686-08fc8e2ced96"
        },
        "item": {
          "id": "74d81c5a-25d8-4b3c-852f-55501f0810fb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "da6b997b-73c5-420a-8f91-1abd6650434f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d723fc98-6f6d-49c2-9c63-2d85fd92a1a3",
        "cursor": {
          "ref": "ac4803e7-1cd6-4947-9648-1a34363b3578",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fed4cf30-ae17-40a4-aaeb-f277c0682161"
        },
        "item": {
          "id": "d723fc98-6f6d-49c2-9c63-2d85fd92a1a3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ab6df43c-5a9c-480c-aadf-c9e4ddc3663c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39363562-8005-4c66-92c2-fd8ef66bde5c",
        "cursor": {
          "ref": "16060fd9-cb09-4401-9425-5d676474e8e9",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "80023146-5c98-4872-b3d6-68215af438a8"
        },
        "item": {
          "id": "39363562-8005-4c66-92c2-fd8ef66bde5c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4333ead4-13fd-4a5b-905a-74684b3fc3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033ece60-dfb2-4ee7-b0aa-4933ca79899c",
        "cursor": {
          "ref": "9bf23cdf-d4a9-4821-afd2-1b42ebe01eed",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "da0455b1-0f63-4f42-b72d-ab45553cb9a3"
        },
        "item": {
          "id": "033ece60-dfb2-4ee7-b0aa-4933ca79899c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9c896f86-bddf-485e-b6bd-51273f0be5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5eebe08-c5f2-4087-900a-9a642038d749",
        "cursor": {
          "ref": "67b3a4bb-2186-4c89-903b-291f4fe660f3",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "296bfaaa-b2ae-45c6-b5ea-e697ede5ef17"
        },
        "item": {
          "id": "b5eebe08-c5f2-4087-900a-9a642038d749",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "de1a0944-3281-4fa7-bbdb-e156f5a4f085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de682731-887f-4f2a-8727-0002369b508d",
        "cursor": {
          "ref": "9268c5d8-6d78-4d9a-ac4d-9669a548da1f",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6f59fefb-4595-4315-8728-4892703788df"
        },
        "item": {
          "id": "de682731-887f-4f2a-8727-0002369b508d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "77985e6b-94bf-4c0a-8869-5895c887dd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3609b2-05a7-43f9-b7a9-9c1f2efae9d1",
        "cursor": {
          "ref": "bd567709-4170-4d10-89f7-1dc6606ce337",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2791f2bf-9b23-4d16-aef9-b7ba6160e225"
        },
        "item": {
          "id": "5f3609b2-05a7-43f9-b7a9-9c1f2efae9d1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e0b2e8ab-edf5-4ae5-91e2-78436455c4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eea8aa9-62a4-417d-a4cf-f18d971bee09",
        "cursor": {
          "ref": "1964e537-d10f-4902-a2b1-b923def7ef6d",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "063b82ff-018a-4fe1-a569-08dbae1d0b60"
        },
        "item": {
          "id": "7eea8aa9-62a4-417d-a4cf-f18d971bee09",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9dac3e28-81f8-41a8-ab66-cb415ccbbcbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76f669c-158d-44b8-9b5c-0b09e3bb4d78",
        "cursor": {
          "ref": "ba699e41-2641-4063-ba77-27bf926fa7ca",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0cb8051d-77c9-4132-8e66-34e4722be978"
        },
        "item": {
          "id": "d76f669c-158d-44b8-9b5c-0b09e3bb4d78",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "124e41d7-ec80-428b-abc1-4ee60018a0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d209c4-d94a-4280-a77e-f871252cbea1",
        "cursor": {
          "ref": "e5b43597-5f96-4ea5-a05f-bf666094fa9f",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "76789300-6e21-41d4-8da6-67e7180c929c"
        },
        "item": {
          "id": "c2d209c4-d94a-4280-a77e-f871252cbea1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3fe00964-85b2-4d7d-82e9-fb8924821cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189f556d-04b3-4bd1-a630-2deb2447362b",
        "cursor": {
          "ref": "dbb01f2a-0a95-48fb-bb6c-c4d362bd4b0c",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "224a32db-53c9-4124-bfbc-998d6d577043"
        },
        "item": {
          "id": "189f556d-04b3-4bd1-a630-2deb2447362b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dc5f9fa4-e428-4cb8-b858-f62af2101155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13b9fec-a2eb-4668-8948-f7a13b71e24e",
        "cursor": {
          "ref": "f63f3d8c-d04e-4b5d-b14a-c14fcc355e00",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8051a832-da92-494a-9358-06adce22ff87"
        },
        "item": {
          "id": "e13b9fec-a2eb-4668-8948-f7a13b71e24e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "09242bd6-0fa1-412e-aa1c-2f73caceb841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ace0a1-15b5-45cf-804a-cb52d14ceca8",
        "cursor": {
          "ref": "929f4357-db8a-440b-ba4b-6d527a213f73",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ed3b7d2a-ce01-4395-8030-b7884eb28d67"
        },
        "item": {
          "id": "14ace0a1-15b5-45cf-804a-cb52d14ceca8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "96ff6ed9-7bdc-4b66-988d-28fcb2a1c77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e345709-7ef4-43b2-9ea1-1d4fa9cc5a70",
        "cursor": {
          "ref": "dcec53bb-acfe-454d-a088-4cce022f908d",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "119f64e3-2ba5-4750-a38a-b1c312bdf9cd"
        },
        "item": {
          "id": "5e345709-7ef4-43b2-9ea1-1d4fa9cc5a70",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7b0138c7-f36a-490b-9345-70aed6f5d59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976e64da-267b-43d0-9aab-69ceb5a5a5b6",
        "cursor": {
          "ref": "6bfd3eec-d228-4057-93c4-a6b542dfb492",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "587b7d11-416e-40c1-bffa-79c5cc8c2d81"
        },
        "item": {
          "id": "976e64da-267b-43d0-9aab-69ceb5a5a5b6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2dcfc119-53a6-42d3-be1d-3605a21945ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d95428f-d5b7-40b7-8561-0307dd1d7a84",
        "cursor": {
          "ref": "061a4d8c-accf-4f76-b73d-686210c8b10d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c86afea8-c292-48e4-aedb-3c934bd85cee"
        },
        "item": {
          "id": "6d95428f-d5b7-40b7-8561-0307dd1d7a84",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0622579c-8567-4662-b15a-bc80f8a76e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9872e01-704f-4119-bb93-57e12fb41988",
        "cursor": {
          "ref": "f5f34627-7564-4094-b63f-3bb99d953a89",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "91fc56ba-c26b-4428-b4b7-609254bd4aea"
        },
        "item": {
          "id": "f9872e01-704f-4119-bb93-57e12fb41988",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9cb9d8d9-3e8c-4187-a09a-caa6ea8dcb2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1480bab4-01d0-490e-92fe-c0e8d9a282a3",
        "cursor": {
          "ref": "81437c2e-beea-4a71-b027-33dc88b0456a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "82ec9c5c-64a0-42d3-a6f1-b7f57ab93e79"
        },
        "item": {
          "id": "1480bab4-01d0-490e-92fe-c0e8d9a282a3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1279d6cf-09f2-4029-ba64-46add84c3d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c22489-abc4-4b51-a87a-758d8959b546",
        "cursor": {
          "ref": "4a487fd2-2310-4e86-8567-13c33ac4417b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4624334f-e9de-4982-b3b6-fd27d951b388"
        },
        "item": {
          "id": "90c22489-abc4-4b51-a87a-758d8959b546",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fe495f8a-1485-4373-a7d2-183a91c1257e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7453cda4-a4c7-45eb-897e-935765b40fb0",
        "cursor": {
          "ref": "f295a48a-ca9e-4917-adc8-0ddcb8421248",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6f1f1900-eb39-46f3-81b7-a6bc46160d70"
        },
        "item": {
          "id": "7453cda4-a4c7-45eb-897e-935765b40fb0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7c18ada1-f375-424a-acb7-507d642462c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a295931d-d1d0-45d7-b27c-14f96c3559cb",
        "cursor": {
          "ref": "4bb572b6-1c41-40fd-90af-986d18bef04b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c3f28363-fcf0-4630-9880-8276b248b2d5"
        },
        "item": {
          "id": "a295931d-d1d0-45d7-b27c-14f96c3559cb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8ea421e8-8be7-4a18-aef4-03a6d8609a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800c88e4-7290-4907-9986-77d49213f196",
        "cursor": {
          "ref": "8b79f818-fa1b-4dd0-bfa6-eb4251801597",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e2d38c43-c777-4c33-bbe0-8137e9d1f935"
        },
        "item": {
          "id": "800c88e4-7290-4907-9986-77d49213f196",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d9e1894e-867a-4950-b124-5c2e5076af01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9496781-ff0f-44bd-b397-2b74fd177b42",
        "cursor": {
          "ref": "dc19cb0c-c659-4ec7-bafe-a619c66a4095",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2dac6e49-4628-496b-b5b8-e80cd04fed1e"
        },
        "item": {
          "id": "d9496781-ff0f-44bd-b397-2b74fd177b42",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a8cb1f60-218b-4f41-ba21-9a99ae70fea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5724a461-fc33-43a9-b351-eca9cba75cb7",
        "cursor": {
          "ref": "d0b14f8f-56bc-47e1-ba81-287c494ae7dd",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "90058344-f324-43ce-b7a8-a6656744a391"
        },
        "item": {
          "id": "5724a461-fc33-43a9-b351-eca9cba75cb7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "636b83a3-4187-449e-b749-22bc8de44c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f877e8b0-6a57-40dc-9bc6-80ab34b4690f",
        "cursor": {
          "ref": "a4d2749f-673f-4bef-8b26-fc9bca373dc5",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ba5f8ac2-2641-476e-93d5-59e2e9cf2ec0"
        },
        "item": {
          "id": "f877e8b0-6a57-40dc-9bc6-80ab34b4690f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7cd58d2a-c9fe-48e7-9452-d713e1052ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b07cb2-a449-43fb-b2f3-ebbd330f0ca3",
        "cursor": {
          "ref": "5907e263-09ed-45e5-8680-2e66a23aa698",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dcc08c64-4214-42a7-98c9-592b3f8d34ae"
        },
        "item": {
          "id": "32b07cb2-a449-43fb-b2f3-ebbd330f0ca3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0627fe5f-81cf-4f1c-ab45-0b8c515a0e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634f8d16-1b91-40a6-89eb-a2ca490bc513",
        "cursor": {
          "ref": "0c14255a-1f86-4baa-95c7-e6e888cb37d6",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "24b78868-cdaf-459f-b6c1-2941acbfece9"
        },
        "item": {
          "id": "634f8d16-1b91-40a6-89eb-a2ca490bc513",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3cfce380-c0f5-4b31-92e8-57e492bba617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb12a253-3c89-4b5c-89a7-2ab08e003a42",
        "cursor": {
          "ref": "d6c8f109-4070-41cb-81d8-c573babf6de1",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "80b7ae25-911d-402f-9359-b07ec48516c1"
        },
        "item": {
          "id": "cb12a253-3c89-4b5c-89a7-2ab08e003a42",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "30890491-bd5d-407e-816e-770c470cff4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227fcfc1-4fc9-45c2-a2b6-96830209f4b0",
        "cursor": {
          "ref": "c83053f3-16c8-4654-9ff6-bb36fc065eb6",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "05ecee98-b7fb-4a00-b26f-9184666b4add"
        },
        "item": {
          "id": "227fcfc1-4fc9-45c2-a2b6-96830209f4b0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2949e435-e26d-47c3-946d-56ba707b4bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5b9576-257c-4a4c-b55e-75419dd675a6",
        "cursor": {
          "ref": "6233233c-044e-4132-8de5-bc0f57d11a7b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1e920ae1-48eb-4a81-a40b-eda5b6b28231"
        },
        "item": {
          "id": "6e5b9576-257c-4a4c-b55e-75419dd675a6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "94f4969b-046c-45ca-8f96-1cc7937c9d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2526ba-5b3b-425c-9902-885534663f2d",
        "cursor": {
          "ref": "202971a4-3ffb-454c-b5d0-5da7d0ca5b40",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7e4cabb7-6ea7-4b59-aa37-147d3e345958"
        },
        "item": {
          "id": "3a2526ba-5b3b-425c-9902-885534663f2d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "bdf52c4a-34da-4110-8bd3-83e278221b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c38d426-ac4d-48bc-a539-3255d9b7bccc",
        "cursor": {
          "ref": "af4683d7-d958-47c0-afa4-c133ac0a2743",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b5f9857e-0677-472a-a94e-5b6d102ca177"
        },
        "item": {
          "id": "1c38d426-ac4d-48bc-a539-3255d9b7bccc",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2b7fa207-bf6a-49ae-b83d-0ed51e65fa29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0ced53-6a2d-40df-ae25-bdb5edffb07f",
        "cursor": {
          "ref": "ee82610d-b1fd-4caa-8726-d96ab9342fef",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d19c8294-5aad-4d51-acff-fd80c8d7278e"
        },
        "item": {
          "id": "3d0ced53-6a2d-40df-ae25-bdb5edffb07f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2cfcda39-31c1-4440-8b2b-3ef76d8b2718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5feefaf7-951d-4728-a44f-145642efd170",
        "cursor": {
          "ref": "fea501c1-81a4-4468-9014-61c04b315da9",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3590d8fb-36d9-472a-b603-64d03a8c5927"
        },
        "item": {
          "id": "5feefaf7-951d-4728-a44f-145642efd170",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3315e016-d7e6-4949-a0c5-5586539cd11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840d4636-eed1-41c7-aa3f-12b6883bb2d9",
        "cursor": {
          "ref": "0d67c147-9d52-47f7-bae1-0b3a05cba368",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fb5c084b-eef7-4826-b550-0ef787087e21"
        },
        "item": {
          "id": "840d4636-eed1-41c7-aa3f-12b6883bb2d9",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2153e18b-4c55-46dd-84eb-b76b9a288d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d9808e-81c1-4b8f-8039-2ec81999a694",
        "cursor": {
          "ref": "854d6af2-1201-46dd-a601-dc672a248914",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bc9085eb-cbb0-4bf0-a6ef-15a2ee9371d3"
        },
        "item": {
          "id": "f0d9808e-81c1-4b8f-8039-2ec81999a694",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b2cea286-864c-49ae-8fe6-3407b0300b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27492572-a398-46db-856d-2cdfc3e60c0a",
        "cursor": {
          "ref": "814721e3-cfca-40b3-b6c5-e27252cdab52",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5e0eb21d-2ae1-41a2-a74d-26eccd1181e8"
        },
        "item": {
          "id": "27492572-a398-46db-856d-2cdfc3e60c0a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "79938c8c-11cb-419f-8852-b8d966b7acab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb7c431-1649-45a3-80e6-2d99606c31e5",
        "cursor": {
          "ref": "9584ae44-12f9-4450-9f8b-f5c90a7cb2e1",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "23ac4755-19b3-4287-b2e5-47a46a3066a3"
        },
        "item": {
          "id": "3eb7c431-1649-45a3-80e6-2d99606c31e5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a1dcfa33-4a07-436c-83b6-1a7e89c15163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe9a780-2db1-4135-8c3b-214d74fe03d5",
        "cursor": {
          "ref": "2bae90b7-c9d2-48e3-8823-5b2c9b07c579",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5bf3e10a-193a-40b4-8fe2-b6a0462143f9"
        },
        "item": {
          "id": "2fe9a780-2db1-4135-8c3b-214d74fe03d5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c1c39b18-a47b-405d-b8a7-999c11a78b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee90de9-12e6-4e3e-939f-27f484d9a900",
        "cursor": {
          "ref": "48f13093-91aa-4134-a471-e60577763e82",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0bab9a96-b1e9-4098-9410-e7ff85d57934"
        },
        "item": {
          "id": "5ee90de9-12e6-4e3e-939f-27f484d9a900",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bc071acc-f965-4f42-874f-282d4b81762a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545affd8-66c2-412e-acd2-221950413d63",
        "cursor": {
          "ref": "9a63e2e8-8184-4c48-b10a-35c053ae83d4",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "203cd6ff-5fd2-493c-ae79-e2fb711676c4"
        },
        "item": {
          "id": "545affd8-66c2-412e-acd2-221950413d63",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "475b7506-e6b7-4901-8414-5301fee30849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4504f1b-0991-4bba-b15a-88eb9c5016e6",
        "cursor": {
          "ref": "1b6fd754-3e4c-4b6b-bb8f-a4e764dd83cb",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a5da1d87-7e35-403a-bfe4-9fe371ce48bf"
        },
        "item": {
          "id": "f4504f1b-0991-4bba-b15a-88eb9c5016e6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "435b7354-67fb-4da5-b9c9-fc4adeb6e920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61606208-391c-49a6-96d7-c2916098b765",
        "cursor": {
          "ref": "9a332ce2-f704-4167-88e1-5b1666e39620",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a7482469-3c56-414d-bfbd-0f79a3ae3bf2"
        },
        "item": {
          "id": "61606208-391c-49a6-96d7-c2916098b765",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8ad28802-7d78-4552-944c-483b9031d1f4",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "44cdefb3-3c44-4ece-8343-9ebe7442473c",
        "cursor": {
          "ref": "9a4f3a58-786f-4f1a-a26b-893616caccf9",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c46970f8-9443-4bef-b3d8-13974960b203"
        },
        "item": {
          "id": "44cdefb3-3c44-4ece-8343-9ebe7442473c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dd51e873-3194-465c-80d8-1eb2f7849b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26cb411c-b14f-4e93-9dc2-77b4c59f0dd2",
        "cursor": {
          "ref": "320b4e2a-370d-47c2-9277-21d0657917c0",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fe5f23a7-393c-4027-9ed1-4113f2ddd2f8"
        },
        "item": {
          "id": "26cb411c-b14f-4e93-9dc2-77b4c59f0dd2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "61e4a086-936b-4e0d-9a55-85b0a1c1924f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cca742-b761-4c8e-be96-d0ccf7112620",
        "cursor": {
          "ref": "291e7a34-3a70-4215-a14e-f1d6fa6891fa",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "51aefb23-052a-4c2b-8c6e-83a80df5d56e"
        },
        "item": {
          "id": "21cca742-b761-4c8e-be96-d0ccf7112620",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e6d13e8a-46b2-4531-814d-480f03f85b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7ed637-0b10-49f6-bf7f-01bc8b9a23a2",
        "cursor": {
          "ref": "cc082bbe-7d6c-41e7-bd11-d774710a1fcc",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9d628de1-12fa-4d2a-af1d-849aa867da0f"
        },
        "item": {
          "id": "cf7ed637-0b10-49f6-bf7f-01bc8b9a23a2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "458423d6-36cb-4d39-b512-82f79127d85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18b5a20-151e-4701-8997-7ca318ce472d",
        "cursor": {
          "ref": "f3079160-7f82-4728-9eaa-7f85ebe3555c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e949f6c7-a677-4148-9d88-068627aae3d4"
        },
        "item": {
          "id": "e18b5a20-151e-4701-8997-7ca318ce472d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c0bcfacf-e478-435b-b3b8-31d2ac6062a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a2739d-ccc8-4d6f-9687-884d1a144225",
        "cursor": {
          "ref": "b2369b24-0a73-46af-80f7-930aabfb490b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "638e7edb-6db4-4b10-811f-bb8dddd65af8"
        },
        "item": {
          "id": "d8a2739d-ccc8-4d6f-9687-884d1a144225",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a2400b60-9ec7-44e6-8a3d-eae05b7cee29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e95dca9-d2a3-4c9b-bf34-203302c58324",
        "cursor": {
          "ref": "86a4404c-9331-443f-8656-aebe9378c729",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "30fe84eb-0570-48bc-a1fc-6d3f2d56681a"
        },
        "item": {
          "id": "3e95dca9-d2a3-4c9b-bf34-203302c58324",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a849f604-2f19-43b3-b06e-1aee84479264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e254395-ffcb-4259-91b2-d528d0e1a6d4",
        "cursor": {
          "ref": "a7d91328-a518-475b-8587-90cfe046dfe3",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "48096e54-0d59-4c6b-9a68-d8fa11145877"
        },
        "item": {
          "id": "8e254395-ffcb-4259-91b2-d528d0e1a6d4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a5698c9b-bd7f-4d2c-a51d-43bc428dc096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23144bbb-82d3-4794-85b4-b63b075bd2ee",
        "cursor": {
          "ref": "51b038d9-278b-49ad-8967-03541b221fc8",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "12a55365-218a-49bc-b9b7-d410cd6d725d"
        },
        "item": {
          "id": "23144bbb-82d3-4794-85b4-b63b075bd2ee",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "88ad8667-e756-48ae-9554-81505e38d110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7863758d-d7a5-4879-906b-777af793def4",
        "cursor": {
          "ref": "5698da66-a301-4709-8493-472ea7ed867c",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2c6bda64-3f4b-481c-be44-0f31193efda0"
        },
        "item": {
          "id": "7863758d-d7a5-4879-906b-777af793def4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4cabb90c-2406-4ffc-b76e-b79c60f0b84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cc30e8-8144-402b-b859-06143b1f0532",
        "cursor": {
          "ref": "c4069243-c2ae-4b2c-a656-d08f9c1886f6",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8e77f8e3-f154-4e78-8948-55e97c41e5eb"
        },
        "item": {
          "id": "86cc30e8-8144-402b-b859-06143b1f0532",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "82738661-0cbc-42e3-b70d-ea4c3d7bb2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dad9f1-2b16-4ce0-a38f-a7d20b2e8424",
        "cursor": {
          "ref": "5a17ff52-08da-42b2-b4f5-ef1844c4cab2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b1944a5e-e0f4-49c2-b215-e579cb10746b"
        },
        "item": {
          "id": "a6dad9f1-2b16-4ce0-a38f-a7d20b2e8424",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "54920d0a-fc59-4f77-83cb-fe166e14fe0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3fc01c-e141-44aa-8f88-bf055eb340d2",
        "cursor": {
          "ref": "c34b4d6e-f66e-4c03-a3b3-11ea1815ce03",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "34d8d973-0417-4fab-b95e-32f58dd042d8"
        },
        "item": {
          "id": "4a3fc01c-e141-44aa-8f88-bf055eb340d2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "20d08202-2387-411a-8564-ab3c700599b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7391029f-d45c-497f-98ed-af071a1cdff3",
        "cursor": {
          "ref": "1b78b6d7-d677-41cb-bb56-1322676246a4",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "106650e4-0fd1-45a3-9444-05e5036dcd76"
        },
        "item": {
          "id": "7391029f-d45c-497f-98ed-af071a1cdff3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f7f09add-45c0-4e30-bda2-9da0507f0cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87456c1-11d1-4d3d-8aca-2e1841b54e6c",
        "cursor": {
          "ref": "2f250d7b-e361-45eb-96cd-014e35aed163",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7fb9924f-2d3e-48dd-b32a-c582748ff189"
        },
        "item": {
          "id": "d87456c1-11d1-4d3d-8aca-2e1841b54e6c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "86eba709-98fd-40e6-beb3-07d44706db92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9324469-dc6c-48b9-8809-4b076e75bdc4",
        "cursor": {
          "ref": "d3314cbe-46a9-480d-b8f3-b2eeeab45ccc",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "efd143d3-1916-46f9-b5d2-5455d6b7fd59"
        },
        "item": {
          "id": "f9324469-dc6c-48b9-8809-4b076e75bdc4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c4482826-f3be-476d-9df9-1896dc4e450b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2be8deb-efdc-4174-a7c3-6fd87d72a0a4",
        "cursor": {
          "ref": "e41a13f6-551f-4f16-8bd2-b4509ecd7229",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "32a30f60-4494-47b1-8902-7e463ef4a99b"
        },
        "item": {
          "id": "d2be8deb-efdc-4174-a7c3-6fd87d72a0a4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ab2fe607-a190-4535-b96b-94d4ac19f9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b736a9ed-c2e3-44b8-8a47-ede25f30a4d8",
        "cursor": {
          "ref": "9d9e3422-e3a1-4a32-bfde-7894e65da552",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d613cd9c-2dcb-4778-a146-2134fea578a0"
        },
        "item": {
          "id": "b736a9ed-c2e3-44b8-8a47-ede25f30a4d8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "abc066a2-b459-4658-b293-e3c399668c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aac80c3-a3c4-4c73-9ceb-5cac42adfa5f",
        "cursor": {
          "ref": "4fc9a820-b827-4f0f-b34b-4360a684a121",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "79944973-857c-4905-9a8f-520ca9ab8f92"
        },
        "item": {
          "id": "8aac80c3-a3c4-4c73-9ceb-5cac42adfa5f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d202f302-e16d-46f6-9a9f-926b470c7590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1969efd-d033-4d28-82ff-fbdf4a25c776",
        "cursor": {
          "ref": "eb8ef299-804c-456d-af6b-603cf797a405",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "24fc2ea1-87ca-4b16-974c-ea5899beb233"
        },
        "item": {
          "id": "e1969efd-d033-4d28-82ff-fbdf4a25c776",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1d6b38f5-b234-4075-b0e9-04f9045d16cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7d6082-637e-4fc3-83bc-337147e17cd6",
        "cursor": {
          "ref": "8b59f833-ee1b-4f93-810d-78db0d0ce2f4",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2aa4a224-5b7c-4a36-b5a6-899dafc6374d"
        },
        "item": {
          "id": "2d7d6082-637e-4fc3-83bc-337147e17cd6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8713278b-e5b3-4399-9ca8-b521c207bac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5751a3e0-2b01-4892-a272-2a984504d2da",
        "cursor": {
          "ref": "78a70fa9-affd-4e0a-b565-3c0e8e46a98b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "86ec1117-96e8-443a-801d-25de392c6285"
        },
        "item": {
          "id": "5751a3e0-2b01-4892-a272-2a984504d2da",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "38d84e69-7487-4c66-9133-acd7c8803517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7fb0c6-4730-4107-9917-b8038a9a7f41",
        "cursor": {
          "ref": "0bd2299d-cd37-475d-a32b-45db387cae47",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a6ed75c1-5185-4d3c-988c-53a0effc75de"
        },
        "item": {
          "id": "ca7fb0c6-4730-4107-9917-b8038a9a7f41",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "39b0f5a3-9acd-48fc-a3b6-18d585fa3c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d888be4-9120-4fb4-a64d-a618e011d71a",
        "cursor": {
          "ref": "1dbbb13a-f999-40ab-95d3-d7a2ec47b530",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7f3651e5-0aeb-42e9-aca4-f58f2ccf4c53"
        },
        "item": {
          "id": "5d888be4-9120-4fb4-a64d-a618e011d71a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6b8f208b-04e4-4ec2-8d17-c43099e0b22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5714751f-f51d-4f8d-adc1-045d9e255440",
        "cursor": {
          "ref": "839e9468-bf0c-4b44-9521-e97d6f7b586d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e59a79d9-db83-4244-a985-e707082c912c"
        },
        "item": {
          "id": "5714751f-f51d-4f8d-adc1-045d9e255440",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "baf0ae87-6b28-4131-9011-38e344a887fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669c58ea-2378-447a-9681-ae2db31d106e",
        "cursor": {
          "ref": "4d04bdf4-db6a-4cde-82d6-85e1b048d609",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "088091ac-c389-400d-a85b-3ab654b5c164"
        },
        "item": {
          "id": "669c58ea-2378-447a-9681-ae2db31d106e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "70f52548-a9ec-41b5-addc-494eb2762494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76877714-04b1-467e-a37f-69a42a7925ee",
        "cursor": {
          "ref": "cc802584-c046-46cb-9a12-5d8bdc14244e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "970e84fe-2dca-427d-a5d1-afdb8f567d8f"
        },
        "item": {
          "id": "76877714-04b1-467e-a37f-69a42a7925ee",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "619e1d68-9a90-4b11-80de-1dfc2a4f3dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cfbb5d-3985-4b4e-b860-78127614915d",
        "cursor": {
          "ref": "21251c7e-e33b-45a6-b78a-7b22a2e1cc30",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4e593107-2cd8-4e9b-a9f7-24ba47743c75"
        },
        "item": {
          "id": "48cfbb5d-3985-4b4e-b860-78127614915d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5f668d0a-4878-486e-936e-a9876e4d10de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbf5a79-7bb4-4d83-9b2c-d2c339651a12",
        "cursor": {
          "ref": "50d77946-53f9-4463-a80b-ff8664638f3d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b8adf38c-9200-45c5-9ff5-5adf099c177c"
        },
        "item": {
          "id": "3bbf5a79-7bb4-4d83-9b2c-d2c339651a12",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e0b70194-8f2b-4e55-aeca-7b1a35a0349d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ea03bc-7d31-47bb-88f5-464408df88f8",
        "cursor": {
          "ref": "7890adc1-1f6a-44df-a3e9-f73a8e8d7645",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "10cc77e9-a176-42e0-9138-076c3597f4f4"
        },
        "item": {
          "id": "c4ea03bc-7d31-47bb-88f5-464408df88f8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "709098f1-9aee-4544-8a7c-e7f23ddca3e6",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cf72b98c-82a0-4088-b499-ada28cdefff5",
        "cursor": {
          "ref": "c5b80c2b-056d-4ed1-a4a9-ae59eb8c0d58",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1aa65aad-737e-4508-8c3d-33b7bc911e0d"
        },
        "item": {
          "id": "cf72b98c-82a0-4088-b499-ada28cdefff5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "87061659-07db-429e-89d7-e564a770d7e5",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "bf518598-910e-4125-9b7f-28c9fa921344",
        "cursor": {
          "ref": "5583f9fe-4bd4-4be1-8c13-a78152393c90",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4febd5fb-1e15-400f-9efa-b5797a581b9b"
        },
        "item": {
          "id": "bf518598-910e-4125-9b7f-28c9fa921344",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "73ffbdc6-38b2-4fd1-9d35-858aa2a45811",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9cff11e5-b226-41b4-954f-75b333fc8af0",
        "cursor": {
          "ref": "4bdecc5a-1a3f-4dcb-b44a-dcfbbb48d3db",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cafa0017-3db2-4e25-aa6f-fa8878cce3ed"
        },
        "item": {
          "id": "9cff11e5-b226-41b4-954f-75b333fc8af0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e4cc7f76-2cc3-4fee-b423-02e61a424f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0d4045-54b4-4376-9636-daf1793fd61f",
        "cursor": {
          "ref": "122ae98f-4b0f-4092-9694-bba95dabaf6a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6b550c35-899a-4b90-9819-0aab4723c21b"
        },
        "item": {
          "id": "5b0d4045-54b4-4376-9636-daf1793fd61f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4d116142-ad51-496b-be8c-c5099b08deff",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "88f54ce4-da1e-4289-aaaa-0a863ab47ca0",
        "cursor": {
          "ref": "7f43985b-ff89-494f-82d7-97b7a2a83916",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7c0f34bc-48f0-4ee0-a926-70d4aae93a71"
        },
        "item": {
          "id": "88f54ce4-da1e-4289-aaaa-0a863ab47ca0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2381b38b-cc62-47be-a273-4bf28dba145f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "90c69b37-56bc-47d2-85db-b5795edd823c",
        "cursor": {
          "ref": "52e93349-af5b-47fc-95ae-1f8e9afbd0d3",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "52d71913-c4d1-4fc3-b10d-1e74d3b2656c"
        },
        "item": {
          "id": "90c69b37-56bc-47d2-85db-b5795edd823c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f1895e0d-9e88-4255-aee1-789c692340eb",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "455ed501-2b02-4272-a7ec-9a51bd0fa154",
        "cursor": {
          "ref": "4b48f271-d58a-4559-91bc-9110d11d086f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "24741d1f-9e99-4ee5-a353-65d33df0bd7b"
        },
        "item": {
          "id": "455ed501-2b02-4272-a7ec-9a51bd0fa154",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "87f1c9e3-edf9-4cb1-bfb9-b5d2e17fa0a9",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "401d1d4b-503a-4edc-a5a8-be7bf5b3bdfe",
        "cursor": {
          "ref": "4f70f996-74bd-44d5-86f8-f7d04a76d84b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d346912f-22bb-48ce-bbd2-d735cc0647ed"
        },
        "item": {
          "id": "401d1d4b-503a-4edc-a5a8-be7bf5b3bdfe",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "741763a9-353c-4c8a-bd63-b08c5f6fc38d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "377f4178-e5d3-459b-857f-685f0860df1c",
        "cursor": {
          "ref": "624a3f7b-f9a5-427c-9308-8b14d33426eb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a17b4460-00b1-4592-8fb2-9aa46d8f88e0"
        },
        "item": {
          "id": "377f4178-e5d3-459b-857f-685f0860df1c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "543a6c8b-6882-46a5-b5e5-38f06469d6e5",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2f264854-3391-4862-b73f-2a596d1141bd",
        "cursor": {
          "ref": "4b628e70-cfe1-4a6b-a9f6-e253d75fe6eb",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7e30ec3e-9b6c-4057-a470-a92cbc968e54"
        },
        "item": {
          "id": "2f264854-3391-4862-b73f-2a596d1141bd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "574df84a-8d7f-401e-ac45-2ac6aab45995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ba72b9-b429-4807-b911-6a341c1fd588",
        "cursor": {
          "ref": "009c7dda-2a3d-4562-8f8a-506999b6ab39",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3e02f9f7-4e4f-480b-8882-49466ab3f10c"
        },
        "item": {
          "id": "86ba72b9-b429-4807-b911-6a341c1fd588",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e9724b18-ea0d-4998-97b3-b5cc0580364a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454e3243-0d69-46ce-bf01-47d635b66fee",
        "cursor": {
          "ref": "e12e1137-46ee-44ae-adbf-d69722c55cc5",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2a5f3299-e92a-4d9e-9de1-7ca63c998a3e"
        },
        "item": {
          "id": "454e3243-0d69-46ce-bf01-47d635b66fee",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7aa9e3c9-299e-4ce2-8c40-c01c6e26a539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449cd33b-b2be-4771-a927-e431db81f065",
        "cursor": {
          "ref": "7796b6fa-a6d3-4820-b3a0-6151d7496ca6",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e69f4915-ba4c-47f7-9d2a-8fdbce17fd75"
        },
        "item": {
          "id": "449cd33b-b2be-4771-a927-e431db81f065",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3f26bc16-8a8a-4ffd-8cad-d16015f075cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340ee713-79b9-4df0-91f2-e57c82c201b1",
        "cursor": {
          "ref": "755d2c43-7d6c-4dec-910a-63e1daad450d",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0d12c52e-5f44-4ce7-bbe2-b3a775532624"
        },
        "item": {
          "id": "340ee713-79b9-4df0-91f2-e57c82c201b1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f99d1664-c186-4755-a966-d7f1d19d60f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8bd6672-2c45-4925-a78b-fd72e084c788",
        "cursor": {
          "ref": "16aebb19-7556-48d8-871f-367bc9e90109",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "33ee0d97-d663-40a0-891d-986b99c9d2df"
        },
        "item": {
          "id": "d8bd6672-2c45-4925-a78b-fd72e084c788",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e4eeaa64-5770-4bb8-a8c7-fa0834ebb432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa21fde5-a512-4579-a33e-509ac158f79e",
        "cursor": {
          "ref": "e22b2edc-d3f7-4258-966c-385633354e91",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ca43e206-84d1-4927-8a4b-188b7c4f4417"
        },
        "item": {
          "id": "aa21fde5-a512-4579-a33e-509ac158f79e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "70db3747-3ec5-4c0b-83e5-510472227649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43c036b-4213-4bad-a2ce-6b8097e39790",
        "cursor": {
          "ref": "9f53c904-d12d-4e6c-af71-694f0d3bf282",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a3c67d75-a559-4f1a-ba39-0c7117799670"
        },
        "item": {
          "id": "d43c036b-4213-4bad-a2ce-6b8097e39790",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "92038872-93aa-40b4-afed-832e34cc4208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8c7338-5ede-43a4-a0d2-a889ad8b3f5e",
        "cursor": {
          "ref": "115ce221-bff5-4498-b4ea-c068769ac091",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "068f6b2b-e2df-404e-a073-125c65479b88"
        },
        "item": {
          "id": "1a8c7338-5ede-43a4-a0d2-a889ad8b3f5e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d0b71545-68e5-427a-a516-f4794a06cbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa8d4c4-bec4-4f48-a728-d87f7e842f3e",
        "cursor": {
          "ref": "3e42ed33-84f5-4b08-9104-36a29a633bd3",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ae9ca4ee-a025-45cc-a3a8-1c16c7671c30"
        },
        "item": {
          "id": "6aa8d4c4-bec4-4f48-a728-d87f7e842f3e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cde1bb7e-e872-4808-b926-234612000297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445d8b33-36fc-4fd8-a4fa-552d63b4bd83",
        "cursor": {
          "ref": "57d595fe-2f70-48e1-a258-0d602ba37ec1",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "12ee6653-11d4-4da9-a594-f1948834a322"
        },
        "item": {
          "id": "445d8b33-36fc-4fd8-a4fa-552d63b4bd83",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "94b0ff8f-3d9e-44c7-af84-b1225359efce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55223061-5fd5-41a7-9c96-e358e0b71c82",
        "cursor": {
          "ref": "401ee548-b14f-4775-943d-55de6a8baa3e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b5be748d-a004-4593-98d4-2001dc610ae4"
        },
        "item": {
          "id": "55223061-5fd5-41a7-9c96-e358e0b71c82",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e73dab54-cfd1-4e63-999c-52ef49556ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e07c21a-e3a9-4f01-b3f4-dee8942abfc5",
        "cursor": {
          "ref": "0531c36c-6f10-4c70-97cf-2e7442d89a7f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "633301e7-ae88-4f9b-9fd7-63adf7d1dabb"
        },
        "item": {
          "id": "0e07c21a-e3a9-4f01-b3f4-dee8942abfc5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "59ddbf88-274a-4aae-a80e-2bf9f6898673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d962744-36a1-4d2e-aaab-87a3a59a9ad5",
        "cursor": {
          "ref": "b34bb65a-7b40-4b03-9d31-b5f9ec800984",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5b4bee02-a26a-4d60-ae40-7842898c71e8"
        },
        "item": {
          "id": "1d962744-36a1-4d2e-aaab-87a3a59a9ad5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2b1c2e89-617e-4ab3-8651-e0d8b73cbb40",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ad4ce4c8-c13c-4d24-a6d1-e7dee8fd657c",
        "cursor": {
          "ref": "6830f995-eca8-450a-ad7f-6e28157d57bf",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e1e87e16-ea97-490a-b1f4-a59e4eff3cfb"
        },
        "item": {
          "id": "ad4ce4c8-c13c-4d24-a6d1-e7dee8fd657c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9705e109-4a79-4ce8-868e-06a669c2965c",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "3b97e760-6e1c-407d-afac-bc77d7683641",
        "cursor": {
          "ref": "b9abfcc1-e188-48f3-982e-693b1a9fde5d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0efcb9d9-8a39-4383-9bf0-cbd34bf20a5d"
        },
        "item": {
          "id": "3b97e760-6e1c-407d-afac-bc77d7683641",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ad544f93-3acc-409a-850f-4cdc83299769",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e67621fb-ead0-4230-a0f8-abc02a1ef4d2",
        "cursor": {
          "ref": "742190f6-68ea-43aa-a7cd-e20b5789b1ce",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "18183e67-b652-42c8-9f12-fc4bce2d7103"
        },
        "item": {
          "id": "e67621fb-ead0-4230-a0f8-abc02a1ef4d2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "63cab4f1-0961-426a-a7c6-28befb5ae747",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0ea73abf-d3c0-4c07-9e65-7bae58e67c25",
        "cursor": {
          "ref": "3e51c605-712f-490f-8ae6-1bb04fb3d9c2",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8c04f7b5-6174-4766-8916-b0a46c3aeb51"
        },
        "item": {
          "id": "0ea73abf-d3c0-4c07-9e65-7bae58e67c25",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bf0a6f8b-967d-4168-81d3-b3b0fce4a9b3",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6a505944-ecfb-4037-bd35-e31e2ddf18f3",
        "cursor": {
          "ref": "d05544b0-ac00-492f-a42d-36f3bdd45e41",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7b471cf1-ac75-47a4-bd2d-8d69fea80435"
        },
        "item": {
          "id": "6a505944-ecfb-4037-bd35-e31e2ddf18f3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dc56f7b1-c524-4d5e-93bf-70ef2688a01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede9732b-be37-441e-8c8d-23019cf6ecb1",
        "cursor": {
          "ref": "f7b33227-c5b0-4a14-8ce8-e21d4707b187",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6b1f662a-f8cd-4751-beb5-fcd614011168"
        },
        "item": {
          "id": "ede9732b-be37-441e-8c8d-23019cf6ecb1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cb1f842e-8c67-415c-96e8-fad36baf568f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0d6c73-a8a6-454d-b714-9f49a8fad73b",
        "cursor": {
          "ref": "ca735d5c-e1a7-4bee-8975-95fc46fb0f13",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "802df8a5-66e0-4326-90ab-2631946f2586"
        },
        "item": {
          "id": "8f0d6c73-a8a6-454d-b714-9f49a8fad73b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "47670950-e3cd-4d60-a03e-52833b574e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac1e2bf-bed5-4f75-a799-3d7c3ee03713",
        "cursor": {
          "ref": "9c9cb539-f804-4f38-82a5-097dc0395990",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ed3743bb-5260-4516-89c9-44573b2e8e5e"
        },
        "item": {
          "id": "bac1e2bf-bed5-4f75-a799-3d7c3ee03713",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0c2e7c77-c348-48ee-a18d-e3e8e4ee0e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b519da2a-cab1-4828-ab3b-a6f73d3c946e",
        "cursor": {
          "ref": "8e6198bb-e248-4817-9b69-ff922e7ce8db",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "92979c20-f855-4af1-a5aa-51507c037ee0"
        },
        "item": {
          "id": "b519da2a-cab1-4828-ab3b-a6f73d3c946e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fd1e0ec3-5e02-4585-baf4-453471c81cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f67a85-ecae-4a9c-9398-cdde40109f06",
        "cursor": {
          "ref": "da4f4ca2-836c-4e1d-bb5a-f146341554b0",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "96515cb3-9a3a-4ff5-b10d-93d10287024e"
        },
        "item": {
          "id": "b5f67a85-ecae-4a9c-9398-cdde40109f06",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "51302fa2-bd8b-4b05-a443-e77653a83bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501022a9-593f-4359-87e1-a0aec62a7fcc",
        "cursor": {
          "ref": "b5d39d98-36b1-4424-bd19-19a3bbf0f816",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "514fdb2f-f52e-474d-a20b-d4deb1afeafc"
        },
        "item": {
          "id": "501022a9-593f-4359-87e1-a0aec62a7fcc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ffec00aa-ea62-48d3-84c0-f6fa5adf6903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f473c3f8-7f2e-45bc-bf85-a698083548e9",
        "cursor": {
          "ref": "ad303e09-651e-43a7-85f1-5bc4a98c9b6c",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5428c984-864c-441f-a559-89bc99afa778"
        },
        "item": {
          "id": "f473c3f8-7f2e-45bc-bf85-a698083548e9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ac7eea1b-e6e5-4a9b-9f50-c86107ee8946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc43d346-13f0-489d-afcd-d92c231b0688",
        "cursor": {
          "ref": "21a616c7-25d2-4612-aca8-35d017d5548e",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2e18d9b9-f5a2-4108-939c-0430f5488acb"
        },
        "item": {
          "id": "bc43d346-13f0-489d-afcd-d92c231b0688",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e2ae8bab-370d-47e1-bbb2-92b18d759080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4b7098-fb3f-41f9-9691-a86a55c832c7",
        "cursor": {
          "ref": "7d65f147-274d-4c09-a204-395e749c589a",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f9c96536-e8d8-4e65-8d38-f3d6d8954445"
        },
        "item": {
          "id": "ec4b7098-fb3f-41f9-9691-a86a55c832c7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e3a4b26f-5c40-4dcd-b574-a3e6b5d0379a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10777db1-a798-43c3-84c7-bba2a3036643",
        "cursor": {
          "ref": "42e7b9c5-a4a2-47a7-b795-0e055ae672dc",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ec78a1dd-7548-4701-98d9-859e45de307f"
        },
        "item": {
          "id": "10777db1-a798-43c3-84c7-bba2a3036643",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7c724e13-7085-411c-94f9-877e8e2e0b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9d5b3a-95f8-468c-9b1e-bfd4e1c80fb0",
        "cursor": {
          "ref": "858aaa52-68b0-47c8-af00-6a11cc59b5b1",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d9fb11b5-2440-4bc0-a69f-a2eaff0d5f55"
        },
        "item": {
          "id": "fb9d5b3a-95f8-468c-9b1e-bfd4e1c80fb0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4b98d087-9af1-4997-8b44-3f11aa43f059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb91ba5-6f05-41f1-bd2f-5cf8c88fd52c",
        "cursor": {
          "ref": "b162e66e-dd8c-4c56-9972-94b1dc99ea78",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "48fb8365-6d1d-443c-bb07-91f2b0973be9"
        },
        "item": {
          "id": "dfb91ba5-6f05-41f1-bd2f-5cf8c88fd52c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c145ca0f-369a-4e44-b28d-0689f6fa6c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b911df36-c21b-4ecd-b5c5-c4fd1815b7e7",
        "cursor": {
          "ref": "21279921-3862-45eb-a4cf-a5e8067026af",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9f4b6063-b8d9-4ae1-947f-89834d9bc6ff"
        },
        "item": {
          "id": "b911df36-c21b-4ecd-b5c5-c4fd1815b7e7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6f6a84c7-a7e5-4dc0-ae0b-679f575bdaba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9f1c36-f1b8-412d-939d-bb29672c6440",
        "cursor": {
          "ref": "96ed495f-6317-494d-9f05-643f4e3f5b19",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "2d157d75-f280-40b8-b662-5a174684888d"
        },
        "item": {
          "id": "5e9f1c36-f1b8-412d-939d-bb29672c6440",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6df4fdeb-5820-44b3-b149-dd97d04b7618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56165f6-9b4f-40d1-b344-583cd349250a",
        "cursor": {
          "ref": "9a5d2fba-858e-46d6-9633-800c92b3e177",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2376c165-c4de-49e3-bcd7-ea1bf04208b1"
        },
        "item": {
          "id": "e56165f6-9b4f-40d1-b344-583cd349250a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "758f6d21-9030-4e38-b432-537cf2c22fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ac6aaf-c633-4a3e-aeef-9fadd7d6c43e",
        "cursor": {
          "ref": "8613e6f3-fda8-4f06-8f9c-e99a11bd6c69",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "deda0ea3-46c2-437a-b949-9c8161733c5c"
        },
        "item": {
          "id": "58ac6aaf-c633-4a3e-aeef-9fadd7d6c43e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fd9c28b8-0cde-4c2c-be90-48e9d1f35598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ceb334c-6442-41f6-9f07-43be3a78e08f",
        "cursor": {
          "ref": "b398218c-dc6f-4f54-9cb2-0875065d51cd",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "1e125ba8-bad9-455c-87dd-56268a2a178c"
        },
        "item": {
          "id": "1ceb334c-6442-41f6-9f07-43be3a78e08f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cfae9052-4464-4aaa-9f39-b881ec96a6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddffc65-2fbd-4554-a936-641868956dc8",
        "cursor": {
          "ref": "c8f52331-25b4-46e4-ace2-e4d6f8a70448",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f5e0d56c-94bb-40bf-a081-f4139e34d9b6"
        },
        "item": {
          "id": "8ddffc65-2fbd-4554-a936-641868956dc8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a67575c5-7251-4712-bf64-df96c8f8db11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d89a1f4-2879-430d-ba6f-f8b193fcb84b",
        "cursor": {
          "ref": "6b9f1e21-221e-402e-8d71-3fd03b765135",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b2f0a328-f58b-4565-9ad1-b85f14cdcb11"
        },
        "item": {
          "id": "2d89a1f4-2879-430d-ba6f-f8b193fcb84b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "25fa4c6f-8f4e-42dc-b385-91c6f8a482cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3acacf-2d68-4e74-b895-f7be4864ff41",
        "cursor": {
          "ref": "8897da95-5611-4fdd-af95-78b57cab453c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "597aff29-1f29-4140-a083-8fe4d083b787"
        },
        "item": {
          "id": "cf3acacf-2d68-4e74-b895-f7be4864ff41",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2849960b-d10f-4fe9-910a-011f9a463689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dfbfd49-ee45-4587-9f41-275530476420",
        "cursor": {
          "ref": "71f9bcc8-e6a6-47b6-bbe8-55c94942ffb6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1ffab2b8-4984-4d62-a62f-bccc14b160ec"
        },
        "item": {
          "id": "1dfbfd49-ee45-4587-9f41-275530476420",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dbc7d29e-be65-447a-94de-989683b774a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc82abe-5a6f-43b0-8a3f-39606f35be88",
        "cursor": {
          "ref": "aadd20cf-59d1-458e-85e3-9c9e884134b3",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "40fc30d4-a3df-4b19-b120-18dfd60f83de"
        },
        "item": {
          "id": "4bc82abe-5a6f-43b0-8a3f-39606f35be88",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d861c49c-bf1b-4363-9164-11fc98b5105b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0145b804-2543-4f10-a2d1-6a7ff2d07c7a",
        "cursor": {
          "ref": "074b1dcd-766e-4141-8e64-ad8398cac275",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "1781671c-28c3-413b-810f-8a24d841e56e"
        },
        "item": {
          "id": "0145b804-2543-4f10-a2d1-6a7ff2d07c7a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d25615e5-892e-4086-b703-4d4f653c3649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47049376-a159-4be0-bb1a-6bd38fe64eb6",
        "cursor": {
          "ref": "1abad1dd-a37e-460b-adc6-6aeacef21e09",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c9716581-9e5a-4a39-8c58-44139395b2f5"
        },
        "item": {
          "id": "47049376-a159-4be0-bb1a-6bd38fe64eb6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c4c75a39-0580-4ed5-8cf7-86cafc171088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b7a750-9679-45d9-ad72-31d2935226d6",
        "cursor": {
          "ref": "87f85d2f-712f-47a3-9913-517c3f6d6c06",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "fb5476e7-23ed-4246-b93a-802a3bc7fcb8"
        },
        "item": {
          "id": "53b7a750-9679-45d9-ad72-31d2935226d6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cd4b2d77-aade-4b24-b680-d5ef5c2414b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e05463-c6d6-4120-ab86-e1523f1cd8dc",
        "cursor": {
          "ref": "bffab650-0aeb-4cde-a422-3d2058099244",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "971c8be7-f6af-4cdd-8699-b0ab04273de8"
        },
        "item": {
          "id": "93e05463-c6d6-4120-ab86-e1523f1cd8dc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7c921e6a-8fee-40a5-9981-683e14ef77cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a3751f-05ef-46e0-bbee-42ecbbbc7e7b",
        "cursor": {
          "ref": "f8c51b26-6f9c-4e5e-8150-1b06b3a7ef5e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "43a308ba-edd4-4316-8863-2edf1588794e"
        },
        "item": {
          "id": "d6a3751f-05ef-46e0-bbee-42ecbbbc7e7b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d83bbb37-15e3-45ac-8f3a-864f5c917e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d418caa-951f-468f-b3f8-c885328e2d60",
        "cursor": {
          "ref": "5792c3c8-922f-4254-b3cf-6b2e3550822a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d4650c26-3911-48de-bb07-e23d6dcfa514"
        },
        "item": {
          "id": "9d418caa-951f-468f-b3f8-c885328e2d60",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "059e62fb-34c9-4a08-a9d9-cdbb7d075f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62b06fa-6e04-477a-aca8-7f2847366847",
        "cursor": {
          "ref": "9b6515e3-6d39-4929-ba69-242a6cacb02f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "55ca8e59-74ff-4484-9b08-8b429e39f083"
        },
        "item": {
          "id": "c62b06fa-6e04-477a-aca8-7f2847366847",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "47ee7de5-f41c-4bfd-bd31-30a9e87d0f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665e7ccb-bce8-46d8-8aeb-17a99fca12c2",
        "cursor": {
          "ref": "065a8672-98da-4237-8de6-10feeaacf583",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0e72e363-98e7-4bf8-b81e-bd266da06069"
        },
        "item": {
          "id": "665e7ccb-bce8-46d8-8aeb-17a99fca12c2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d555b061-faa9-4c08-878f-d8cfeac66a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb954fdb-66d0-4288-81f8-63dc12596e38",
        "cursor": {
          "ref": "a6331c0e-2baf-49ac-800c-9b1888d51cfd",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0a71b1dc-fb52-4b6f-8b06-eb657aab9a3f"
        },
        "item": {
          "id": "bb954fdb-66d0-4288-81f8-63dc12596e38",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9178d5ee-7304-435c-8d0d-9562adae4835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea54d4f-2160-47b8-91e5-81963d7eedf1",
        "cursor": {
          "ref": "a89ccb14-c995-4de9-8012-4c10c2b8802d",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "514d8189-f625-484f-82fa-bef1d33cb3ea"
        },
        "item": {
          "id": "3ea54d4f-2160-47b8-91e5-81963d7eedf1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a4c85009-c768-470f-8c11-1f8cf52e6dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b653e374-c477-4dea-b14d-cc13af446469",
        "cursor": {
          "ref": "b2b87d4f-81b7-4cd5-985f-fc9e59d67329",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9f3a87ab-85ea-49c3-a223-a399e2147128"
        },
        "item": {
          "id": "b653e374-c477-4dea-b14d-cc13af446469",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2025d9ec-eaf1-4d9b-93ed-0a016e214247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faaec09b-b626-42cb-951e-b85063639ca0",
        "cursor": {
          "ref": "349b6a9b-49ab-45f2-a757-c2a41b4ddca2",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d7b09100-087d-4f87-ba94-984607d75a7a"
        },
        "item": {
          "id": "faaec09b-b626-42cb-951e-b85063639ca0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "43784f96-7699-482a-9112-000405d7de59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46f889b-1955-4098-bfd7-1902366f5c1e",
        "cursor": {
          "ref": "b219697c-3eb1-4c65-a7e8-d9baaa7c4e32",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "26557476-ed83-4d23-99d1-16559e15632c"
        },
        "item": {
          "id": "e46f889b-1955-4098-bfd7-1902366f5c1e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "10e7b89b-dc02-42a3-92f5-d49fc9ba9c9c",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d3f9812a-45c6-4ad8-aedc-8371f7c6e711",
        "cursor": {
          "ref": "7693ea06-a1fd-4325-9578-fd7725735647",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ed7bba44-e9b9-4fb3-8836-3b3e967839e8"
        },
        "item": {
          "id": "d3f9812a-45c6-4ad8-aedc-8371f7c6e711",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5ff3cde3-1d87-4278-994c-d434ca7e2345",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d5e852-4677-4f5d-a9e3-8fdf1f4d71dc",
        "cursor": {
          "ref": "8e80c00d-155e-430c-a91f-563c3cce3d43",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ba058792-2680-4ce7-9a3d-186022d5b505"
        },
        "item": {
          "id": "27d5e852-4677-4f5d-a9e3-8fdf1f4d71dc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3140308e-edbb-4419-af7d-8a502d92a921",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2541fec7-f09d-4f14-916c-e90c9847991d",
        "cursor": {
          "ref": "76399554-7303-411b-8b28-d676d53b7e27",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9f5070bd-aecd-454a-a54f-bae7e5fd37fd"
        },
        "item": {
          "id": "2541fec7-f09d-4f14-916c-e90c9847991d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2cf60d0a-671b-4b1a-bb0e-cd1ee4f284fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2541fec7-f09d-4f14-916c-e90c9847991d",
        "cursor": {
          "ref": "76399554-7303-411b-8b28-d676d53b7e27",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9f5070bd-aecd-454a-a54f-bae7e5fd37fd"
        },
        "item": {
          "id": "2541fec7-f09d-4f14-916c-e90c9847991d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2cf60d0a-671b-4b1a-bb0e-cd1ee4f284fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2ea5f3-07e9-4bea-97e0-a07098808731",
        "cursor": {
          "ref": "849bdad5-e554-4750-8347-d4bbb536f8f1",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e59d1bbd-2460-4c7a-b9ca-2f6a0253884f"
        },
        "item": {
          "id": "3a2ea5f3-07e9-4bea-97e0-a07098808731",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c9486a48-237b-40b5-b177-e6302bd96bcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e096fcaf-a529-472e-bdf4-76fdfae232cc",
        "cursor": {
          "ref": "0b27bdcb-3773-4c37-8222-24af11a01e1b",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "88e17f3b-fd4f-4046-b421-65d5448aca36"
        },
        "item": {
          "id": "e096fcaf-a529-472e-bdf4-76fdfae232cc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bc71e2df-1778-414b-9436-7b3c764224bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}