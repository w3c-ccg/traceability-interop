{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dfd623cd-42e8-42cc-8025-296570d80824",
        "name": "Clear Cache",
        "item": [
          {
            "id": "cfd0c9e1-23b9-46fc-a77c-d014a1badf31",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "168fdf8b-d4d2-45e2-8b6d-b6dde0ffe703",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6c85464e-398c-4291-b1a4-c2092c0addb8"
                }
              }
            ]
          },
          {
            "id": "431351f0-d030-428e-9ad9-e510ac8ecc96",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a71fccb5-7029-4a2b-8559-93af55cb9784",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d69e461b-f751-417d-a838-c7971776ee44"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4b1ca5cc-9e22-44c7-8214-43a63cf58d50",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e1a6b7cd-8ba2-49e9-8bd3-6397462303b4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1b99c0b-9158-4906-85c9-1d6fc1a39bd0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6aa09f7-9b5e-48fa-b134-f4dff22a5e4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56a379ca-1aca-440b-8971-7779372992ed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9675462c-cdb0-4d4d-889c-2126a447b611",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f45b4ea-08c3-47e6-823e-476dc74c2020"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e7c3167f-ae95-4260-a4ae-224d1d661560",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0aaff9e6-a070-4842-9dbb-a421f6787d99"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b23684da-02be-47a9-8c41-314215219bdd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7dc09e17-b2bf-4fb4-b7e6-c853ea8c936f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7585fb58-c271-41cb-a1f6-cccad3bfe68a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "155733e1-e229-446d-88af-93884e2088b8"
            }
          }
        ]
      },
      {
        "id": "dc51de13-9a31-4aa5-8ea5-bfb2977c6e4e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4153e449-9bac-427a-af19-526c57ca00a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8483290e-2cbd-4ee1-acf7-e9719473540d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "15fb8906-97a8-4fee-8599-e985d8f92767",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ef195c-ee8e-417e-8b79-2f9c3e7cd2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f327c9c-96a1-4463-8944-7a9980c05eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fa02b1-82c6-4be7-8030-e39fe4a9726b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdef2a6-ccc8-4866-93b5-6f45782786a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6827e85e-49be-431e-8aa3-7a87b0ce5f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63336543-caf4-4378-b47b-00df62526688",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b665134-33be-4d39-997b-6e9f44638048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5eeacb37-b38e-4ad9-848d-c43c16d264fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "36fdb8c6-3aa6-4a61-bae6-f032bd77dd12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59ed6a2f-e6e9-472b-8952-17001db90abf",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57f03a1-1c00-409e-b2c0-7086956de0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71ee2b8e-0e35-4bc9-ad55-f482d4b99d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ec2e60-1b46-477a-8e0e-a5bde2af7999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5edbf87d-77c9-47f0-9db5-12bff8f73421"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "20bbcbbd-f855-4c2a-aea9-b97cec1bc0e5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49f3a326-995e-4fc7-aa60-e87107138497",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d45097e8-fbe0-430c-a0be-cb29a10b96d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1d5c212c-0e8f-459b-ba2e-60d2c0b406d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6616dadd-73f3-42a0-be8e-605c5c4c2dfe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "214a9841-57d2-4099-a1f8-916c47a2d3d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0cea9b07-8f0e-494f-b437-a72d9eb45428",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ee8f1d5-44f2-4b9e-b988-c8394ea3eb7a"
            }
          }
        ]
      },
      {
        "id": "581aedf9-8d8b-4393-af43-7084ad030412",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "480fd463-12b2-4b46-9874-348931556310",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c32639e5-d7fd-4802-abfd-7316b33fcee9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d15ffe91-338e-4c11-b2e3-d2bebf9ecf7d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5643a4f1-c3ae-4223-9b45-c04d1b3afc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de07cf1-c06e-4be7-8cb6-96cc64f0612a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0462c5-1dc8-4fa4-a67d-bbdd89365015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd9699a5-594d-4d54-bcf1-d2dc930fefb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c8d132-1bb0-4b41-ad81-be2d497aa72c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cf4e7d-1c3b-4eab-a775-cd6314a5a53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2480ca7-ea15-42ac-87e2-f084c104911b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb70e0b-1682-454e-a84d-7f1b0fc6f30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e39b173-5847-4c82-a0b4-90da20e401b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ef48eb-bb19-4139-b9d8-430794b7a786",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2846e5dc-ce11-4805-88fe-3fdbfa3bee69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a5741e-be82-40f4-8f98-9a90d8f6e7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587e1eb9-5773-4032-beb9-ab78aec2fe09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8376e33-4fdc-4390-81f5-b9504f42a07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d05b37e-6950-4ecc-b966-b4a93a4a8707",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0daf939-7b82-4e22-8bd1-04b0a91fef81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d219b863-5959-4898-85a3-d1070213e700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f790ec34-af6e-4f1a-8390-d05bd64f94c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "777599b1-8fe9-49eb-9339-2156a4b2f1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf0b7f3-5819-4a03-aad9-6badcaa3cd8b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b466d049-00f3-4985-8704-5c0c3b3ad912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea443a8-778f-4c1b-b041-23503f9c0921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb0969c-9ffd-4b83-be50-24c27fc699d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09eac465-544c-4ef6-b90a-98ea22f316b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d330d91a-0d22-48c1-8a2c-d60f05113b32",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39f7fcc-8e23-4e0e-a318-42856d8e2f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c7434e-570f-49ba-8b00-4a5017b9fe7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a20f82-b3bc-4314-b79f-06caa74d7548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "687fbf3a-a809-43de-aafd-e1bf71bcf12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6feb620f-9f62-4da5-9677-d6133b92c25d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec94c888-cf69-4e91-8601-223e4b2e11a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4d0614-051c-42fa-9bb7-accdd2f85eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce69f3f-a1bd-445c-a51c-3b08fcb9fe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9c11c0a-1ec7-4a03-b6f7-b8bf418468f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedf843b-59ec-46f6-b737-6316f87a1acc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a433d5d-0d52-4518-a0c5-a3ef6e137ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb44ad5-9d6d-4c9b-a35d-ab47dc99440d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ab2a5e-b05f-4ea6-8eb7-b04d94064ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae11da69-ab25-4e22-8e48-b44e5e67b6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cea962-20a1-4aad-aae9-259c004babf1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89bb5cb6-0c33-468f-9659-060f9f05b44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bcd3dd-7403-452e-85c1-447f9363dd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7341c2e3-86b8-49c3-ae29-58ce47121724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d743fb46-897a-48ed-88b8-e497aff43a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa947fe-0aeb-4862-b166-51e063e18411",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "597007ef-6850-4b47-8b84-c4a34f9d573e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51292371-0f29-4b47-a677-7e43c3da261f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a049fbf9-0abf-42a3-a9a8-cfcaabfb5af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4abe9e02-879a-467a-a341-29e129cd88b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ae7301-31cb-482f-9085-bb43e1e9be7a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc33be2-bb45-4f99-a732-be0128461ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab17bcd-ad20-4013-b1f6-9a4f31a1e7d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd068415-7627-453a-9d1b-390b5ff99429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbcfe365-17bd-433f-bb43-4ce8bb5dfce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbb944b-d378-425b-bb21-ae6622bd9fdf",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154a6a75-5dd2-4f74-a583-b79cd320a9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becbee98-9f75-426e-b504-c3c5b478ecdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c26223a-a863-4bde-8237-db2d334098e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6cdeb2a-53a2-4436-9b49-9f7cebc32f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011852c9-5217-43fd-94c7-0bb4c194e653",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91662cfa-5182-40f2-97a3-89940e923a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c567964-526b-49e4-b1b5-3f2d387d93e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62783c83-5ea8-4a38-ae09-6f1054b15443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6769764-3bb4-4886-b815-684be5e95981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8ad7d6-85dc-4ca7-a0a6-40f526997fde",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e42932-f1df-466e-a04f-aae0bd32c9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf7eb23-612b-4992-bdf1-9d1eeeb39100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a58c4f5-2c33-4a45-83ff-d1d4923216f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b52c6912-dd62-413e-91df-48f392585a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca2d67a-e40f-44d4-8896-520cbe2789f2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d380e4-533e-4823-ae8a-8221dfb3a254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7379fa4-32ef-4f73-b730-12f81c242b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bbef22-b562-4d44-a272-060a7d10cf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b2f2385-59d6-43f1-9d2c-caf97301cf89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a98848c-fe6c-4acb-9db6-4151f792e1f2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ce69a5-67d1-4c1f-888d-28b6c774f2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea59ec3-896b-4bc1-90aa-1a9f135fed56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30505a70-5d37-425f-b83b-e06a63c2824d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b8cd58d-c0d5-4dfa-99c8-e62e5cc3bdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad60d8b9-883a-4f7c-84ce-baebd90eb616",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf4e63e-3b1d-4703-9cb6-9cc6e6f6c196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a2b0c6-0dc8-448a-8fe1-d34ea4aa8288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0fb07e-a557-4f47-ab1b-82d4cd4eff39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a845126-eb50-497e-a278-60071e8cd89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1d8d75-f01d-460d-bdb7-286399f8a0da",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d9d86e-7e9d-4f62-8eee-fabb47441c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7ff58c-2682-4170-a3e5-0576414a263d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cae5e6-de16-4c7b-aed2-5afa51b9515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "01eb1398-777d-4e0f-be17-66d1daa69250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc432485-8e8e-4b41-9c3b-b693f87623fa",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c6f7c7-0cea-4878-852c-52eb6d436dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b5ece2-7cb5-447d-9f87-0f12c92c018f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b6fb54-ad9d-49f0-946f-c06f24d7c86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6088cf-faa6-4cae-9ae2-cc9506db449a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5164c56e-95f8-4b46-b0d6-20c43f9f73c2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a05ab62-2f96-4c4e-aece-251be7eb641e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db5243a-d525-4e64-acd4-1e6ec6eb9110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a7343f-ec59-4191-b2ea-becdf188bcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0419d72a-0099-4fba-81eb-c24f04806510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8059815-9adb-4ebb-8f44-cff8a4f82203",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cbecb9-b7c5-4b9c-b248-41059094ce2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9648ebc-172c-41a0-9b1d-aa8f8772b181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936cb507-b16c-4db4-b479-c074a64cc4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9754e8c9-ce1e-48f8-9167-b4bea4414e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656974aa-0f07-4a2f-b043-b1ca63aecc3a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce618c1-e5f4-477e-97f1-a58b3ebb6c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291d2607-2248-4978-a517-75998374b33b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369cad33-74f8-4c38-9659-443d9fa5bd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "237b6064-1d24-4a3a-a8b6-ea4d96a60642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95bc0ab-c9bd-4624-862d-78cc6b8d9e66",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3970021d-df6c-43b4-8ad4-3174be1a9930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374ed98b-e211-43fd-b0c7-21d88e53af0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118cf8b3-d0a8-4df2-8039-94209f7abf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66a36766-c67a-46b2-8043-1093bd6ec21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175c1dc9-ee9e-48ff-b0d1-89be54f3b4f6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ef7014-6fef-43a3-8526-1047ad0cccd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f0db14-b56c-4b8c-ac9a-1a29b2501d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae789054-e3c6-462a-acc0-edb7664da4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a35024a1-eccd-4a75-8250-36fff8d68257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c9af05-2502-410f-be73-2812c605e96a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3b125a-aa9f-4560-92fe-39c86d427c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2850b370-4680-431a-bece-066b67fe848a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a164c3-50a3-4d26-83f8-0cf61123afd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d08721-0da1-4888-93f3-b1328bcc6724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb15f0e0-da55-4f03-b90b-ace747076687",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b512980-3a3b-4e83-97fd-2b18554eb76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4608b951-f0f6-4fe7-b0f7-720100ce6af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f6b2bb-18da-45d8-9291-7fa4c87552db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "35553845-9581-4a89-b44f-e6f950283afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0331ceb-9da1-4056-ab74-819b6e904b69",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59003281-45a0-4bd9-8945-fa6ea1b9a94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3596089-e5f4-4edf-b0a9-f71d76160636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4720c85-39ae-4762-80f7-b142c8512255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "59393fb9-59ef-4ddf-8626-f96dd95ad83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317163e3-5d97-4623-a603-13d2a5414a7e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c783a35-fe3d-406f-a113-42e4b3a6a74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47901d8-dfc0-4868-ba08-370e43ab6e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2329e5f1-3f0e-4fa8-bbcb-d053b1d1e0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc9aff1-0622-45d6-a7d5-536f6752996a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c39700-7fd9-4fac-bcd4-5f9b68e5d9f6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c2c548-4907-496e-abd1-d309341e7d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a653439-5acd-4c5d-a73a-4d7098d42806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af69303-7d0c-465d-aa31-cf767d98f4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a00ef3d4-60b1-4cb0-ad76-9ff743b415fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687d4277-8354-42dd-a701-2d9791377caf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3f7b6a-113b-4634-a83a-59976b7107b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8c289d-ea81-4c5d-8133-1852b8cf72bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ce1ce1-8fc4-4329-9f14-d507f30e4097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "875cd22b-1014-46c1-9d14-b374b8ef7685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b4829f-bb71-4efa-944b-660228bdd401",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611ab176-466c-4725-bbb3-0133450527e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13130e7-bdc9-4979-a29f-7c6f1ba6f389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b773ae-85aa-4259-ad49-32848e62df6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "35cd9e70-54d3-414b-9a28-82f061136691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8722b809-5975-45c8-9869-041857435eb9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4708aafd-ac85-4b03-b273-f341fa10b55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd174cb-1555-461b-adf5-cfc747d444ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc80bfd5-37c8-469a-979b-903f790438c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1209cd9d-509b-49f6-8272-978c4b8c1c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab19838c-257c-4ad5-8958-a17078e4de99",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2569f2c2-b55d-4619-8c0d-1d9bf86fe909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b22218c-34bb-446f-90c6-8dea97ec9f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e83e93c-a23b-4fd9-8d83-4bfe65c57dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e03b8c-a949-4cc2-ac54-c5e751ec6d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2e1068-83d1-41f4-9ec9-dcaa9f594cac",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a6caf1-d0e0-4317-9fc6-356986664d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45b4752-ca6a-41b0-b26f-86ddea0f5c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3437e86-a181-4120-b959-d6d209359799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1354fd82-3be7-4000-8c4f-c32dc79bd404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3764ae44-400f-4a64-9829-58698f249586",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94377cce-8546-47d4-bc0e-a7def496c383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1423806-9b6c-4b88-9a85-4ebf43a99785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e5f642-f54c-494f-98d3-a29ca92d3c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "119edd1f-bc4f-475a-991b-a0b3ba1a3b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681bd893-4e3f-43a5-9518-e3e18dd2a961",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1dffe77-fcea-4148-8cfe-cc912f9167ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afbaab36-5ebb-4e75-ae5c-6929703a7362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ead06a-6e4a-4e7f-8aac-d7dbe7a44db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57a28ed7-eba3-4008-a428-630cbd00f61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814a4bb2-7d9a-4c71-a666-558bfca866d9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c14b48b-530c-46e6-b446-22fab6c54134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d4b157-1295-496b-8571-8689f0666812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae9efea-7bc8-42e0-a346-51390dc24acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33f079b1-1414-4b0b-ad6b-fbfe2d295fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913b31bd-95cb-499a-9b06-d8c04f988f48",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa173913-9b0b-4d7b-8804-ad6a7452eac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3976e9a8-e312-45e0-beac-05137dfbfe2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2ac0e5-da53-4df1-86ae-761e15fc3532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "197c1a28-f9a8-4994-89f7-78df09f6ac84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d00cd13-6338-4a3e-8443-61f4e312fa6f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69046d79-a63f-4aeb-9814-c1ba478043b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6623e092-da5e-4907-a036-f4d5ecea7163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550b2ebc-dabc-4404-9c68-a9ea04d7cd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0767442-7059-49b4-a17b-211c3f414400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3498af-fa81-49f2-ba99-8613acf75bf0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2955f70-9c1d-426f-a897-9ebd1572e876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd4ae98-b377-4664-ae76-54af551b61ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b578ed42-8a7b-4005-8c31-c66aec507c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b5eb36-bff9-4ece-ab0c-e256e867ad2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf40bcd8-5268-4610-9192-935532700489",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf27effc-e65f-42fd-8006-4fea84350279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141a50a5-153a-467b-bee8-91f5bb56751b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992894d9-3d4a-4650-9b78-aaa9d8917814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d0c148-9790-4bc1-b998-1b6e92348e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5cb491-e5df-4595-a540-f6cc791be6c9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3a1c1c-8490-43a1-b708-7c1ffea12524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad08eb2-7bef-42ff-86ae-1a74c476ead2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f339acd2-6e27-47c3-b55e-8164505786d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c655d76d-7a40-4acb-b7f1-5d17cf7e4294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22ff751-52ee-40a7-b026-68d9c6f8d2a9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d708af-3625-4fca-aed6-b378599d76e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61faeb90-9b2b-4dd4-90f8-c9aa235941d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54a8a35-0ac0-4731-b847-d931ed7f012d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "08ed3e67-2b4f-41aa-b2e0-bcb57af1f539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6441c7b8-a857-4763-a6aa-fff6b1a0f9f3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073f5cb4-462b-4fa7-904f-ceed307d5732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639ef678-9d54-4505-bad1-57ddbe156332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6e33af-0815-4eaa-91c9-e7226ec6a418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "68cb3bff-8c7b-4cbd-b06d-d30f116b2d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c07307-794e-46c2-8b17-a1fc7005c9b9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed93cbf7-fc34-4dc9-8308-9d596581088f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a441d0fa-da00-4c66-8df8-4157897774d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22769e41-ea64-480e-ba2a-21bbeacd56d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7caa946-d49d-4272-bd3b-c86c69e17c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4652a6-775e-4c08-9663-a6e56a549429",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2db0e5-a9ea-4b4f-9724-4b1b4f906a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4912c934-6936-4789-ac20-5fd764fbc4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78abee84-fe66-402e-9acc-8f1bdacf4a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "49ef03eb-4891-4215-95bb-354d1dc80cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c64693-2464-4b78-9bd7-ca1262610fde",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c69b49-3cf2-4621-af08-140c138f7a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7bcb4d-c1b8-46c0-91f0-04dc9dbf9889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a8f996-a5a9-462f-8b94-c14781466624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5717b92b-49ec-4a50-a718-8c05442591e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6488d6a-28c4-4c7f-a596-4203286966d3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf07149-1b47-4836-865b-9c173a362b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9243723f-45f2-4599-9640-4988da7fa60b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a19857-61d6-467c-b8b9-d14eb3dcc291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e60d747c-94c1-40f3-9977-785e44b60c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4949b372-523a-4aae-9745-4c8799799a77",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cbd10f-51ad-40d0-9a81-692e79e423d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f81b298-c993-4d48-a0eb-85da2cd2a377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec55433-db22-4738-8cec-1423fe29182d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a104cbf4-0f49-4349-986f-0f4fe20c75bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6353ac-fe02-44c6-85de-3c0fc3ee9289",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7912d0a9-e9fc-441a-b0e5-509c5f78f2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65472334-0bcd-49ba-b9a3-c22f13d9a9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c604538-987f-4efe-be29-7210f2f50714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86c01a63-caea-433f-8ddc-93dffd9ae262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d833a8e-9532-4237-8868-028fd636fa80",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d454dd9-cbc0-41f2-8efa-3e7fc022eead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8227d6bb-74b0-4e83-8318-4c8458e15a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0689768c-135f-42c7-8cfd-1b76e24795f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "20abff9e-d57b-4edb-be13-e15d7ab1466f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa29e43-14e5-43a6-a469-3419ea9878c6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8bcc48-622e-4db7-b628-ee865d89f152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a5d48a-c5e3-4fe8-a68d-88040cec551c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5597d04a-6acb-4249-8b75-582fb3b47471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5195ff3-f19d-486a-8cdf-e22b29e7fd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949bbb41-3301-4801-8eed-cbd1d4667e60",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b05cf3-a854-4f1f-af95-38a4be3be1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4045a9f9-bf7d-4fcc-b436-51d773b28c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3a9cff-434a-4a8d-b3c7-8fa30dfd175b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff9cc0d-9a22-4ec3-a6e5-3506bc7ef95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a830cb-3e8b-4122-b9c7-7cca560e052a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab14ad2-75dd-4ba1-97e9-309d3e862b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ef8a8c-d0d6-4953-8e72-a36a2bec0a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ea3c05-51f2-4ee4-a098-396d796d6442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "606973d6-aff4-4d0c-b435-034c80d5b431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb48815-6109-4d86-9bd7-c870950c97c7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78673b4-3ce8-4d58-8b9f-a7bd04a4a5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b032e5-6adc-4a14-8b20-8249aa7f0d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568eab19-1efe-419b-a68e-6a39c3831b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ccbfd5e-023a-4473-8629-611b81136e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3a732a-aedf-4a94-aaa3-de1c06c59bba",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b90ead1-3efe-4382-9fda-d3ebff423956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c3a840-ed7f-40fc-8b80-8ed720a03705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdbddc2-6c69-4271-bf04-1351f168a85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cb106b5a-a01c-450b-a529-2f847cd5c57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6c3012-a172-42d6-a478-fed7cb56bdcb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010be4ed-bc48-4faa-a953-80c1a71100d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50eb10f-2602-449d-bc91-6e98b0f7a1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2e15e0-9627-4e15-a737-fb3076fa8d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe60ca92-36bd-424f-b10c-d1644496ced9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bed8677-e5ba-4ed1-9fc4-1adb4014cfa2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec1bef1-d9e1-4f29-baa0-d2bc069e79cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6249bf-9f12-44ed-919a-ae979c0631a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19822b7-e82d-46db-afa7-fb0998c01169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9c8643-02e9-4438-bb43-06e63e180fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5739536-8e7d-48d6-96be-6521103b5540",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1a9652-1973-43fb-bd2e-0b3b99607769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61a20e2-dcff-4b0d-b044-4463baac014b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7ae257-22dc-4b1a-a0a4-78ac78bb0be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "803a04d6-4acf-4616-bed2-1641216fa195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7a4343-6907-4f87-8c4a-54709b89ff1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5cf347-c7b6-444c-858c-8618d5ae6126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04309e31-ddac-4a86-948b-01955bb6e103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf2ff92-0b32-400a-83c8-e288c8c29ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0fdc273-9494-476c-8fae-60780cbc8914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51f8c42-cc6f-4d28-959b-d0c3fb0413a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1626e9f-3138-4fca-bfd4-1ae9ffe2286a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96231ae7-f9aa-42fc-a1b8-44a8fbb9c1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918b6b4c-680b-4fec-ad11-7fbb50dccefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0305de6d-1b22-4a26-8ae7-e96189fb56e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6aac26b-c2d3-43ba-b0e3-9a62236df1ff",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd15f9d3-24af-4afe-8d6a-8599bcc7236b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79c11ed-b9d3-4a23-83af-5697477b2e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62380f1c-2212-4f42-9266-858ff5d8d156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0fab286-17b3-49db-82da-abbc7fe441bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2948f218-7f12-4ce0-9277-2ff28b6d2337",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d169abc-c011-4344-a99d-623703195357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad0470f-e4d3-444e-a480-bbce27be21af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9aea4c2-8a99-4e8f-b9d7-2880e6ee816d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "676971de-af0b-4081-8456-d0a537df0a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bedc48b-0376-4181-b61e-20ffae30b44b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0ead39-bc45-4d48-84a4-e9950f0979da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd29e1a-3313-41ba-aa33-103262f705d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639baca6-66fa-4c3c-986b-75b301fa0db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b2c1c7-3837-4bb8-8fb6-dc5b1f8b753c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbda8d2f-d1f5-43fb-bc8d-cc5720e72da6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20dbcf7-0fde-4260-bac6-cf61f1c8386f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4738ef-f03b-431a-8f39-4326509ac55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27445327-4fc7-4196-a189-b49bd8a0a0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d852773d-49d1-4e22-a7f4-55ddb9a7c5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26068de5-096b-407d-b563-385621a76699",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac699cee-bbaf-45ea-9c66-58858930dd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4003a192-ec71-4a3f-b2fb-3c63f1a8f4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b1c514-e41c-41f2-80ad-1e06fb86e5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "332c1f92-bfe4-432e-afb1-6b97f41b1b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5aad655-656f-4433-9047-bd508e50d38a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef15f513-30ef-40e5-a6a2-008782a0dcfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07132937-f22a-4c16-8bb1-ce13aed6c01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24c6c25-c45f-4c97-ac31-f8e7ec2e8c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d91e0f4-9432-4683-a4d8-4a439aed368d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4510ee7-2189-4fb5-9501-072ae078168d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04ff29b-41e1-415c-a6fc-c62af2214d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb4c6b2-2a3d-47d5-991a-fd6fa95be921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20b3c04-1d85-4e61-ad9a-cd782d5c527c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "db82d676-934f-4483-8584-e660c531c0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601ce1cf-7795-45f0-94ba-37a447dafa6f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f638ad0-6720-42dd-90d5-09c129eab6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a387cf2-fbb5-4da3-83e0-7ec67f6c75cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec55627d-4d59-4ecf-ba0c-f8ab13a704e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "02bbec4b-ee89-4ecd-a7bb-10182be4d709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34fcea6-f63e-43d5-b006-f7758071bbf9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06dbaa89-d3e5-41bb-9c60-e4335ea7eb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668b9daf-7a28-4333-a628-f9ac445c76ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3147bb84-2d35-4d8c-aa59-6f8a51f097c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d221c5-9a1d-4f8c-ac85-f0cff1ad4752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e226817-52e2-4ac3-acf7-2d52549ba535",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3d0215-8b66-4d79-9572-4183ce19c5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a646bb-81ae-456a-bb97-135b491facd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b927c9-9c4d-4dbf-bb14-ec39dbac1a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f3f368-b109-4a32-a897-c63f45537175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb578cd-6bb1-48b2-ab50-04015d11f2df",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee3e7f6-eadf-4e93-af87-580cafe84380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693d685c-1e50-4841-983c-33c3b141ca61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6917e5fd-26ec-4a64-a775-6771d45b4337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b00aec8-ef4e-4ca8-ac9b-8dd8d4d5383f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c4c46e-9c91-4ec4-ac2a-39e5dff63de2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f09c128-2059-49d9-862d-63297d68419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df11f4ef-612c-4dfb-9aae-e485690ada43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85efc74c-5588-4a39-90b0-2b8e8b16f72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa80af37-8972-4b48-a099-b9d58ac488ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde7e099-d25f-4ebe-9c0f-7751286379bb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fcf8f2-425c-4fe6-a051-9b4400f8d86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f63205f-b18f-47fd-9015-eb614741d9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cefbb1-bc45-4138-aecb-d12e8e9df7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f071e94-e0b3-442e-880d-7ae3e8bc57ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79b3f2e-b01a-486f-85af-a9ee8ccecfe7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8204358c-b7ef-446f-824a-e718dea4fa78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf59c0b-5f91-4499-a587-8c0f052d6868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5b8249-059f-4fc5-96f9-d7008527466c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdeb1283-3fe3-41cb-9f4a-f309d10c98b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59979a3-90fb-46fa-924f-d75e90cd8b40",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810e0d55-85c7-49e6-a0ea-f45cac748fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6e9bf7-e1cf-4284-9ef0-70b33d24a302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b7061e-7323-4136-9c23-9d57117eb8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67d50ceb-7358-40cc-a651-c33997e50ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b6651e-6164-4163-81f5-9ab1aebd17cb",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c762c62-240b-4a7d-9fef-0f1ec95c4352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0508e19f-8832-451f-a4ac-193d0d249259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c24f4e7-8c9b-457f-b443-928b4affb988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1592c565-92c8-4af9-be8c-081a3963bab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06fcd99-9bfa-48dc-8aa9-68ef8650491d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358749b0-0d99-4ce1-ae2f-1897eec851a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4526943-a261-49a7-9d01-c8b21214ef69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2c01b5-8ad8-4002-a7b3-24d05c733207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1086c794-ca99-4116-b44e-e15f5d64088a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f866e81c-b218-45ea-b374-fecbe9de949a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c8cbfd-ee60-4105-970c-5f11326715c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac56490e-a9b9-4508-b4b2-a0da0e0d84c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6238020-ad61-4419-a968-25702f1cd612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc8be67-fdbe-4fd0-8149-8ea8341b79af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86b589f-9403-4840-a7de-3f262cec86dd",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6239e1-ae85-4eb3-bf9e-927874f7c4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4054fa-ac89-4954-a44a-262abf5631e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d72ad1-bdef-4360-9f5b-33f2bfba55f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "491b0334-40e9-477a-809d-00c7aa6671a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e277171b-34f8-4102-af18-639da38ec4e3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731f5f12-4104-4c75-adac-2571f00229d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5486bf80-5ff9-487b-9590-b83e3d5220a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1253098f-db36-46d2-b912-f9565281e1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "32420dd2-f788-4f8e-85db-eda5bfb3e006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79f1607-bd0d-41b6-b75b-463e06f0b069",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "102e315f-65a8-4d33-ad69-1eb121fea49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb2dd3c-48fc-4d8b-81ac-46c93368dec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520effb6-c953-4925-80a8-be2d508b05eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a63b335b-825f-4b38-8f62-e0aaa67b873b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077044ee-7cc4-4ae9-8fb6-9397ddba9aef",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b094012d-3587-4e83-b9f4-a0f4af7c29b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c77028-c577-48d0-a946-7a4d0c724024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55466dfa-4e0e-47e2-98ff-e44e0dd6a74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44cafd2f-4bd8-4914-9aca-444be06bc018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439639bd-3134-4724-a27e-132f02e9a558",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30860bfb-8a4b-40a8-9298-63ef7e37ab46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f86970-372b-4e4b-b031-1eda4c38b835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2461eb-e5ee-49a7-a16e-a840c7022290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c91e823-2dab-4513-a96b-3198e39c0bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beef6d49-c38f-4b64-b0de-aaeb3c2d729a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520a4be9-44c6-437e-be1f-fa4c94ada81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64bb0ba-0836-44e4-826a-a974be1094fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6e7ed3-cb6d-4ef8-82a9-998c6480ed6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d2032568-f23b-4ee8-b07a-9bdfe0c17f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd1b29d-2035-4109-b725-33a19a8d7cc7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f410fb-4f76-490c-b41c-0c54a7406d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e28bc3-1174-4ff7-b7bf-09c206247d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268ec0c4-28c9-4491-bb97-d875ba6283f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8be3d4e1-9368-4fc9-ac29-2532785e2d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f95ed2c-290b-4b86-bdb9-8271951667d4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0652bd-4d12-4156-aac5-9e4d59fb612b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0501d161-10a8-4783-bab7-89c80327f6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0d7d70-0bc1-48e0-8240-17529aace27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "40627a37-c2ff-4c2c-a747-fc55916ecc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf79493-20d8-44d9-82c1-4d3c5d844b29",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35846c6-5bc4-46a3-a717-a439bcf10192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffd072d-1b15-4f91-b7aa-8f4b7a5a82f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4518e6d-608a-4837-9f40-058d808c300c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f44880a3-d3d4-42bb-9d9d-dea8727854ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a2380d-4cb7-4577-ab1c-aea0457af9b2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4cb1ec-79ed-43b6-a239-132756334c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689d590d-a8eb-4249-9a14-aa8567afdc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa021666-e761-4372-bf35-38afcbe6a96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "60fff643-d6cd-4e48-b3be-5d647ccef7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c931cda-3883-4f55-a156-67be72d349ff",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e85d85-080c-499e-a1a4-dbac438b244e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302f2626-f9f9-47ec-954c-b1a6cbe8c13c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1cd734-8798-41a3-ac86-fa94d82a3261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "750f50f3-3f10-4b87-82ec-1c39086e6275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ee089d-6269-4e67-b108-78ca88f7259a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd24176-216a-4a0d-ad45-af342b43941e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5faece-f959-4873-9f45-ef1de944a73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331843ac-7179-4ec2-885a-71101da84df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fec186ec-e91c-4556-8602-8e0b634a7f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0809b6f-cbc4-43ca-adfd-675adbefb3cc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d5cf6b-d219-4e58-9d59-c8bb81bc0299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "01a29c61-c370-4c74-af5e-947bec625b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0d5bf6-3f6e-4a07-8e4b-f7a546e8acaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6297d58-05a0-4703-adaa-395c7e87cb4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1c783c46-d390-4b16-b01a-1dcbcbef18fb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a0b2f8f-c64b-4bcb-bf5f-69f4befde340",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0d1e22-cc56-401e-afe4-a5b62d476a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "912f4cdb-d776-458c-ac57-a5aa95cdbb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4816d347-072c-466f-b52e-a6ba00a94532",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35c1cdfe-849c-4a51-b945-01b71f989a12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d24c9711-668e-48a6-81af-28a8a3460c97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ce8e575-0fd5-452a-b88c-8d10fdb8f5ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c805339-ef35-42c1-9e76-9afea867cae7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fb4d229-6021-47cc-86e1-eeb28ac4a575"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e3a80c5-a2b5-4d36-b1e5-4bae255824ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82049993-a45e-4e27-b785-bcb9183ca700"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "98beb463-acee-48f9-a30a-385ad562cb55",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e74eb69-51d3-4e03-8a4d-d55766a243c4"
                }
              }
            ]
          },
          {
            "id": "d075bdfa-83f6-4705-8768-8d44c5809b98",
            "name": "Positive Testing",
            "item": [
              {
                "id": "303d44f6-d148-4a34-bfb2-883328a716c9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a4b09a9-bad5-45bc-9718-bd47e6ac5e38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da8758d3-8655-4a7e-b494-8f55c1c2ec6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e407e5cd-099a-42d7-83b2-15c74dc78ad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7793d994-67b4-4939-8d6f-607b6b61fbec"
                    }
                  }
                ]
              },
              {
                "id": "ea209827-fb7b-4293-8aca-ad7d5641c4f3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b06e4413-679f-48da-8d7e-68d04e3ec3a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "084b4c25-ed17-4894-973a-e17950a9bf2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92d5aa90-6cc6-4523-8845-fa832468ec8d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15f1b796-b809-43e1-97ca-39cb727ca418"
                    }
                  }
                ]
              },
              {
                "id": "f15db4a7-c7bc-446c-859f-dfbc065b5ffe",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2527840e-b2c4-40a2-bc8c-f66ffd8bf1f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c74160fb-98a3-429b-afb0-2a288b7b9697"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e021017-32f4-4209-8190-76a88774e5e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e04205a6-3e03-4938-a68b-ad71fb7a4288"
                    }
                  }
                ]
              },
              {
                "id": "1b4ff9fe-b140-4b0b-9155-63b4b3f06067",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3feb1d0a-3d19-4b92-8525-514ce48db0fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f12a72d7-867d-463c-9e3b-7b888a3c9a11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97d2a41f-9490-4408-b838-edf17ab1e833",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0d0f0593-c0fa-45bc-abeb-6a76fa860084"
                    }
                  }
                ]
              },
              {
                "id": "8e8ce492-a7b9-42e7-8faf-c5ef6a1f5f82",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ec45b69-71c1-480a-99a8-622b77e889bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d6cedb8-fbd2-4c3f-ab7c-c8453fb0d978"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3707763-089e-4262-8d5b-ead4bf9582a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5c05e6f3-0521-4dcc-bb4d-95f3ac2102c4"
                    }
                  }
                ]
              },
              {
                "id": "3295bf58-9d12-4681-ad83-c8e3bbfc875a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c32d9cb6-61b0-4a98-96dc-4f43f0e0ba88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "515733ae-fbc2-48c2-a0e1-5e176da6540a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bc17940-fa07-476a-840a-076e4cb35436",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "583356ee-196e-480a-a430-becc3dcaf4fc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3285d719-ff19-435d-9e6e-82799822a1fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7c1b8a8-10e5-4c88-b52f-acd7e52e44e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fc4560bd-1090-49e6-a168-1e0a554957f6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca429e67-294f-44c6-98ab-21cb2d3ae32b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fc68d35-9b76-4740-ac8c-2b09055902d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5818f79c-5b19-4408-8ddf-dbcdb9381a99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "026c1283-d0ee-476f-bd17-5dda3d6f86fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e262c331-79be-447e-bd52-5b46725bf8fa"
            }
          }
        ]
      },
      {
        "id": "e6a3315a-9a95-4be2-9ce1-b844efd2e095",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "455a7314-1644-4e63-b359-92472f6a09f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0bbe00fd-a5a4-4ab2-bc37-3f2e3aa64041",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b4df27ae-5d97-4beb-ac66-0b3af73adab5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cca7fb-7701-4f7c-98ab-014e268894af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef40cb58-b56c-4a02-9bd1-20bb04ca920c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fa573d-909e-4bb9-a8ec-a48248b4f4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba7bf78-0c70-46d8-a063-0fba3604f29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e65e58-cd56-4ba7-b187-ce725e26b127",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f40f3d6-0122-4b2a-b6dd-3e5b8ef60c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e1523a-abc5-46a5-847f-51f931c5197a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82ccb2e-75c9-4b6d-b85b-d497c82cc3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7caabada-68f5-4127-8ccb-aee1e780d3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33a07df-cfec-4a33-bd01-edf34dd2a76c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c565ae-1f3c-49dc-b6db-03a93778b8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c185f00-7e3b-4f10-99f1-f4f9d6a1d2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f881446-541f-4985-bc76-a5f8d54d519c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29e966f4-70cf-4e18-b09c-c149defc046d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4768868e-dad1-436f-aefa-22da91597257",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcfe8fc-a1a1-4f6a-9117-fb65b5f41ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8c7f4d-f07e-44fa-8f75-817c391f7ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2478d13e-73a2-4dc7-b014-672c838506d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff8131e-76fd-4950-83d3-e36e383ddbf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8edc00-7e49-453d-9145-94f3335897b0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7ed4e1-5dc4-46f7-8991-afa76015fb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27459ec-f805-40df-8fe1-441e81520e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1aa32f-7ae8-4462-a811-0f2f7dadeed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "168801ae-65ee-4509-a65a-786f3f847a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cefc239-0bdc-4686-b089-fb712be87726",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cde95c-941c-4cc5-841d-300619acdd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7eeffa-1d0d-417c-a429-11bdc0f3e9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2008100c-9834-4388-97f6-f6639d5cf0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e405d58-9324-4244-8994-f2c171bb0f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7eb26b-bf13-4fd5-98a3-fdecff0a0d0e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24381e5-0056-4dbf-90e0-ccf49010c69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407ccab6-d3b0-4da2-8be6-b7a009aff58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04ff49a-7cbd-4baf-843b-b627ec97811d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "24824e09-fce3-45b6-8ecf-89bf632e6f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45ec018-3e55-49dc-9ee3-60c1271a6e2c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b16f8a-9e5f-4d0b-94d3-c9ea020dc37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "432f2942-89ce-4d93-981e-c1c7781bbcc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd6bd74-6521-442d-97e9-5c5fe23c6d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e30ea9f1-3f27-4c7d-8f4b-3f621a9aa4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1a0426-8797-4b5e-90fb-c04990a72c9b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475d7fca-c399-426f-b3fc-8acdae3e9f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74aa458-58c6-4a1b-9cb3-2fe5c20f2b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a287b1b3-1caf-4974-914e-1b5976692d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "633603fa-48f2-4fee-95ca-0e3c03789bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62754c17-b9bf-4871-b861-5e58848e4eff",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67eb44a6-c090-4314-a865-d3f0b581889a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "074206a0-cd0c-4895-a298-a61030007a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c46d14-7dd1-4b07-a644-22437620c1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "223a4bdc-3226-40cd-9dc5-43091e723d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8be4cb-96cb-4c28-9978-44797ba356f3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf07ea9-4ea6-4720-8485-a641e0b56890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5811187b-6ecb-4cd8-9680-cbcce3265ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd83aab-5e0f-4772-94cc-c4d323bee3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "01a25a50-1740-44ac-9025-998c0dfed0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606bb72b-84ac-425e-9eec-bb9402a39344",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0299a4-ee7d-455e-84f2-f07b6567c80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee5ed97-d881-43e9-bdae-a9b076b49304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4d5a59-8d2e-4509-b8f7-ac19364db12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00f0affb-c23f-474b-af19-17539beee9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54b2437-9b88-4cf4-b91f-5880c59116e3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c256296-9be2-44f9-8a9b-ee9191a87f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec1cfea-90ad-4c23-a9bd-67231c41efc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1029ea55-6c81-4018-8fb6-8e8df59f6dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5511fb00-606b-43c7-9d64-8ce1c84b986f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4ae894-f8f9-45a5-945c-daae107b90e8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e311b5ea-a069-4647-b787-ffbbf725854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6c31f2-6a39-43e4-8280-0c72a5858c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdd62e8-053b-4de9-b918-062b130c5d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0995571-7fc3-4b97-af19-2783f86911f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdffa5d-9075-48ad-9f9e-73aebd8a5bc9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fccbabe-2ab8-4ad9-b7cd-04c082fc9c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80894eea-437c-460d-958c-4f43d340ed97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdeb2c2-335a-48cc-b853-ee4e34d5ce83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "355fd357-9aef-482b-b513-3b6b968f9194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d112f151-d730-4dc0-ad08-599246a9f187",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c50aa7a-fa00-4f1d-9e70-d0ba1b783c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c864a977-f930-4c8b-8421-39d021ae6c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43edaa34-802e-463b-a0a5-81c8b71fcde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "48787a40-9b53-4556-8438-59062642248b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35735306-90ec-4db0-b7f5-ccf3c1727135",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20a661c-3707-4d1a-b160-426464a4d531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab7f3e4-62bd-48d4-8328-f492f7154e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d607f6e0-d464-4c98-9ad0-8c5ee6d11759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "61564f68-caab-4f73-a86d-acbe327a359a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1e2425-b2ed-465f-a8c1-331301dc9ea0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c7c50b-0525-436f-831f-56a844d9b062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3448c6b7-2f64-49ed-a35f-38ed3df8766f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e8e13b-5a8f-46a2-93df-69bfc1c7eca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a89632ee-a851-44f5-95ca-ae8f6b7d37a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233ca649-2470-47a9-8bdd-025cbfcce541",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d2a610-f5ab-4fc0-8549-af3c390e51c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af94423-5a31-4018-9b9d-f834e28a2446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f1eccd-cf36-4392-a891-3fbef1eb90cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64cd4b6c-305c-4448-a478-6d6a2a8e8c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42162723-f0c1-425a-ab00-45088a8b8e16",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98e9114-a195-4a2c-9709-fb80e4e541ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04118deb-5d05-4c21-b368-d26163fcc823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf9b148-2af1-4fc2-b0db-c045f38d1118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07bb5d0f-08f5-4396-a06b-30de6a8bf3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9a95aa-e7f4-40d6-9b3d-a1068a554552",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81651fbd-4e70-4f66-a163-75987f7e8e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acffeb19-9f21-49a8-b818-1d83198f9c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ba9a3d-257e-4c77-b24c-102053f8e502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abfc0fc1-f3b5-47f5-85f9-6fa5e7993c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77672123-0964-4f83-b513-18d460483d2b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ceb77f-b332-4df1-9d88-8c055b561596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a45171-569e-426c-addf-0b2efe6f8ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb2354a-d6ac-496c-99f2-666382c6a649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13125a16-69fa-401b-9f33-6d7e89c80df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e44de7-b437-424c-8249-cb044e728cd5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eece4acf-bd40-4656-b9a7-1f5d6959aaca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0458067e-6f72-45cd-876a-6c4a49937422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a2dd4a-1e87-42f3-8813-9dcc965e963a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e0e833-a210-4ca1-ad66-b24df242c6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795a8b52-2d6a-4de6-b6e8-61aad5e1a384",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c535fb-ab77-4304-b626-50ad24a73c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea4be95-07a7-42aa-8835-249a3d2bddb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1a01aa-5165-48ef-90f1-16774643136a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a02475bb-eefc-4a95-a51c-79861101e81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dfc7c5-bc38-48ed-af2f-e16392451df0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d069f213-304d-4677-bbfa-82f8718cbeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e05b953-9edd-43ff-a83d-638d9eee2e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ddbd77-9575-4446-84e2-ca63ecbbe8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f0b71ad-ef97-4869-b727-af4cb82f381b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e2f423-7c8c-434e-980d-95afa2310a90",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb1a009-ce12-4195-bcb3-65859c280968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd8765e-a310-4fff-a0e3-4e647192dc4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d54dd9-56c9-4f4d-8b7f-62c18872e135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90f9dede-86d5-41f1-8476-b335bf3cf8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4434ac-15a1-4867-8385-9d55ec4ead98",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5c1c64-2379-44fa-adfd-9fd404ac21c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a12462-9cd4-4ada-b366-c67671d364ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1d9f7f-c867-4088-a116-987ae2ba2b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "874c030c-46f7-4cdf-a5ba-abc0afe47aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14657aa3-be37-4b44-83d1-96b421194d5a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8ad616-ece0-4b86-a067-98e3f0c4bc49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f3ea99-4735-4313-9676-502bbb577476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf07b92-1e58-4ca8-8442-9ec2dcece958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c0d842-de07-4c2d-9e0b-01b9ebae4617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d671a1-d2bb-4ee4-badd-52873fa6d134",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8523e28e-a57d-4bd1-b81a-1e0438f0b895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba8742e-3af6-4ba7-a7b9-1c343717db6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c9ef23-988a-4674-a599-4f11f9115d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc66b8ca-9a26-46e4-9056-187913d16578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c975168-39bc-46b1-a7d7-95336bbc03da",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e7a84c-81b6-4be1-9443-825c3d2db077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b533f9c-73df-478d-b370-e7cdef084ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add1a189-cc60-4069-a581-1e7600e97592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7532c31b-b17e-4891-931f-291b76ff762f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24b1961-11c0-430e-bcc9-f986301558c6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e70b13-592f-4236-91d6-a04bd504ff0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db717d80-8880-4ca7-ad12-a8f6c79adb12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f1f43f-f5c5-497a-aa04-aab2bc59d0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b450356-55e6-4dd0-95ff-0333fefcbb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1021b7-a404-47fb-a40e-2ccd11affaff",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b8fb78-77d0-47c9-9c9d-a7af7be7bd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322204be-cd52-44d0-9bed-01a181895424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a505be57-4cd9-4c15-b102-e8df9c054350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b48c052-08a4-48e0-9dbe-d98aec36a7a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b3849865-ec7e-4574-bbb7-a0a60e8f656d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ff065613-88b4-46eb-9b73-59ee379c5f3e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94c1099-6a40-4d3b-857e-cda53e89149e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e3825a7b-12c4-4be7-a052-e51231ebddb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f98b085-1fa9-4817-96b3-7b5498b9dd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7f50ef7-48e4-4951-b9af-4b01b3d6aee3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "532497b6-8d1c-4ec9-a256-c4fa13e0aca3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f2af8c5-b687-4e62-a62a-21349050030e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb0fab77-c945-4cad-8884-aecd705e41b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a14d5d61-e06e-46a7-abfd-92ed404ac5bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "300909f0-e387-4462-a188-4f5758a8dc6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "77ea19da-276a-4dbc-8efe-66d99f3e4d52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c68b28ad-53cf-45a1-b378-d6d29d7ea792",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e110ec6c-54cd-4c3f-90dc-a9d36b9df327"
            }
          }
        ]
      },
      {
        "id": "548caa52-93f6-4a6b-8ce2-89f26ca56d20",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fb1f0b61-0193-49f0-a423-f4c20bc6a808",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a196740b-b4f2-4498-8489-cfd5842a44d6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d7766ce4-0fdb-4e2d-acd1-3e0dcf07fed7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26da018a-5020-4ac9-b8d0-e1d6df527c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "527d147d-a072-4a17-b4bb-33860cb81eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba23e8d0-b434-4430-a2a4-3caae4e400dd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a126245-1a44-43f1-bb01-cce4e38dd782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f38d42a-4181-462b-90d5-0db39eaad978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aff2f51-b739-49eb-8794-ce36c9346038",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2109e459-92e7-4ad7-8cb7-4340490f38c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc19420-d11f-47fd-a0ca-b824f06aa979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837a7475-8445-469c-9b11-4dbb866c073c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8805ea83-34a1-461f-97ca-93e0419dbe67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bc5d3e-dd22-442e-8749-388114456782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2077692b-8a22-4679-88f0-5e9dbaaed7aa",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a7cf9c-6c13-40fe-a4ae-de7ea8f8b86a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27f29fe-6071-4d70-998c-1694cc73001d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9e5788-a745-428c-a3eb-252260b427b2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051d8419-ef2c-495c-a2b9-c45154290056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1a7930-3252-494e-b101-73b5449a5621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbd1688-bd95-4f8f-a54a-d7c6cc97c449",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c76ed16-7c01-46d6-b055-d6265ba3188b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6beb2bad-a804-4068-93f9-fed07dcecae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb42fb50-9ef1-489f-8fe0-98ebf278ac88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0415d5-51b9-4f43-aa57-d394d01474e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bba120-1bce-4c7b-999a-098130c464bf",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9129ae-bd47-4aeb-8e6f-367c2779bd27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b7ce365-2ae2-4215-9aa2-da0486df380e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b8056b-8f58-4618-888c-be464a3bbf3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c49318-b632-4315-a65f-eb12818038c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580d61b3-5cf0-4533-86ab-b325abfea16f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bc6155-8d99-4c80-88d0-c3f3997e8951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d192e493-02df-4c1e-81c5-a10d680f4fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0963b5-7dac-4592-8bb6-6b47737f93ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7483830-3a32-4469-b336-3baff65113ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03530dd3-9672-4aab-86fb-2f69e0d06aa1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2b7e5e-d74d-4c42-a461-0f1f0818ef15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63ccc6f2-5f6d-4122-85f8-9e55f92f9d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abc72fe-2611-41a5-bf75-c5775ad13347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9753a290-138d-4fb5-a564-ab8f4a3c290b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25205c85-4aa6-4782-b93e-2f54f6f0cea1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c0879c-1a4d-4755-81c3-dfed7cc446f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36697bcc-860d-4fc1-a4c9-e4eb0952903f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d237753-292c-48fc-9de1-f9f79adb6145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f6ddf02-a4c0-49bc-871f-cbe4b4f1559c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0559d3-1635-486e-a886-021cf73302bd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f248f97-acc7-4151-bf00-ff648afd3f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422f004d-cc14-4457-bf45-dea8736cd893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34abc3c-c7a7-447c-ae80-5893e39cfed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7961de-76a0-455a-a926-1c3d6058197e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faee2d32-d21d-4c8b-8c30-10c0bde16d7c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e449f2-7f9e-4a11-840d-45a8d093c06f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c6b4593-da50-47a6-90ef-0660cc7dd9cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b56fdf5-c91a-493b-998b-bbb582a558f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb9c63c-7318-4bcb-829a-314ce5a1d3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff668ce8-af2d-405b-8c9d-cd6f363557e0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fae16be-b17e-4392-a08e-b85e1d5a5c15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a9bea00-ec7f-4ec3-acf0-5885202fd9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2ae642-6f08-4d81-a9e1-cafad73afa20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7bd724-2721-466e-8ce1-441a0f0ac7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cce365-ac38-4b1f-8786-44011af72c7f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a91fdd-c4e4-4772-b54a-9be3068eae41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b019dda8-6892-4d92-b71e-02d0e4072315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fb4322-d9aa-45a5-a484-c57deac72ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0b3eaa-ff92-496a-ba27-8b143400b908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5352ff9b-ffc2-4907-856c-e9181709f2a0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bab5a4b-70be-438c-bb09-07ca0e13cd51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3f97239-4080-4125-9d8c-875d4f4ae958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82910829-8514-49fd-b4b4-a7dad2ffc180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2b212d-1aa9-4703-9836-4cc1b50f16a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ccf49e-ba42-4243-b40f-7770de99be40",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3580960-e533-4f34-9a2e-35737780e37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79aedb6e-20bc-4a4e-b9ca-762f3619536d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "003e8357-ede4-46fe-ad61-088d5d41661e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b292fc-3120-4591-aacf-c22280693eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34abc2a1-e3c6-4cf2-883b-0ae785e3b1be",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8894fb3-08ec-49a6-a945-b75a0790b6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e1acf7-3e24-4ff8-919c-37845097361b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94c1e36-4f74-4bba-98b3-b7122f6cd874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644d8c90-1b40-4d95-9f91-a24034093ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a717d2e0-b256-462e-809a-3dfacc6d5997",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f47dd2-f8e1-4608-a756-5a454ce7df54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f8c48a-f96d-4e1a-b1f4-44f24926dd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93800c4-c5b9-4480-bded-39bbf1c81459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7da4f11-5cea-4031-95df-7ca41ae4f74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581ce351-2a49-4e65-b15d-588ca5d80ae5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff620f71-4565-4311-ae88-17ca7aaee67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e696ff-d5e1-475f-8d5f-19117c8c3ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4170612b-aae5-4a76-90ef-8f7520c3d318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d800a1d0-1faa-49c7-a966-9520bd4dc5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafd077a-b318-43eb-b3d7-9b39e6d56352",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383e6e7a-33ca-4dca-9ff7-0f2c6fafe45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1b5eb7-0032-424e-855d-c6c8a0d2f1b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb85d6ef-4065-4643-bc4c-d01f5ed2fe29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7990202-5365-4323-aa4a-8788b1fad9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fa520d-0bad-472d-9517-6b788a2a3030",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849c14c7-e2c0-45ba-946c-0112de40df08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f185f6c9-0eaf-4951-af63-06b776c42278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2056d5cf-0680-4e71-8018-f6d38bcb4556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd081ca1-811c-41bc-8020-e1ce57e9d505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce7613f-f81b-4af1-834b-ca59b84c8a31",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a4619f-23d9-49b0-9e3b-43458b3f247a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9af23f-2235-45a6-8bf8-e351e77000b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ec466f-06e7-4c9d-89b2-fcf23704748a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a10898e-a32d-4071-b7b1-aede47156335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d79636e-42ee-495a-94dc-472f44698005",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5dcd3dd-6a9a-4241-a250-8248703af0dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65322c2d-a51c-423a-add6-a79e4d7c479a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ee938e-c8fe-4823-ae54-f4610857fe51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006355fe-befb-4153-8370-4115ef9fcacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af5764f-2d80-4119-94fd-5b0dd6de568d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7946a11-c253-482b-9a6f-9c2cbb2ba902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f14ac9be-4c90-4698-8373-aaf5e65d2be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57db9ba4-1913-4f19-8171-43abbc766a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413c0354-9c68-42cd-84a4-3e27583696ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21579ffe-5c9f-4e1d-8893-cb4ff70cc0c9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fc85f3-e53e-4acd-9308-24e6fe95ef0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d0fbe92-865e-49b4-8c90-1519353dd645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8532ae45-d7d9-410f-8ad7-468cc6694c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba8d9de-4d53-41ea-894b-bf1b5199eb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62946fd4-b8a7-4ad8-be3e-9c6900eb548a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ff2629-4876-42c1-9987-76ceeee41927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3b5036d-c0c9-47b9-9836-7f37b2585804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34004151-852a-405f-a12b-15dbea00322c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68883f7f-ce60-44dd-a0b7-67bbc4dca3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303cf105-41cb-4711-b4ad-74b3d1541aae",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d162f304-ef08-449d-9154-46f9de0225be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf311820-2a1e-4bf6-bc67-605991fae47c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a97fc3-8e6a-436a-afae-360c7af02cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c50ce9-19e2-401a-a80a-d205354412c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e2d199-381f-4d7d-9f6e-e4d14eed507d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d32bbf8-53bf-4d56-bbe2-ba5bdfdb3c6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57e40d7-5e12-4740-8453-31c817ae5f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b19da9-c5bd-4d96-87ec-b918e9f34e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933b8389-af6d-4d63-8da6-c07c8127f03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666100cd-8265-4c28-8e19-28360126aab6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59396e31-eaea-4fd1-838b-a93481bdc963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d24f275-fec2-46f6-b209-6d725bcd76b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aebba13-2336-4142-853f-ad3c584ff914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70094228-83f8-4016-af7d-df7e964d9269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc751332-28d9-47fd-bf81-7151fc2fc70e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43a7e99-b39d-45b8-8e3e-41ab231ce0a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b46d6267-a3d2-441f-be54-795a8af49ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffd56f8-32d8-44b2-a433-17ed139354a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d96263-f721-46b6-961b-bae7a682bafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9945db-f5d1-4f38-b2f3-e790abd743c1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fadb984-ef36-48ab-acef-4f4cfc724e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2aba126-a1ce-4de2-8d48-1582fc950aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7328530-5df5-4f39-bbb0-3711caf040b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0252b985-0f05-4673-b5a6-ad531afe30e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491d2c57-278c-4a84-9fd3-b2b74f38a61a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0812c0-2b60-4541-b7f6-9771637fb5bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08d9ca98-49c1-49ac-844d-71f4bafe48b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94930d9-111c-402d-bbb6-18fb13fea8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92616469-017d-4cfc-a73c-5f9907abb2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f4495e-1279-4286-a361-40879b55918e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbe7b46-fc4b-4fe0-87c5-608a17721f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fca68d4-fef4-4597-ba28-321dcea775d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360acd41-fa53-45ef-9164-8278b43b27fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c196a4-0cd4-4f97-913c-05e11acbf9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7727af95-1133-4552-86b0-934b1cf66d82",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92439d2-94ba-41b7-aebe-61effc0efbd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c2e67c-37ed-4b36-8af4-c03a95e6503e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad2f46a-acbf-4144-9700-b502db39e80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b61ea5-0f00-4f39-8d73-e42eab0a7f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ed18ec-6f70-427c-bde7-90d002617989",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4020a5c-f20e-4906-858b-c03630f42b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be40f4c2-e930-45e0-86fa-32eb972e5938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0f33db-3722-4ed1-abda-9007c801f034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675de5f2-249f-48ba-88fa-1fa5e7facc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f18422f-a4bb-4a44-b20a-45945586734b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066e585c-bb43-4024-b606-d5fd17d74180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee4228f-cd48-4471-b506-92be9c2419d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b923d8-29ea-4510-a302-45e704f0ac9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7266aea-8581-4ada-a0b6-c976430136c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dcca30-069b-4fc3-9197-0b1e71c8106b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dc6288-0e28-4f26-9c23-98a33e823422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3874c4-0edf-4466-9ae6-f6eadc0bc84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460e8a83-ad4a-4cbf-8fc1-167980bd6cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6939576-7306-4be0-a256-6e9160468793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5efe2c-fc63-4da8-8c13-41c5aada75f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd73476-6d22-4c55-87da-aca25ea56d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af01159-2c32-4078-9fe8-ec543b0ec01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5245b1-8b3f-45fb-b095-2f27876e603b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9b5bf3-34cf-41aa-b231-fe9cc53c980b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31bcf4a-138c-4423-9cb1-6d7cd61d6bf0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25763bb-4aa7-44c3-8979-163ba9b81fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986e7073-8f4c-47ce-8ec3-dd1a4c73f52b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dea6c97-21fe-451b-8e83-1678023c5f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3bce37-a5db-4a65-8eb7-adec7cc8c520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2d2b54-87c5-47bb-a9c9-e849282157dc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1361ffe-4695-45d5-b862-7e769499212b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d968d185-469a-4cca-b46e-ffba854ac7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09271462-428b-4767-aa31-348765d57a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d737d519-2a83-4796-89bd-d1562e9f2b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbda564f-f436-49d3-9019-1a28229d2534",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a6b16d-7d6c-45d5-9ddc-202a32349e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae0960c-0636-496e-b27e-b7699f09a348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890b9724-23f0-4c40-b2e3-e4d98aa375c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8a5686-c3ed-477c-b05e-1cb27c68789e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddc895d-8687-49ad-b62e-98f6bd9d11b0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50077886-29bc-4628-be98-f0ee9a2f9a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17104569-24ac-40b8-817c-c0461f61fd27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e656fd-7b73-42ed-af72-41f2533713d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f1d671-5fb4-4322-b3b3-8fff838019f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4115a28-6b68-4e35-a68b-e7ac8aa35ae5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0ab789-38c6-41f0-b3c4-be805ea6d4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d48bf9-c9a7-46b1-a85d-0ea9b4c36099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9043b90b-b508-48e1-a46a-b2693dded3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3fd50e-0a9b-4ce0-8c13-187c54fcbdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ed222c-80f8-4e82-98db-d3fcb31dc37f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5806d3a3-e1f1-411a-b672-50f3217546e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687b57d3-6776-46e0-aa25-8d3d89b39239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29df1faf-6033-4e15-9229-3c99edf1b711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01055c70-c213-4c89-8a91-1784f27de1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689e8f08-6c35-406d-896c-7a64e7c58dbb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bb9dbb-1b9b-40d1-90f5-c896e58166c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c5382f-1444-451a-87fc-412a57c5bfa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbbfeb6a-8e94-40c3-9f5d-bbb2eb4d0521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7b0602-50b8-4e50-bfcb-3e863da69b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a1f6e4-5ac8-496f-9313-42780be79f8d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad6de2d-82af-463c-b3de-fb5427b3103b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e8f6a5-ca92-4025-9c2a-6e983f80831f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5d3077-8174-47c6-a9fc-749da9f8f281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e235c4-84c9-4de6-8295-9fb17e2d0ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a52c2e-6036-416f-9359-2f11582720e3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef00ac2-25dc-4167-a19e-38d0e3da0613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "532d42cb-d3b2-4264-99c1-88e5ce040111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7dbd1e-35d7-4282-b8da-f28894dafe1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21920bae-0b89-40f6-a3dc-f086bc5be8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddca7599-9583-427a-a424-c0c520c7029e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4405989-12a2-41eb-a8fe-9734f56cdbf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b08c7e-3c8b-40d7-8342-2dc2e9cebdb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13944d5c-a355-4be0-a402-a4fae0f13be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e252c1-e96a-4b94-986c-08b451d8e3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8599343-cf0f-4959-b3ce-86b2d2565bc0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93f5a59-47ea-42e5-8443-8d0a23119eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea769f10-efd9-48d8-8dd4-b9575c908ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d158b30-9b42-4155-94fb-66b1a85a61b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ce2c65-e080-4be9-851a-372e3a9174ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f8651f-362e-4602-bd3f-834732abbbae",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75196405-1f0a-4ea6-965e-6dcf4c15914c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d774ada5-876d-4d0d-9bb0-7d29dec049db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8368c049-63c9-4b8a-a44b-6fcfc5cd1bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf35798f-7c6c-4b50-9ed7-96fbfb2bb8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb081f0-d7e8-412f-9e54-ac29624eeab9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a0dc68-5808-4fec-b120-6a3807e06af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab6c785-733d-4f6b-8e2a-b78cbf166f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d9f59f-cf5c-4285-8284-dddeba523f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f561fb86-771f-457c-ad5e-d1d4ca5c19fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32f2384-f62d-4d9e-b84c-bb9b8c6576fe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee9f301-323c-4efb-81a5-b75bbe4adf10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b827dbb1-d5ce-421d-866b-11babfffc228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1317aaf9-17ee-4a93-9641-9a8c99e668e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f993da8-76a7-4b63-9dde-5ceb3982739f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5824c398-78cf-4924-8448-2a7e53aedd4e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62841d47-eeb0-4d9e-aa97-97731dab1787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7bcb6d-6d84-4d56-8bd0-6a1c9b569003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3e46aa-6a97-4ede-ad7d-b9ae8b90e4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490d2f14-48cd-4bc9-bd9d-93f2c2f701d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52d995f-9edb-479a-b46c-bf8d6ff3cfdb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b66a71-aec4-4f1e-b483-60d05fcf7f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914a92a2-d0b0-4d04-9b3c-f3393172e551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929277ad-0920-430b-8e0f-626b1d321fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19d3143-7bfd-45ea-b0ec-c39543f32ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8d3761-eb56-4f94-b3ef-fb4b4f2f4584",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5760de3-9fe4-4725-b91d-539bdf07904b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c504a9bf-e661-43f4-962b-92197639b005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cec770c-29c5-44e9-97cf-0762e29976ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255d9513-5812-42fa-a15d-b3b0668377c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad26bd9-631e-4cd8-a6df-f77ea13ecb10",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb248a1e-3a7d-4e3c-a2e8-ba9a9199fffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4aedad-72db-4c63-8971-baed1f3b39e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b53ea3e-ed3b-4287-b1e9-ae90799dd60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f553cf-cada-445a-8ec2-efb4edc33548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29f9996-16c2-428a-b253-7b144a9fff6e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad62935c-7746-4a91-a22f-8847cce96c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99508992-2598-484c-9afb-f1c1f600171f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfa94cd-3895-463f-a7f3-59c4b51dc6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "232a77c4-2f5f-4edb-a47d-1644a69eecea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4020702f-6c3b-4f0b-aeb1-f6dc04ad063c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349e040b-f177-40f1-8181-7a85edee3458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93164090-526d-49c7-96b1-257f27234ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa7aa5f-a4ec-40d8-90db-e3aa9114d731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2897789-fd43-404b-9baf-7ba3f82d5171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb68b0a-0672-46bb-80d8-c9c22f76af70",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39c67e7-74a4-4775-9964-59c24c9340c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d1af54-b76e-4f9a-a596-ead20c7bdc47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812dde21-01e8-4994-972a-84cba505e125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eddc7ba-589e-4b36-b6b4-dc280dfd3fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961683a1-8c76-4927-bd3a-beba95a60c9a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246bebbf-919d-4c08-9aa6-f84b530aeb32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bbbe5cd-d04d-408b-acdd-84ffd26b51f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b382ce-d2e4-42ad-9e64-b4fada60f467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47dfd936-7d31-4ce7-b533-49d4c884fa8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8300b0-d0a1-4e60-816d-37f18416b9c1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09818e97-9623-494a-8cf1-131ee401624e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2386bfd-3183-4b6f-8472-08cf5f926e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "503a6f28-e31a-45bd-afbe-39e99a7790c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54462201-ceb2-497a-9e54-3f32902f79b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b74fbe2-1e34-40b0-8559-f1dff7c9545a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695f6b6c-72c6-427d-919a-ec71c03c6602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e121af-5f7c-4aca-8ec8-6eae6d18de67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a270dd4-4141-47c6-a5d4-12eb2c77d4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af80695-3466-47b4-8270-1c75a63c6e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9661bd07-411b-45c6-b4f8-ff92954abd6a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c212ce7f-e08c-4c83-9137-5551ebc47776",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ca6b90e-24f5-4196-aa9e-1a9944596971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dc1850-1d91-49eb-ac7e-60646411e5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a7163f-7b93-4a22-ad77-fa432e50325b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3933e0cb-1071-4f9c-be36-a4b7f936913d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e50018-58a9-44c2-a955-825de66e5216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0f03f73-c958-4ce5-b268-611ddd303ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06828255-aec8-4966-b69c-7bbf5f15ffbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b5b6d4-f7b5-4b54-a43a-7b4ee9e2780b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b9f5ad-b4c8-4f1a-8cf7-c63ecc41ab98",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4672b1-a555-4eaa-8b30-bb6731289348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd425ca3-5085-4d7d-a26e-b7aa1ad7a30c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40dd419-1609-4146-b517-eb3ccebd0917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487837e2-28fc-43bb-b3a6-ca9d3d3af570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1051a5-0dce-4ef4-b8e0-43c3965a581b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407196b2-3d7a-448d-924c-9c1dcf6d2b92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b65ecc80-5de3-4ec7-bbbd-f25d88a4fbd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5488d420-abb2-4b39-aefb-7cd97fb79592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651d4642-21ce-4495-b99d-795100acecc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1289a22e-07f7-4663-a73e-c6371811aa2f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c971755a-8c00-48a7-81a3-2b60e872b2f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44fc82e-178e-4224-9f48-3a716d5acb53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d941e44-842b-49ca-8745-0e5780016b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3d0352-78a9-46d1-88ca-8eb986fd403a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61ec5ff-7052-463e-aaa3-ab161621f09a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a7995a-0b4c-4bf7-9550-4df9f7462d37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2f1a7a6-c785-446a-a033-36facb4c18db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd1f5ca-9486-4f7f-8e27-0d355dbcdc49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4acc8b6-10e0-4371-b2d3-49ad068174b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fcf664-236f-43fb-87fe-567fed8b4488",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1421eaef-d046-4f3c-9ac1-0c0001a61028",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f71c4f7-1d85-445c-b5d0-5eb238e97830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1c7a49-3c7c-406e-b6e6-2502e78794c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1b3786-dd9f-4744-963c-1cd9dc9e051e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce52d1d7-d398-4662-99fc-f10cd2cda457",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a786fe-d00b-4dfb-a002-6a6ba5f1ef3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "110c394b-3ab2-4aef-8131-b780f0bf39eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faad9d51-824f-4d37-947c-beeee30d7bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46ec684-f068-4f57-b9f5-be1f63672c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c795a63-34bd-43de-8959-0add38e633a0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96655cc4-a6e8-4246-a000-200daa248d21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a461a14b-fe5d-4476-bff5-8095784ec550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2db95e-5cc2-48af-bcd8-8ff4dd6070c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206f139a-63e2-4099-aebe-8f1a6b503086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5984e746-1fcc-473d-b565-04bbc783289c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a885e460-905d-4168-8d45-ad34f30608a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "385b6808-735d-4844-b580-661035d3a3a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e9aaf2-f56a-471c-a8db-9bdbb8f62002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "393f1f7a-86bb-4710-9deb-91aff5eb4b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c4c819-22f9-4df7-bcde-e44b3e0f342c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf37ba69-b093-4c60-9ae8-05673b673454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7248871-7944-4638-8426-89c25d3cc9c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bcfe77-caa5-40e0-9e7f-b1335f26d306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158f7c92-64f5-4f57-8c8f-82541344e972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6128787d-85b4-4d99-a574-ba51514c2f27",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4d9974-6e99-4bad-baad-24f8320f94be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0f03483-0827-41af-83fc-31053a1a029f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9c7c72-58c5-4c9c-942c-f0a21c8af725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c45dc3-2095-4b9f-b512-829327fd28a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cc5e5f-082b-4d3b-9981-87358cb7be21",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35386787-9efd-4164-9445-45785a27a894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "831f90d9-f1c1-48fa-af81-e3efc8374bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77644821-560f-46f8-afd0-e5027f3fb7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6817eb9d-dbd8-4a4f-b7a8-b72b157ab34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23af3b01-3470-4132-aee6-c5023d31a659",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13336389-349c-4a8c-93c6-39f43ed2decd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "193f7064-8814-4dd5-a91c-6e5f58679a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36901901-ac78-4da5-92d0-df293a78fc32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a64410-a309-4251-acd6-0fdd3740b2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bff6ad9-45c6-42bf-85b9-6f68bcbb78f5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2607d068-5bcb-4486-baf5-e498552fb71b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f191f19e-5418-42f5-872f-16f0f76360d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7493eff7-b02d-4df7-be1a-e2067a795fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1906a158-b00a-4244-bb8e-666992a5a93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f451d967-b445-4978-9b4e-b8a9b819c9ae",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd016f7-e63f-4fff-a985-11dfe580b862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb6077b-96a1-4ec1-b966-3e9ac715cce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0060016-d5e2-491d-aecf-0ed9184377f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684f91ce-6aee-4e2c-80cf-41a504ea8414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5d34c1-f1ac-44e2-84b1-fbf8db86df31",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f262c160-a4e9-4aee-a562-7d971ef36032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eef56aa-92a4-44d5-9d3f-04c7428cdd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb31b8ab-5b37-490d-89fb-4a01f64ee6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304c374f-d48c-4d29-a2b5-206568c08d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d04d67-f4cd-4d9e-b3ac-b070e3e80fff",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d510101-ea1b-4704-8371-d2e0b8e7933c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee10f33b-ca90-45ab-a7d2-7d9ae66423e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d399c73-c0ee-415e-88e4-0ee90c5039ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22e6d30-5c06-4ca2-b1b6-b302cfbb16c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce94f755-de8c-4881-9f36-146df99897b7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d95c07e-dadd-4da6-bd5f-3b7f16f6fde3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a4220a5-3cdb-4d29-82bd-3a15adde3b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "160885e7-1f1c-4b1f-983f-751129798b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c02a1c9-cf91-44cd-81a6-6cf8f0c31697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9fe390-7b23-4a5c-adb9-669bf5e31124",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f32e0d6-e040-43f0-9c83-a4e80ac09b15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ec48092-f049-413e-87ab-8fc6b8fa065d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddc78ce-fab9-4e3d-a64f-e320ac7b027f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efaba041-1725-432c-89f3-bf095d25ebdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db007373-7326-48d4-9e24-10f055313bac",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2193784-b2ac-4273-bad5-6abf89047b5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ad68088-ad0f-444e-8385-138c819ad4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f942133-5375-4a86-98d5-636f4dbf9256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e5ab31-b419-46d0-b030-fd720c146d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9b9930-ef57-467f-8ab3-ea2414636542",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d33cd9-f5ce-4c7f-87e0-31ec1df37464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ebe4c96-4ecd-411b-a99d-69fd50ef7869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2f2a2b-40c6-4594-99cf-2173c1b5edd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8067f0-25c5-45df-976f-a09cdbb4bec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02096e66-65e6-45d8-8d37-c4238a017a3a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ddb3aa-15cd-46a9-ab17-f8bb502ded5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9819531b-9d30-4742-83e1-f74e4a8d2882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06507711-1888-4904-b7ab-426d1d37ba00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091e30bf-a5a1-42be-8667-43df8927f37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca16c4c-ba9c-4a3a-8171-dfa836a95415",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36987dde-ecfe-4050-9209-39357869e6a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3724209-9ebf-4738-822a-f98437b03758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3bfea6-6d3c-40dd-97cc-a3ac6227edf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29f3a0d-ca5e-4e24-b16e-adf236373c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df36f81-81e2-48dc-adef-942d98a14956",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607b6602-0c40-4319-ab6d-396c74694a59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f14e7b6-8872-456f-895f-932da3326894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786e65e1-3f29-415b-9042-228c65e0f07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8580e47f-83c7-4ccc-b2a6-2dbeeeed1c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346c5425-7219-4aea-a356-913e0af0a78c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ebe305-878c-44fa-9c37-7d7dfd6d7d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fce54e9-c4b0-4a40-90fc-a80dec4bda61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88acd728-0cfe-4edf-8fda-c87fff1d1faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98e5f20-8901-4cac-98e7-7af197609f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a6adb7-5eeb-45ed-915b-7a93200c7ea4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd61aff-2b1b-4b17-9401-5aa617570abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6eb6254-38fc-4238-8e6f-5ad4a85dd439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71162c4f-b598-4a7f-98b3-c97f919b152a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b7e709-8210-424a-ab0d-35d3e4652b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65416dcc-99d6-41bc-844e-2f798a60a486",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1b7519-4779-4964-b5f5-975ba66a6f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba3260e7-417e-4df8-a22b-700e2b1c277a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a8462e-457e-4601-997e-1eab2be047fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e8e0aa-b3cd-440c-b652-88548b962560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ab1ce8-d16d-4605-b44a-45c168b7e1ab",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5bc507-cf42-43f5-b1ea-3f3c7b0c4595",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef75034c-7b64-4f1b-9da5-7f130edfcd0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7acbef4-feba-4d32-ad4c-d6b789f70725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819ef25b-1a29-455a-b204-59fc654fbb62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209d7d82-6df3-4683-ad99-4b1b54c69bc0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b142fe-9270-4577-9114-35f6de91785e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c92eba-97d8-4459-9dfe-37a375e26777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60164608-c1d6-47f8-85fd-c2278e79f253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089e8a47-b475-4099-a310-970b72bcf5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec7f512-c906-49f2-8114-5e9956b0b8af",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da212ba-2ec6-4a5c-b5f1-5f4524d79abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89913f54-1606-4f2a-8910-12c3ef62f909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97ccd02-1230-4268-be08-c6ebfc11c58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd02e75-6dc9-45a6-b75a-5408b2cca7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4e5e14-ea7c-42cd-9187-1c6722965a8a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59afa00-2cf9-47ea-a4b2-5a5b930734c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "674695b1-ef33-4246-aa3a-a2b775b33285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8788799a-8659-4204-916c-8e6998c25b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed3e506-2deb-401d-ad3f-4702a4b6062c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6ade9a-ed93-4a17-b9c6-c6edd6ee7805",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c739903-dcf3-4079-bff8-8d999eccb347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a642970-3db5-4b03-bc59-7839e1827402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89b2e6a-3cbf-4023-86d5-fc125e8eaa8b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235efa15-973d-4fc8-89b8-fce82d0f3312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21307f2e-563a-4d31-a9e5-6a2495ac117d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1945e54a-3abe-4e9f-918d-f86716f18ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ea93df5-941f-4dd3-8034-984cc523a78f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6b489e-b46c-4aa4-80d1-b5f1799a9b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dd5de0-e394-4a08-aa56-9c3e5e9ae6db"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd8f2c20-fd83-4b2b-8bcb-c26960674431",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6df5201-0487-4ffb-ab5c-61f2e83d005c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6609668-eee7-4c95-9d24-c7b15b201e5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14ba6a31-7be7-4e9c-b0c9-dde8d00f2e6d"
                    }
                  }
                ]
              },
              {
                "id": "7d81bff1-56fb-46e7-bfb2-6cc7211c0007",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e784098-ab46-4dca-bd8f-a22f7cd952cb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d263951-64f2-4b58-9202-120d9cc452aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4d915faa-baeb-471e-9845-6d19c1b75e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7b1ee4-43ae-4ab0-8624-c08cac2774d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "429c5e29-e344-49aa-bce8-860e666e9d59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fe6adaa-0f46-44d1-906f-7ea585a52726",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c978c6f-b740-406a-81c0-04fc1f820fd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bee542a3-9172-42c4-9460-71ec46faf673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da650985-df98-4ecc-af8e-a06576da48f6"
                    }
                  }
                ]
              },
              {
                "id": "0f50df3f-a094-4efc-8d66-95afd62f23c1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "044349e0-ad90-4821-951e-d96edb35d33b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0135bf8-f30e-4570-b0a9-879f85e081d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "28aa8b04-08be-4060-b034-7842b5e64d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd00099e-0381-4c2b-a110-d543baeab87c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16eabfe-183c-439a-9f48-a6240241617b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "549e43b0-acb5-4b5f-9da7-faa5390a52f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "de4543c7-c579-4db1-9afa-a4211df77a00",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ec1da77-7301-4aed-bf49-651890ca02a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aac3d33d-acb5-4db9-871d-e05dcd45b2ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "963de110-24be-4c34-a991-370d57665652",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afa9048e-c582-4623-9f8c-0f90630f5a2e"
                    }
                  }
                ]
              },
              {
                "id": "4ac325ed-1cba-4e91-8512-90797aa06de6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f039c5f-c5e8-40a4-9f57-0b99ae7e3936",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "be050f17-fad8-4953-aeaa-c86747afdad4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ab3c7ad-2aaf-4466-840a-c320aa5cc496",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c591889e-0dd0-446f-b9bc-1e8ea66785ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38341f71-d09a-48a0-bef7-3d79e0e78dd4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8bc3749b-217e-4a33-9316-12a8d233b40d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18b0f82c-4f46-4a49-980f-541a64b301a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "650e6c52-07ba-4b5f-b750-a7a47f681559"
            }
          }
        ]
      },
      {
        "id": "3c93504e-ba55-4bf6-8a24-9a94901fd6e4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "05a6fe10-18df-48a2-9692-a41be9721e29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "42b34866-c7dc-45ac-934a-5761acd76275",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7e2d059-f058-4671-863a-677cb4215f36",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fcef96-927e-4bbb-8aa9-e9490c40a266",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ac5849f9-2042-41c3-b3a3-6b5645d45dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956a2769-b190-4d95-838b-a8e73e120ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56e645c8-320d-474c-80dc-295fae4039a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa8dde15-bf6f-47f2-b76e-5ebefd8dcce0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01b55c6f-f709-40e0-94eb-4d114f382a63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92a81f2c-c5be-4b5b-a3f2-a64554b98fa8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e169c203-c681-4d62-92cb-8ca77b91ff10"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "305dfe8d-7269-488c-bc57-6284d00ea449",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "386d79af-610a-467c-bbf5-dbec71ea4bc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "891c7b43-1ae2-405c-bae8-2a3c98875b1e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff08cd22-0b9d-419d-8040-e02eecf6990f"
            }
          }
        ]
      },
      {
        "id": "506de95f-3a96-41f0-b822-23022baf8510",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b7ca0ccc-e97e-47bb-bee7-fe8aa522aada",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e01cd0be-62e1-4241-9157-58f449b53dd4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7d88a10-c74e-400d-9272-67dd730909ad",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c5f0c6-a19d-44ce-a39f-6798adc77cbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc40d732-03d8-4e41-97e2-3388b86d26df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f9a19f-47ca-4ed1-9460-9eb590ca08db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "728d9051-ebe5-4cfe-a180-7a901034dba4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb4cfde6-b5ae-4468-bcb0-59363b3ff430",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48f26c8a-0cd8-4a36-a9b5-b96cf3b736ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a8c1bc9-5ed9-49d7-999b-ad7c5f4a5c0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a8ca6b6-727a-4707-a5c6-f34915fb1990"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4231776-279b-47d3-b447-7d71edfd55f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f2d55179-b183-4e4e-8545-cc53231a5e5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9329301-a5ef-47f6-91c4-cf43325bd113",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82446144-b7b7-4990-8cb1-60a557739fee"
            }
          }
        ]
      },
      {
        "id": "df0c3282-668d-4cd8-8b0c-f1840b3e999d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "98511c7e-e218-46aa-a2c0-bd0ed65fcb8c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee418825-049a-4080-a520-a921a00ccfa8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ddf296e-a5e4-4c6c-a0e9-4437b5997b45",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa784d29-4d22-4a7f-9963-138d736e80fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73a07f46-e0f0-4b7b-97aa-c49e28f85999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74198290-0a84-4401-ac81-a5f6ef28a859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdabc0ca-3eb2-42ea-9f6a-a44f5215fa14"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc84a108-dd70-4ec3-a787-75645d54ad4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a9968c8-d357-4c79-a73f-e9f14f71e5a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4483d25c-eac3-4cec-ba87-7cd5e2950aa4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a5c0417-2773-46ce-97e0-08df1aa761d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8be6a19f-161f-4f40-8afc-3a452cf3f5ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6885c37d-85f1-47eb-87ce-a79aa76302cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "349b8860-d34e-40d4-9db7-4d8492ca597e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e9d31c6-977e-4cb8-a39f-11aa0d2c7a87"
            }
          }
        ]
      },
      {
        "id": "87da81f4-afdc-4ec2-ba38-b1ac58dbac59",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0153d0ef-6c02-4c9a-95b2-a498bf1931b8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8f3242b-4579-4d3e-8c94-25b7bf12d5ce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9fef6546-0072-4129-8603-02627ffd9af3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8dabedb4-a642-4356-9ddc-96df7954454b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb8d34df-a27b-41b6-9e8f-3c202b619763",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 287.5447154471547,
      "responseMin": 18,
      "responseMax": 7465,
      "responseSd": 933.6116186640949,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686962367777,
      "completed": 1686962448814
    },
    "executions": [
      {
        "id": "cfd0c9e1-23b9-46fc-a77c-d014a1badf31",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3994cfd6-fe4b-48f0-b9a2-5a3edd0c5e14",
          "httpRequestId": "f6490c40-a7db-46e4-9794-3b5c42ed1395"
        },
        "item": {
          "id": "cfd0c9e1-23b9-46fc-a77c-d014a1badf31",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "014c6fe7-e428-4ef7-9e56-74fc8bc9d48d",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "431351f0-d030-428e-9ad9-e510ac8ecc96",
        "cursor": {
          "ref": "2172573e-5bed-4b4c-aba9-d43a3f6b2d8e",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e6416e5c-8dbd-49ba-ab82-095a0ef861e6"
        },
        "item": {
          "id": "431351f0-d030-428e-9ad9-e510ac8ecc96",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "792ad9de-2d54-479e-aaed-8752403e2056",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "b1b99c0b-9158-4906-85c9-1d6fc1a39bd0",
        "cursor": {
          "ref": "c5f1d1f6-fab5-4a31-9c7f-f6570b2eb3d5",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ece9fddb-2558-4c91-b7f1-4250fba96e31"
        },
        "item": {
          "id": "b1b99c0b-9158-4906-85c9-1d6fc1a39bd0",
          "name": "did_json"
        },
        "response": {
          "id": "6938b963-c16b-403d-9467-4d5e3cca5974",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fb8906-97a8-4fee-8599-e985d8f92767",
        "cursor": {
          "ref": "1cf8e698-8e5a-4ce9-8aad-dd40f83f13b7",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "512892db-39f7-416f-a506-60cd213902fe"
        },
        "item": {
          "id": "15fb8906-97a8-4fee-8599-e985d8f92767",
          "name": "did:invalid"
        },
        "response": {
          "id": "6b13f458-2321-4032-96ae-1de0f0c2ba82",
          "status": "Not Found",
          "code": 404,
          "responseTime": 842,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "15fb8906-97a8-4fee-8599-e985d8f92767",
        "cursor": {
          "ref": "1cf8e698-8e5a-4ce9-8aad-dd40f83f13b7",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "512892db-39f7-416f-a506-60cd213902fe"
        },
        "item": {
          "id": "15fb8906-97a8-4fee-8599-e985d8f92767",
          "name": "did:invalid"
        },
        "response": {
          "id": "6b13f458-2321-4032-96ae-1de0f0c2ba82",
          "status": "Not Found",
          "code": 404,
          "responseTime": 842,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "98fa02b1-82c6-4be7-8030-e39fe4a9726b",
        "cursor": {
          "ref": "438eb3ee-63b0-4601-8a7a-769d3b3f7b65",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "804d25e1-9453-4443-beca-2d0d52dcf3f5"
        },
        "item": {
          "id": "98fa02b1-82c6-4be7-8030-e39fe4a9726b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "99a4cece-c66c-4b32-a7f4-6a7ce350f3fc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63336543-caf4-4378-b47b-00df62526688",
        "cursor": {
          "ref": "81b8a1d1-fe6c-45e9-9272-685a9832c7ec",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8d11c7e3-6bfb-46d2-aa20-cff5968d7f5a"
        },
        "item": {
          "id": "63336543-caf4-4378-b47b-00df62526688",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9977c6de-d792-4f0b-90b5-96d38451fe04",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ed6a2f-e6e9-472b-8952-17001db90abf",
        "cursor": {
          "ref": "dea886eb-bbd8-4062-9115-b4ce1253c45c",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5f27f342-0b67-44d1-a475-b701e4595c38"
        },
        "item": {
          "id": "59ed6a2f-e6e9-472b-8952-17001db90abf",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2b3f529c-763b-4bf6-b346-3b3ed6f79aca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "49f3a326-995e-4fc7-aa60-e87107138497",
        "cursor": {
          "ref": "0e44593b-4849-47fb-b0d3-60661c570ec6",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "da85f7d2-9f74-40d1-9158-73ddc1ffdcfa"
        },
        "item": {
          "id": "49f3a326-995e-4fc7-aa60-e87107138497",
          "name": "identifiers"
        },
        "response": {
          "id": "05770d4a-ed73-4698-8e3d-640ae82ae94e",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15ffe91-338e-4c11-b2e3-d2bebf9ecf7d",
        "cursor": {
          "ref": "33b3c50c-8bf3-47fe-83a6-e86a68f7edbe",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9822b85e-e1d6-47b5-8afb-526999c6be6c"
        },
        "item": {
          "id": "d15ffe91-338e-4c11-b2e3-d2bebf9ecf7d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3e3e94de-6cbd-41b4-9d31-3dfc6501fb92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c8d132-1bb0-4b41-ad81-be2d497aa72c",
        "cursor": {
          "ref": "eac7afbd-1bfe-4110-bb5d-652e01f81599",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "05d66b99-7e1c-486e-a76a-a3f4adbc72f4"
        },
        "item": {
          "id": "97c8d132-1bb0-4b41-ad81-be2d497aa72c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f5b9ccb8-f2f3-4bfc-a896-a82261ffe09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 617,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ef48eb-bb19-4139-b9d8-430794b7a786",
        "cursor": {
          "ref": "d7972656-030c-4ad0-8333-950d787c2e0a",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "571f593f-b626-41e3-9cd2-453fdfbc45b9"
        },
        "item": {
          "id": "c8ef48eb-bb19-4139-b9d8-430794b7a786",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "de3f4998-505a-4fe2-9462-9e8124fd4895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d05b37e-6950-4ecc-b966-b4a93a4a8707",
        "cursor": {
          "ref": "5b0cfe85-d69e-4dea-81ca-a682805a274d",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0b2a11ac-05a4-410f-9e93-957cefefa134"
        },
        "item": {
          "id": "9d05b37e-6950-4ecc-b966-b4a93a4a8707",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "350cc72c-d054-458c-8330-43ac0325e3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 599,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf0b7f3-5819-4a03-aad9-6badcaa3cd8b",
        "cursor": {
          "ref": "61b683a4-5da9-4288-b40f-033b5483d72c",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c1d4ba98-07ae-427c-8e2f-c246f4f49a36"
        },
        "item": {
          "id": "fdf0b7f3-5819-4a03-aad9-6badcaa3cd8b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8346f130-589f-48b5-8755-032869d9d830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d330d91a-0d22-48c1-8a2c-d60f05113b32",
        "cursor": {
          "ref": "d4f12194-a955-48c3-8ff7-dc590bcd2c12",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "41299784-b1ec-4d6d-86de-3334c8de2fda"
        },
        "item": {
          "id": "d330d91a-0d22-48c1-8a2c-d60f05113b32",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d3f1f46c-29ca-44ae-85e8-cdeb9bf5fc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6feb620f-9f62-4da5-9677-d6133b92c25d",
        "cursor": {
          "ref": "1136ae79-0df5-4a25-b3ee-4cbd15fefff9",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "99387f93-0d7f-400a-9c57-d79dfb40f974"
        },
        "item": {
          "id": "6feb620f-9f62-4da5-9677-d6133b92c25d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "86dd8f8e-c48d-49be-a0c1-a6332f29c100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedf843b-59ec-46f6-b737-6316f87a1acc",
        "cursor": {
          "ref": "d238b367-07d5-4033-8394-c082fe594b3d",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "070eac96-7976-49c4-8f0c-7de2ec8523d1"
        },
        "item": {
          "id": "aedf843b-59ec-46f6-b737-6316f87a1acc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "937be28e-04c7-479b-b714-a39520f04e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cea962-20a1-4aad-aae9-259c004babf1",
        "cursor": {
          "ref": "183ac02d-0e73-4368-8275-04ed9fa96184",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "298388e9-869e-409b-8d7b-ead7b20a9ec0"
        },
        "item": {
          "id": "06cea962-20a1-4aad-aae9-259c004babf1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "15820aa1-f08c-4453-a3e8-a04e329359e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa947fe-0aeb-4862-b166-51e063e18411",
        "cursor": {
          "ref": "717fdf16-bd32-4c73-952a-3eead0fd706b",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6c154020-ea59-4ad3-a900-a5a096023e72"
        },
        "item": {
          "id": "8aa947fe-0aeb-4862-b166-51e063e18411",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cc5b33d7-d7e6-404c-b32c-85180ec72e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ae7301-31cb-482f-9085-bb43e1e9be7a",
        "cursor": {
          "ref": "196824a9-5c12-4ba9-b55e-d8b7aca3e318",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a0429c47-631b-4550-993b-276eca615eef"
        },
        "item": {
          "id": "72ae7301-31cb-482f-9085-bb43e1e9be7a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b52a9f5c-f17f-45c2-bd5b-a213587bc8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbb944b-d378-425b-bb21-ae6622bd9fdf",
        "cursor": {
          "ref": "beb09966-78ea-486c-bd89-64bdd7556557",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2a04b851-e552-49f6-8eea-981fb19db4b0"
        },
        "item": {
          "id": "2bbb944b-d378-425b-bb21-ae6622bd9fdf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7b29e94f-6e85-4ade-8ee8-973016188a79",
          "status": "Created",
          "code": 201,
          "responseTime": 2344,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "011852c9-5217-43fd-94c7-0bb4c194e653",
        "cursor": {
          "ref": "36576ffe-1351-4db3-8601-f0d0946b16b4",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fbc9c82a-3cef-4433-8b45-8aac9f0cc591"
        },
        "item": {
          "id": "011852c9-5217-43fd-94c7-0bb4c194e653",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9a6c182f-7261-43cd-aecd-cdef4931e426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8ad7d6-85dc-4ca7-a0a6-40f526997fde",
        "cursor": {
          "ref": "9bf8d4e4-2b58-4cb0-ae22-5e9fbc2c1284",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fb62fee2-c910-42c0-bfa8-8e335f513e26"
        },
        "item": {
          "id": "2b8ad7d6-85dc-4ca7-a0a6-40f526997fde",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ee83ebdd-7f60-4b3c-803b-41b5f1913eb8",
          "status": "Created",
          "code": 201,
          "responseTime": 4066,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "cca2d67a-e40f-44d4-8896-520cbe2789f2",
        "cursor": {
          "ref": "03e9983a-34ef-4247-b61e-6bb444508258",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dab3cf1b-84bd-4a2d-943d-54d88f0cfa4a"
        },
        "item": {
          "id": "cca2d67a-e40f-44d4-8896-520cbe2789f2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5b991fa8-8bd0-438a-a686-fc4bcd1abaef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a98848c-fe6c-4acb-9db6-4151f792e1f2",
        "cursor": {
          "ref": "2d442b1b-7207-4aa8-80cb-9b9924799eca",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "492589cb-6b4d-4789-b6b5-a82d0bfeb80d"
        },
        "item": {
          "id": "4a98848c-fe6c-4acb-9db6-4151f792e1f2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "00e85af9-a374-49b4-b0e3-f9f968e8d88d",
          "status": "Created",
          "code": 201,
          "responseTime": 5734,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ad60d8b9-883a-4f7c-84ce-baebd90eb616",
        "cursor": {
          "ref": "9ddc3d66-f644-4ba3-a632-5d9b807e3098",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "11c6e2fe-e78a-4632-a9a4-ca3a211d78a1"
        },
        "item": {
          "id": "ad60d8b9-883a-4f7c-84ce-baebd90eb616",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fd35f54d-4f80-4966-9be6-c64c08e711d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1d8d75-f01d-460d-bdb7-286399f8a0da",
        "cursor": {
          "ref": "f597ca29-fe5a-4abb-ab1e-64a2b31342ea",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2aeed31b-19c2-4977-bca6-6f4c8fe6680e"
        },
        "item": {
          "id": "5a1d8d75-f01d-460d-bdb7-286399f8a0da",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4078d9a5-6677-42cd-b32d-be2d994296cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc432485-8e8e-4b41-9c3b-b693f87623fa",
        "cursor": {
          "ref": "9bd2c3b3-768a-41a5-bf85-93c6ef855933",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4dbd5af3-c90d-4fae-8728-77ba67b06292"
        },
        "item": {
          "id": "fc432485-8e8e-4b41-9c3b-b693f87623fa",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "367b253e-73c2-4f0a-a351-cff24bfec0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5164c56e-95f8-4b46-b0d6-20c43f9f73c2",
        "cursor": {
          "ref": "29240333-e4ae-4222-b3e6-e828fee90417",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eeea52e6-7ee7-4348-abbb-6555d9433ea8"
        },
        "item": {
          "id": "5164c56e-95f8-4b46-b0d6-20c43f9f73c2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2edc8a0a-50f8-4773-8034-cffdf2c7c54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8059815-9adb-4ebb-8f44-cff8a4f82203",
        "cursor": {
          "ref": "1fa76af3-cf70-4c49-9d3e-b0860d17b357",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "983ace0f-e7f2-4a61-a961-f574604d6c39"
        },
        "item": {
          "id": "e8059815-9adb-4ebb-8f44-cff8a4f82203",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "11750786-86b0-430d-bdb9-01812ed5e6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656974aa-0f07-4a2f-b043-b1ca63aecc3a",
        "cursor": {
          "ref": "29fdf85b-ab2c-4e94-bd69-15885fd4a6bd",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e9d38424-e3b5-43d2-9422-5698c0ce8e0f"
        },
        "item": {
          "id": "656974aa-0f07-4a2f-b043-b1ca63aecc3a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2d534ef9-40ad-42dd-ab77-1babf51bf879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95bc0ab-c9bd-4624-862d-78cc6b8d9e66",
        "cursor": {
          "ref": "3cdaaa42-5690-4fa8-b51d-87e7301bd27c",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "74b26ebb-1e79-4606-9889-cceb5e97389a"
        },
        "item": {
          "id": "a95bc0ab-c9bd-4624-862d-78cc6b8d9e66",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "61da2a67-ef23-4e0d-889a-0430cc33c592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175c1dc9-ee9e-48ff-b0d1-89be54f3b4f6",
        "cursor": {
          "ref": "ba6c6430-a30f-4360-b567-0950bd8682d2",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8117f906-50f4-4f4d-b0cb-fda16b31c8db"
        },
        "item": {
          "id": "175c1dc9-ee9e-48ff-b0d1-89be54f3b4f6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4db30055-a0ff-48bb-84d9-5d2240a0e98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c9af05-2502-410f-be73-2812c605e96a",
        "cursor": {
          "ref": "dff3af91-dd49-4c90-a4a7-8596bf5f94d2",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "77f253aa-281f-4fd9-9c34-ff968b5050b5"
        },
        "item": {
          "id": "39c9af05-2502-410f-be73-2812c605e96a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b0e956df-e403-4b7f-b45c-bafc58677bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb15f0e0-da55-4f03-b90b-ace747076687",
        "cursor": {
          "ref": "967333cc-4d8d-48ba-a418-dbf8cad5f9ec",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c9eb0317-544a-4514-9d0a-d4687e712d78"
        },
        "item": {
          "id": "cb15f0e0-da55-4f03-b90b-ace747076687",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "85be5456-91d0-4a42-b1e3-9c9c3e572cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0331ceb-9da1-4056-ab74-819b6e904b69",
        "cursor": {
          "ref": "6b1a43eb-42f8-42f7-b58d-7d8656d47364",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dbf1400b-5e91-4639-bace-f9a01e34c1f3"
        },
        "item": {
          "id": "c0331ceb-9da1-4056-ab74-819b6e904b69",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "442fddca-7d60-46ac-a792-a888ea4d84cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317163e3-5d97-4623-a603-13d2a5414a7e",
        "cursor": {
          "ref": "a089f15d-bc17-4bd6-a541-a36e0f8676b7",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6f696034-b487-46de-abd0-11344aa37c90"
        },
        "item": {
          "id": "317163e3-5d97-4623-a603-13d2a5414a7e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fc559601-b200-4600-897e-c9e125b74fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c39700-7fd9-4fac-bcd4-5f9b68e5d9f6",
        "cursor": {
          "ref": "3b795788-8711-4954-bea2-a9df297278db",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "92bfc343-340d-453f-b828-32e6d1a95b10"
        },
        "item": {
          "id": "a1c39700-7fd9-4fac-bcd4-5f9b68e5d9f6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0fde9293-4829-4346-81c7-199fb48272d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687d4277-8354-42dd-a701-2d9791377caf",
        "cursor": {
          "ref": "ddf9aa1e-3967-4656-b935-907f7d024b84",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "382eb547-c163-449c-8087-d334830eb962"
        },
        "item": {
          "id": "687d4277-8354-42dd-a701-2d9791377caf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7f1ca265-6bae-4558-97bc-171c14c7af58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b4829f-bb71-4efa-944b-660228bdd401",
        "cursor": {
          "ref": "e2dd958d-0bc1-484a-a768-2f58511a31ea",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "abf12f5b-d1c4-4994-8207-57ab26508b29"
        },
        "item": {
          "id": "64b4829f-bb71-4efa-944b-660228bdd401",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ad2bd80b-6cb2-466c-84f5-9d399cef9ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8722b809-5975-45c8-9869-041857435eb9",
        "cursor": {
          "ref": "fb7a68b2-8d1a-4110-8c90-4a8df7da7acc",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e9e67756-b908-4819-b901-06aeca43f473"
        },
        "item": {
          "id": "8722b809-5975-45c8-9869-041857435eb9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "96e1fcfd-ba17-42dd-92c4-8940d825359b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab19838c-257c-4ad5-8958-a17078e4de99",
        "cursor": {
          "ref": "35cd0d7d-7e5e-4733-892d-024849fa801b",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a856dd52-e910-4e1b-9c48-ee876076668c"
        },
        "item": {
          "id": "ab19838c-257c-4ad5-8958-a17078e4de99",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7d073d6c-0973-4024-8d47-2e47e3ea8ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2e1068-83d1-41f4-9ec9-dcaa9f594cac",
        "cursor": {
          "ref": "449eeca8-aa19-4907-b5e6-a8d997b14f9b",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ab929bac-c0fd-4943-8690-f48f36209e57"
        },
        "item": {
          "id": "dc2e1068-83d1-41f4-9ec9-dcaa9f594cac",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bc7a3a94-2c6c-477a-9b8f-592dd1aab5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3764ae44-400f-4a64-9829-58698f249586",
        "cursor": {
          "ref": "ffd32f9b-3015-4d9f-b8df-185434547e05",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f2258717-859b-481f-9f82-7a3b6426cb8a"
        },
        "item": {
          "id": "3764ae44-400f-4a64-9829-58698f249586",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0cbcc9ea-9da8-49b0-a230-6af929b7cbd5",
          "status": "Created",
          "code": 201,
          "responseTime": 2767,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "681bd893-4e3f-43a5-9518-e3e18dd2a961",
        "cursor": {
          "ref": "4340f0c6-68a6-4ae7-a607-dc4e046b59f2",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "33c550b5-380f-48c3-8a58-4f88f3fb56a1"
        },
        "item": {
          "id": "681bd893-4e3f-43a5-9518-e3e18dd2a961",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b5bd74b3-8c8f-4b54-8684-61fbe0b04f0c",
          "status": "Created",
          "code": 201,
          "responseTime": 2944,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "814a4bb2-7d9a-4c71-a666-558bfca866d9",
        "cursor": {
          "ref": "3dfe39e6-6710-4614-a86d-d19c1448ea2f",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "922944f9-6d42-41ac-a5a2-31aba785a1a5"
        },
        "item": {
          "id": "814a4bb2-7d9a-4c71-a666-558bfca866d9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a3a02078-7463-41aa-af0e-6ffd438a67ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913b31bd-95cb-499a-9b06-d8c04f988f48",
        "cursor": {
          "ref": "144511f4-0728-49c0-82ab-6bfe284b0d80",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e6aee3b2-3c83-405a-8161-7b8b097e62e1"
        },
        "item": {
          "id": "913b31bd-95cb-499a-9b06-d8c04f988f48",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6d2d8b65-5577-48ca-a979-16499a65e126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d00cd13-6338-4a3e-8443-61f4e312fa6f",
        "cursor": {
          "ref": "fece68b5-11ee-4503-8fdb-6a6c53587a77",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c22ccb88-04d0-463f-9503-58cefc3d5517"
        },
        "item": {
          "id": "2d00cd13-6338-4a3e-8443-61f4e312fa6f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7d34f439-2582-4453-96cc-c13221262430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3498af-fa81-49f2-ba99-8613acf75bf0",
        "cursor": {
          "ref": "4ab7d8b6-107c-4fd6-ac49-9f68a4f38187",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "187002dc-d2aa-497e-a7ed-99fff6e3271a"
        },
        "item": {
          "id": "2b3498af-fa81-49f2-ba99-8613acf75bf0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c6e58e59-3373-4bb1-9702-9cbf51da23a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf40bcd8-5268-4610-9192-935532700489",
        "cursor": {
          "ref": "e707e4a7-2b1e-44d0-b6bb-54f929d41aff",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2e169b89-6464-44a0-9320-ee54164a148a"
        },
        "item": {
          "id": "bf40bcd8-5268-4610-9192-935532700489",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5b53f550-e3a7-46fc-96a4-9aa00af14d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5cb491-e5df-4595-a540-f6cc791be6c9",
        "cursor": {
          "ref": "319f315f-f2fd-4399-a10d-9b441333525e",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a2a8b85e-63d6-4c06-8699-c0fa1bb95bef"
        },
        "item": {
          "id": "1c5cb491-e5df-4595-a540-f6cc791be6c9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "600cb0d3-00c0-448d-b506-f4fd012a8dcc",
          "status": "Created",
          "code": 201,
          "responseTime": 2724,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a22ff751-52ee-40a7-b026-68d9c6f8d2a9",
        "cursor": {
          "ref": "881f3c6e-92ad-4330-980b-43b2dd596508",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6f34518f-3756-433d-be48-aedeb612f2c1"
        },
        "item": {
          "id": "a22ff751-52ee-40a7-b026-68d9c6f8d2a9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fd570e52-3c82-4976-80eb-eea4862d1700",
          "status": "Created",
          "code": 201,
          "responseTime": 3725,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6441c7b8-a857-4763-a6aa-fff6b1a0f9f3",
        "cursor": {
          "ref": "e8ba54a4-e5a4-4462-8426-7a4f25dfc72c",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "da02b25c-902b-48fc-87bd-a6c1e24989ca"
        },
        "item": {
          "id": "6441c7b8-a857-4763-a6aa-fff6b1a0f9f3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1495b9f6-86ec-4fe2-9f1c-a8897287f85e",
          "status": "Created",
          "code": 201,
          "responseTime": 2569,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "37c07307-794e-46c2-8b17-a1fc7005c9b9",
        "cursor": {
          "ref": "84b8f101-c725-4b49-8e4b-480e4efb49f1",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d98eb168-7320-4d0d-b67a-4b6416beb09e"
        },
        "item": {
          "id": "37c07307-794e-46c2-8b17-a1fc7005c9b9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6eef0277-8a24-4b88-aec3-1e269ed83b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4652a6-775e-4c08-9663-a6e56a549429",
        "cursor": {
          "ref": "40da5140-53ba-478f-ba14-549397386c99",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6e1fad0a-2898-4bbc-bf6b-f655820ff5d8"
        },
        "item": {
          "id": "0c4652a6-775e-4c08-9663-a6e56a549429",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2d8c7061-9c66-4243-9f78-7805ac0c0b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c64693-2464-4b78-9bd7-ca1262610fde",
        "cursor": {
          "ref": "b90dc056-c24c-434f-865a-0369cd0ba83c",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f9f82cf9-c5fe-4345-8bba-ee41f5ecd89f"
        },
        "item": {
          "id": "e4c64693-2464-4b78-9bd7-ca1262610fde",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c3cd631d-8369-4dc3-bad9-e701c7aa3a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6488d6a-28c4-4c7f-a596-4203286966d3",
        "cursor": {
          "ref": "e1eb2835-3880-473e-bb46-a9780d5c066b",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c1019c4a-a424-42f5-b129-a074aae3695f"
        },
        "item": {
          "id": "e6488d6a-28c4-4c7f-a596-4203286966d3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "602045dd-2dac-4a50-aa07-ab35d62873e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4949b372-523a-4aae-9745-4c8799799a77",
        "cursor": {
          "ref": "53a090d6-cb1b-4540-917b-9aeab6ccbf55",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3886c46e-b5d8-419c-a8c5-0f0fddcc96e6"
        },
        "item": {
          "id": "4949b372-523a-4aae-9745-4c8799799a77",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8a692645-17cc-4c4e-935c-6e3f803f8532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6353ac-fe02-44c6-85de-3c0fc3ee9289",
        "cursor": {
          "ref": "742ca5ee-a446-4681-b73a-e1c26136f7e4",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "14e672e3-1a61-4dd4-9891-890644fb3c87"
        },
        "item": {
          "id": "da6353ac-fe02-44c6-85de-3c0fc3ee9289",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e769d2a2-866f-4384-a762-8a1d1f06d992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d833a8e-9532-4237-8868-028fd636fa80",
        "cursor": {
          "ref": "8f35c198-3cae-485d-9665-3851845054bf",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "73857949-b30f-4b48-aa85-5c30ba969296"
        },
        "item": {
          "id": "0d833a8e-9532-4237-8868-028fd636fa80",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "48fdea7f-2747-43cb-8eed-c8178ac4ee38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa29e43-14e5-43a6-a469-3419ea9878c6",
        "cursor": {
          "ref": "d4785066-06f6-43ab-a663-70864f6d6b64",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "681884ac-ec38-4d33-8a82-1e5c2c8a5bf8"
        },
        "item": {
          "id": "dfa29e43-14e5-43a6-a469-3419ea9878c6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4c007eb9-d459-445e-9406-dee2137803f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949bbb41-3301-4801-8eed-cbd1d4667e60",
        "cursor": {
          "ref": "cdf50126-fbeb-4fbe-b755-4c6797e59889",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "79592d9b-4c89-4210-a659-e5c894237c61"
        },
        "item": {
          "id": "949bbb41-3301-4801-8eed-cbd1d4667e60",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "db084f04-6880-4604-b13f-207ca4258318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a830cb-3e8b-4122-b9c7-7cca560e052a",
        "cursor": {
          "ref": "6e49f993-28ac-4b97-91d1-870330b0e40f",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "13e58573-fe9f-48e1-8595-b4b796173808"
        },
        "item": {
          "id": "93a830cb-3e8b-4122-b9c7-7cca560e052a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b00706c7-ae14-4429-8f5c-9397700f5b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb48815-6109-4d86-9bd7-c870950c97c7",
        "cursor": {
          "ref": "39025cb3-1669-45a4-b454-27b705e263b2",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8439d9e0-aaf1-48ac-9c17-c76417d2e3a2"
        },
        "item": {
          "id": "aeb48815-6109-4d86-9bd7-c870950c97c7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "10faf1e6-4800-48d8-9153-d07b3d04b80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3a732a-aedf-4a94-aaa3-de1c06c59bba",
        "cursor": {
          "ref": "58d70880-c2f3-430f-9b19-1704e2900846",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "77215929-c6b9-4698-b32e-d6a012c7b489"
        },
        "item": {
          "id": "2e3a732a-aedf-4a94-aaa3-de1c06c59bba",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6f7c9fae-8c5d-4f5e-b23d-30301fd03268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6c3012-a172-42d6-a478-fed7cb56bdcb",
        "cursor": {
          "ref": "e1526290-7502-4dd5-b604-b98277c600d9",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5c7176db-6446-4fd8-92ef-385ed2dc733a"
        },
        "item": {
          "id": "be6c3012-a172-42d6-a478-fed7cb56bdcb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8ff2e948-754b-433c-a215-11613a722410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bed8677-e5ba-4ed1-9fc4-1adb4014cfa2",
        "cursor": {
          "ref": "276b767e-161c-4dcf-9c3a-ac10161dae86",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b57f91e8-c7e5-4035-9459-2dcbdd2407eb"
        },
        "item": {
          "id": "0bed8677-e5ba-4ed1-9fc4-1adb4014cfa2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "19828336-b923-4abc-a5bc-a9716cbc6898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5739536-8e7d-48d6-96be-6521103b5540",
        "cursor": {
          "ref": "a1d3a5ef-91a4-4dfa-9612-2cab2c03ba6a",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "41228669-08c9-491f-8a60-7f7311369204"
        },
        "item": {
          "id": "f5739536-8e7d-48d6-96be-6521103b5540",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a619e071-b90e-4979-a447-7911a7b48acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7a4343-6907-4f87-8c4a-54709b89ff1a",
        "cursor": {
          "ref": "0b8b1a45-5bef-4b4d-b3e6-5353025debbc",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9e4a1616-77e9-49e6-950f-04d30b9f5f15"
        },
        "item": {
          "id": "fc7a4343-6907-4f87-8c4a-54709b89ff1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "db5710ab-17ad-4f85-b696-49ce0f51fd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51f8c42-cc6f-4d28-959b-d0c3fb0413a9",
        "cursor": {
          "ref": "0818b86a-fac4-410e-aef9-389b32cfb5d4",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6423779f-cfac-45f5-9237-e41629730f5d"
        },
        "item": {
          "id": "d51f8c42-cc6f-4d28-959b-d0c3fb0413a9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a43906d5-3dd4-45d1-91a2-ac4fc391534d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6aac26b-c2d3-43ba-b0e3-9a62236df1ff",
        "cursor": {
          "ref": "6ce64e02-3813-4121-9451-3bad813da4bd",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e7583632-14cd-48ad-9503-0c9bf192ae4c"
        },
        "item": {
          "id": "a6aac26b-c2d3-43ba-b0e3-9a62236df1ff",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "744488d4-385f-4b30-ab7e-c425c7134269",
          "status": "Created",
          "code": 201,
          "responseTime": 7465,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "2948f218-7f12-4ce0-9277-2ff28b6d2337",
        "cursor": {
          "ref": "fe1881e7-e24f-4f8c-9948-dbbdb474934b",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3c7e50cf-b709-4417-bbf1-6a7d4975a00d"
        },
        "item": {
          "id": "2948f218-7f12-4ce0-9277-2ff28b6d2337",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cfa433af-eb1b-4026-bd1a-82d4e8d50f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bedc48b-0376-4181-b61e-20ffae30b44b",
        "cursor": {
          "ref": "cc5d97dc-4405-4214-9b44-22db405f8d8e",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1c6a41e8-c841-4a19-a776-b080100aa3c6"
        },
        "item": {
          "id": "4bedc48b-0376-4181-b61e-20ffae30b44b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6ee6e00b-fa9f-4561-b200-ffc5e2dd23d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbda8d2f-d1f5-43fb-bc8d-cc5720e72da6",
        "cursor": {
          "ref": "e4b15b26-5c09-405f-bcae-a2cb52d5ee38",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e14b4ebe-c20c-4228-aa5d-021c4fb1e0fa"
        },
        "item": {
          "id": "fbda8d2f-d1f5-43fb-bc8d-cc5720e72da6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8425bc84-4711-4ad6-9af4-e1063be4eb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26068de5-096b-407d-b563-385621a76699",
        "cursor": {
          "ref": "9815f4ee-51fb-4d86-9e3d-8bf8336869aa",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "08238611-6b3b-4aa8-9473-1c2e3a1e8e09"
        },
        "item": {
          "id": "26068de5-096b-407d-b563-385621a76699",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d6277afa-1fc6-4457-b106-9463538f9439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5aad655-656f-4433-9047-bd508e50d38a",
        "cursor": {
          "ref": "c6e30d1a-ff69-4c99-ba79-ea5352750859",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "99a9b2e0-9ed1-4cf2-9e5c-2758bce5055f"
        },
        "item": {
          "id": "c5aad655-656f-4433-9047-bd508e50d38a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d7c4b6af-c991-46e2-ab97-0994c07192df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4510ee7-2189-4fb5-9501-072ae078168d",
        "cursor": {
          "ref": "7c0cddfa-0f69-4c68-baf8-b213ae67ea9e",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "73b4c086-c403-4b35-9f6a-8dc9b0c3eb81"
        },
        "item": {
          "id": "e4510ee7-2189-4fb5-9501-072ae078168d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bf8f3e1f-8347-4c4f-afe7-c3660629ad19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601ce1cf-7795-45f0-94ba-37a447dafa6f",
        "cursor": {
          "ref": "584f1d02-dc8b-4ab7-a627-15b4932acaf5",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "814e7350-865a-4c9f-b839-33d754141817"
        },
        "item": {
          "id": "601ce1cf-7795-45f0-94ba-37a447dafa6f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e9200649-f9ea-43e8-9f86-7d80a620a704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34fcea6-f63e-43d5-b006-f7758071bbf9",
        "cursor": {
          "ref": "4b22525f-b7f5-41bf-87da-da6ac0963a09",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "71e0e3af-5965-4052-9594-dbde1bae9c93"
        },
        "item": {
          "id": "e34fcea6-f63e-43d5-b006-f7758071bbf9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "84c909b0-d004-4c21-b977-49770dae5a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e226817-52e2-4ac3-acf7-2d52549ba535",
        "cursor": {
          "ref": "6c7c2a0d-d08f-4047-a3a9-e46ccbddd143",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "63a69671-48e9-41fa-a66c-5ab1ef5576b9"
        },
        "item": {
          "id": "0e226817-52e2-4ac3-acf7-2d52549ba535",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "41f1335c-ee74-4c68-a4d0-0300d36afa78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb578cd-6bb1-48b2-ab50-04015d11f2df",
        "cursor": {
          "ref": "73b7df93-1fcd-4cd5-b2c0-647bc839c952",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "91a9b0a9-9144-4a8a-b12c-8e4a7f2e4c08"
        },
        "item": {
          "id": "2eb578cd-6bb1-48b2-ab50-04015d11f2df",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9039a6d6-f109-4e13-b9a0-751bc4e54fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c4c46e-9c91-4ec4-ac2a-39e5dff63de2",
        "cursor": {
          "ref": "23753800-e5df-4a86-aaf5-37d25e0c40ea",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "deeed297-54f8-436c-a160-a49ad54adb70"
        },
        "item": {
          "id": "57c4c46e-9c91-4ec4-ac2a-39e5dff63de2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "214d9029-0357-47bd-b651-32b2542f1701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde7e099-d25f-4ebe-9c0f-7751286379bb",
        "cursor": {
          "ref": "b6617df8-9942-46ba-8552-6ccdcc38de18",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "81d03a71-ca9e-469d-baf6-51ee00945ade"
        },
        "item": {
          "id": "fde7e099-d25f-4ebe-9c0f-7751286379bb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cfd6b09a-d0a8-4f02-8fd6-19fb158fe103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79b3f2e-b01a-486f-85af-a9ee8ccecfe7",
        "cursor": {
          "ref": "9be88d15-1e70-4c18-be80-7562e14e383f",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b782d13f-88f9-42cf-932d-dd060b6b12fa"
        },
        "item": {
          "id": "e79b3f2e-b01a-486f-85af-a9ee8ccecfe7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "08808f16-91c8-48c2-a16c-0ce8c9cf59ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59979a3-90fb-46fa-924f-d75e90cd8b40",
        "cursor": {
          "ref": "e669a56c-7b77-424d-a9a2-e166ef024995",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "250443ae-347b-4793-b268-6fbc58bea56d"
        },
        "item": {
          "id": "c59979a3-90fb-46fa-924f-d75e90cd8b40",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f2efb33b-7c1b-452d-8a7a-b460f87e59ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b6651e-6164-4163-81f5-9ab1aebd17cb",
        "cursor": {
          "ref": "7f7c4e82-e856-4d4f-899b-e8c091f52eb8",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e496c229-9b80-48a8-91df-670d3cb75709"
        },
        "item": {
          "id": "47b6651e-6164-4163-81f5-9ab1aebd17cb",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a272d99c-0de2-490d-9c29-8cb7fc584024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06fcd99-9bfa-48dc-8aa9-68ef8650491d",
        "cursor": {
          "ref": "86adcc07-2e1e-4419-a42e-bdd836c0c64a",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "de17f91d-0cb0-4b06-9040-0a91afd5ca24"
        },
        "item": {
          "id": "b06fcd99-9bfa-48dc-8aa9-68ef8650491d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a94cf2d7-06f7-47de-93fa-b3fcef8eef63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f866e81c-b218-45ea-b374-fecbe9de949a",
        "cursor": {
          "ref": "ac9855b1-cc08-491f-aaae-b130594a58f7",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fbe99fca-2739-44c2-bd0a-a7c1bbeb0618"
        },
        "item": {
          "id": "f866e81c-b218-45ea-b374-fecbe9de949a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8f43083a-43a6-4175-a296-3343d578d5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86b589f-9403-4840-a7de-3f262cec86dd",
        "cursor": {
          "ref": "027e763d-537d-4191-8af3-a3811cd2f1c2",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "386cec6b-40e9-4140-9a71-e981e27ffee1"
        },
        "item": {
          "id": "e86b589f-9403-4840-a7de-3f262cec86dd",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "110b68f3-d1d3-4306-afd4-ff2a835a9b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e277171b-34f8-4102-af18-639da38ec4e3",
        "cursor": {
          "ref": "b71525e0-fa60-470a-8847-c0d1f3343bb6",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "655ff883-8319-42eb-a878-f6e2af8d6d87"
        },
        "item": {
          "id": "e277171b-34f8-4102-af18-639da38ec4e3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b6f7fe63-29e2-476d-b28a-7e22c3925b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79f1607-bd0d-41b6-b75b-463e06f0b069",
        "cursor": {
          "ref": "9ef9a2d4-ca02-4179-8284-9d32d84e6162",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e6fdc81f-f721-4831-a70c-0c67d364f018"
        },
        "item": {
          "id": "a79f1607-bd0d-41b6-b75b-463e06f0b069",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cb168349-674e-4a9e-9e94-095f1bb588a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077044ee-7cc4-4ae9-8fb6-9397ddba9aef",
        "cursor": {
          "ref": "dff27cde-ce32-4d2f-b80e-b78afffc834a",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "610e6d7a-62cc-40cb-9297-d9141e9c77db"
        },
        "item": {
          "id": "077044ee-7cc4-4ae9-8fb6-9397ddba9aef",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2c4775fd-22e5-4d54-ab59-599c4e403a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439639bd-3134-4724-a27e-132f02e9a558",
        "cursor": {
          "ref": "68d1af82-f031-42db-bb58-caf3f97b53da",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "28029ce8-9f49-4038-b0d1-1e3bdc8034c0"
        },
        "item": {
          "id": "439639bd-3134-4724-a27e-132f02e9a558",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d7ea0570-a5d2-4867-ba54-b08a37b127b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beef6d49-c38f-4b64-b0de-aaeb3c2d729a",
        "cursor": {
          "ref": "5e8eabfa-b21e-4165-93a5-09814313371e",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "df1fa351-7714-44e5-b6a2-e2b7c875c4ec"
        },
        "item": {
          "id": "beef6d49-c38f-4b64-b0de-aaeb3c2d729a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a40de4bf-f04c-49f7-af44-c94f140325a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd1b29d-2035-4109-b725-33a19a8d7cc7",
        "cursor": {
          "ref": "0ef6cc84-9bd3-4b11-b469-59cd19e5d4a3",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bfc816bb-dade-4834-b165-b48f41640ce2"
        },
        "item": {
          "id": "8bd1b29d-2035-4109-b725-33a19a8d7cc7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "18cf0fc5-9148-47d5-a1e8-6a226ab98f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f95ed2c-290b-4b86-bdb9-8271951667d4",
        "cursor": {
          "ref": "790f875b-8440-4d10-9e0b-2d8c2d339308",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c48c55e0-2582-4b07-a428-70871a4d3a35"
        },
        "item": {
          "id": "3f95ed2c-290b-4b86-bdb9-8271951667d4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c00ba8f7-5a91-402f-aee6-10cc9d59c317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf79493-20d8-44d9-82c1-4d3c5d844b29",
        "cursor": {
          "ref": "34c0b56c-9ade-482c-8073-55a5a313485f",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0fa6443a-e330-4d3a-8152-a24b146bc81b"
        },
        "item": {
          "id": "caf79493-20d8-44d9-82c1-4d3c5d844b29",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3fab896a-19b2-4185-b814-494ef3af9701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a2380d-4cb7-4577-ab1c-aea0457af9b2",
        "cursor": {
          "ref": "73249abb-3f31-48dc-ac80-f0009a708186",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0efcabe8-e951-45eb-a7a9-8fb65e143c61"
        },
        "item": {
          "id": "d0a2380d-4cb7-4577-ab1c-aea0457af9b2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c88299c9-6f2b-4519-a3de-614b1e51d639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c931cda-3883-4f55-a156-67be72d349ff",
        "cursor": {
          "ref": "5d32f470-ecf6-4e10-9e76-2b34149df799",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "15c682fc-212a-4ed4-82bc-179e65f45958"
        },
        "item": {
          "id": "1c931cda-3883-4f55-a156-67be72d349ff",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4c61902b-3379-49ed-9219-768a296aa12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ee089d-6269-4e67-b108-78ca88f7259a",
        "cursor": {
          "ref": "23f5afd9-7316-4697-9583-cd0cc2978e89",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "30bff670-6c37-4b6a-9d54-7dea56428867"
        },
        "item": {
          "id": "44ee089d-6269-4e67-b108-78ca88f7259a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "33b66dee-3d81-458d-b798-9c7f1ae3d120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0809b6f-cbc4-43ca-adfd-675adbefb3cc",
        "cursor": {
          "ref": "aeca9a8a-c99c-427f-a5de-d39262788757",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "00f241ce-4a83-4c95-af50-f04a4f337559"
        },
        "item": {
          "id": "c0809b6f-cbc4-43ca-adfd-675adbefb3cc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "13a0750f-b1cb-4607-bc14-a71f6a13a289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0b2f8f-c64b-4bcb-bf5f-69f4befde340",
        "cursor": {
          "ref": "c70ec1f0-ef8b-4856-a5cc-4b843ac58404",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "abf183bc-7837-43bc-8459-ed265847ba2e"
        },
        "item": {
          "id": "2a0b2f8f-c64b-4bcb-bf5f-69f4befde340",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "46aa90e2-ee58-4aba-a20e-f781de842d72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "303d44f6-d148-4a34-bfb2-883328a716c9",
        "cursor": {
          "ref": "470e88e5-2311-4ef6-8e7f-530231a35f9e",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "105b504f-6595-4ab0-bee9-478a5791e563"
        },
        "item": {
          "id": "303d44f6-d148-4a34-bfb2-883328a716c9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f12470f7-fa04-4c56-a0db-84c9e98dd389",
          "status": "Created",
          "code": 201,
          "responseTime": 2735,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea209827-fb7b-4293-8aca-ad7d5641c4f3",
        "cursor": {
          "ref": "576c8ee7-f626-422b-a8b3-645fc77e07c5",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a1d7333a-5c24-4d87-9183-f53671c870be"
        },
        "item": {
          "id": "ea209827-fb7b-4293-8aca-ad7d5641c4f3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "dddc6746-9507-412a-b971-2093013c7d57",
          "status": "Created",
          "code": 201,
          "responseTime": 2583,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15db4a7-c7bc-446c-859f-dfbc065b5ffe",
        "cursor": {
          "ref": "f67d4fc0-2a41-464d-a75e-70a72e87ef06",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4a453958-c5b1-4330-9dec-7705fa593426"
        },
        "item": {
          "id": "f15db4a7-c7bc-446c-859f-dfbc065b5ffe",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "68787362-7094-455d-bad9-a45de6416b30",
          "status": "Created",
          "code": 201,
          "responseTime": 2933,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4ff9fe-b140-4b0b-9155-63b4b3f06067",
        "cursor": {
          "ref": "817dc2c9-fa6a-4573-beca-ad6d289f88c4",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "de918561-d1ee-4594-95c6-2f4a16ab0451"
        },
        "item": {
          "id": "1b4ff9fe-b140-4b0b-9155-63b4b3f06067",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "050b33c4-3ea1-4d8a-bc43-48674a8cfec5",
          "status": "Created",
          "code": 201,
          "responseTime": 2603,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8ce492-a7b9-42e7-8faf-c5ef6a1f5f82",
        "cursor": {
          "ref": "aaeaa742-b08c-46b8-a65b-5c6e2d618029",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c7a5411a-bd58-4068-9ee4-ee808619761b"
        },
        "item": {
          "id": "8e8ce492-a7b9-42e7-8faf-c5ef6a1f5f82",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5edd58d8-d0c5-4061-bc8a-563f725f2e70",
          "status": "Created",
          "code": 201,
          "responseTime": 2517,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-17T00:40:28Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-17T00:40:28Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "3295bf58-9d12-4681-ad83-c8e3bbfc875a",
        "cursor": {
          "ref": "c5d01a33-2b86-4f11-b269-8b0cf0811a46",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2b328e9e-358e-4244-8ed4-893bbbeff6bd"
        },
        "item": {
          "id": "3295bf58-9d12-4681-ad83-c8e3bbfc875a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "eb5321cb-141b-4e76-8f13-7b4b3b583f4a",
          "status": "Created",
          "code": 201,
          "responseTime": 2648,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4df27ae-5d97-4beb-ac66-0b3af73adab5",
        "cursor": {
          "ref": "85f77763-c114-47a1-bf3d-06c9a3db3457",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4770499a-53ae-4bdf-bdb6-237c85b18cc2"
        },
        "item": {
          "id": "b4df27ae-5d97-4beb-ac66-0b3af73adab5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "10512a3d-ac2c-49c9-9b8b-37baee10c3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e65e58-cd56-4ba7-b187-ce725e26b127",
        "cursor": {
          "ref": "6000b170-62a0-4102-827b-c56114d520b7",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8f7cb3fe-4b34-4b70-a4eb-b5b16e3b4ed7"
        },
        "item": {
          "id": "47e65e58-cd56-4ba7-b187-ce725e26b127",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4c924219-10e1-4769-bdcc-4f7590913cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33a07df-cfec-4a33-bd01-edf34dd2a76c",
        "cursor": {
          "ref": "f6abeb65-0bcf-401f-beb9-6dcbceff7100",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0dad9300-8364-4cdb-89c5-a639de51dd47"
        },
        "item": {
          "id": "f33a07df-cfec-4a33-bd01-edf34dd2a76c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b71b6d5e-b5f7-45d7-b4d2-f21a5d1268ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4768868e-dad1-436f-aefa-22da91597257",
        "cursor": {
          "ref": "9559e142-911a-4d1e-8d5e-133b811fdc68",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "db6118cb-a4cb-4923-8de6-4c2f8751ed54"
        },
        "item": {
          "id": "4768868e-dad1-436f-aefa-22da91597257",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b0dfff1e-9eda-493c-b660-e4c8f9f5b653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8edc00-7e49-453d-9145-94f3335897b0",
        "cursor": {
          "ref": "1b5b1b31-4235-426b-be26-ec4e600dfa47",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bbe9816f-6e6f-4b07-a849-f8feeea9f1df"
        },
        "item": {
          "id": "ca8edc00-7e49-453d-9145-94f3335897b0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fdcde984-b308-4367-a378-48fe999c74c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cefc239-0bdc-4686-b089-fb712be87726",
        "cursor": {
          "ref": "87fb4248-3949-45fb-8b76-fc7a86d20890",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "97fb681f-c8f9-4012-b660-71dfc9b249b6"
        },
        "item": {
          "id": "0cefc239-0bdc-4686-b089-fb712be87726",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2693df3a-def3-4b6e-8dc5-a0af67b163e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7eb26b-bf13-4fd5-98a3-fdecff0a0d0e",
        "cursor": {
          "ref": "d2d2ba00-9abe-4b55-b18e-95801ba3d6ee",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2b7b7bac-caaf-4ddf-874e-cee2eb92dc57"
        },
        "item": {
          "id": "4e7eb26b-bf13-4fd5-98a3-fdecff0a0d0e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "766d2a2a-71d8-410f-9b55-bbceed180671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45ec018-3e55-49dc-9ee3-60c1271a6e2c",
        "cursor": {
          "ref": "8e4ba7f6-8060-4758-a85f-af3054d463a0",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a6632dcf-ff9c-4af6-b269-bb226e98cdbc"
        },
        "item": {
          "id": "f45ec018-3e55-49dc-9ee3-60c1271a6e2c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "59679d49-4547-419a-b0b4-48b50b36cd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1a0426-8797-4b5e-90fb-c04990a72c9b",
        "cursor": {
          "ref": "595d4555-afb4-48b6-8e3a-996baee5f11a",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0f76c913-c9bf-430a-9bea-b160f0305603"
        },
        "item": {
          "id": "9d1a0426-8797-4b5e-90fb-c04990a72c9b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "643c565c-7aed-4b06-bc79-b0f7b274e304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62754c17-b9bf-4871-b861-5e58848e4eff",
        "cursor": {
          "ref": "f2acbdc5-44a7-4f36-8d9e-aae96703b5bf",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "249c2dae-a215-4254-9385-eaa0edd13549"
        },
        "item": {
          "id": "62754c17-b9bf-4871-b861-5e58848e4eff",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "00ebd2f9-bb9b-4926-b467-215029f25d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8be4cb-96cb-4c28-9978-44797ba356f3",
        "cursor": {
          "ref": "2eff0d22-ec21-47b7-84fe-c6a43750870a",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b76661ca-b7dd-41ee-aa9c-cffa6b2e144b"
        },
        "item": {
          "id": "0a8be4cb-96cb-4c28-9978-44797ba356f3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6f11e3b5-4c02-498d-ae6e-72edd4aa75b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606bb72b-84ac-425e-9eec-bb9402a39344",
        "cursor": {
          "ref": "740443c9-b10d-4237-b731-68ec402fb02c",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "948428d4-5bbf-4e51-8f8d-cd0f47ec095e"
        },
        "item": {
          "id": "606bb72b-84ac-425e-9eec-bb9402a39344",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f86d9985-a119-49f0-bca4-bc2dbfd0b954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54b2437-9b88-4cf4-b91f-5880c59116e3",
        "cursor": {
          "ref": "2cd7d7e1-db65-4ea9-ad7f-0cb2f75514e4",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0a498c05-6a20-4d59-9f53-845d504b69dc"
        },
        "item": {
          "id": "d54b2437-9b88-4cf4-b91f-5880c59116e3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "23b602ae-5325-4fd5-951e-d379f2ff166c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4ae894-f8f9-45a5-945c-daae107b90e8",
        "cursor": {
          "ref": "b1b4550a-b440-491b-b8e6-3731d22014d7",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a2d93bdb-f1b8-4fc0-a5bb-9999325bcf35"
        },
        "item": {
          "id": "2d4ae894-f8f9-45a5-945c-daae107b90e8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "69280d7d-b521-4f5e-a5f3-30f854f5c32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdffa5d-9075-48ad-9f9e-73aebd8a5bc9",
        "cursor": {
          "ref": "56a39673-15ea-421a-bdf3-c613f1a72b09",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f621dc91-6b6e-433c-a113-b4e0bd46ba0e"
        },
        "item": {
          "id": "5cdffa5d-9075-48ad-9f9e-73aebd8a5bc9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "54bbe5ff-4a3c-456e-80c4-0e0db95bb2ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d112f151-d730-4dc0-ad08-599246a9f187",
        "cursor": {
          "ref": "542a6a75-bbfa-4dd2-91e6-8a686bc9fd46",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b39be26d-d20a-43b2-a14b-0bb3b7a5a824"
        },
        "item": {
          "id": "d112f151-d730-4dc0-ad08-599246a9f187",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5f265769-4f70-453b-86da-51519c7364e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35735306-90ec-4db0-b7f5-ccf3c1727135",
        "cursor": {
          "ref": "f336563e-ef98-42ff-9b0c-b6798feb0cd7",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "12c27ff9-ad0c-43a3-8835-435c40e4dc8d"
        },
        "item": {
          "id": "35735306-90ec-4db0-b7f5-ccf3c1727135",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6675109b-2988-418f-b39a-95413d02fd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1e2425-b2ed-465f-a8c1-331301dc9ea0",
        "cursor": {
          "ref": "efe126e3-157c-4600-a5c1-0f8dd7ac6912",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "41a76c37-6854-424c-906a-cae376dbcbdb"
        },
        "item": {
          "id": "ff1e2425-b2ed-465f-a8c1-331301dc9ea0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "89b89e3f-11f8-4340-90a4-ab63ceb0fddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233ca649-2470-47a9-8bdd-025cbfcce541",
        "cursor": {
          "ref": "a3d8a31d-0b0a-4ad3-92e1-a3a00f58a0c2",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3678992d-ebc5-4b05-a070-7308864c80f2"
        },
        "item": {
          "id": "233ca649-2470-47a9-8bdd-025cbfcce541",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "03c90e85-305e-4e99-86e0-84fe2b934f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42162723-f0c1-425a-ab00-45088a8b8e16",
        "cursor": {
          "ref": "f06c1ae4-1c94-493d-afeb-3f4164347b6e",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8720aa4d-d34b-4879-9252-11c03d816889"
        },
        "item": {
          "id": "42162723-f0c1-425a-ab00-45088a8b8e16",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d89c3e49-a004-4d29-8220-b97c3d66b6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9a95aa-e7f4-40d6-9b3d-a1068a554552",
        "cursor": {
          "ref": "c0e7fa54-2620-4fff-9ab8-00c60188a4a0",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d2a44d77-8601-4b54-8f83-eb116b73efe7"
        },
        "item": {
          "id": "3d9a95aa-e7f4-40d6-9b3d-a1068a554552",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2e81d65c-c258-4fa2-a40c-6a1021659d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77672123-0964-4f83-b513-18d460483d2b",
        "cursor": {
          "ref": "220e48b6-7bb8-46b6-a050-52b1ab9ecf8b",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "906c9eb0-0f16-47cd-923f-7a977ea8992e"
        },
        "item": {
          "id": "77672123-0964-4f83-b513-18d460483d2b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "85e9d3b1-be70-4a8d-95e6-a9d2e842dda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e44de7-b437-424c-8249-cb044e728cd5",
        "cursor": {
          "ref": "b8be257d-8722-4d9b-b7eb-0fcf7de5d74c",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "201e7591-52d1-458b-b321-3121da09056d"
        },
        "item": {
          "id": "c2e44de7-b437-424c-8249-cb044e728cd5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dbeb8716-1101-44e9-b948-88d0436f619a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795a8b52-2d6a-4de6-b6e8-61aad5e1a384",
        "cursor": {
          "ref": "138c10aa-cb23-42f0-af9d-366fe0c3cd9d",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6f0bf68f-40f7-47c1-90b8-ec99e1df2ec2"
        },
        "item": {
          "id": "795a8b52-2d6a-4de6-b6e8-61aad5e1a384",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1c24437c-21b4-45b1-a0b7-4088a56480c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dfc7c5-bc38-48ed-af2f-e16392451df0",
        "cursor": {
          "ref": "8bd4549d-cb5a-4a1f-8e33-571fe8ebdfe4",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "296b9149-0ef4-4ef1-b875-242f82545fbb"
        },
        "item": {
          "id": "f0dfc7c5-bc38-48ed-af2f-e16392451df0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "161247a3-a8a4-477e-be99-5522292cc990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e2f423-7c8c-434e-980d-95afa2310a90",
        "cursor": {
          "ref": "37657e13-241f-4af1-b99b-6b13be533742",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0062ea85-877b-4a18-a801-4e3feb256f56"
        },
        "item": {
          "id": "68e2f423-7c8c-434e-980d-95afa2310a90",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cda63d8e-601f-48e3-bbd1-bebbd48ce2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4434ac-15a1-4867-8385-9d55ec4ead98",
        "cursor": {
          "ref": "fdc83052-ac68-4e7b-949e-c6f8dd43c868",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9e2a8a41-7be2-492d-9eac-349f86efd2ce"
        },
        "item": {
          "id": "1f4434ac-15a1-4867-8385-9d55ec4ead98",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2b0b9efe-bf07-4782-a911-91ce4ba60f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14657aa3-be37-4b44-83d1-96b421194d5a",
        "cursor": {
          "ref": "0386a8e7-d840-4704-9c7d-5d7dee8f97a1",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "18040e9b-ea07-4fb4-bc68-56e7f3bb4f18"
        },
        "item": {
          "id": "14657aa3-be37-4b44-83d1-96b421194d5a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "262ac9db-d205-4258-ad27-2985276bc31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d671a1-d2bb-4ee4-badd-52873fa6d134",
        "cursor": {
          "ref": "4828bf41-dce4-4e85-85e9-c8d93fe59f3c",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2ffc393b-6d81-43e4-bc07-03cc3f50db4e"
        },
        "item": {
          "id": "19d671a1-d2bb-4ee4-badd-52873fa6d134",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a8f6a4fb-dbf5-4736-baa5-97d93bfa699f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c975168-39bc-46b1-a7d7-95336bbc03da",
        "cursor": {
          "ref": "60866dc3-e788-4ce3-b7a7-d082b827d5c0",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7c0d5f3a-4572-4382-a112-7453d6dbc177"
        },
        "item": {
          "id": "7c975168-39bc-46b1-a7d7-95336bbc03da",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e29ac330-eed4-4eb6-b43e-f9c6d880d2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24b1961-11c0-430e-bcc9-f986301558c6",
        "cursor": {
          "ref": "bef1ea91-644b-4fcf-acf7-f7950d77f768",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2b293a7c-e25d-4a65-8153-3a23df8b5fe6"
        },
        "item": {
          "id": "b24b1961-11c0-430e-bcc9-f986301558c6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b46d5f30-b40f-429d-8359-1b258713dd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1021b7-a404-47fb-a40e-2ccd11affaff",
        "cursor": {
          "ref": "c974d468-eed4-4b60-be33-7f62cbd09084",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f37fbebc-4178-4cb3-afb0-6e3f3985cd38"
        },
        "item": {
          "id": "2a1021b7-a404-47fb-a40e-2ccd11affaff",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "524a0ab7-5f70-4a0d-89c7-422874e91da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff065613-88b4-46eb-9b73-59ee379c5f3e",
        "cursor": {
          "ref": "ecc6a304-b662-484f-bf26-b968399162e6",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2a0540e1-d77f-49c6-9b5e-c02e462b3428"
        },
        "item": {
          "id": "ff065613-88b4-46eb-9b73-59ee379c5f3e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "12979bc9-5b0a-48c9-b8f2-e555813022bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d7766ce4-0fdb-4e2d-acd1-3e0dcf07fed7",
        "cursor": {
          "ref": "703e4698-e2f6-4720-9642-adca3f16ceca",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c1116c5f-481d-4f8f-959a-051c3b2e6451"
        },
        "item": {
          "id": "d7766ce4-0fdb-4e2d-acd1-3e0dcf07fed7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "13a4c6a8-ba46-4d07-9c81-ebf542ecad1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba23e8d0-b434-4430-a2a4-3caae4e400dd",
        "cursor": {
          "ref": "60382dbe-c21a-452d-97f7-ff25e7fff6d2",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "acc6f62b-ba1e-4298-8cc0-e9f013f9b460"
        },
        "item": {
          "id": "ba23e8d0-b434-4430-a2a4-3caae4e400dd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c3a0349b-c517-4eca-8999-b06a210c7a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aff2f51-b739-49eb-8794-ce36c9346038",
        "cursor": {
          "ref": "48dbb344-0580-4539-bcc6-f538abed3c51",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "853d2478-5515-4545-b2bd-f21e87e358e4"
        },
        "item": {
          "id": "0aff2f51-b739-49eb-8794-ce36c9346038",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8401398e-1134-4716-a2d1-7b6fa31c65a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837a7475-8445-469c-9b11-4dbb866c073c",
        "cursor": {
          "ref": "911f24ac-fa00-4d35-a98b-bc98400352d9",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2e0b2ae7-581b-4c9a-956f-b87d94b2c6bd"
        },
        "item": {
          "id": "837a7475-8445-469c-9b11-4dbb866c073c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b32a027a-e99c-4b27-bb3d-7e17827a8ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2077692b-8a22-4679-88f0-5e9dbaaed7aa",
        "cursor": {
          "ref": "7ac82043-05bf-479b-acba-127dfd6bfa1d",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "23fa66ce-6063-49f3-be6b-4fb29611e65a"
        },
        "item": {
          "id": "2077692b-8a22-4679-88f0-5e9dbaaed7aa",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3240470c-4e83-4c03-a3a9-5b0b57ee307d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9e5788-a745-428c-a3eb-252260b427b2",
        "cursor": {
          "ref": "34e461db-2c52-4d94-98c5-70b18341fea2",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "23c0a956-553a-483e-8bd2-7eb3bcb7acbb"
        },
        "item": {
          "id": "fc9e5788-a745-428c-a3eb-252260b427b2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "10ae1f49-e4c8-4e8d-ac20-d76dcff5909d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cbd1688-bd95-4f8f-a54a-d7c6cc97c449",
        "cursor": {
          "ref": "7bfe4ebc-888b-4caf-934c-826f81ab2a1b",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "25c84575-911b-4b8b-9476-a7cdeab54412"
        },
        "item": {
          "id": "4cbd1688-bd95-4f8f-a54a-d7c6cc97c449",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c963d8bb-195e-49e8-bde8-881fb29b8a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bba120-1bce-4c7b-999a-098130c464bf",
        "cursor": {
          "ref": "9395303c-15bc-4b09-a39c-2342b32ef91b",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "053f7f87-b48b-4a30-8515-134525152ce5"
        },
        "item": {
          "id": "72bba120-1bce-4c7b-999a-098130c464bf",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "25160bf1-02b8-4833-affb-227ed57cc90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580d61b3-5cf0-4533-86ab-b325abfea16f",
        "cursor": {
          "ref": "be684394-7a3f-4fe0-af77-df142f2d9db8",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2b2a7a9c-7cf4-4e7c-b0d1-4a0f6889a410"
        },
        "item": {
          "id": "580d61b3-5cf0-4533-86ab-b325abfea16f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d9709faa-857f-480a-9344-e74d06d616a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03530dd3-9672-4aab-86fb-2f69e0d06aa1",
        "cursor": {
          "ref": "cb2e1116-a473-4ede-9186-3d1fb48aa308",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e6b9bcff-2d85-417c-8d00-bc8de91b9a90"
        },
        "item": {
          "id": "03530dd3-9672-4aab-86fb-2f69e0d06aa1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9fd20736-97f0-42aa-85bb-2d8726c50ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25205c85-4aa6-4782-b93e-2f54f6f0cea1",
        "cursor": {
          "ref": "a53e8a82-4fd3-4c09-b8b1-7e9cb458b9a7",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "95c41b18-ca8a-4f9a-b796-bdc528c7f574"
        },
        "item": {
          "id": "25205c85-4aa6-4782-b93e-2f54f6f0cea1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "68e9fe0f-3277-4398-88e1-f51424e47883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0559d3-1635-486e-a886-021cf73302bd",
        "cursor": {
          "ref": "85c2cbf6-10c7-4626-8025-069d26f1bce8",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "30cdf032-4647-47ee-87e1-ea286e70d52a"
        },
        "item": {
          "id": "bc0559d3-1635-486e-a886-021cf73302bd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0d1c2da7-b24c-4ab5-8428-d411f59f8102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faee2d32-d21d-4c8b-8c30-10c0bde16d7c",
        "cursor": {
          "ref": "25addb79-293e-4a86-bbac-b49fdad99127",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cbeb5414-d009-48fb-bab4-ada12282a6f1"
        },
        "item": {
          "id": "faee2d32-d21d-4c8b-8c30-10c0bde16d7c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ade21ee7-7455-476c-8ad1-ca9f888b9f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff668ce8-af2d-405b-8c9d-cd6f363557e0",
        "cursor": {
          "ref": "68a1ab82-1bc5-43c4-bc36-83f118bdfea5",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c75df74f-39e1-4176-9981-61780c8138b0"
        },
        "item": {
          "id": "ff668ce8-af2d-405b-8c9d-cd6f363557e0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "05b844b5-5013-471c-a99c-008d42a72347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cce365-ac38-4b1f-8786-44011af72c7f",
        "cursor": {
          "ref": "8aeea749-0130-4ea2-b800-24b879045281",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "46762b32-7636-46ea-9fcd-a239184fff73"
        },
        "item": {
          "id": "96cce365-ac38-4b1f-8786-44011af72c7f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "379c100c-b0e9-4cd5-abda-8161175c9196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5352ff9b-ffc2-4907-856c-e9181709f2a0",
        "cursor": {
          "ref": "d292de2d-009e-4be1-b26b-aa2e7b757229",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e8d5cdbc-ffe2-4788-9b76-706655b8b47b"
        },
        "item": {
          "id": "5352ff9b-ffc2-4907-856c-e9181709f2a0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0846ffe2-773c-48eb-a88a-923c02cb897f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ccf49e-ba42-4243-b40f-7770de99be40",
        "cursor": {
          "ref": "70c18e8f-4279-4ce5-bd0a-061b65be0c53",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8c027c59-a805-42e7-a871-a9c1c5d3833a"
        },
        "item": {
          "id": "97ccf49e-ba42-4243-b40f-7770de99be40",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "edb34652-7148-4ee0-8a71-0e7fac7041ca",
          "status": "OK",
          "code": 200,
          "responseTime": 307,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "34abc2a1-e3c6-4cf2-883b-0ae785e3b1be",
        "cursor": {
          "ref": "bb3f195a-25b2-4ddf-9d9a-f24107680456",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e1f741ab-e12c-4605-9ee3-f17f90bd4a47"
        },
        "item": {
          "id": "34abc2a1-e3c6-4cf2-883b-0ae785e3b1be",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38316875-e23e-4be9-a912-afc98f505488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a717d2e0-b256-462e-809a-3dfacc6d5997",
        "cursor": {
          "ref": "aeaf7d4e-3502-4796-a9c1-fdea154075ec",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "05a06c84-7007-49d4-b0c1-27df080c02d1"
        },
        "item": {
          "id": "a717d2e0-b256-462e-809a-3dfacc6d5997",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "56b5c61c-4cc7-41b1-8f10-451979cad71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581ce351-2a49-4e65-b15d-588ca5d80ae5",
        "cursor": {
          "ref": "f52b17a4-8f66-45d1-a270-a3b8680c6c00",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1b6e65db-1d43-480e-ba2a-9d1472d617ed"
        },
        "item": {
          "id": "581ce351-2a49-4e65-b15d-588ca5d80ae5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8f3a4b54-a9b3-4b8a-9238-907fa5f01de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafd077a-b318-43eb-b3d7-9b39e6d56352",
        "cursor": {
          "ref": "511609e2-b968-494d-a353-72c8d5cb1647",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7010daa6-cb57-4c19-947b-cf84676698ca"
        },
        "item": {
          "id": "dafd077a-b318-43eb-b3d7-9b39e6d56352",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4f1e268f-58b3-4581-bd9d-ce84a26acf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fa520d-0bad-472d-9517-6b788a2a3030",
        "cursor": {
          "ref": "008b6c9f-f43b-441f-91c6-7ad4d9de4709",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d5096ebe-7d6c-436d-9772-1b08ee6767b8"
        },
        "item": {
          "id": "32fa520d-0bad-472d-9517-6b788a2a3030",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fcb74e3d-d9bd-4a6d-8106-eaf2bde09d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce7613f-f81b-4af1-834b-ca59b84c8a31",
        "cursor": {
          "ref": "50fd168b-21f7-403a-a113-93f601cdcbc4",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b7c31e7d-a22c-4ea9-ac0f-a1c62619d3fe"
        },
        "item": {
          "id": "6ce7613f-f81b-4af1-834b-ca59b84c8a31",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c6aa7f5c-fb46-4853-838a-4b21124f2e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d79636e-42ee-495a-94dc-472f44698005",
        "cursor": {
          "ref": "6318f3dd-f842-42a4-b00c-37899bb292a8",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0b865006-2107-463b-b663-99e2c9866db6"
        },
        "item": {
          "id": "2d79636e-42ee-495a-94dc-472f44698005",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1e6c48d7-e8db-4fb4-a051-5a27cb40529f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af5764f-2d80-4119-94fd-5b0dd6de568d",
        "cursor": {
          "ref": "44ae7188-9414-4fcc-a01c-f68b52a7ad81",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c5d07301-b83d-41e0-a90b-41cb23a6a2c8"
        },
        "item": {
          "id": "2af5764f-2d80-4119-94fd-5b0dd6de568d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6ea1cbd2-8888-4154-8593-0e5ae02af361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21579ffe-5c9f-4e1d-8893-cb4ff70cc0c9",
        "cursor": {
          "ref": "36e4a151-be30-4f00-af96-8fbbdfb49306",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a3a7af11-62a4-4f42-920e-cea5b6191374"
        },
        "item": {
          "id": "21579ffe-5c9f-4e1d-8893-cb4ff70cc0c9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d87cb013-7f6a-4efd-be9b-87c31ab32332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62946fd4-b8a7-4ad8-be3e-9c6900eb548a",
        "cursor": {
          "ref": "a3e4342d-ec02-4ce2-8702-1b0d9cf65521",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "47e3686b-45f4-48f7-a5dc-8a7c8c072a1e"
        },
        "item": {
          "id": "62946fd4-b8a7-4ad8-be3e-9c6900eb548a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d891b30b-a984-4b1d-a9cd-d14e40d2aadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303cf105-41cb-4711-b4ad-74b3d1541aae",
        "cursor": {
          "ref": "c2063daa-a0e2-4a89-bca2-93387c9729f2",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e28a53e7-398c-47dc-a4ff-e05e0d34e9fb"
        },
        "item": {
          "id": "303cf105-41cb-4711-b4ad-74b3d1541aae",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "54a4fe73-f642-404c-b6da-2522566f1a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e2d199-381f-4d7d-9f6e-e4d14eed507d",
        "cursor": {
          "ref": "b46fbabb-bccf-427d-b043-fdbfcf622556",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6c1992c1-a83f-42cd-8023-728438f596b5"
        },
        "item": {
          "id": "27e2d199-381f-4d7d-9f6e-e4d14eed507d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "52fd06eb-26ec-437e-9b4f-cc0d5750e42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666100cd-8265-4c28-8e19-28360126aab6",
        "cursor": {
          "ref": "c2500f0d-70d0-41f8-b7eb-dd7efe45ede3",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fba6aabd-9bcf-434b-850c-dea8a4afdaae"
        },
        "item": {
          "id": "666100cd-8265-4c28-8e19-28360126aab6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "315f4e43-f224-4a47-bfd6-e533c085ed03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc751332-28d9-47fd-bf81-7151fc2fc70e",
        "cursor": {
          "ref": "63e0035f-2b0c-4bbe-a5ac-f3a1cf2d0ff2",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e81187c1-b563-474c-b55c-c4dfee365899"
        },
        "item": {
          "id": "cc751332-28d9-47fd-bf81-7151fc2fc70e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e4837ec7-c463-4b83-86d2-9cf0c48e964e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9945db-f5d1-4f38-b2f3-e790abd743c1",
        "cursor": {
          "ref": "712b4ec8-029c-4a1b-b582-f3799a168f84",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "57f78787-16ab-48c3-b8ad-5b8eeda17ea3"
        },
        "item": {
          "id": "fa9945db-f5d1-4f38-b2f3-e790abd743c1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c695858d-0d37-4097-abb6-4285687e0c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491d2c57-278c-4a84-9fd3-b2b74f38a61a",
        "cursor": {
          "ref": "a90ecf7f-f6f2-42de-993a-15c5ec65ed7e",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "12739cd9-6812-4a7c-8794-4dcb68c7d6cc"
        },
        "item": {
          "id": "491d2c57-278c-4a84-9fd3-b2b74f38a61a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "40b3a94c-61af-4f0f-be0a-a468d9bb5ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f4495e-1279-4286-a361-40879b55918e",
        "cursor": {
          "ref": "a629b43b-ece1-4dc9-bb17-a2e9553057c8",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fe8879cd-7c9a-4d5c-861a-19f6f7ff2e28"
        },
        "item": {
          "id": "63f4495e-1279-4286-a361-40879b55918e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "93faeef5-9157-4854-92e7-40a4e29fe3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7727af95-1133-4552-86b0-934b1cf66d82",
        "cursor": {
          "ref": "8e40bb88-3ecd-4fa3-9af2-0e3b27aff0b1",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "929cc219-e229-42b9-9c12-39341cd6d40d"
        },
        "item": {
          "id": "7727af95-1133-4552-86b0-934b1cf66d82",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b063b75c-a207-4451-baba-e54f6b6e5873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ed18ec-6f70-427c-bde7-90d002617989",
        "cursor": {
          "ref": "56cd475a-8910-4818-b6da-e32862add8e4",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1b42dd7d-be9b-4a9e-9604-dc7092e1c168"
        },
        "item": {
          "id": "a9ed18ec-6f70-427c-bde7-90d002617989",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "811d3827-e4cc-4c98-b748-f5f308310f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f18422f-a4bb-4a44-b20a-45945586734b",
        "cursor": {
          "ref": "d72ec189-646f-46ed-bc94-4257efec9133",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "430c998d-eece-4b41-8e2a-facfc1a27c82"
        },
        "item": {
          "id": "1f18422f-a4bb-4a44-b20a-45945586734b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "71fe5890-fac4-4ab9-a666-802eb9e29029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38dcca30-069b-4fc3-9197-0b1e71c8106b",
        "cursor": {
          "ref": "bab3fab9-0225-4045-b119-a4a4209d1ae9",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8b0e6fc9-d085-4867-8a03-7dde2f5fe85c"
        },
        "item": {
          "id": "38dcca30-069b-4fc3-9197-0b1e71c8106b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "81dea586-682e-4bb7-99b0-7760e9a8a239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5efe2c-fc63-4da8-8c13-41c5aada75f4",
        "cursor": {
          "ref": "d1df638d-c77c-41e1-b255-75abfa19947c",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bb8abbd1-6f53-47bc-87d0-3c9071fa08e0"
        },
        "item": {
          "id": "1b5efe2c-fc63-4da8-8c13-41c5aada75f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a88685f4-2adf-4741-b9fb-084e213e1eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31bcf4a-138c-4423-9cb1-6d7cd61d6bf0",
        "cursor": {
          "ref": "7cd439c4-0083-4055-b334-a85ebd0d21d7",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1b585564-a6a0-4127-b2f1-0412a6621d11"
        },
        "item": {
          "id": "a31bcf4a-138c-4423-9cb1-6d7cd61d6bf0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "79a30073-3d12-4d75-ae6e-db0fe50931c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2d2b54-87c5-47bb-a9c9-e849282157dc",
        "cursor": {
          "ref": "4fc7bf8b-3efb-450a-a11b-29ecbe5878ef",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d3475aed-1ba4-4c97-80ba-d1a087e9663d"
        },
        "item": {
          "id": "ca2d2b54-87c5-47bb-a9c9-e849282157dc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "99926de3-f312-4a0b-84bd-22e2d6f1bc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbda564f-f436-49d3-9019-1a28229d2534",
        "cursor": {
          "ref": "d490d415-92dc-4a33-b913-46e36917949f",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a33b39b1-7af0-4c9c-bc30-d2e9df51b492"
        },
        "item": {
          "id": "dbda564f-f436-49d3-9019-1a28229d2534",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9254103d-5857-4174-86c8-32f979337855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddc895d-8687-49ad-b62e-98f6bd9d11b0",
        "cursor": {
          "ref": "8436c5dd-2053-4e35-8ad1-1d1ca08b1bf4",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "11defdaa-884d-4176-aedc-f01ffdbce052"
        },
        "item": {
          "id": "7ddc895d-8687-49ad-b62e-98f6bd9d11b0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "31376ab8-b0cd-43f2-9f97-61fe4dcbf1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4115a28-6b68-4e35-a68b-e7ac8aa35ae5",
        "cursor": {
          "ref": "0432010b-a234-49fe-b94f-8d2646b9c202",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6845f068-0fad-41e9-83d2-ab98b6a24647"
        },
        "item": {
          "id": "c4115a28-6b68-4e35-a68b-e7ac8aa35ae5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cf7f4f37-063e-4fd3-94ad-9368b9eb471f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ed222c-80f8-4e82-98db-d3fcb31dc37f",
        "cursor": {
          "ref": "199d9c92-3dd1-4531-91fb-76337aaed394",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ec171db8-7616-44c9-9bd2-92b87804651d"
        },
        "item": {
          "id": "a0ed222c-80f8-4e82-98db-d3fcb31dc37f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "df1590d7-99ca-4233-b226-443e66a6b9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689e8f08-6c35-406d-896c-7a64e7c58dbb",
        "cursor": {
          "ref": "46e958d7-775b-4438-9e8e-f3ce743f01b7",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "da50efa8-46ed-47a3-ae0c-5bd5aa305c19"
        },
        "item": {
          "id": "689e8f08-6c35-406d-896c-7a64e7c58dbb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "001448d4-75d3-483b-9bbb-b312f8c9dc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a1f6e4-5ac8-496f-9313-42780be79f8d",
        "cursor": {
          "ref": "c7873c2b-88e0-4a3e-8b46-9699276af72d",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8d653c59-82dd-4f3b-bc15-e5872753a7c3"
        },
        "item": {
          "id": "d6a1f6e4-5ac8-496f-9313-42780be79f8d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b30f3598-0dd3-4a07-a24f-b19ad0f4271c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a52c2e-6036-416f-9359-2f11582720e3",
        "cursor": {
          "ref": "d8c64dab-297f-425d-a987-07bec6d04dce",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4daa9bb2-1132-49dd-ba0d-55259ee73fd3"
        },
        "item": {
          "id": "f0a52c2e-6036-416f-9359-2f11582720e3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5f01dd7a-5208-4831-b71d-cf34942a1f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddca7599-9583-427a-a424-c0c520c7029e",
        "cursor": {
          "ref": "df0c5d53-28d4-404f-8617-e8982eec4b8d",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "14fd9df9-104a-4f1e-9dc6-ffe6c1cd9b6c"
        },
        "item": {
          "id": "ddca7599-9583-427a-a424-c0c520c7029e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "644ed22c-ff58-4b9a-a4f0-1791f48caebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8599343-cf0f-4959-b3ce-86b2d2565bc0",
        "cursor": {
          "ref": "e14ec943-580a-48a9-bdef-8f2bb289036c",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "acc21c27-52cc-4021-a304-ee2e55a57992"
        },
        "item": {
          "id": "d8599343-cf0f-4959-b3ce-86b2d2565bc0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "56fe8521-0403-426a-9afb-d3188968a8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f8651f-362e-4602-bd3f-834732abbbae",
        "cursor": {
          "ref": "1d382792-913e-4a8d-ae17-a0c21e4b6788",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0b2638a8-7c20-4f4b-836a-7d635eb9ff7d"
        },
        "item": {
          "id": "99f8651f-362e-4602-bd3f-834732abbbae",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f79bc11e-b14d-4c42-a7c8-ac2438c6394e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb081f0-d7e8-412f-9e54-ac29624eeab9",
        "cursor": {
          "ref": "e477ae14-6cde-4a54-b632-f89669b73dee",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5ba4cf2c-4381-4fa5-8b3d-39abf468e19c"
        },
        "item": {
          "id": "cbb081f0-d7e8-412f-9e54-ac29624eeab9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3c67ff6f-98dc-4a82-8245-4fa076157c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32f2384-f62d-4d9e-b84c-bb9b8c6576fe",
        "cursor": {
          "ref": "7b68c28e-14fd-4f68-9d9c-a54f875154ed",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "71a0c171-edfe-453d-8a6c-11124c424737"
        },
        "item": {
          "id": "a32f2384-f62d-4d9e-b84c-bb9b8c6576fe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b0c0f7ef-b9c0-4ccd-bda9-b155f4d19240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5824c398-78cf-4924-8448-2a7e53aedd4e",
        "cursor": {
          "ref": "a69c9a1e-5471-4054-b76e-1e9ff9b39afd",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9e5039b9-0fa8-4fd9-a74a-34c247e9df30"
        },
        "item": {
          "id": "5824c398-78cf-4924-8448-2a7e53aedd4e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0574eef4-a5a3-4512-9ad5-3eca87b6cf2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52d995f-9edb-479a-b46c-bf8d6ff3cfdb",
        "cursor": {
          "ref": "d33c7a80-d60d-4af5-8d90-11915930e9f4",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fc989154-8610-486f-b736-ee726aad573d"
        },
        "item": {
          "id": "f52d995f-9edb-479a-b46c-bf8d6ff3cfdb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9e19fcc8-d840-4e72-be94-141c34ce4232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8d3761-eb56-4f94-b3ef-fb4b4f2f4584",
        "cursor": {
          "ref": "0fe1b3d1-f3d7-4f19-a013-170ea9d3b28d",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f6920c4e-7484-4959-958a-f22ffa993fbd"
        },
        "item": {
          "id": "8e8d3761-eb56-4f94-b3ef-fb4b4f2f4584",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "95413f10-53e6-47c7-9623-c1bf15533326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad26bd9-631e-4cd8-a6df-f77ea13ecb10",
        "cursor": {
          "ref": "153cd6b7-2f7c-478b-87ee-e323c301ae57",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9a15454d-c58c-47a7-a5bf-619dd6b905ba"
        },
        "item": {
          "id": "0ad26bd9-631e-4cd8-a6df-f77ea13ecb10",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9893cf4b-aef7-4f93-9905-cb2e699b924d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29f9996-16c2-428a-b253-7b144a9fff6e",
        "cursor": {
          "ref": "bdc7047a-45bd-4bbe-a739-e8f741f8ad32",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "460e0690-23df-4395-aa88-4f5d93115134"
        },
        "item": {
          "id": "b29f9996-16c2-428a-b253-7b144a9fff6e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1d809297-527e-48a8-b34f-aef5e9eddf14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4020702f-6c3b-4f0b-aeb1-f6dc04ad063c",
        "cursor": {
          "ref": "1943b168-3d5b-4d87-aea7-876cd923b412",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "dc2d060e-b82c-449d-af58-33f77d9b406d"
        },
        "item": {
          "id": "4020702f-6c3b-4f0b-aeb1-f6dc04ad063c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "848fc811-6d78-49fa-a66f-0d002cb02971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb68b0a-0672-46bb-80d8-c9c22f76af70",
        "cursor": {
          "ref": "5e310b29-fb36-4fec-93cb-2f2c01be2b60",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b3027532-5f11-4280-970e-d5992c53b5de"
        },
        "item": {
          "id": "bdb68b0a-0672-46bb-80d8-c9c22f76af70",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "209bfcca-0747-495f-a950-12c6454c8d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961683a1-8c76-4927-bd3a-beba95a60c9a",
        "cursor": {
          "ref": "d20a3593-32ab-4097-8078-e1c7e2a47575",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d3ef6295-b5e9-4f85-a142-5eb895720af7"
        },
        "item": {
          "id": "961683a1-8c76-4927-bd3a-beba95a60c9a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d8362c0e-ea2e-4ae0-8a6e-7f4c7cfb6072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8300b0-d0a1-4e60-816d-37f18416b9c1",
        "cursor": {
          "ref": "70bac861-b967-4ba7-b4ef-93d4dbeaaa24",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "939f7b18-79f1-4f76-9bbe-88ac96f910ab"
        },
        "item": {
          "id": "fe8300b0-d0a1-4e60-816d-37f18416b9c1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "79728e57-e69f-47d2-addd-9b55aa2a5424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b74fbe2-1e34-40b0-8559-f1dff7c9545a",
        "cursor": {
          "ref": "e0ce0204-8ebe-4aa2-a489-e61a359c3566",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ad6fe85b-7df1-4bbd-83da-1331dd86b5ba"
        },
        "item": {
          "id": "5b74fbe2-1e34-40b0-8559-f1dff7c9545a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "58a4381c-db20-4f22-90e1-5f1250dbd564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9661bd07-411b-45c6-b4f8-ff92954abd6a",
        "cursor": {
          "ref": "3cab239d-e688-43e5-84ed-95b0f7e9d525",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7e410a32-7daa-4751-aa96-82876647f8bb"
        },
        "item": {
          "id": "9661bd07-411b-45c6-b4f8-ff92954abd6a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6223c0d7-df11-4966-a335-bc496e54efb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3933e0cb-1071-4f9c-be36-a4b7f936913d",
        "cursor": {
          "ref": "25752cf2-433e-4274-849e-51ef85f2b7cf",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e0b0679d-772e-40a8-af30-c5a69610deb7"
        },
        "item": {
          "id": "3933e0cb-1071-4f9c-be36-a4b7f936913d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b3f0bbb5-8a4f-4ea3-b392-961623dc7cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b9f5ad-b4c8-4f1a-8cf7-c63ecc41ab98",
        "cursor": {
          "ref": "6ab892da-3394-4b15-8861-b17277a2fbae",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7a87a4a7-4cb6-4348-938c-4614e34cc3c1"
        },
        "item": {
          "id": "90b9f5ad-b4c8-4f1a-8cf7-c63ecc41ab98",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7852460f-46ee-4eab-b166-57d9822334b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1051a5-0dce-4ef4-b8e0-43c3965a581b",
        "cursor": {
          "ref": "328fd6d4-b92c-4f1b-ac12-343ad3a243a6",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "508d6a56-827d-40d9-a89f-2319fe405123"
        },
        "item": {
          "id": "4c1051a5-0dce-4ef4-b8e0-43c3965a581b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6ffbbe76-70ba-45bc-85d6-0adeab3f8b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1289a22e-07f7-4663-a73e-c6371811aa2f",
        "cursor": {
          "ref": "a9213acb-6709-4640-baff-e82e7d124247",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "25d6f629-b92b-42ed-9af5-4e5f570ba1aa"
        },
        "item": {
          "id": "1289a22e-07f7-4663-a73e-c6371811aa2f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f67f78cf-d6ed-46db-8537-64d801c87552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61ec5ff-7052-463e-aaa3-ab161621f09a",
        "cursor": {
          "ref": "1dd43f38-8177-4604-be6c-ff956928fc0a",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "26b4980a-aecf-4c8a-a9f8-4cde495b856f"
        },
        "item": {
          "id": "e61ec5ff-7052-463e-aaa3-ab161621f09a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6eb59eb9-0a97-4f9e-9871-ab988dd9cd83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fcf664-236f-43fb-87fe-567fed8b4488",
        "cursor": {
          "ref": "34dc459f-2e5a-458f-99bd-8018f1159b23",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2bdc242a-fc9e-4b5a-925d-00f152867a88"
        },
        "item": {
          "id": "e5fcf664-236f-43fb-87fe-567fed8b4488",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ad385bcc-1f76-4537-8639-1e6ac9f6674a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce52d1d7-d398-4662-99fc-f10cd2cda457",
        "cursor": {
          "ref": "ce3e1fb9-12fe-4657-b594-53fa6864b48f",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0ee52da8-bd82-47fc-8a8e-070002d9cc2a"
        },
        "item": {
          "id": "ce52d1d7-d398-4662-99fc-f10cd2cda457",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e7690620-bfe9-4bec-a17c-8bfd6ba7fea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c795a63-34bd-43de-8959-0add38e633a0",
        "cursor": {
          "ref": "0330a8a2-f1e5-4eef-8a47-c883d8f0ace6",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f52b5363-7a58-43ec-9512-ca93633c2533"
        },
        "item": {
          "id": "2c795a63-34bd-43de-8959-0add38e633a0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "659f0239-3f04-4046-a47b-b929c09a8236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5984e746-1fcc-473d-b565-04bbc783289c",
        "cursor": {
          "ref": "b997beb8-a734-4320-a497-bb0cad241774",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "64eb4837-a973-454f-a6a6-8957ec1e58b3"
        },
        "item": {
          "id": "5984e746-1fcc-473d-b565-04bbc783289c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "700369b4-19de-42c4-bc35-330ac445584b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c4c819-22f9-4df7-bcde-e44b3e0f342c",
        "cursor": {
          "ref": "419af19a-6332-4ef8-81fe-dc9f2acb47a5",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c4f5e6aa-fae1-4332-9476-855beca6d6fc"
        },
        "item": {
          "id": "e8c4c819-22f9-4df7-bcde-e44b3e0f342c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "09b0480b-6b0d-4dce-80d6-1d40eff41880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6128787d-85b4-4d99-a574-ba51514c2f27",
        "cursor": {
          "ref": "b68b3082-ded7-414c-9ea9-ff32005fad75",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4c45351b-96f2-4418-b9b0-e3291f245f61"
        },
        "item": {
          "id": "6128787d-85b4-4d99-a574-ba51514c2f27",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0b5cd8c5-fb9e-4074-932a-7993e12ab4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cc5e5f-082b-4d3b-9981-87358cb7be21",
        "cursor": {
          "ref": "cbaf1ccc-a354-4e75-b713-c60872bcfc58",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "82e8e816-0765-43cb-8717-840050cb8a1b"
        },
        "item": {
          "id": "e6cc5e5f-082b-4d3b-9981-87358cb7be21",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "094432ad-ee73-4ad3-97f2-9b17a60c3683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23af3b01-3470-4132-aee6-c5023d31a659",
        "cursor": {
          "ref": "5b9e653b-7398-4d9c-b0b3-29cfaa9fb58a",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fdc5bec1-8162-44d7-804f-46a7f8a7758e"
        },
        "item": {
          "id": "23af3b01-3470-4132-aee6-c5023d31a659",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d0fed02b-9be3-4586-8310-1051ceee9c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bff6ad9-45c6-42bf-85b9-6f68bcbb78f5",
        "cursor": {
          "ref": "84d9f66b-8dbe-4c27-9bff-737ac8acaff7",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b3a9c3d4-545a-4334-bef1-3383495d6cd0"
        },
        "item": {
          "id": "3bff6ad9-45c6-42bf-85b9-6f68bcbb78f5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "183be827-c2bc-4959-bff7-f845509ee581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f451d967-b445-4978-9b4e-b8a9b819c9ae",
        "cursor": {
          "ref": "d2262be1-ad32-4d69-a86e-c8ae20f077fa",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "602355c4-f432-4718-8a8d-875713084661"
        },
        "item": {
          "id": "f451d967-b445-4978-9b4e-b8a9b819c9ae",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "08e78738-a1bb-4f3a-ae27-1a5aad3273dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5d34c1-f1ac-44e2-84b1-fbf8db86df31",
        "cursor": {
          "ref": "f88bea13-f5c3-46c2-928e-4f5cec3b4214",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ff6ef948-0e43-46b0-8a54-8af7d8ff48b7"
        },
        "item": {
          "id": "4d5d34c1-f1ac-44e2-84b1-fbf8db86df31",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "039d4f0d-e273-4775-a744-6db9cee67c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d04d67-f4cd-4d9e-b3ac-b070e3e80fff",
        "cursor": {
          "ref": "a417bb22-9779-494b-8fd3-262033364a5c",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7df479d0-aef4-45c7-809b-cd561221449e"
        },
        "item": {
          "id": "d3d04d67-f4cd-4d9e-b3ac-b070e3e80fff",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f6b533e1-849e-4005-aef8-a48864cb9dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce94f755-de8c-4881-9f36-146df99897b7",
        "cursor": {
          "ref": "b52aa21f-c806-4c66-92c7-77df024bd3c6",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3aa6c208-d4f5-4dda-ba63-b4445b0a9745"
        },
        "item": {
          "id": "ce94f755-de8c-4881-9f36-146df99897b7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4e09a896-fe5d-492d-8a5d-672c244c034e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9fe390-7b23-4a5c-adb9-669bf5e31124",
        "cursor": {
          "ref": "403a6196-e164-47cc-9635-a858218a2e57",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "714059f1-7d3b-4022-a9a3-edea290d050c"
        },
        "item": {
          "id": "6c9fe390-7b23-4a5c-adb9-669bf5e31124",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "18b6c003-6894-4cca-82a6-f92a6555071e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db007373-7326-48d4-9e24-10f055313bac",
        "cursor": {
          "ref": "cc6c17a6-2785-4882-bd4c-42d0f587dfd4",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4fd0e7ce-fa82-4f1a-a358-37233b0663bf"
        },
        "item": {
          "id": "db007373-7326-48d4-9e24-10f055313bac",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8531024c-015b-404a-a78b-aa79e1f781ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9b9930-ef57-467f-8ab3-ea2414636542",
        "cursor": {
          "ref": "7b777663-58f8-4483-b551-08e12937ab9d",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8997fc11-4005-47fc-ab14-6033788ec45d"
        },
        "item": {
          "id": "4e9b9930-ef57-467f-8ab3-ea2414636542",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "19b2759d-4770-445a-8706-011947c2d690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02096e66-65e6-45d8-8d37-c4238a017a3a",
        "cursor": {
          "ref": "e5b4e0cc-3d6d-4e7e-8e6a-740866f3087d",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "876b97d1-7b2d-4832-82cb-f9017aec28e5"
        },
        "item": {
          "id": "02096e66-65e6-45d8-8d37-c4238a017a3a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c46ec9c4-c3d1-4d74-a67f-d7a793bf064f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca16c4c-ba9c-4a3a-8171-dfa836a95415",
        "cursor": {
          "ref": "716dc882-9181-4f7c-9da0-0acf26b34b10",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d05b5189-3cba-4ae0-849e-366fbcb0b522"
        },
        "item": {
          "id": "4ca16c4c-ba9c-4a3a-8171-dfa836a95415",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e1423ea9-99a2-4149-b2f0-dfe8008588db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df36f81-81e2-48dc-adef-942d98a14956",
        "cursor": {
          "ref": "ff5c6e59-45b5-40a3-849f-1ff65666845a",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "eeb65d89-0a83-4422-9f7b-dbb503a598ca"
        },
        "item": {
          "id": "5df36f81-81e2-48dc-adef-942d98a14956",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "765f30fa-bb4e-45de-9ef6-9a4356e19ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346c5425-7219-4aea-a356-913e0af0a78c",
        "cursor": {
          "ref": "94d6e3ed-47de-4305-8f50-151c3c005cf4",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b97ac5b1-257e-454a-b8ae-78433318c61d"
        },
        "item": {
          "id": "346c5425-7219-4aea-a356-913e0af0a78c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5d338326-89b2-48f4-b528-5111d4e39e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a6adb7-5eeb-45ed-915b-7a93200c7ea4",
        "cursor": {
          "ref": "d4d088c8-f83d-4b4a-b74c-7f2f89566fac",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bd151d00-8433-45da-bee1-9d5bbda306aa"
        },
        "item": {
          "id": "73a6adb7-5eeb-45ed-915b-7a93200c7ea4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "59a5bf13-2484-4c32-a592-70c7269d5489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65416dcc-99d6-41bc-844e-2f798a60a486",
        "cursor": {
          "ref": "537ab9b5-c955-4ab8-98d0-40cb07d090d7",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3739e344-64ce-44e5-85ec-79bc0e418c2f"
        },
        "item": {
          "id": "65416dcc-99d6-41bc-844e-2f798a60a486",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fd2d3cc0-4ce4-4de3-9a6b-229512432e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ab1ce8-d16d-4605-b44a-45c168b7e1ab",
        "cursor": {
          "ref": "31ba9e12-c6bc-4673-b9b1-2d02245be5ce",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "143a8335-5bdf-4276-901f-7bcd9ed40b03"
        },
        "item": {
          "id": "f1ab1ce8-d16d-4605-b44a-45c168b7e1ab",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6b94d88a-31fc-4690-8dc8-1c4bc8d2045a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209d7d82-6df3-4683-ad99-4b1b54c69bc0",
        "cursor": {
          "ref": "7511e7c4-ec03-4777-967d-4d3f0d826a74",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ccc9c491-fbe2-4c9b-98d7-c9c709e45e17"
        },
        "item": {
          "id": "209d7d82-6df3-4683-ad99-4b1b54c69bc0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "24871107-6d1e-47b9-99f1-cded78fa678c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec7f512-c906-49f2-8114-5e9956b0b8af",
        "cursor": {
          "ref": "dd09e9b3-776d-4913-ad91-7f22bfb1c115",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5bc48834-44eb-4a84-9fc1-323814f63010"
        },
        "item": {
          "id": "6ec7f512-c906-49f2-8114-5e9956b0b8af",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fd654a78-ab17-477a-98de-1213ed7bcb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4e5e14-ea7c-42cd-9187-1c6722965a8a",
        "cursor": {
          "ref": "7fb78221-05fa-4038-ad1d-25a6b3737a55",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ea52236f-7c44-4fae-9d34-ab0a37c537e0"
        },
        "item": {
          "id": "fd4e5e14-ea7c-42cd-9187-1c6722965a8a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "03fdb81d-9c9a-4c4d-b9db-c0563f3b3861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6ade9a-ed93-4a17-b9c6-c6edd6ee7805",
        "cursor": {
          "ref": "76da0576-0fc3-4465-b72e-a63ed536130e",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e510db49-28a2-4765-bb33-6dd16d9a1a42"
        },
        "item": {
          "id": "bc6ade9a-ed93-4a17-b9c6-c6edd6ee7805",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cbd6e1f6-1a92-4577-b0c8-f59a8fd165f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21307f2e-563a-4d31-a9e5-6a2495ac117d",
        "cursor": {
          "ref": "6dbb3106-5138-4cdc-9e02-30d8e7f463d9",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bfa20040-9be7-4471-80f5-ed40602e1d4b"
        },
        "item": {
          "id": "21307f2e-563a-4d31-a9e5-6a2495ac117d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1992fe12-f5ed-4d33-87fd-316769efad3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e784098-ab46-4dca-bd8f-a22f7cd952cb",
        "cursor": {
          "ref": "dce9295b-75ea-4087-8d14-76f5b6aa1d54",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "de40db5b-efd6-41ce-80eb-58ba6bcfd4c0"
        },
        "item": {
          "id": "6e784098-ab46-4dca-bd8f-a22f7cd952cb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ea010a87-4a1f-4105-9fd4-120fb4a31f0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "044349e0-ad90-4821-951e-d96edb35d33b",
        "cursor": {
          "ref": "b35cfbb3-b9ad-4ead-ad8f-6f359adfdb04",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7a00c8e2-f249-42f8-b343-986bc3d0271d"
        },
        "item": {
          "id": "044349e0-ad90-4821-951e-d96edb35d33b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f4b06ccc-adf9-450a-8190-b04b387a3a77",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4543c7-c579-4db1-9afa-a4211df77a00",
        "cursor": {
          "ref": "bf562bd7-bb98-48a6-b8dc-4f18729ef5a8",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e8d302d8-cba5-478c-979a-8c6755370e1a"
        },
        "item": {
          "id": "de4543c7-c579-4db1-9afa-a4211df77a00",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0f136b81-b995-41ab-9f24-0b45bd0b2a21",
          "status": "OK",
          "code": 200,
          "responseTime": 2017,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac325ed-1cba-4e91-8512-90797aa06de6",
        "cursor": {
          "ref": "c5d4c5dd-57e5-42f5-abac-7ad1156a2d83",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "87e76ab0-dc9b-4a5e-8b22-59e1f87dc15d"
        },
        "item": {
          "id": "4ac325ed-1cba-4e91-8512-90797aa06de6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a55ecb69-6de8-48e4-8bc6-702857d39770",
          "status": "OK",
          "code": 200,
          "responseTime": 2749,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e2d059-f058-4671-863a-677cb4215f36",
        "cursor": {
          "ref": "52d86d0c-69ce-468e-975d-4e7d1c83653e",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "60eaf148-d8db-4fc5-a204-c2a89710b729"
        },
        "item": {
          "id": "e7e2d059-f058-4671-863a-677cb4215f36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "93b96d85-481d-4991-bf95-c81043b6a8cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e7e2d059-f058-4671-863a-677cb4215f36",
        "cursor": {
          "ref": "52d86d0c-69ce-468e-975d-4e7d1c83653e",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "60eaf148-d8db-4fc5-a204-c2a89710b729"
        },
        "item": {
          "id": "e7e2d059-f058-4671-863a-677cb4215f36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "93b96d85-481d-4991-bf95-c81043b6a8cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b7d88a10-c74e-400d-9272-67dd730909ad",
        "cursor": {
          "ref": "8bf46878-b473-4d5b-8326-c614a5aee976",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "981419f1-4105-4a17-84a8-f8844a035b66"
        },
        "item": {
          "id": "b7d88a10-c74e-400d-9272-67dd730909ad",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6b083123-0553-4aaf-94fb-61e61e543964",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "6ddf296e-a5e4-4c6c-a0e9-4437b5997b45",
        "cursor": {
          "ref": "ed7624a6-fcde-446a-be41-b402c62b8fb8",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "41fb8c92-4c96-4279-9807-6cc1b995d95c"
        },
        "item": {
          "id": "6ddf296e-a5e4-4c6c-a0e9-4437b5997b45",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b1aa6ea7-cf79-4270-9da6-199613951f60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}