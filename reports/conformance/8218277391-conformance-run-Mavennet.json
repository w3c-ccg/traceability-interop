{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "52fd9103-8b25-4722-830b-87214691441c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "52b2592f-a9e7-494e-b484-90aa3c1db38f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a78ecefd-9c52-467b-a98b-c63739f74727",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d4fb4d93-fc25-43a9-996c-d7b2936cefa8"
                }
              }
            ]
          },
          {
            "id": "a407d998-3efa-40aa-a159-2f0faf8ac2a1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90dee2b1-0aeb-4bef-9c4c-acb263db3e49",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "36aef08a-e1e9-4143-9513-7047bf8a322b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "13154404-428f-4cff-8e04-a36ad74febfd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9aeeae22-674a-458c-81c1-e9ed8b391893",
            "name": "Positive Testing",
            "item": [
              {
                "id": "489f7e35-57c0-40bc-9467-78e8ba7dcb59",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e916f85f-d1bd-4556-9bc8-cdecefc708bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18621cbb-9a80-415a-a747-37d38bc39852"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eceffe2c-3ffc-4988-9da8-91a8a2fc113f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eef0d818-6c3b-4d39-8fc7-a9d9a93764f1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "731b0c00-cd2d-4fc7-ac63-d2104a344e62",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "54c3bae0-c9eb-4951-ac05-e7b8d7938f05"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1bcdd0a8-a552-407d-a95d-a339f38b7346",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f25d1445-955e-401c-9291-15a96bc79be3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9dd150a7-a8b3-4ce6-8df4-c4544c408e63",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e2433b5-48a1-4157-8a4d-1fe0883fea3b"
            }
          }
        ]
      },
      {
        "id": "edcd1bb0-f8b2-497a-8e29-66dbc9f5347a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1efd90e8-d4f5-4b5b-b2d4-1d0f556c4f97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "28726334-aef0-4850-9266-54045db4efbb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3bff7c5-02bd-4c90-9e88-e6766859a107",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2229597-77ac-4186-bc06-fb2fdc27e7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "887526d6-c915-48be-9ff6-94d071d1be19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b3ff62-65ca-47f7-a68b-b914a77e0df9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf3f8bd-4736-4349-afa7-b4d336b41ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec8a0c0b-9aee-4e21-bef4-0bdd52104974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5eabf9d-9640-4f40-b65e-a728113c69f6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368b8e12-60f2-4975-b087-c96fec0fc654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57ad4bf3-a7f6-4abe-839d-28cd52eabc9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bd8302fa-73d6-4a31-870a-0859dab3ae0e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23b251cb-b4ba-425a-af1b-4469cb057498",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e60a9b-074f-4cb5-8a15-6194a0a51f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "775e3d32-e5ac-4947-b034-7c8513f89378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d9defb-be59-42a0-91db-3ddd6ec9d94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074f353d-a337-44ef-b1ab-522bc7d28d46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fa45b54e-84f3-483c-a52c-23afc7e32b7c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ebc96945-7a7a-43bb-a29a-0c72a1af4153",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b56c21d2-84b9-45dc-bdb1-16aecec4245c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e8f5de42-519e-4180-b359-4966047f213f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfab9e64-4d25-48dc-8642-ec2db3cd8526",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4c06f2ef-be1b-4937-886c-f9714c615411"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "211beffc-50c9-4b40-b85d-3b5a35a82567",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "493377d9-ae14-4a2d-96fb-d7f79c99a0a7"
            }
          }
        ]
      },
      {
        "id": "b9e68083-cd1d-4b3d-8a1a-8a3d84ef7a1e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "78040d10-663e-4ee6-8925-8be2d15ebfae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bedba5b4-93f4-4c71-8f10-d8bd2f454cea",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "47e927cf-53d9-4548-a946-41c1daccb516",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b045771f-9e1a-49e0-a14f-8a8f19e1a329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7df48a7-d93e-44c2-9676-7d639402fef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567cbc21-c2f2-4c56-bfba-05ca63e00459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d1f3964-41c6-4be9-987a-3f54db3786e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b63a9b-820c-40ff-859c-b1475607e99a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d392cb-fc0b-4c4e-b160-f48a11e6e57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb311f94-e853-427e-bb62-028eee8b251a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82487737-4256-4733-9c1b-4eed5177a690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cffef265-9c08-4b4f-a0a9-3847510ecaff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc1e3c8-1568-4e89-bd8d-f7e0ff33161a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aba70f5-cff9-45c0-adee-675dc9671e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a306d2-a8e9-48b1-a637-6676ac493335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cca57ef-c7c6-4ff9-b2ef-e16d5fa911da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dad2598-67d8-4129-9eb5-7e1a98372302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39304208-79cd-4315-b19a-61a7149e9711",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e668da-7285-4a0a-9520-2d1f8d9e0f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5496719f-eba4-4896-9e70-fefce8e34ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f153de-ebb7-4153-aa1f-b181bb636f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b055c286-ed50-4461-bfcb-3ab8c0d645be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe3c73e-03f8-4b91-9a17-67eee692f67b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af963d82-53a0-4104-8ffa-d6c4ed8a99d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf40797-e237-4a63-a0e6-f396d458c945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf86ce57-c482-4368-8434-9e643d9ece71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31105b9c-1b04-464e-9aea-8be1a9770f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b40ea05-40eb-4d54-8294-cbca91f219b1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb491ee5-931a-4327-af59-86b7c0e1cb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358cb4ab-726e-4796-8186-ba1ef6ff8dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47df2db0-cdd0-4bea-b390-0350f11e8e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53074f34-01b1-43fb-824c-566e07e92859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a1873e-0e09-429b-ad2d-8bc5cc1ca6c9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b09e97-293b-46c9-9978-ee16fe9c0567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1892a1-3549-4f39-b2ca-818ae663eeee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cf96f5-bd63-44ea-99e5-2bd55f3589ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b916e30-2ed6-4f04-9cd8-1e4745ceb931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb930ce-8648-4cbd-a2e7-f7f55338aa8c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa802be-4672-4f47-a96d-91508ab3f6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71bebec3-63e4-42e9-9bc7-e83cb5235829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb32100-6030-4691-897a-c1d28571b485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b18a9dcc-b2fd-4191-8912-6a2f02d34354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25afa2c-8d7c-4c7c-8426-fe862f416307",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2760c2-5e43-4392-b73d-a264271b7eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3341a9-8db6-451a-86bc-1ee5d0a5ade5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43696aad-fa2c-4e9e-8780-50692be961c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05bf6a19-3709-431e-a6f8-dcca27d9c49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e697f1-f936-4008-8405-d3818611fd65",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f314a27e-e884-4a4f-87bc-bb08aaa74035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2781315-8c42-46ec-af83-3efeed5264c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1e762e-837a-4d0d-8345-17cf6b509da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "360a1eca-8ed3-43ac-99d9-880ae62e3d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbee603-0b85-439d-bf56-01317edb52dd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7803c3b7-fdfd-4913-954e-4234dc187d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec2c4df-0e15-4845-b143-deaaee01f4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c077c47b-be83-467f-a847-3e06376858bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26df4e4e-fc63-4675-a58e-555e4099c297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8340ac6-96f1-4b78-a241-55df779d1ad3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2296d73-0424-43b8-a58e-b9786f37a337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c713640b-9152-4d2e-8ea6-559f3b46475d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9dedd7-a4bb-43d6-8633-03165a6fef13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7022046d-2379-4eab-81b4-49d03c533008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a5da92-b18e-487e-8e04-275c58c0a1f8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed2f587-c39c-45a8-a076-6fb476193e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37163a7-bada-4d64-a965-02237fb1f04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9751ae67-d9e2-4fd8-b858-c63865ab6932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a28a616-5e17-4d40-80b4-71944e052533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7b35fa-b5da-4a9f-96af-906858c8eec0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b57d59-6a4b-4f41-afb6-bfe28dfecf65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fcbdfa0-4466-4fc5-9f65-d651cce688a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8503a853-7808-4495-8711-5a5994dec66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8c7e619-b68a-46d3-af44-b24d91ee1a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3f1e8f-869c-46d8-85db-085e2b29b5bd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c6d0bb-4010-4674-82cd-cc3ad11e0bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf0698e-aca3-4284-9e94-2630a9813709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279ac739-0b40-4f37-8692-fe671f604c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22bc8d07-a293-40e3-91f7-602ed34053fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a33030-f924-4768-b451-b49a8d152f51",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d42a8c-d338-41c1-bc47-9808240eb119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1866d0c-d1da-4b7a-a855-cf982b9638c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175efe8a-dcf0-40d1-83ee-bce472128d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7619f48e-2dd8-4251-8348-c2e52ddc17f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df0c1d0-9a89-40c8-a067-945a4d4d3822",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a131bdae-6a9e-4dac-870b-f3aadb34d3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8287c41-3556-4ad5-817a-779d4b4af67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7120dd1d-3854-430b-bef5-32569722dd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "742a3f84-5b4a-4410-a86f-713812849be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a2be10-fa74-49e1-89fd-d5b0e47ea4e8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd3bfeb-341e-41a6-9a36-f5b38767e816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812e20f1-1ab7-4e93-b9b3-49ed4ef3a610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f5e94c-0adf-4846-b7c9-235ae23e2839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4a260e-cebf-44ce-9561-2a3a761e265d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271dc17a-d184-4a9f-924e-5bab30815c4d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1aa744-5eb4-483c-9f2f-cd12b675c606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad43567-657a-471c-ae14-08f4af1a2f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7694bcd-08b3-4312-8e19-c90bdb1b01cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8556283-4ea1-4cf9-80f2-63e6b311b8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b5d862-6e0d-4fca-ae4a-fd1eae7fb37c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd70cad8-2bf9-4f27-b8a7-4af4f2e32597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d435ea9-d6d3-435f-8cfb-a4d1dba3f2a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc35005-fa72-4e55-bc76-edcb5361df0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4558286-7a63-48bc-8039-526c37ec1ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b22546-6d71-4868-9cde-ee8a887e4c71",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53dd3ce-f564-4ae7-90d0-e8c3bf128064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d2feb0-1ee7-43a5-af93-0006552a3d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3c42c9-1787-4a1c-a4ba-ad8c33fdd9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "892a1e7c-6ecf-4528-8dd7-be706228c938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8611219b-612d-4620-bafd-1e8d42306018",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518c85bb-774d-4120-9cbf-f00444a6b1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe26bbb6-6283-41da-9f31-4d9264ea2eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9efefe-1cc4-43ba-84f7-23a51003c693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53306afe-35ba-4d48-8fae-b83ff1217372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba496ab1-a37b-4a86-af75-f1615a48909d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ef8dad-0ea9-4af3-a514-b25c5fa09cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbca7fa-3678-4fef-9bdd-b04f60bd7455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e43a24d-702a-4e87-8a1f-40949d1e0674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9075948-4103-4118-ae29-a141e6d29038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fea96d9-25ed-4ec3-a0e5-528164d96ae8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31edc158-4423-4ddc-bac5-a9683d289c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52fac75c-9889-4589-b6b1-da87c18ad95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c6aa2f-b560-46ee-9f85-ef3408926704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad1f76a-cd1f-48e5-92a6-7fe6aefb44f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4424a530-2f1c-4c21-b47d-6296f9b98c63",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac65992-14fe-4ac4-8599-dc80ab0b5825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d56eca-637c-44b9-b4ca-5c9a7cffc6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c327ef64-7caf-41d9-b44c-1b9eed2c73ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "42bc124c-b02e-44df-83e6-c779dcfb230e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6258ae4c-2205-440b-9830-3ce03841048b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba7338a-820b-483b-a90c-332c650a8a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce2485a-8681-4f88-acdb-6c18386fc471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0eb92f7-4ff9-43ac-8ffd-96aa1ef9ce5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a32f932-0455-4812-ba88-56cdc0744279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f82f0d3-2b91-4a8e-b5b3-ae5b5f029079",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cf4d94-9007-4ba9-8cf4-afac01c3693c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5920324f-aa28-455e-b3a4-aa7b737f7c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acedf21e-2812-47a1-b782-fd5adb27cba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30b506c6-b7b4-473f-85ff-c570563ad4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf04a45-7b19-49b0-b9d0-0ba2ab5926ee",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da93165-3e28-406e-935e-e769406bdd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7b1f9e-ba4d-4e02-9d6d-71af9415cd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8ac799-9101-43c6-8c0a-59e47f781160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc62bb47-77dc-40db-9ade-9efc8b803af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5642f49-08c3-4ebe-a1ca-ee04e1611192",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a6aae2-4a64-4ae4-b929-fa0d92471438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c31a50c-2c12-4e61-91d6-c0e554ccbf43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d778ab0-9811-4218-b7eb-a8c9525975e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7866e9fc-cb9f-4733-9fb7-d9c0cb149334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1657d45c-2c3e-4f6a-a949-def24b01b7f2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b164fe4-76c0-4667-8cf9-03b80d3a06fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89cc7ea-9b0c-4cdc-ae03-9fa3123ac8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfecd55-8fc5-466e-a29a-ab0176ed0ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "84733c16-910f-483b-b231-f787a66509b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68c8db3-c654-4737-8acd-6a41758f8cea",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceecf413-083f-40b7-bb53-d67d6b45d822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6684cb27-5e6f-4ea4-ae3c-d5b8e49f3e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b073a088-acf7-4848-8eac-5e78e1c1c576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b647de6-be00-4b9e-b8b6-a65a0c879c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440539bd-6278-43ec-bea5-822c27f863e0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e309d6-3d38-4233-9632-46cdecbfd42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdde7e59-f638-4daf-be1e-a34c0c886929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42ffb5c-5c5f-4b73-a52d-10f5fc2c4786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5d3e28-8051-4eb4-abc2-b8c7060f99eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ec52c2-43cf-4ab5-8364-69eaab690414",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84c4f85-9026-43a4-a5be-ff5dacb7c1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a0dd5f-60fc-451d-b6c1-3e37679b77cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffaa6ea-2755-46ad-9c6c-5eabfcf2e945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4c8897-1d5c-4c18-a9dd-bbb65bbaa2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbf2bd6-31f1-4018-95ff-fde254eae6b0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317fdcb5-189f-4c5f-8ff4-fce3521fedf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e688f6-cfb9-4d44-8573-40b13196fa94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fb2df4-6bc1-4239-b1c2-7393b6f7ac62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8dca24-c02a-4fd4-aabf-ae98d93226e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fd2f9a-f304-4f41-a2e3-35c7e348fa06",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d0df19-87be-42bc-8bdc-597c767c14f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34387038-184d-4374-8c76-bd0b37a580f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bd4367-f1c2-4ef1-9e27-6130c3a1597f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd19143-d3fd-4672-b64c-8fb769efa293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9670ef13-1d6d-4e15-8b23-359adab81fb8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589ffe80-9c05-498e-9726-a12240b739a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c77a3723-ba2d-470a-a62a-55df44e71cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9623821f-dc9a-46e9-a0f3-2fbdbfb66b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "05dd6098-5d77-4558-9f4a-5a2a73c142ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eeada80-5cdd-4516-95c3-ab47d5cde798",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5480669-4fe5-46b8-898b-cf9daf4a101a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf731ea-882b-429c-b7f0-1062a02b3a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff327c8-1762-4ef1-b224-b8bb871b1bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "726d57e1-6cc1-44dd-b8a5-594554de8120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87eafef9-fb85-4952-9c7a-eed1201166c9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96df162f-5684-4cf8-b4d0-e9cb50828bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0739661a-8b0b-47ef-9662-df387ebd47f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bec1513-475c-4d93-b9ce-227a65638ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a24768b0-bf28-4e77-8d20-35efbb97e163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f09af8-ff21-4d01-8faf-0a4e52f8567a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0f0573-dcef-496e-8f1c-680307f8287b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ee892d-4c51-470c-aaad-67af9c546d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be1a556-2a2b-4b1c-b291-26c2f534937c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "01e14055-4f17-4cbe-81dc-7d2ace625c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ba8978-11f9-49ab-8156-9bca7425954e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "009695d7-ecd2-4db7-9281-525afd069ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba3cb1c-d053-490f-85f0-4d2de0468049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34de746b-b48a-4c16-95b1-a217a167b4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "14496367-b7ce-4be9-a187-a51f615ec019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617cc7b5-c27a-4f33-9736-182a2a8df713",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb4196e-b7fe-4f25-910e-0f1a667c4bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3788e251-3d33-4fad-8628-eb71844f5db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976a446f-82af-4cd2-8d0b-a7909c2ae2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8ec30b-b062-44ce-a4d6-48ae61cba2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312913a9-67b0-402f-b9ee-58ea68e3a698",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83f6f3f-d1c8-4c9e-a1cb-8e26019ef8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd5977b-f519-4fd1-b4e6-7c696292270d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d45b18-8b0c-4fc3-bf27-ddec6792ff27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d45c55df-21d4-47fc-9435-3cffc0677fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c3feee-1ee1-4a35-9598-9d69cbc5cea6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e36f8a-304c-434b-ad47-e357d3c01020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bdc540b-e231-41f4-b77c-811a9843ea46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8f3ef8-c63c-4e9e-a12f-5aa566eada99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2515d184-daa4-4081-a0b0-3e3579382aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cefd11-036d-4c4d-9534-7628a17dee39",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3094d3fa-6956-46ac-8eae-ee3b0a14b150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979ee8a5-b821-45a6-b022-945e2a8fe63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c29e6c7-bbf7-40e7-92f4-79842a83bc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "78bf2b80-4c2d-4a00-bcab-da216b863cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e118d9f-4450-4e50-88ac-3d23afff040a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517eddb1-2457-471c-a34b-cf4ec5a5a4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad4a86a-a1c8-4575-9972-582ca4bbf1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27be2099-7a7d-4d84-b2bd-47a4c1839b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e499d0de-2d1b-4a89-b496-5fc31c481cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c5d1dd-52be-4f4c-99b4-73dcc35ca538",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7028e8ca-51f4-42b7-bf96-f4fd32ca59f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7054c7-3410-4055-8d07-2770da0ece80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2a5429-03be-44c6-931b-989921f8de32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a143799-0dc1-4a9d-af84-76975ce4a6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51aed9b5-e6e4-479d-96ba-14a58a4a840c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44aee0e-a5d5-41f0-bd53-1c2fdff97972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbadd44-9f57-4acf-ac2b-495d20957349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c988dbb-4680-46d6-9f77-e7332e25a58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb3ff7a-b2f1-47c2-a2c3-e35c9a8b18ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5979d91-f73c-4dd2-a652-727dc11ba9c1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60d7e9a-60b3-44b8-b5fa-632b6ae297b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c695093-1c7a-4907-8d56-138324a862c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f19f13-dc50-4321-902a-57719c289975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b14b460-571b-449f-998b-ac330153238f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22789fa8-d55a-4d76-83e5-7325a0425f23",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9800f3-6fd0-45a8-9507-298708907051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca842640-b8f4-4905-b77e-07640b9dd85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff0fbe7-a81d-41ef-9068-8ac351c60ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bae24094-eaf3-4a2d-82d1-fe741cc4d8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcad836-f234-4e41-984d-de80984141d6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7765c570-1bcc-4d64-9400-6f3585382dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb03d848-213a-4f88-b9be-28a75da8ba76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5024dc-f8a6-4412-ada2-242bc9a33ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "960ed83e-910b-44d0-baf3-3f141d220fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5354fb4-c937-4148-96e5-4ddf55117997",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ff843a-f68f-4c71-8eba-8ed0f0764a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0701e2-b7ea-4382-9b67-a5a18f83de89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c2854e-ddcf-4c2a-b329-35aa0e6ce6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b04f405b-d4d2-4102-a267-1beec5683507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb3eba5-a08f-4eb1-9cf2-9049abc93d54",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe9f912-2482-441d-a880-62fbe0e226cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785ee2b8-e87c-491a-b087-26f332a4b336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da95263b-8cd0-42f9-be7a-f5a154e0dbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc924ce1-eac2-4d0c-b604-6f8bb57a5b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a0e6b9-60ff-4c84-be1c-804de701eede",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a3dda5-73e0-437e-8091-e47e3915743c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afe260f-5e7d-4b68-95ba-67682efa473a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b95684-368c-47d3-a1d6-8c444306e2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1974b717-1a5d-4ff2-8898-56802b69167a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68441cf-a563-4ef1-aa52-98f028bf3ae1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7584776d-937c-40c4-8389-990d7fce3d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5573828-6928-43aa-b33f-24203364716d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029ffaf5-1a55-44e8-a386-917aa63b3734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0931bcaa-7a11-4de0-a908-e9102f67e1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df21607a-e380-48d1-8133-f344aec62aad",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61625ab9-98ef-49ca-afac-f665558de3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b48ef9-f8c9-4648-a072-d703281d82df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4581e1fc-0f47-480e-ac86-763f21ceb329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96456a32-1737-41f6-9006-077646403569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9788bb7-752f-48c8-b2c4-e7f7892af140",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d7f88b-e606-459c-971c-286ffefd0ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7fb8fd6-806a-4785-971e-6978b83ae592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dbeb87-88f1-4dc3-bbed-7fd949a6a0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ec006a11-3f54-47cf-9441-81d5a667683c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8852fc-8d7e-47d4-9b8c-3e73f0cb6903",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e735ca-f77b-4bd4-bf34-21274c19017a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6488a63-aa91-46ef-9aeb-6d3b7929f24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f9d9aa-188f-47e9-86a6-7d869ae5258d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "042b3930-f7fd-474b-8048-c69497d7c3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1e7df4-40bc-40ff-af26-8c809e2b53f6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e44c76c-3b6a-468e-8e25-774d4438816f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2f1dfd-beb5-47cc-8cc6-87fba5e91ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c215eab5-8b5d-424d-a4f7-95865997f9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca610047-d937-4fbc-9ea0-9bad8813de62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a116110f-96eb-4c45-bd78-5ff48770dcb0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c820e2-13a6-460a-be7b-600715c7d697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd112ca8-2c2e-409c-861a-094cb04ba5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298b05ef-2975-400a-8961-c0f4670afb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7081839-cefc-4199-9c74-20fe58dbbba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02970292-ffc3-4c2f-8291-38fe025febeb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6905afb6-8672-4191-93ba-1da39eb93478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3a6bda-5fd5-47af-9c70-3e0db793736f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326c9cf9-8637-434b-8aaa-e372cf7c052d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "43b4958a-c139-4806-b8fc-c5a2da10534f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d3fbde-0010-4621-8b0f-84197b39c489",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b534d6-149c-49f9-b166-33e7d9fba280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcdae36-ebcb-449a-8075-42d6a57591e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ab4f8d-772b-4a57-885c-548a851f17ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b355c39-810d-482e-8366-a7ac8448c2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7891663a-f1a6-4468-88ab-b5e12955fc76",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251d9fcd-66ae-4f8e-b955-4affd8445033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5e86ae-6c0b-428b-bcec-898531401df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8dd1b9-065f-4259-90de-1dc4f5b312d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "edf7aaff-30fa-4954-8d80-b0f2360edd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2057a5f-5038-4759-adb8-834c78e048bd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483fd3b0-d9be-4383-9178-21c15b357ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d3fc23-07c0-41fc-938a-de4547b4755c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b33f9e3-66e0-4c61-b69a-5bc327cc1de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b767e757-9c3f-4e00-a026-7e04b06b9fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0035ef-d7ca-4ae4-a547-28c5cda7a5a3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48324c76-987e-4cbf-a705-ab71f3206bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4872b231-75af-4099-ae74-bb20d821c071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2df505-2e17-4f14-b979-1fd698f9bdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7041db-1e1b-49df-afbc-ba2f509c36b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a9058d-27d5-4eee-a99f-96f9ef8e24cf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6ffd6d-cb0b-495f-80cb-d77613a16a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2221790-1b06-4f62-922a-58664fad0628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa125b7-415d-4dc3-8489-37f510d2552d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e68a72e7-b09d-4a19-9c42-be769d2574f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a90ba9-2135-4454-b90b-584ce0d95096",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca1d185-a276-4b9e-8f96-ab39076750fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed91241a-f12c-45ed-b734-8d96e59d989b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6106c9be-af3c-413e-a506-01f67150221a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88cd3ead-d932-4662-87a0-fa98c0054f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f88d5eb-c24f-4707-856a-944b03a0346d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e6e4ef-b74c-420e-8c54-51286c047518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec1d140-95d6-45eb-8097-1803f9169920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4342b3a-6d8c-4a14-b040-1736f7f00774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "617c81a1-e313-4cb0-b5a6-fb639f5b8fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cc9344-31d1-44d1-83b0-b06da07e4baf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f164c5-7851-4e23-a782-3d3c1fae06b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d266ce33-4d09-4f79-a738-a42ef2e4e57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3215461-5ab3-45f4-a80b-e49f4b88226d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a470a5-d9ad-4f12-8e57-aa74552789f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a34701f-114d-445d-92b0-1adbe1021623",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a755e36b-418d-49c1-8a38-2c415ca059db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a813a0b-36f5-4232-b673-8555aa37e878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb56c1e1-c3b5-400b-8a55-f965d74566c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6541a289-4d85-4a2a-9866-546d217c5c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62105dd-59cc-4330-92b0-2ae858e76b8b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb9518f-6be8-4ac0-a103-49eabcd1250f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601edfa7-5f8d-4e2f-9237-bd6fd0cf9033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1c7830-772f-4d99-b12c-6887c5e1b3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff4e5bd8-9a3c-4cea-a0df-c46415523bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd784ece-1a3d-42ad-8de5-20d288b2efc9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35f3631-144c-4a55-b44e-c0084ae70248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c47d9e-ce0c-4a30-a189-e484b30626a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b04b9c5-af05-4421-a752-ecfc774f49be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bc0f49-201a-4cbc-b3d4-fa54feea3060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66609118-7717-4237-b3cf-947266a0a94c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46fcdd4-8be5-4ccf-a8bd-f84a12112b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5ca71b-acf5-41b2-b64f-76c545867915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c12c56a-e990-4875-9949-d458edb396c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d8382c5-9225-41bb-8465-09efcc5deb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28b6dad-3d38-4565-ac3c-860528c9f026",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a131295-273f-4e6d-85ab-b1721642886a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ea3d6d-b013-4f10-85ff-f9bd1d9f40c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77721527-610d-4afc-b9ac-8c2d0dc21bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1df04c94-751f-4537-80dd-d791d6d0b236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98aa6f3c-ddc1-4456-aaef-791acf2030b4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abcc056-bb75-4357-901a-dbaa7b1c2dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac033e89-9520-45b2-9a26-b5be18743214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4db3c3-ea4d-4f54-8418-a40159e2ad1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b56d27f-dfeb-4daa-9b08-0bc4e3d4f27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd0ba85-ce6b-423b-87c1-c8835d30d8ca",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0b35e4-04be-492d-bd2b-ed2db747b139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc43c8f-6998-499c-ab71-55ce3b33675d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04d1e42-0a0e-4a36-be0e-7e0f05331415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf6f905-bab6-4364-85a8-464aa6a31486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd71fef-b182-41ed-894e-fc82ceb668c8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9292f73-8376-4cf3-a4f8-6fdaba803348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9dd1ea-8974-4a10-9d4e-b94292f21c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e10a0f5-8a2b-45e3-acce-1aeed29981e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93ccc462-565e-4379-a02c-5fcefe683e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e876770-ca09-46ab-b5d3-d1b88277c5a8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd05970b-d318-415a-806b-581aca9bad07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1973d9-7f39-4401-87dc-bf429d0dd8b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8909b55c-0651-4fb2-962b-48e84be4b465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79cf57ca-b24c-47a4-b2b3-5296fb348dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24b22d0-28d3-4173-b402-81ad5bb6e834",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5992d86d-c553-4fe0-a020-e9398521c765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9963bf9-645c-4423-ae19-343a39f26f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6767746f-9729-4a7a-8a69-7c9b5b7d18e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5162df-5ffe-4a11-a1ef-9e71f7107396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5df41ac-96c8-4458-88db-9af1ddb59f78",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c759a657-bb31-405d-b75f-c81a265929e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead114c3-35cb-4cd5-a38c-ee9bc26739fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9593c8-f200-4b5e-83a6-de2610f500fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30c4d8b9-9fd6-4f2d-87c2-3bccf29ce2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6cb450-a10a-478e-aff7-5a8fba42fcd2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4562a324-6b78-464b-9574-fddee2946646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c4b458-aae1-48fe-9835-5b1064942914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8a5df3-b173-4afd-b1e4-913f20d799f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "281f3402-4c53-4bdb-b646-230ada537e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f22675-2063-4669-bddd-61fb6a4833d8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d87601-9997-4793-9bfa-8557f97c4d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4855dea8-06b5-4f8d-980f-b6d943f0d2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4f9d11-412d-499d-aae9-ac719e96bc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3daef6d3-7b5e-4ec0-8818-e412b431efa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f66797-18cb-49ff-ada3-e326628ca09c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb739acf-b38b-4475-8f61-dd2e6b25d025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2533fec-3631-4d79-a5ca-26963ebfe526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53fb838-ae0c-4db5-87ad-56605891a46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f80707a-340b-4431-8ddd-4c2896a703b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c488b358-6ece-4ce2-8724-dbc87dedd3e8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922930c9-0abc-4cc4-a8f2-f135d6de53e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e1874a-25fc-4b42-af1e-4fd5c157ae53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725800a4-2cfc-4ef5-b7ad-785d67451927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb0d33f-bd2c-45dd-8745-29bbdd71af4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f1d0c7-bae4-4caa-bd27-907876f8fbf4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8197e1-2099-40fb-aa24-53d84d51ed98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0358eb82-1ed4-489b-b864-df22159d257e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68111a7-35a0-4fb9-8008-d68de1b7321e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7871b9-9333-4c34-a1a8-0caa08ece537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57833edf-c8a1-4c72-9a92-0ebd51a65493",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1544cfd4-0bf0-46c1-aa0e-4c87b5b5b528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe3da6e-0d4a-4472-b14a-069255457ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb22b059-e3fd-4be2-bf53-57f2f4e3c9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc3f728-0e41-4c94-b560-9343e64d5313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a85e399-fce4-4cf4-8643-7db4286a9f99",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025ff80c-8d94-45d1-aafb-3385894bd3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d663eceb-2295-4aa8-b4ad-13b191e6e523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a2e5f5-4473-4e2b-8abc-a07f16f26317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0041973a-b95d-46e8-8543-5f8f63901e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34485e49-1bcd-4bac-8331-60db50b991f6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17538bb5-cc7d-43fd-a059-2d7deaf29c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaefba7-7ddf-4967-a195-c3b1e62f3fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31779d4d-1039-4ef3-aa66-4c054007ada8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c2d3ad1-6ea5-4493-8b85-09e4639414f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034ab410-7b13-4553-93eb-71302e3777de",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295634df-3f5f-4945-bc64-7ced9e12963e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6baeba6-53ac-442a-9dd1-7727797a7088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93447e9-2b21-4f70-a917-fa6a8a0a19b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6340834-c046-40ca-9916-44110b17ac88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931bbf3a-2804-4da5-a08b-00e29ceb8c88",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eeb75b8-69cd-4762-9be7-34a9c39fa6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90331535-3b32-4c7f-b7a4-331bd59aaaf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d191fcfd-ad5b-4f5e-a178-85625b292f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "82f37d90-9afb-4ad0-bbd9-11daa8e58521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd501640-0042-4c2d-b9f4-a3e3f344a03c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c6fa40-d154-45c7-a8b3-834c37d64cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedeb14c-9b89-4afb-8855-191d83a4310f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ae5ecd-8dc5-4881-b0e6-9e424e04126d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6f071cb-dd67-4ff4-a498-b3e130a3fb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74871274-f95d-4eb3-9717-c7871af109a5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c131ba8-2a6e-4497-9ce5-53739de56cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb77c1e-6f83-4ecf-afc5-a6cacc0bbbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e583392-6c72-4c22-b2ac-dd3a5989e870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3f8afc-5397-4a58-abf0-dbabbf7e8a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cfa0a3-17ff-474d-8cb9-4fb2653eddf7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518342e3-b861-45f5-9e3d-6b8665acf4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c017d40d-a3cc-41af-8d5f-89ba598fbb91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f180b084-db6d-44b6-b075-9dd128c8d61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "60bd1f8b-a6df-4528-964e-247c180f52b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d2e346ba-8f0d-48c6-a2f0-9c3da8b7ebe8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de99ec17-78f0-4cd6-84a8-915483037714",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c46d19c-cdb4-42ab-a4c4-219027a54b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f1ef18c-f789-412e-9456-dfe1eab5648b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e31d9c-b8ca-4399-9e44-6d6906db725c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63753f5f-c7bb-4b24-93ab-b2ac9f3ce6bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a4f180e-7c3f-454a-8310-6ae57095dc63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec03b923-b0bd-4290-8513-5cb7217b6f6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b412e3b-dee1-4309-bcff-504a2d064d13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c19c667-9e14-4f1b-84cb-8c4bde6bd6ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f342943d-fcaf-40e0-bb1e-4797a309e03f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9ba85b8-b287-4ff3-ae82-2535e451f571"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "058e0503-0185-4380-8e21-13d93ca85532",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0bc0bcc4-8bcd-46da-82d0-7fd92fd937c7"
                }
              }
            ]
          },
          {
            "id": "5448b236-f994-4fb8-b24a-28198cb566bf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7d557533-2ac9-4d48-ba41-fdb65d69caa5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5cd1e6f6-6181-4fe0-a9f6-9dab3698d281",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413bb4ab-dc5a-47f8-9c21-aea1f0d01e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a00362ba-d1ac-4c83-b96f-b7fdb2c3de93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0923334-6566-4f6d-ad5d-bd970452c9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63ee96c-5972-4c83-82ff-e0f2eb33f542"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9df3f6d7-d5f6-42a8-bacb-12ddbd2006d0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e950609-2a07-4d39-82ea-10a380778d30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ada0b213-eb7d-4ab7-bd43-dc103ce8f1b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11521203-020c-4f92-ad2b-1475507841d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "31be3d00-70d1-488a-afd3-7aebc0a20c21"
                    }
                  }
                ]
              },
              {
                "id": "24123600-8d12-4a77-8019-77d4d35c2907",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "694f4565-a77b-4e7d-9390-9f8a10e5d785",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0edb2028-81d7-4fef-a6c4-ff11e9eeded7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c22d3c3-6f95-4495-88c3-d4d3d9610364",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "32315fb4-2ffe-4e16-8fa8-ca1b73ccfe19"
                    }
                  }
                ]
              },
              {
                "id": "fdeba241-79f2-4b1d-97e5-89c568843244",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c62d910-c82e-424d-a410-4f30f14cfadb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e475b5e-7ee0-4d23-bcaf-2fabc2e1e0e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41dc6365-3246-4716-a983-e6c5c01021d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "46ab5f05-88a2-432c-baa9-389b65d3879b"
                    }
                  }
                ]
              },
              {
                "id": "5602cdac-286e-467a-a993-6780736c34e9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07bac293-f8bd-488c-9471-9fc468ade969",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2092622e-c0fd-4762-b62c-e68cdd0d8d12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1454b687-46a8-4dc6-989f-b9c04478a5ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c1b422f2-cea6-458a-bd4d-d56dbaf77880"
                    }
                  }
                ]
              },
              {
                "id": "51991ff7-4db4-4689-b0e0-583f945c1b10",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1578bc4c-4b4a-443e-8b96-a76a447364a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e217348f-e13c-4d42-925e-116b3a10104f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adc0ab80-f905-493a-81b2-6e49a0440d9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0a4489db-cfc9-4056-a5f3-ff5251f5f5f0"
                    }
                  }
                ]
              },
              {
                "id": "9879c6fe-184d-4d6b-af8e-0ccbe2f77011",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fc93c98-1760-4f54-a05e-262b65d09249",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9bca6d5-c281-4a57-aa81-77b108a83111"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cab7b7b7-1dba-40c0-aa3a-ac5f8c7d8186",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3c03a5e1-0018-4d6c-bcf8-f4c969906831"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "82c73318-9a66-41f6-b95c-d2d9ee4d6596",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a51fca0e-5a76-4981-add5-ce1eabcff8b5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7e8ad42a-17bf-4c02-b5c1-f36316ba548f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66fdbc7c-9142-465f-8678-a58ed682ecd1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74f1826c-7f5d-4505-baf4-5e2fe0febf3b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "318d1daa-6530-433d-8451-844889ef7ebe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24064768-96fa-4c3e-9bb7-7aa393c45569",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8028c6a-a805-4688-bd4e-f2fe8c70de9f"
            }
          }
        ]
      },
      {
        "id": "d5960f59-c4d4-4b19-9eae-6e77a258103a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "76e60adf-4473-4a39-acf7-cab8b6fb981b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f914bfc-ef7a-40d0-84ed-8986ed99d567",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "204051e7-31b4-4a16-b733-5564fa73a747",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954b8d78-17ef-47b4-8e6d-0347803d7178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0feff577-d65a-4ada-af3c-4d2f7887d470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e40bb5-94d5-4c90-b35e-058a5c7e311f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc364885-a623-41b1-96fc-c651e7fc8809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ceddf5-a5c5-4a80-a853-cc0c6c0e41e8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923beb4c-c271-41a5-916f-75b73ad35217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b83abd-a821-439e-9964-07527c50cc11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b05ef14-4818-488b-a7ff-09c03faa6e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "15f26414-5941-43ea-a62e-ccd7ac7be9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d562cc23-1ba8-4df2-b8fa-1009f517fbce",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c6e529-333a-44ec-b0e0-f05c6433dd1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d41bf4-705a-4316-8cd1-e4f77df62298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3907d5-bcd0-4388-bf52-cd3951627627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "589028bc-b848-489b-9f85-433519b0217f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43f7c99-5b27-4a02-8c60-f4c6957c6a6d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1da050-db5e-461b-b17e-cf709a920e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ced4670-858c-4c67-a2c8-686af5aa60a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de55e0c2-4f85-41cb-822d-5d1b23f3dd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce20be5-4686-4ded-813a-98c6b0a2aab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5832f392-461e-4623-ae71-3583c04986f4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e162b0-e1ba-459a-901d-00e85682e30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64479560-a058-445b-9193-89e269cf1bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41140da-1734-4a1a-b7cf-4ff5f06e38e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "536666fe-7d2c-4ece-be16-470a82d55a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57891ac2-f37e-4fa6-b118-8a1e3d589940",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dc880f-e483-4524-be95-8fec9b8e0149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e078661-6622-43b1-93a5-6beafd974328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a28e721-06bb-4bcd-8971-93facf661052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc964f37-f5dd-4d58-93cc-7819e1522a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1796cc6-8d38-414f-a585-6cd5af6b4194",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25bce4d-807c-4eeb-8396-0dfad64bccf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18ae355-61cb-48f8-b187-0ff1f9ef398a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e21c509-bcdb-4beb-997c-92db97ea02d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c754cc-8652-4bb6-9db7-d9b069d57577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e025c955-93f3-4952-88fc-e4ebe5f94eff",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb25ea0f-40e1-4ab4-b054-c4e97c281c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b4d1d9-3639-4b1a-bae3-e3d02e6b24cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1637a855-fd4f-4c01-8fac-deef8de56374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "680ef33f-fbdc-449a-96a9-18a1373fa4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d65808f-cfc3-4096-8a25-53b723644bea",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffa6641-4d79-4fcb-95bb-21433bafc426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a683de43-5b98-4673-ae64-4b07d7c7ac2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b20a09-2f6b-4258-b5e3-d203f2767b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3d2cdb-bce4-4e55-a734-2b931002f7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285d203a-b39a-4879-a182-536bea7694a5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb339ff-c245-4a23-b329-283db40e1974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2be7d31-7cb0-4ac3-930c-5a903efee0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7d4188-afbe-4b1a-9a72-6d014b798aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24c7a0cc-00aa-418e-be04-35ded101d42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c2b1ae-69c6-4229-a7bd-a12bac21850b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb5cb09-8e5e-420f-868d-f1eaeed23403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e25e7ae-b10a-4cb0-ae51-c58bb62fe31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7215b8a-53e5-40b4-b6fc-2217d667ac35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "312f85ad-33f7-4587-971d-37cad79b4c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db6b490-f7ea-4e14-bb3e-eeda770d36b1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1857ff99-f5ed-47f2-b219-10367ea49dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4429704-1d5d-4019-b695-2ded4fe1c214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ed8456-0dd9-41f4-9bb8-e7b353c5a122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be66372f-1613-409a-a28a-65e8ac09d268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e8449e-5f7a-4bac-891f-fa9d69fcd171",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383a1bdb-219d-45f3-81da-a8a8e2672c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c77d86-bf53-4de0-ad65-be4f8f230cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e5ad89-9dea-4d64-bbc3-9c3a7f7bf31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10860d19-37d5-4de5-9654-1c4ad584bb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e7ff8e-0276-4a9d-8067-b66a96c79be2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c00379-29de-4b8a-94a1-9dae7d458cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42d365b-c39f-47c8-8f51-3aa3fb3a8c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16389fa1-772a-4db0-a27b-0dd2c7442282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2079d42f-a598-439e-8474-464a1b9a88f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200c9fc4-0fa7-4432-ad4a-30239ebbeb0a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c748fa9a-5fd7-48c8-a4ff-f54266b18fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4476f49e-bb16-4c7d-8687-b648a545e580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36623b72-6b90-4e0d-bf7a-4b13497cd2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b512f83e-e7d8-4d6e-8d5d-31b332261f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613ff15c-30a6-44d3-be34-3b34734f5581",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd37130-3993-4748-874e-efa29c146143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf2598a-7f87-4346-8dab-82b6d7e7b415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523980b0-9355-4f43-a728-46b4ec938302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bdd87b5-27ff-4705-8888-09fb99a0f9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620a79c1-d676-4919-8cbd-1717b187d3c1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229179af-3f05-4941-9df1-4a020dfe139a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d88967b-7ecd-4f15-9bb0-16fa47981932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdae718-6fa9-4c7d-bfda-02fd9bbf2037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5020743-26fe-4aba-b2a1-0d42e7f84bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e661b3-b82f-4c55-be1c-643437af2f0b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7dcd9c-813b-44e8-ae1b-2905d6600b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6b86cc-0d65-49b7-9072-d0a5cb1af0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2437d5-56d7-4c81-bffc-ca09ae5fc927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4721c19e-2a4b-43e7-8c54-4c14035ead98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097129c1-b6ef-4483-8e22-35925c657b1e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561bc7c4-9f85-4f05-a5c3-a043992e65f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8886aa-9b8a-4a12-9eaa-eeea1f45469c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d495805-cf7e-4c44-827d-de6240549da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b44c623d-19b2-4564-ba9c-715067bf572e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcea3a9-2dc4-4cd2-8628-02363a0306ac",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e1c11b-d198-4113-9a2c-12a4e63b3a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99650c8f-c258-4989-bfff-9e14abaf70f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72b0811-7980-466c-9525-771c5612431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3dc363-f76a-4cea-b050-73ad6b300c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9c526c-8bda-46fe-9c59-145312815d2d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0a517a-3e4d-4ffc-98a4-39eefba8dfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62cee173-85a8-4d01-93de-edc0211612b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5509d61-44d2-4364-af14-f26522220f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7919e79f-a821-443f-9aa1-fd7ee5935648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7832a6-3c63-40ba-b884-4f11093b898a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb93ebc0-ef94-4e4d-b048-4fa11b315720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b27053-13ab-4f50-9803-6a35e47e13e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61701a7-6e3c-4cd6-9268-917c21d7da8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3394183b-50d3-48a8-803b-fdab399a803e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df822801-5e08-4a37-a283-edd87abb7bb2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9329ba-b772-4eb0-aeb9-54cdb0dae84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2633ac8f-db0c-4d7f-ba6e-37e9bfc30827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff86b6a4-34c3-43ea-8ea2-3c4e7ba88506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f47196e-2c4c-4541-b036-f9fdc85552df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80f6b97-99ba-403b-8404-64bb0ac3c3f2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f339884f-514e-495f-a495-7641ab45f792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ecdaf1b-f5b8-4586-9760-3c3ba2cb54ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a23ea68-0b59-4045-8e55-daabb95a198c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e537cb6-e75c-4527-9df9-a36fbaf9e482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386aedd5-c8b3-45cb-857f-458f1c4876ee",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7278a6eb-a33b-4057-8497-e0f3a432cdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f605331-d2db-4641-92e2-6ee5e01d571a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc165e4-ec7e-469a-83b9-bee78fb57658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d734c0b0-b567-484c-8561-ce78d28fcadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad4c477-939b-460c-a2c0-ed85e03fc8c3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d23573-250f-4ce0-8556-110209582938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9b82eb-9474-40d5-b92f-d59c5d73b784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76efcf56-89ec-4d13-9ff3-a6713773335f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d574a2c-ea38-4144-932d-64bcf6aa4baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6389b0a5-7fc6-4bea-b652-095db024dda8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f049b46-f798-4ece-96a6-614ad21e6893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c191c7c-8915-4586-ad3a-77751381ddf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8a46c8-e127-4272-89e3-e644783fddf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a35e62-6c91-4cc2-97c3-c7ef928dc6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3971a69-1770-4595-97e0-ea743877a8de",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e414674d-69bd-4ebd-afa4-3c205a52f431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b1ab3d-5144-41d3-ab67-816e5e5979ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5b93d7-ba34-4fdf-a63c-273cae6fc782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd28f1aa-3fbd-4e00-9a03-e0b110957af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f4dde7-924b-4021-bc9f-941374a88ee9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5af6346-63ff-471d-b689-46ce91435b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6546de73-b460-4b04-9f1c-47600c9958be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7c3492-d2ac-4098-9885-98cf66456745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01800781-0f80-41f8-834d-6684cec2c744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b47bf5-e7a1-4c56-8794-dfe5999c870f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0db1af-0d94-4fec-8d5b-39a439cf22d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3640b9a-3c37-42b3-a1a2-95ff00f3548b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c160b7-6571-4d3e-96bd-bf601210db76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd38969-8851-4e9c-99d7-304dc71fee38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f415a9-817a-47d2-abc6-db238f03bcda",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5085a0be-654a-4e3b-a1b4-10c4ff1d15e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e034dfe6-dcd8-47ff-b00f-c4dac36b09a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38613c05-996c-46ca-822c-f86eb782fd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b82111c5-4891-4c9c-80fb-40ba73d1d28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4087768-9e29-4a4e-8a6e-e8518be09d65",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d6516f-3858-434e-8b0e-c43feeaba441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c995d3ff-368d-412e-bf4a-a134ae3319a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe960a67-2f0d-47da-b3f9-db473492f117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3191a493-b89b-4d86-b30e-565ffaa2a3b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "04779e4d-fc8d-4feb-ba36-f201bfe4baf3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9e21be8-211f-41e9-a157-ca3a7edcab4e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f7a82d-f5b3-4870-87f4-ddea364dcddb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9de581-b283-4c66-89ba-63e5852c6905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f58b4c-3634-4c31-8a65-fc66741e272a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3817426-1f63-442f-9b0d-65421fdf0f83"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "765af0a5-1b61-4577-acc7-a3b1446401b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee1d14ef-f994-438b-9384-3a02e40a9b17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2092dba8-c814-45b4-9d86-a5663124f7fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "026e15e2-6ea6-4808-8fcd-33216c1460bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40ff2552-c955-4b86-9521-2d4901dbb633",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "225e22e0-839a-41d6-bc35-a143dc0c3ea2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3475e71-c72d-49fc-a125-854c13ae3fa2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98b842df-a2f9-4aba-8329-9562a970e294"
            }
          }
        ]
      },
      {
        "id": "cef0b1aa-8d49-446b-aedc-568951425c83",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "da08f09e-5a4d-4cea-899a-20dad7a0b169",
            "name": "Negative Testing",
            "item": [
              {
                "id": "646596e4-e5f9-4b6e-b488-3783ebc930b3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bebfbd67-fd8b-4d98-863c-4cfd4085dd10",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91632fc-a06b-407d-a716-70dfe4dede71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a88433-7d38-4eca-b236-53c520fe675c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff78a392-ecb9-4747-a628-7c20f91deb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ccf7b1-6820-495e-80f0-6b825fe205f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc52c77-fafe-40d2-99d8-38fdd1c935b4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c20a156-51c1-4559-8185-f737a4fbe459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0adc471-f768-42fd-9444-98c3086aa622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37ed029-deb7-4754-a509-f4cdc30876dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6307e430-d83d-4551-91c3-0a0263d96ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f089722-c379-4968-ade0-ce22242cdbf4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47f0257-03df-4c73-99a8-58b9760e717c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c76a31-553f-46c0-8dfc-8a07d61c1ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a652a6d-ba0b-4850-a0fc-e5b9c8aed981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4843afd-4b03-4bde-bb6d-da822acfb05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75aa474-d8da-493d-9e2e-f163be95994e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f84f0b-0d54-48b6-a37e-783f9e0d62c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af105f91-24e0-49fc-985e-8a8d814ccf76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c50819-76fe-4c02-bb48-70c6ede0002d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed91ca9-87b1-462f-a6d7-babd565c4de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9deff5-ebaf-41a4-b7e3-575f9f245254",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24d4337-0f51-4f77-aab9-557a43491923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc5c586-efb5-4537-85e5-7fe60175a43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cd037d-042d-48cc-8e79-52a075e26774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15912f1b-7cc0-446e-ba18-56ee4e86726d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a6087f-63fc-4790-83c3-9def85313ad2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2082ae-9529-4c18-a82a-5952e24b6519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab4315d-ae1c-487d-840e-1847b799e056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c465b10-35ef-4806-9c37-2139f7dbb6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf613cd-da4c-40fa-bff2-83823032b015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0975295f-6ecc-4a09-88bf-3628944e7598",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcc8c4e-5c48-4765-ba87-f77f81e08bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b29a702-92ae-4288-8159-be8d49ddb84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b59047-7f3a-44ad-8aa2-9b98ef8783ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "51180f35-8f00-4972-9773-6395e7def48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9745534-f0e2-41e2-acae-881f018146e8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769c330c-5127-4594-9c8e-585968f9a9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168ba684-f9ed-46d0-966c-37d3e1211f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da43b9f3-7c97-4b6e-9b6f-56e01da4e27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2792332a-6571-4434-a8a3-2e40d0bc7f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cefa2f-d5f8-4a80-abbd-5c154c33def2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ee109e-a878-421a-aeba-fd00da2c0d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439fb01b-949f-43b7-9cba-bb3ce38666f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04f8a4b-1d58-49f4-95b3-cf00a66c1eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6f74c0-928f-463d-9475-1448fcb92eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222fc405-61a5-4fc8-a557-8f327bbaacbf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534af92f-6ea1-4e13-a85f-827180c1568d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5432ede9-6732-4e01-802c-630acd684d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21b0e36-d616-49fd-affe-190b4152b010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "497494b8-7fa6-4fc4-97d2-fa4b161c3634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65812208-502b-4897-8929-affcee561f0f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3b6283-addf-4b15-9927-b5c7eab6a615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b66e842-6a5d-4427-b29d-ef8d1befa810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5feeed76-85f7-4aae-b944-0cd3f3d486f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b10c853e-6553-4e1e-9ad8-c7e0af65136e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69adae59-5b93-4f58-86d6-97e136bce64b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47703920-66d0-4047-bd88-016c2acacb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000fcabc-5ceb-4c46-88f5-e7ae3592308b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39acf115-b234-4d35-a07a-874df2fb3f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43abb112-409b-47e7-a5b7-5f100f4595ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd1036c-b866-4124-88d1-e34e21d26db6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0615a1-3622-488d-9b58-7dcabb4dc909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2981e40-b46d-40e7-bd94-c177e753d7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a2d5d5-26ff-4052-9a3f-0a8ac21a0ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "201bbf15-66cf-4316-9fe8-1b7438f13c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6e1002-1c91-47bd-9561-9c9c5163ba70",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab257b6-e7c4-460e-8267-ffc59f1f21fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398cee92-f239-40e1-a91b-a65ae2317f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c85174-1d00-41de-b81a-96948494b2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c29e0316-23de-4b43-b1cf-3ef778f3c200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5f360d-a908-412c-a564-915ed760687a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcba8ac8-eaee-40c5-894f-7d9811afe232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552b9072-7c23-4f9a-96c8-aae28692cc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47759fdd-3a86-4118-9fdd-270d8ad8185b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "95ba3a52-d35b-4b35-acac-513782bc394d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1636b6d-e4b1-40ed-9eb1-2b1b3090f5d4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19da10cc-f0b0-4c97-82ac-1162cdd591fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ccd66f-9710-4556-839c-491d8c9d258f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6bfc4b-62bd-4b1c-81f9-47158c2f5d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea22d7f-ba24-4a38-bf1e-c4f74d520d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d512e8-5e05-4b4c-91ae-77b72432231d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60eac241-3753-4911-b864-8bd4fe1bacbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef876e7-f160-4366-88e7-49c6a49aa9bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306000a9-4b98-4a7a-8aad-e1321624db3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0d7df8-4151-4f72-85bd-43b886d5ecdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00419eec-86b5-405c-bb64-ebd19d750ab5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb8a0d1-28a6-4bd6-a2c7-0c83471ab760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0269d043-e17a-456a-ae6c-28341146b4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5911ffda-a75d-4873-a0e5-eac59c5c80b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3dc7c5f-9105-4db4-b509-4cdd5ffdda51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e374f8-1bf2-439a-8996-ad13804c78d4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1195b03-d0be-421e-9c64-cf6b1ab9d650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc57f77-5a06-448e-9558-25343140d14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a56c1f0-c3cd-4c5d-8870-2b2939aedf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b97879-6ad2-4ea0-b578-65ac70ce3b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24332eb9-1917-4c8e-b923-6a5ecf229b3d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd395f9-efa2-47f3-8a98-2c4c269d8604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457cfd7f-ffdd-4070-8978-ac1a0b5e0295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b067d2-4890-41a2-ac66-82bdd7dfcab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "555d05f7-f283-4196-8e24-958bb24aa481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6325e780-d15c-4e32-934f-052d09f597fb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1baf2484-516f-45f6-ac0c-fbea230c0747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23f0bd9-24a0-44d0-935e-c0a06b4ab869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6000a35a-465d-401f-9df5-23037af0ddeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "254bc0e0-e18e-4cc0-8141-4f8d4d346589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe674e9-552a-414d-b1fa-98da1f7bfd4e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78ee768-ccd2-4c28-8506-87591d2b306a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77395bfe-d0b5-4813-b2b2-ba1bd8bae310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0208b7-73f4-4f7d-a940-cb76bdbd47c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78946bde-4ca4-4e70-93d5-412ff1e65e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f945e439-4c4c-42b9-bc43-64f281997011",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb6e8fd-80af-497a-98fc-6e20dfc93af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f911aa9-482f-49de-9fc3-1f5ca476fa23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5abfc2-d9fe-4aad-b632-a74472808556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d49fe8a-4410-4cc2-aac0-fb4c17580609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25d189f-9b64-4dd7-b516-9905db52800c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d8d21f-4539-404f-b68b-91040a3bf934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faee8a65-9c18-479e-bd33-48bc84c9e398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b47ccb-3e32-4ed6-a96b-30e9ac744bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "841b6d11-654d-44dc-9a6b-23eb3c8a3f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0c3798-234b-42ee-9cda-9ae623f035b3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda643c6-c6a5-4411-b5b3-6478f1954da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2faae71-98b3-47cd-9f9b-f7b9cb4127a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3512084-d927-402e-a284-3db1443ea4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02e72c51-88bc-40d4-b436-c0e2c86c3f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de9e6e4-9584-4e01-835a-e736cd28f8fd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082a41b0-b07d-455b-9e60-7dab19153268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4932266-536a-4204-a20b-915e7079c7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8741346-5fec-42a8-9000-4ca0f74bd1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4aae4a-afec-4720-ad4d-83d090d936b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849045e8-ac5f-4605-a55f-20fc5b41c598",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cae1a65-3d7f-4d40-84a1-297229bb7b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bdc778-bb24-4c4f-ae4a-d05e3e74eb81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b92d397-1d3b-40a0-bec4-38cead07fa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c75c780e-1f9c-4ed1-9068-73e06901e04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ef36b1-10d2-4c1e-b898-73f6e399c5f8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05eca3c-e9dc-4acb-9330-3a7f668c445e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57192a01-ecbf-4812-9bb5-cbf6f9293031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddfcea1-e671-46e4-8157-c23271afa730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efa7a1b0-a62a-4225-838a-45475b98fa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1350467-451e-483d-81c1-1d7191429ccf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc58837-6b4b-49f4-b7a9-e4cda39025a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9bab12-607b-4294-958c-bdce677415ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c7fa48-c71c-4537-9642-d3135d7524e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cee2ecbd-8bea-4f95-bece-4a134938b189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9e8590-70ad-46e5-898c-3652f852f163",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888d461c-db3c-45c0-a76f-48673259135d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72da728-7c53-4170-a23d-880163990d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53254c0d-4c59-47a6-aecd-9cfaef066ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3302da7c-0857-484f-b7de-0458ed8d064c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7989de0-391c-43ca-9737-6f581d0130e6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd244960-7686-4087-a896-3f31541138ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9781d0-3c1f-485d-8ee2-870e42656850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcd0536-c2fd-48a4-a8d3-757b65e3e038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b7a7913-0265-4522-839b-0d7f4ba02951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d98479-0943-4a36-9465-7cd93065121e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e70f887-8eeb-44a6-aca9-ec9ce052eeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdee3dcd-442d-4e3b-b061-381d77e3f083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2958f9-24ff-4017-b9a2-1d9fabecd8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70022c93-c673-464b-b334-df110ecc4020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd50dc1-7d8d-4da0-a943-fbb54d3827d5",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b30fd6f-dea0-49a6-a313-b4050c625135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15434158-0860-4f9b-aa55-ed13b8980e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6050a0e1-3adf-4b9e-bd70-59f7d6248f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e426b32-f8fe-4f74-bbd0-d735bd6d1f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bc9535-20e6-41ce-a229-c97268fa7514",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e128b27a-fdf4-4fe5-b188-ab958adb5245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e482ea-2042-496b-89c0-ec2d98ee1979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7689b2-3b63-43dc-88da-0012cf0a7b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0e3838-6b65-4a6a-8e3c-ef99edb77554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4da5624-8c33-4a93-9d68-9a59994b3a9b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739c5e6b-7b52-475b-bce7-f465b4320da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d73640b-c112-40b4-be21-540c7756c459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d82ca6-747a-4e3e-af63-bd9982effadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b976d41e-6231-4a62-a37c-8d055a38b72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c795f424-e313-4e1a-95e7-f91d6111482a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97679d8-e73a-4a7c-b81b-4846eda9b207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c0d3d8-be86-4b41-8b50-2005db9cbb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e043eb4-e7c3-46d1-9d00-cf0049b55036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74a448a5-a4a6-466c-88f2-b4feb51ef74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f31245-7a14-4afc-8f87-77ebca68fb75",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833c0eb2-ba7e-4df2-bb2b-928c0775128c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6901cdf5-7664-4574-813a-01a19291e193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9390cd77-4ef4-4c94-8936-0d570256431a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73267762-f7dd-4006-8684-4d375b266902"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af511ac5-b7a6-4590-abf9-47ce2216d540",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f1d1968-a517-4a14-b8ad-06ac3424e548",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62722fd-dc81-4d67-9f73-ec7374935e36",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4c5364b1-67b7-4e59-8732-f33d9749f262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6a2808-70c4-4a5a-af4f-950e898fcbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d3528f5-38de-4fea-aa06-e03efcf31590"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7354e5bf-18a7-4aef-b3da-ae6c0d09e424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "735f3fa0-1f0e-490f-b535-2254ec51e4a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a500b7c5-6f09-4474-a880-a769a760e474",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75d2f1f6-ce25-4a85-ac36-b703c4f07689"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a7aee57-90f7-42be-b7c9-a4c8f3242f31",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb4281ea-83e0-4344-b0b7-bae445cb88ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd1091a7-9711-48ca-8e5d-5e4b2e6f818a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b49e424-5e02-4c44-86fa-cfd83a98b6c0"
            }
          }
        ]
      },
      {
        "id": "6764672f-dfc3-42b7-bf75-f46da9279ec4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5f5cc7a9-de0f-4368-8e66-76a170bcf1e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c7dbe5a-c27a-4f7f-a6fd-4400b9b90ad4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4619d037-ca9c-47b8-8f9a-c148e60c09c6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a198a51-20e4-4918-8a82-b0d17f7a646b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3d1a8f-7dc0-4f52-ae70-fbcdc71740eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac1119d-6109-43fd-88ce-82a43dded1eb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fa43a2-9c3d-4758-9283-adf8fe68061c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270dea93-39b0-4ab9-aa2b-8d2d9886d6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8570d1e2-f359-4c06-902d-89067bc6a3b3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65964ac-9359-49cc-a1ae-474ae5300fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7059c8-c238-4699-80a0-48df4c83b7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71474ad-8af8-4eec-ad93-25795877fa78",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b666651-5be8-484b-ae25-51049a9efb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9298cf2-51a4-4c00-a33f-fda9731d843a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c497a93-8cd2-47c4-bfb5-1babd1515b09",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf926d6-34df-4e1a-be67-5ebec5891b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1c7544-1404-4a1a-a9eb-1ba5ac0e6508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d77f26-0a32-4b80-b297-4803a7bf8753",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ce5770-e5a5-41b5-ac3c-3c8f619b381a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945b54ea-576e-47ea-848e-79f3a83b18ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f474fba5-39a5-486c-8fdb-648a72ce203f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5194270-a4ed-46da-bbe2-bdf71752abf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07adc21d-d7eb-4574-9865-fec68831836c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dfb620-2cc4-4ecb-8619-0687321f4629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3ee320-839b-45fc-b660-b1f7bd9d2567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed288c99-da15-492a-9101-6537d0bfc3a3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c75914-f8ae-4cc9-a288-372129c7c1e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0e111c2-adc3-4c1e-ab64-34b4fbcc73ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd8af2d-9cf9-4428-89c4-1f6bc33de844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff18349e-0085-4a2d-8bde-10bd71a3a4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879b24c1-0b68-468f-81db-8383cbe28776",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f9c0a6-dcc7-490a-92c8-9ae90c652e02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75f357f3-37b2-4cf9-b10e-d79e51d3626b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec401cb-3ed6-4c52-bc69-ba46754928a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b11e9c-d4d1-4802-ba01-fcd9d6009172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fd541b-742e-4cbd-aa63-a75b90f90510",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444a5766-368a-48ad-961a-17fcb72f3e96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790941bb-2862-4fbe-93f2-8f691e205a58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8bd938-538d-4d93-97ab-24d668bce326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6aaf1b3-05ac-46fa-b2e4-ea0ff7536210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516fe27c-954a-4c94-a325-f321cc413606",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13676fd5-6d9d-4e4c-b8d6-ef8e69d6dcbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16b2101-3fea-49a8-8ce4-1e5ceac86f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a452a6-8c16-45f4-bd79-1328fc5b40af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969c072a-05c4-4f1d-9620-afb2ecc26881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd322e6-66fd-4834-99f8-5687fda155d2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c007b5a8-0034-4027-a557-cfe6e5d703d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee11124-c7dc-4629-be95-d4ccc782ce44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01accec1-06b5-4565-a742-9cdf6b967a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b840cf-d111-4941-a143-c4f6a678d9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983a989f-e06f-44ac-b900-56a809f67ad6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6bdc77-16fc-4bc7-abe0-2cc3b0384be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdaba623-a163-4377-a067-21ecdcd22765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f753004d-1adc-478d-bf77-4cabd83e2a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983363a4-c569-4d07-821f-e3947a5654f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a517f2-26f4-4d82-b148-af5967dc50e2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6996f63f-773f-46d1-8d6a-6d3a24391833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0badc6e4-27a2-42d2-8349-e2d96b062e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a43f40f-034e-4ca1-b5c9-9fe3f4c39106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd4f6e3-3037-44d6-b537-69d1ff0eae7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca958279-7127-448d-8780-079bc127ac80",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a51df26-b542-45d0-bc20-93253549ec5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6cd3d3-96b1-4e86-9490-06df4746455e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6845e2-8f03-4b2e-ac8b-9e38ee7d7e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752bf32e-7594-46fe-b0c8-79cd3f35fd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df95c5a-e7b8-46f9-9337-7181d4a6b518",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a97538-07ff-4e84-8a46-8772648408eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a95d3646-eff3-4a1f-9393-5e497289fb19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92794ee4-2776-4816-9bf6-b40fc31cf3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3feea11-bebf-4f22-9314-cf5e24569a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12491626-4709-46bc-9da0-6aea42975679",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7958b7-3fec-4bfd-889a-a33faf66a13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d185449-3f12-4f86-9a4e-708ec771ac8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81c21b8-8a90-4bf6-b322-bf93602563b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b279dcf9-8900-433c-a6eb-299dbd1d58ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de38d44-82e4-4cfd-9f76-f8eca24a06a0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888f6607-078b-4f00-8e15-b2dfab00ba4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fedaac-bedb-4599-8096-4cff16339637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263aa130-8763-4cb6-9192-0afa910f4cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f60c88-b820-4447-8e95-e6fd9349686c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4709155-1043-43e8-9df6-9a5d92ee03cb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ef1ddc-2d25-462a-8c66-bfd585f41f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886562b8-fc49-4b35-8681-f78734b25580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd6bf72-8a9f-424b-a4a7-7f06029d3b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39dea9a-05a3-4560-80bf-e068271d5323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93056c6b-cfbb-4dad-b798-6e7ae9080fa6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f287274-059b-46b0-8892-4a8eed270a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8957d5d4-35f2-4822-95f5-24fa42c6464e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5167c7a3-797c-4ee1-99b8-a2634e31d4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab4d095-e23e-4626-b71f-ce575cc400a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba70857-bc9d-4efe-b1f3-075f0ad8ba96",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cd3b8a-839a-409c-bd49-2aaed13dbf18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457050e1-24ce-4da0-a99f-de06671fed87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc2e530-b3a6-4c8e-addf-d9bf9fb656bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54dd63f1-e6ac-44a8-ab5d-fd132df322a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353e91a6-df09-4340-9bf4-b8de478393b1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b9b6ce-aeb4-47a9-a00a-eb0f56c904e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51407ff8-3f9a-473c-bb59-182b7fdfe600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b550f1e-da13-49c1-b85d-4ed71c5c1656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3ef6db-471a-47f2-898f-6b9ea402c741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16990f6-420a-4b4f-b74f-5d05c0a07781",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949b5100-4184-485d-a2dd-c351ef11107f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f436637-b603-4928-b71e-9348da4783cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a17584e-b8a6-49d9-a845-b894898ca282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa2ac38-239c-4f93-98ec-983d8fe7d019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75034da-2679-49ee-a24e-94b8c63ac1da",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ce49ee-850a-4f0a-bd27-2fff75d8f5a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a1ccaee-fb4b-45a6-89dd-e8997097f438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7c4a40-478c-4dd0-be1c-9a444865ca82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899d96fb-08c0-4e87-998a-1d2aeecd6539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9565d1-c9e3-468c-aba2-3c431f2e7afa",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa84381-4576-4d02-ac90-6494bb28cb3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62915bac-bb6f-4576-bab6-5a39cc6078b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbfea14-3c02-41b3-8409-564c953f55f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afd3daf-00de-48df-98e2-1864826d3293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c09fad-d789-4258-beb0-8c5d31d0b440",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4879b83d-5d72-43fe-8f37-4881d6c180ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c0bc673-60d1-47ec-b62c-b71e4de97e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1136cd5d-d138-452c-934a-6d442d32832e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504901a5-5b19-44d9-807c-eae3dcbf34a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe6604f-b7cf-4223-b19a-e14e1b255174",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8f30ef-8dfe-4afd-ac5f-6cc187dca6aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b5d2cbf-7f21-431a-a162-25cf4728197d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c16cbda-d5bc-4a18-8eaf-d35ff8297cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d67f68a-588b-4b9d-bccb-387a22477d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff38bc32-b206-49fb-88da-19d3c6f03d3e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4a2a08-1e52-4ffb-a489-73390e28578a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f798f921-902d-4301-8157-99e081b24a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cbbc99-6c85-4978-afc2-5358eaf316b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b2d11f-5d0e-4243-93d6-b067aec1cb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26606391-5a42-4fc2-9831-126aaf3c7300",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd7d8eb-f27f-4ca4-b08a-54c1ac81bed1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fc8fedd-aa23-4c72-a0e5-991eb5556ca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c51e6c5-8883-40be-932f-634cd3351f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aea5e76-ee57-4f57-a42f-8b279fab9794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a497eb3-45c5-4ff3-af78-cc240e679c5b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0243c8fe-4c88-4b79-832a-5f561ed57c0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a21c2acb-fd2e-4787-964a-e1e7f15774b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dd965d-1e23-45fa-80a1-931ee676787b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c106c73-1c66-4055-9820-f7b4df878ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc8f7c0-7998-44c7-8a59-bbd19964c561",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85abaf29-5478-45be-8647-c8dc779ae8d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fe6ef5b-a4cc-4239-88b3-58b2f9a21d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2656fb3d-8bb5-45aa-a14b-12aaa6c3100d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1ef91e-0d47-4ed6-b8be-f0b0735f3ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72c6430-2593-406b-b73e-008e84466a5e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df54236-ca33-4a26-91c0-0528de5ee17e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f04258-ea57-400d-8802-0145ba40148f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65effc37-67d9-49dc-8917-b533e8c8ba20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ea7924-5526-4dd3-ba9c-b7ba763a5c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5b84b8-e7e4-4464-95ab-74f0be5e33b9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed950b48-ff31-431b-93f2-137ceb651c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4065e0a1-261d-4132-ae85-329770c4739e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62de1c87-932f-4df0-8f0e-32e2098c160a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba8f055b-fb82-43f1-8ad3-b01bab41eeb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e106b221-6e96-42e2-9b50-571f8fa12faa",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0473c74-d689-456b-b19f-6f69fdb04c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e19b720-0d16-4abb-9255-2c68827b866b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f95d334-0718-4a74-a4d4-91ac2d949ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ce2cc5-ce55-4a29-90c7-b22f92e1f781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef0bf45-4735-4bde-923e-76ed132de531",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d92ff2e-c5d2-467c-bc66-8bd2787166bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e425b4-d87d-490e-9821-47844ee9e8b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79547a9-3d1c-4cc1-b02c-2a47ffa5f1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d275278f-f83c-46f1-a216-a9b36706e268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aea9347-6d40-4911-88a7-de767e5da81b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957e1250-486e-4d26-81f7-86cb4e372f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02793d4e-8ac7-4f04-91ba-67caff5b3835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8ab876-284c-4914-9470-aba22096335f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9289e114-b0c2-455f-9871-ecd99da9d989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1464936c-e913-4880-845b-e43d0ccd646b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62406ea7-0ecc-47ee-b74f-e115c5de6439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1319bc9-9bc8-481f-aa19-0f6736f06f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70aae476-4fdc-4af5-8ee9-44dd366217b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b428f7-77a9-4627-83b8-818bf48f0c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf22079-d562-4fd1-9c2d-a71a3e370182",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cb8f33-9299-44f5-93e5-09c86e05e5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f4ef06-cecf-4577-9d6e-adc73d0e245c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43723e34-9785-4e0c-a437-83ec906a12ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ad630f-3fb0-4cfd-ac3f-eef2525dc78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4612df24-f1ea-4d95-8e7b-2ac875237c95",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589bad39-44c4-4461-953c-78cb5d54835a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbc8db9-d054-4903-bf0d-51dd19d1080f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57197afc-c594-410d-8e84-84b08b5edcc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9031c6-972d-4a45-ad71-00613c874519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6d172c-7d39-4c39-813e-fda642383d15",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6e240a-54d9-4c0c-a49a-9667832b1898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1506b54-f6dc-45e8-ab5a-c8b5ae5c46bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "775b65b0-1438-4d90-bc5a-fbeeea865474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dce21f0-9ea4-4183-a665-101a3e5a19cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972e9f9b-25ac-4e82-8eb9-b27ee111b830",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05334d7-9fb6-4f78-a946-83e01dcb1d3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58d3c90-deb2-4c9a-a4e3-5be0892fd1de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b9b45c-5f5d-4418-8812-3bba9c28754d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0d502e-e529-4b60-8c73-a94d4ddded43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8cc55d-36c0-4e4e-9bd9-1e785fca263a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38c5fdb-2baa-4d97-9e4c-ed959964b754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba12741-8cd8-4d82-af91-bd122bbf1919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a086ea4-b36b-4731-9427-96f7afa0bce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ba055d-bfb1-4fbb-ab5c-b55bfda37427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4801a5a8-814d-4d16-a88e-944722afa782",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1b1c24-ceb1-466a-b9da-fc79c884cbfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77784f9f-0455-478e-9537-978f496060cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb715788-81a6-400b-9a41-f1a5900d78df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40abe9a-bfb5-484b-8a26-dca50bede32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daae5628-71da-4d41-a531-d715871c83ec",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5f60e8-0b54-4fb0-87c7-8f9ce83cc047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c86e41f-f18a-43f9-b9bb-7caa555e693e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacbb4c3-4edb-4818-9468-93ffd880d1ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef17a371-f4fa-4c62-9a96-cec88186e7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba749772-586a-4378-9023-e27a761bf500",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a837869e-fd60-4c26-80ee-1a7755f0741e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d235ffb1-d825-4d82-84bb-9f734031a07d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66eaa9f-4fd0-4183-b17d-dfde31281482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c630fe-8c0f-45ff-8e40-1e4f098551dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8752d21a-1480-45f6-b86a-a2af8979e45e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01e90d9-c159-4680-a05e-695d70c01ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31e936c-8d21-404e-a0bd-da0e9019fb1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba1b0a6-ad2c-444e-8449-82936d64b265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5081675-f293-4ba3-a3e1-42748711ac40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0e16e2-94c0-44e5-8d65-a9f7f5cac65c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c680f71-e4a9-46d8-89ff-667a32ff8bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc746f1c-894c-40d2-81be-b7bc9b302537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d32833-2eb9-4c3d-9c30-2499ecf1a94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941e8721-ffe5-4053-acb4-a21d04692e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da8ad45-c530-4227-9b75-bc875eb52150",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c311f6f-b488-431a-83eb-67402a38d6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d0c1df-2802-4441-af64-078b5519c94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fca2fd-89ee-4454-8f8b-150493012c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efa3996-bb00-4cda-9c1f-0be9222d4fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c816d2a5-6645-4340-bab6-d55793d2facf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fd9be4-e0a9-4b1d-8f88-531700b7a531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9574316-d86b-4934-bd4f-a1316bdab18b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43901c08-24f1-4d45-83e7-b89a621cd436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef0ca97-1c7b-46eb-acc8-92a92bc25974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752dead2-9efa-45ce-b5e8-5d80f1bd136b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dc680d-f4e3-4aca-9bba-e138ff89c26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0deca2b6-bce2-40a5-8448-e4f9e0c548c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f7f2fa-41f2-4e98-aec2-74cd91766cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0217f93f-03f4-4ad9-8d21-ee5fd45e6e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fa998f-2811-4954-a6d8-2444791a0896",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f5b0d4-40f0-4846-84f2-7423b566ca91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479b9a65-b97e-44b2-8c98-99c3e5964de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c74119-3891-47e5-a084-5cfa600406a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19546528-70bd-46f5-a731-d27395f86a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157c7e30-4988-4a68-8e4e-1b10515c4566",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ee8f51-c99e-4f17-b571-c7a518d06b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000f2ef4-12a4-44fd-957a-b75e83f7401f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b310f7-7a77-48d9-865b-b125e5001c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b18ca0-78db-4064-b301-40d849afdd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1ca144-f3eb-4a20-987a-1c5851b1a318",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6194bd-34e1-4fa1-ac54-f1bf1d1d9887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffdf69f4-74a2-4610-ad40-afb4ebef493e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5831676-953b-4fb1-b683-de3a475b6c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f902d3-b5a7-45ca-8966-356ac1f6c6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd5b35b-86a3-4393-8733-b1f8797d173a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acc5883-e258-40d0-9a7c-bdaa90e1f79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca3d5ba-cc03-4a6e-961e-1f3bf0ee3c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aab6347-1c5d-4efd-bb8b-5cbb22c92b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758361af-ae68-48ce-b20b-611d47a97256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb133821-3687-4681-93bd-51ada001189d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0381d93f-918c-482b-b02c-4bff0ad44041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3621dbc-8902-4603-bc37-5c1c334baee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99bd5ce-fe82-4593-897e-b357f3290d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59a00e0-b376-45a6-958c-a560b1c870de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c1970e-d2e5-49fa-a193-07cbedd5555f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15aee91e-28cd-46ea-8d1a-03acc4b7ab52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf6bbbf-769c-425b-877f-6e4c86c9ba11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf590d4-9e1b-4583-bf51-a94b27a48e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ba14e0-b930-4d7a-81cb-c318b4801726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa71271a-e32f-4ae8-b6dd-0424ae7f4c6f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b75ff4-ba17-42a4-8727-00fcda702ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7abac5-601e-4ee5-b36d-17b3e9d33e18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7cf317-d80f-4b7e-9c21-eb455d8d94dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698522b7-f42f-43df-bb06-55f7cc41931a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5eea014-4c83-434b-9532-c96f3033780e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e905ea3-a39e-4ddd-a01b-8e31848edc48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad2c98b-718b-44c2-bd3c-59f515465bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b5bf05-cb16-48c5-af38-73fe7b6a1b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6524419e-fa1c-496e-9ad1-c45be3fc412e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e978dc57-a049-4bea-a4b5-8ec2bb8b6671",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86836a0-f55b-4f96-9122-27ef7e823920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d06230ad-99fc-4e15-a6cd-d66ffc683422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf2e4d8-e4d0-491e-8321-f5dd34283297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafc71f6-5199-4df4-9d0b-40644414e227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83511216-b90b-4f93-a97c-f8b1d3a11aa7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85c0247-14ea-4091-8bc0-e23f623a24ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94fb1e7b-7a17-40e7-b4d4-bfbf8fc56140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd4cf55-b826-48fb-8e75-f9c1dbe7ed76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead03d95-b161-4d6a-810a-12ebb8028f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f44c46-839f-4f44-a3d4-7b2f55d1d360",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc1fc7b-3d90-4a50-8336-22acd007ad68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c13b10d-931b-4c21-b0e4-1f5bf2122ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935ab511-9b19-46f3-b44b-00e45bead1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca332db-11ed-4b4e-b423-c9380d7d55bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457b002a-8b76-4f40-8022-4a312c803ee5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6d25da-567d-4d5a-9818-7abc6dba50df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e804369f-2b80-4b22-a805-abac0484a967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304dd2f3-cdda-4a21-99e9-2f922b438fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6041e9ab-5f05-4fbd-aade-d0c95421bc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42860d1-e838-4415-9013-8ad15b8dfc45",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da06211d-3510-412f-b55e-9adb07dbabab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e67c4e8-7fe6-4b26-963b-60c525d473f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d05bf88-d173-4859-9363-ab490889183c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8934fc5a-afab-47d1-b0c2-ce3e7747c473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985be391-0d2c-449b-9363-5b537f15d600",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7160c777-f399-4620-9e36-e5dda2c85512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea72007e-a305-4512-892b-354c07f1e483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76d11d5-5583-4e66-ba7d-164bafa0c5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a1c518-7ff2-4b69-af39-06bf3afed19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769c5ce6-9dfa-4973-9f5c-19bee491cbbb",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b79770c-ca0b-4d53-9c75-83eb95a00122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799b4a5c-f238-4076-bf12-a4530324fe37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec892bf-9faf-4c6f-9f8c-40288d088630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320a6754-13cd-49a7-af23-6a0619eb7bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c757c5-8675-404b-a469-0e60e1c43593",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d83fe4e-a89f-4318-bcb3-938071bc4aa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "455e43af-907d-4877-adfb-792e3ee98588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ef8b6c-bcb6-46dc-a785-6b58f46bdc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0a4c43-9848-4e6e-80b2-0c9235b11bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c237091-2caa-4f10-a6fb-80b6604f3659",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed96d1a-f227-4249-85bd-b17d42443fa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaeb52a0-805d-4f14-ba82-32109e06520b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3a2716-db47-4469-866c-894aa12c9dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25070d9-47ad-4e20-a343-616048088ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbef6e02-95a3-4c13-82b0-4857201b9216",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572362f4-fbfe-409c-86a2-6c69c98ce544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b26546-22b7-4aa9-baf7-faddb6f64ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e58ad5-d178-4f27-b17b-7056dd251fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21de9edd-d792-4fb1-9e69-6e84d05bf98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a28cee-d26b-4f62-a096-40a8974fe28a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6669d73-52ab-48e8-b7c1-91bd9b604c8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b93dda7-b4f5-403c-bfad-3d8db62f3c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510556a6-c493-4a73-9cb6-1f59098514f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7e5680-24a7-42d5-b7c6-a3fcd7d9dccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68dfa319-3dfe-4f0e-9d62-632b025401ac",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fc0219-d8c9-4fb5-9df6-d602a8001064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e504642b-0a39-43de-b4e3-894b78fef5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d252b77-bd90-4e8f-805b-5b3ade6a4821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c4b8a3-550a-4315-a8d0-d07a5eec0b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68db40b-00c7-4042-910c-8076650ca2dd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be08f93d-d54f-4411-bc84-8a781a637e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "005f4a2a-c18f-481f-b9fd-3f61d835707e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e129694-ce2c-4cbb-bff7-502b158e12af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f337fd28-aabe-4f53-976c-fd8ae4c403ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264534f8-e7c9-463c-ab3b-e8b7b948901c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2adb59c0-a1e1-46cc-9bd8-88271093a84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cef5c683-2788-4973-9c35-aef0b8727478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86c3356-22f4-4231-a222-632b9f910d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861a2b06-a3e2-4afd-83ab-ed3624e088c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14341e83-d7c5-4383-af90-cf91710ad685",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81ebd1b-f719-4881-9f0c-0629a767f8d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cfd3629-c16f-4c8f-90fb-aa48e04bdf05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada986ce-f444-4905-a04f-6e34470e4091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfab806-a764-4180-abe1-6fe0e5b7939b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfd88e6-4029-4994-a32b-62362dd0761d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c199a307-7ef6-4082-bf73-2aa0653c7777",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "281f4b33-4558-4862-abbc-01c1a0b6601b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafe6c71-c357-49bb-818f-b1313db9418d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557e0d84-3624-42ff-9b16-d3c764dcdd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2b7ee0-ab4e-415f-b4ae-ab31eae41b4c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68922d99-fc81-4cf3-bf4a-0bd5a4831a04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05e945a7-10bc-445c-b156-af82576da82f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559c9239-c29d-4b66-ad9c-22d06cb7a3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8ca6ec-7ad5-46e7-9f0c-987473003439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c281f4c0-dbae-493f-861d-a256830bf0b3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3e2a3e-09ed-4085-aaa9-1ef7ab43951b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0c3fe75-f282-4a3c-8281-660943d580ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f47f407-01e3-434d-a84c-d62ebe7966fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ecf98b-a08d-44a3-b0f1-ae5e500fe4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7b03fa-0547-46cf-8e9e-b193af019d9f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e77fd5-70a7-4043-b1db-f3e308312b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf55efbc-44e9-4e64-8c5b-0f4fdc01aca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc528d5f-10c7-41f0-9729-209b5ddcd17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d26235d-1226-4275-a73a-1673863e60eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807ccbd1-04e0-4c24-97fe-4078d272cb46",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8b6131-c7e0-45cb-9723-510545b2af40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e416a47-39f8-4583-8b0d-827e874b6adb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ce2415-b911-414a-ba07-a73726bafe54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86653621-a0c8-4c80-adbc-f9268ef6291b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d920b7-c6ce-4f49-91e8-68db2a549a9e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedb0de7-f396-4266-8a44-dc1bbc6a3d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "404a716c-0640-471c-8b80-7de7f5757e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c3a0eb-924c-4849-9a34-52172a077e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df6a78d-8d75-4d75-8223-e2da736eb39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2421d615-fde8-44fd-81f6-429454fc0ea4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e62a6c-4600-4dc2-88ef-1e0934639f0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "786b7764-e50e-449c-9f43-526dd55297c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "495cd3f1-8991-428d-82c9-5d42e2bcc7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24362cb3-7d50-4723-b6b8-d8ecd8787eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176902fc-c63b-4ecc-bea8-c4b2000a619f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88504a0e-75bf-4bcd-a15a-e514c9aa58e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f379cd38-0576-48a0-bbd6-a51d21b68dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588af2f0-aa75-47a3-ae0b-f1c4aaae2d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1bc70a-40ef-4eb6-8a44-6bb646d87db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faeb139d-6af0-426d-8d12-c45dd687e5b3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83153801-3545-4f62-90b2-c8b72ed7b301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8744de03-b57a-43fe-85e3-4e17431bd0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8f0626-b4c6-4c6f-951a-af43e9d90e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1358da-4f81-4609-b2d1-d037fef4ef2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3dea1b-8b88-4449-8f38-2c565ee54308",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c136d1-3928-49e6-b7a1-14dfee7354dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb877826-df71-45a8-affd-ab102165320f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9ad744-5821-437d-ad9c-2c4c44643354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fa07f6-0175-4d2f-a236-06fdc9d77122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f745ce24-a12f-4923-9520-91e0f1c4ebde",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c0a047-4b02-4cd8-9b3d-d02f708bba00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6b28399-2da7-434e-8ae0-bc18c8507195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4cde74-680c-49fb-ac50-99afe9241c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34c5233-770d-476e-9ed9-74b124dc9729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36350f3-37c4-4a3a-b7d9-b0fb12a64e6e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3c2cc5-a864-43fc-99e4-008dff905623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a81aa01-7242-44cd-9a26-8e02564d62f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fffed31-b933-4544-96ef-46793c51e9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55db4b0f-501b-4770-8f0b-201a83be62f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5753973a-46ac-4fe2-ab75-b5a516fd062c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376e3fd8-3866-4309-89e1-ff5f64c3725f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bae2e668-deb5-49c4-8400-3a8b954b2405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f38d62-3714-4b19-a548-fa4aa05051ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d6db24-8f38-4a7c-ba0a-16557f424a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3917e4a7-c7d4-4890-a8bc-f6486d2becfc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a932d10e-1154-4044-9977-289691c842fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ad4265-002e-44e2-b328-52291cbb172a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d203015-847b-4e26-97e3-5be7cc264214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a32ba2-e0c4-4657-af87-83e8e068c190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49e81cb-7259-4e9f-b3a8-aba2c032864d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011a2f44-de07-4324-9eca-bcbfb970a061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b159977-153b-4c11-912e-61981d25eb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61aaf414-6d01-45fc-8169-e660c8865d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18cc726-f2fd-4f67-8666-d6fa11b4c98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512d17d3-d221-46d8-9a97-96b265fc3d1e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333969f6-112b-4d00-bac1-aa587eb3fdaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c4a6161-3768-4720-9d4a-6c07ed81731f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112e764f-9c18-4edd-8b31-1bd7ff9683aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca975873-104a-4336-a4a1-c3c019cc9abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca4f0d8-6c72-4ed1-9599-4c9674191c19",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7c0e06-4dc9-4bae-a909-e8403efc745e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5b8982-1ff4-4947-8227-2e952602cb63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48edc66b-b3c0-4f2d-8f66-14ed6dff7217",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d542e02-bf42-4f6b-afa0-e3e398523d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87088025-7313-42ef-a93c-584fea96e9d4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68da557e-afa4-4248-bf98-261154685ff1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5af1f92-fdab-4048-afb3-c17ceaa59daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3e0f34-2778-4bf6-a0de-992f821bbf86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b096e0-18c0-4ad5-a4b3-fa05e4aecbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8faddb5d-4fb1-49b4-a77d-233dbe96f458",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9056393b-37ba-4687-a805-b610049b4ff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92231f59-2fe1-49ce-b3bf-b32c485c1d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dec5e4b-d09c-48ca-bb78-8f24823b38ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1f5a83-19f4-4cdd-ab59-80a92da67010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7daf7484-2f46-45b2-88a0-6a96d180b9e5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb04256-f74f-4a5b-adaa-8bfab55acff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19365f57-48c6-4318-8393-e9926c7833d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b706bc-e9ed-4259-93a5-d851233aba45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6879547-d614-447c-a149-6cdc3f22cf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1c4878-efe5-463c-9f9f-a6bb5569f793",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3d7007-f63d-4000-9f3d-19306b2a698b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb019a5-df31-4726-8b68-599edd1a5e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bdd831-cef3-4ae3-9bfa-b70114f14825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30def2a-8a31-45e3-a03e-a32e90367f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2b45da-ecb8-4919-a1d2-04607f52c6f2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd85e1ec-c512-4a10-a722-61d257724069",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "471f9533-4f66-40ef-b5cd-79e138836c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3922e26e-05eb-474d-ba17-1b8d453aad9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f8efd7-b86c-4b75-ba1c-c708219ab538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f55c80-3273-4922-8466-70e19dc1e08f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e81f0f-577e-4123-96af-439a50d8d963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e31874-1cce-4d82-abbf-3024cf05ea79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8111f0-50a7-4c9b-9a85-f52134d1e0ee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85a9a32-9576-4fd4-807f-d00c8e0d34c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48332f9-051c-4031-b799-87e8457326b0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448d2897-febf-432c-bef7-6e31f7dabcb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94bb2c5d-129c-444a-8712-428209e15c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9a0f1a-1fac-494d-892f-31bf8216dd10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15aee35e-5a69-4eaf-a2e7-7d382c40d10a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e79754dc-109a-4477-8ab1-d94013f08fcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a267998-e111-45cf-a73b-4a0a74f19c5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84cd15ed-5345-4c82-a1f6-2f30f0bacf3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b4f4f01-2182-43e9-81e6-289d9f5a65da"
                    }
                  }
                ]
              },
              {
                "id": "3fd397c4-6621-4a04-bab5-4336d0ca38e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c44ad950-aba4-401b-bf31-928861bf00a3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe327c49-3eb7-4b07-a5f0-b28af13d8654",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c3c0eb1e-f018-46a8-81ef-284a95f0aab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93902029-d4d0-4ba7-b9cf-4124987f8c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8025d77c-6796-4b09-ade4-acf22d8dcb87"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "094b6ce8-9672-4311-93fe-522b5ccf497f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbc48f96-e290-47cf-b74e-bdbc14618737"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab82f82c-c1ae-4bb5-9730-bbaadf5974a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10aede43-8820-4937-b872-8d5566606056"
                    }
                  }
                ]
              },
              {
                "id": "bfb5d24d-6edd-473c-a3ea-8e6fb68dd260",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6fe7382c-4590-4cf3-aaac-8ee0250c42d0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31bf11b-ed77-4b7c-bb23-5ff7c6f0438d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cfe15579-c174-4f7c-9771-f9450d4b626d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89292797-b6bf-4ff4-bc15-1fa76bee4167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f82653-dffb-4bef-8e3e-146a37963fbf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "caf8344b-8b46-425b-b60a-18257db7e7c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0269f581-f313-4c37-84db-f87875b200e9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "805d1eb8-2f40-47db-86b1-5747b73483d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "df5f3b8e-b532-4b20-8feb-41108f07d40d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b141142-349a-49a5-92a9-cbde0985d34f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4125a9f5-7c6f-42ef-be30-2aa401c9d5e5"
                    }
                  }
                ]
              },
              {
                "id": "fa38fae9-b165-4d5c-9133-6474f5258920",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cef71001-a069-4bfa-9a60-75cdb17e3945",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "485c423c-65ab-47c5-b92f-4a652809756f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19826f12-6ba9-4304-a23d-2cd03e925436",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bf60bd1-6e09-4c7e-8fd6-2e00cb2da60a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93f8e60e-c401-4123-8d07-b8d6286ec473",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "95f25ad3-c10e-46ed-ab56-ce5100566cc8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18f2d684-6299-4b39-a8fd-36a33565c541",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2009b19e-060b-410f-8935-f673ac808e72"
            }
          }
        ]
      },
      {
        "id": "c484c992-2671-494b-9c1d-83b07269b219",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7b3a3a94-e18e-4510-8374-0378ac73a636",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ccea873-c8f4-4776-bdeb-75d47c1bba72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba69bd6f-406e-403d-bff8-60c1318654c1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ab423a-52f4-49ca-a8f8-3b2cae2b3a95",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b8788d96-4f63-4b1c-8bba-f811e4b0e5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0316f402-2853-4c93-b197-efa80d859c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a011ad51-3d3d-4407-85cc-4a4415287c0f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e56b6fd5-aaf6-4187-9c12-2cec7fe99c85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aac8c05b-8ba9-4e66-90c8-6b594af28e85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e903972-60db-4dd7-adda-f5be80d38c64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a147c9d7-ecd2-4d6c-9f3d-2ae90145979f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "588d789a-d9da-4202-bc77-a4893628c4cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bbe28d8e-a426-4311-9014-97d11ec8cbdd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9e6ab96-4be8-40ac-8c38-cffaf4ddddd3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f737726-a2d5-43de-9387-3133abb888a7"
            }
          }
        ]
      },
      {
        "id": "2627f806-9adf-4f55-a085-0112716a6854",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8002c1e6-79b5-45bd-90be-d18dedc71e8d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a5faf96-e57f-42e1-8315-8c48785b3e19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "437b301e-297d-43f0-ad21-c56ee7ff9ee5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49e0ae3-38c2-4744-b381-32c4cd9cea43",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51577fad-85bf-4d4b-b44c-ff41ac05f583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ddf665-b7a0-4ac6-8e19-53552881ab7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b8bdf02-96be-4bdb-96cf-282dca08d8da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe8fab62-0e19-4de8-b49e-14bc9f3c213c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dde99889-a945-4f0b-9a19-0b98a5de875f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db4d6257-15ed-40a7-b8cb-811648d3b991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afca8126-d6b7-40c2-aadd-658b5a212c5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9676ebe-a2b7-427b-8691-e618db8238b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "188f5a3c-554f-4943-b8ac-624817b84760"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "208facba-d4da-483b-844b-a4b5956660f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "261b57d4-ca11-4dbb-be47-260698dcf8b4"
            }
          }
        ]
      },
      {
        "id": "67f4dac2-a2d2-469b-a029-5d36bc329760",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9f221d8f-e914-461f-98a3-2b94a1d85e1a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2da67ec-ce3c-467c-8795-7e9a44632aef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6652667e-3825-448f-968e-bf4232d9fdbb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6cc31ee-1734-47f3-b8db-27aa14b95dcc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44570abd-800c-4db1-91b4-7fe4ad5a3916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04ff704-853d-4965-bb11-bbea6fba151b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "beb6d199-541a-46a6-8386-d679c6ae5e6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d17c611e-e2a6-4f59-9a82-a6e3e4bba431",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa42965a-4721-4a12-a844-b2fe9e42f956"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "530581c7-0d49-4827-8f9f-5482f312c5b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adb95214-3b6a-48b8-a1bc-32e904cf0ac6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70d88eba-6901-4d97-996e-a58602880ad9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e38f2936-5500-4458-a7b9-1202763c4664"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b96f2b5-7a52-45ad-8b04-e6990801509e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db7d500c-3da1-464d-8903-f3f137313797"
            }
          }
        ]
      },
      {
        "id": "e49e5ba6-af05-4d5d-b570-bf8c5cdee8c8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "696bcc36-1157-4901-a09e-45e1bf072548",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96a5dc9f-318e-46d5-b9a4-c3fb9e1604e1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "03459689-119f-4250-a747-7bf63a65bde9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d3d5057-012f-42dc-a596-f95b4dc480e7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81eaf36a-bf25-483e-aa05-4cc96fe1b880",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.89122807017542,
      "responseMin": 10,
      "responseMax": 650,
      "responseSd": 83.51555434642152,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710031017408,
      "completed": 1710031045810
    },
    "executions": [
      {
        "id": "52b2592f-a9e7-494e-b484-90aa3c1db38f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "682d742c-a168-4be1-a33a-aefb76384b8d",
          "httpRequestId": "e7f4d371-1bcf-4360-a7bc-4961230ad868"
        },
        "item": {
          "id": "52b2592f-a9e7-494e-b484-90aa3c1db38f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "45ed7de0-6ae5-4889-92b2-8fdfde363ae1",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "a407d998-3efa-40aa-a159-2f0faf8ac2a1",
        "cursor": {
          "ref": "e508cf60-a831-4f7d-bd11-8e1794a9cd00",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cf134616-f36c-4d9a-8852-2a88c075f4e1"
        },
        "item": {
          "id": "a407d998-3efa-40aa-a159-2f0faf8ac2a1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "33a46ffe-f3ea-4339-bf07-f51b59ba214b",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "489f7e35-57c0-40bc-9467-78e8ba7dcb59",
        "cursor": {
          "ref": "29a5ed67-cb0e-495e-ac89-0b1fc330940c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bdbdb3a8-5788-4b7d-bbbd-41f8ce901586"
        },
        "item": {
          "id": "489f7e35-57c0-40bc-9467-78e8ba7dcb59",
          "name": "did_json"
        },
        "response": {
          "id": "d4bae60d-8372-4263-9028-33022638d8da",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bff7c5-02bd-4c90-9e88-e6766859a107",
        "cursor": {
          "ref": "cd87ee9c-77f0-47ea-8efa-fcf7c3428caf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "195fdfd8-987e-480b-8572-33e423b55b12"
        },
        "item": {
          "id": "e3bff7c5-02bd-4c90-9e88-e6766859a107",
          "name": "did:invalid"
        },
        "response": {
          "id": "8b5ea25a-e9b4-4eeb-b3a2-24bdc16e50e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bff7c5-02bd-4c90-9e88-e6766859a107",
        "cursor": {
          "ref": "cd87ee9c-77f0-47ea-8efa-fcf7c3428caf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "195fdfd8-987e-480b-8572-33e423b55b12"
        },
        "item": {
          "id": "e3bff7c5-02bd-4c90-9e88-e6766859a107",
          "name": "did:invalid"
        },
        "response": {
          "id": "8b5ea25a-e9b4-4eeb-b3a2-24bdc16e50e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b3ff62-65ca-47f7-a68b-b914a77e0df9",
        "cursor": {
          "ref": "4bb60363-2ac1-408f-ba5e-86814e84eee0",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9e806651-59ed-43d0-8b33-2c09155d7ffb"
        },
        "item": {
          "id": "e7b3ff62-65ca-47f7-a68b-b914a77e0df9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6db734ca-79db-4f35-b9ff-a5ffd459009b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 165,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5eabf9d-9640-4f40-b65e-a728113c69f6",
        "cursor": {
          "ref": "6f957c41-bb54-4c6b-b716-e2537c667533",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ebeefdc0-cdac-4b97-92d8-fc846e73f688"
        },
        "item": {
          "id": "a5eabf9d-9640-4f40-b65e-a728113c69f6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d3da570c-7ba0-4f6a-a0d6-817a228d31a7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b251cb-b4ba-425a-af1b-4469cb057498",
        "cursor": {
          "ref": "36b00656-1bb7-4d99-93b6-5b8cca0c1e21",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c2a6c805-e18b-412a-98b0-c4f51fdb2f42"
        },
        "item": {
          "id": "23b251cb-b4ba-425a-af1b-4469cb057498",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "17108894-eb79-4e9f-8056-9a4ddf7002b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc96945-7a7a-43bb-a29a-0c72a1af4153",
        "cursor": {
          "ref": "dffd512e-c8fe-4896-9ba6-ee90e571ea89",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5ade10e7-aedf-4b38-b2cd-2c7b742d06ef"
        },
        "item": {
          "id": "ebc96945-7a7a-43bb-a29a-0c72a1af4153",
          "name": "identifiers"
        },
        "response": {
          "id": "f89b54ad-ec5a-4349-9522-fe9ead401698",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e927cf-53d9-4548-a946-41c1daccb516",
        "cursor": {
          "ref": "b5302a68-5e8d-45b4-9e20-4afe6a88eea7",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e73a1392-f02f-48a3-a511-5928cc32d006"
        },
        "item": {
          "id": "47e927cf-53d9-4548-a946-41c1daccb516",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7b20b2b1-e3cc-424f-b919-5d2b9904d886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b63a9b-820c-40ff-859c-b1475607e99a",
        "cursor": {
          "ref": "5aa625ff-9d94-4e2f-b9b3-758ff0cca13d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "94eb4bbd-a7ad-4cd5-8a19-e445fb01222e"
        },
        "item": {
          "id": "b0b63a9b-820c-40ff-859c-b1475607e99a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "40c08f26-3631-4511-b6ee-e57c64795a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc1e3c8-1568-4e89-bd8d-f7e0ff33161a",
        "cursor": {
          "ref": "235b6303-b0a8-42eb-bc77-bb794612126e",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fcb26e6a-d607-45d4-ade7-84a0b8143faf"
        },
        "item": {
          "id": "2fc1e3c8-1568-4e89-bd8d-f7e0ff33161a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9d7395a5-5886-41df-9fe3-ceaee12c0de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39304208-79cd-4315-b19a-61a7149e9711",
        "cursor": {
          "ref": "6ab74148-9bf0-4e45-9081-15a623b85e66",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5daa01f6-c909-4750-9ad1-406d4cd6194f"
        },
        "item": {
          "id": "39304208-79cd-4315-b19a-61a7149e9711",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2afc0826-ad33-4f30-b915-ce18bd14c81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe3c73e-03f8-4b91-9a17-67eee692f67b",
        "cursor": {
          "ref": "561c3167-dcda-4556-8d19-858564a9d817",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b5385497-da2a-4bf2-99f9-aafb16c236b4"
        },
        "item": {
          "id": "1fe3c73e-03f8-4b91-9a17-67eee692f67b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cecf8006-f911-4626-9cff-f03a4a6e26b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b40ea05-40eb-4d54-8294-cbca91f219b1",
        "cursor": {
          "ref": "9e19ebb7-e2dc-4858-85be-145c906dae3e",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d7c7e9e5-ccdf-43dc-8481-2e8375958b51"
        },
        "item": {
          "id": "4b40ea05-40eb-4d54-8294-cbca91f219b1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a66e24b3-1923-420f-b349-2515dc5548e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a1873e-0e09-429b-ad2d-8bc5cc1ca6c9",
        "cursor": {
          "ref": "51d7e1a5-01b9-453b-802b-1f413b092e7f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d56f4e3d-78dc-48fd-87a4-a2ae8d1f1f11"
        },
        "item": {
          "id": "95a1873e-0e09-429b-ad2d-8bc5cc1ca6c9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "32020966-6086-4668-b715-89955413511b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb930ce-8648-4cbd-a2e7-f7f55338aa8c",
        "cursor": {
          "ref": "c1f4b1f7-906a-4d4b-8d95-5c7fd70b1c10",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8e504ae4-6d2f-42ed-9f70-a8fd28ca8369"
        },
        "item": {
          "id": "8bb930ce-8648-4cbd-a2e7-f7f55338aa8c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7d8570ea-f8f4-41e0-ae6f-80201fdef745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25afa2c-8d7c-4c7c-8426-fe862f416307",
        "cursor": {
          "ref": "b750b76e-a4a2-4fc4-9fbf-446a6ffece9b",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b5711015-5274-4dcb-b251-54421433d699"
        },
        "item": {
          "id": "e25afa2c-8d7c-4c7c-8426-fe862f416307",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "913a0c19-9f3b-4f08-b9ea-d50bd2cb1f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e697f1-f936-4008-8405-d3818611fd65",
        "cursor": {
          "ref": "e3c42b61-f64a-40c9-b6e8-6613904d4c2b",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6fd7f9ff-bfa2-426d-bdd9-b968d7580c47"
        },
        "item": {
          "id": "56e697f1-f936-4008-8405-d3818611fd65",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ba6f13f9-72f7-41e9-9a0e-e92ad33ae231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbee603-0b85-439d-bf56-01317edb52dd",
        "cursor": {
          "ref": "094a9462-fc5e-4d47-ad77-e6c2deba3054",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bbf944dd-fe38-4f3c-8b77-c494c187babc"
        },
        "item": {
          "id": "7dbee603-0b85-439d-bf56-01317edb52dd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "53360dff-3a79-4a3c-8063-8755a49d04f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8340ac6-96f1-4b78-a241-55df779d1ad3",
        "cursor": {
          "ref": "a3fb1a7f-8edd-41f8-8182-021dbf47bd38",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2ea3ad7b-6990-4bc1-aba1-11e3f3f25f1e"
        },
        "item": {
          "id": "e8340ac6-96f1-4b78-a241-55df779d1ad3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "28f1f070-a28f-43df-9d48-382eb0288ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a5da92-b18e-487e-8e04-275c58c0a1f8",
        "cursor": {
          "ref": "ecea64eb-c7f9-4405-b564-ea7f3cb2d784",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7fe8c26b-2114-4598-990f-25963add3ab8"
        },
        "item": {
          "id": "75a5da92-b18e-487e-8e04-275c58c0a1f8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "18321094-d721-412b-af9d-f28ab0dde8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7b35fa-b5da-4a9f-96af-906858c8eec0",
        "cursor": {
          "ref": "2003f77a-1502-4823-9267-adbfd09ea4d4",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8309cbf0-60f3-4360-9506-114bc86e2a1d"
        },
        "item": {
          "id": "ea7b35fa-b5da-4a9f-96af-906858c8eec0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "acab8a3b-e3a5-43bd-a648-d4e117addfdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3f1e8f-869c-46d8-85db-085e2b29b5bd",
        "cursor": {
          "ref": "b3709d75-bf86-4e94-8412-3da78d0390f6",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7849b4ef-cb93-4ced-8f92-e77d941c056d"
        },
        "item": {
          "id": "bc3f1e8f-869c-46d8-85db-085e2b29b5bd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8c377e52-2940-4788-b155-0fa46af7cbdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a33030-f924-4768-b451-b49a8d152f51",
        "cursor": {
          "ref": "abe23bee-90f3-4b27-9eae-7ef2c7631fa8",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "402835ce-5c0b-4cc1-b4fd-73f50d0ba881"
        },
        "item": {
          "id": "d9a33030-f924-4768-b451-b49a8d152f51",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0a414cbd-ced7-4aaa-91c6-fce656e595ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df0c1d0-9a89-40c8-a067-945a4d4d3822",
        "cursor": {
          "ref": "9900a27f-7dd2-45f8-82b4-d10fb3424229",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7628d494-9635-46f5-a028-ea7cd0d24fa8"
        },
        "item": {
          "id": "2df0c1d0-9a89-40c8-a067-945a4d4d3822",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c6fbe7ac-691e-476e-b991-ece10eacbf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a2be10-fa74-49e1-89fd-d5b0e47ea4e8",
        "cursor": {
          "ref": "3f61289b-308f-476b-98fe-5789afd1c470",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e9e89ad2-f53e-4115-964f-54a387e52d00"
        },
        "item": {
          "id": "38a2be10-fa74-49e1-89fd-d5b0e47ea4e8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b1c63356-8207-440b-b57f-f2accfec8bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271dc17a-d184-4a9f-924e-5bab30815c4d",
        "cursor": {
          "ref": "14986dcf-d889-4cd5-84e0-3958d24aee56",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "563acd09-88a3-4edf-8ee5-3a47849527d3"
        },
        "item": {
          "id": "271dc17a-d184-4a9f-924e-5bab30815c4d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3f4cd746-ccf4-4ab1-ae0c-4e4b786d50cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b5d862-6e0d-4fca-ae4a-fd1eae7fb37c",
        "cursor": {
          "ref": "ac5654cd-e367-48c6-8a42-c62b40a36956",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ea0bb77e-d0c0-4602-9bec-abec1e5f7a81"
        },
        "item": {
          "id": "c8b5d862-6e0d-4fca-ae4a-fd1eae7fb37c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a9f9bfe3-f76f-4d72-b0a8-10793b6d41f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b22546-6d71-4868-9cde-ee8a887e4c71",
        "cursor": {
          "ref": "60e73d08-64c1-4567-b6e1-8b6fb391bc01",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "972f11ab-f9c9-4bde-98fa-c695cd21537b"
        },
        "item": {
          "id": "04b22546-6d71-4868-9cde-ee8a887e4c71",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ff3bc6de-9c57-4b6d-8d92-213a157ea888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8611219b-612d-4620-bafd-1e8d42306018",
        "cursor": {
          "ref": "2a4373cc-a87d-4c46-8d4a-24c341eb25ee",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "666c2c4e-1b9d-4cfb-a338-55ca1f490167"
        },
        "item": {
          "id": "8611219b-612d-4620-bafd-1e8d42306018",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "13cb5b7e-6da0-4208-8cb7-6cc918738cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba496ab1-a37b-4a86-af75-f1615a48909d",
        "cursor": {
          "ref": "1e30e7fe-f709-454d-b4d5-77e613351d3a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c7e47296-e08a-4e7f-bedb-db371a31eb42"
        },
        "item": {
          "id": "ba496ab1-a37b-4a86-af75-f1615a48909d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "741baae7-0b7c-48cb-8d6d-114b540c3e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fea96d9-25ed-4ec3-a0e5-528164d96ae8",
        "cursor": {
          "ref": "33d4e8b7-f8ca-4e02-baac-83cfc1233849",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f4e65b39-40bd-4408-b99b-c94a04c7e2d3"
        },
        "item": {
          "id": "1fea96d9-25ed-4ec3-a0e5-528164d96ae8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "92755427-e517-4507-8eaa-66fbfde90450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4424a530-2f1c-4c21-b47d-6296f9b98c63",
        "cursor": {
          "ref": "cb348868-81c4-41d4-a9c4-e0b075b29c9b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "127721a9-6256-44f1-a347-ae456c3e6ad4"
        },
        "item": {
          "id": "4424a530-2f1c-4c21-b47d-6296f9b98c63",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "65096993-553b-44ca-9d58-62df77aeec18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6258ae4c-2205-440b-9830-3ce03841048b",
        "cursor": {
          "ref": "fc4a98f3-526e-4a35-8f85-3d291aedccf5",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "57de07a4-434d-4b25-a745-a0773eadd83e"
        },
        "item": {
          "id": "6258ae4c-2205-440b-9830-3ce03841048b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "17cf3db6-2a52-4f8f-90de-8d09f4514ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f82f0d3-2b91-4a8e-b5b3-ae5b5f029079",
        "cursor": {
          "ref": "d3a5ac55-ea2c-4ebc-be54-540b02857bf6",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "61cd6290-1b1e-4ee7-aefb-ab6fd8729dfb"
        },
        "item": {
          "id": "1f82f0d3-2b91-4a8e-b5b3-ae5b5f029079",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4337fd2f-c534-4207-a78d-8e1be956ba65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf04a45-7b19-49b0-b9d0-0ba2ab5926ee",
        "cursor": {
          "ref": "bc86eeb8-8190-435f-b594-f8bdb93c7115",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ebaf522a-12a6-4dd4-a186-3d6811947037"
        },
        "item": {
          "id": "0cf04a45-7b19-49b0-b9d0-0ba2ab5926ee",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9e40a3d6-224d-434d-9a46-fc20f8f4b559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5642f49-08c3-4ebe-a1ca-ee04e1611192",
        "cursor": {
          "ref": "6cf1fbcb-32e4-4368-b5e8-7a989c45b40d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4ce2a225-dc1c-4af0-a551-8d08f2e1335e"
        },
        "item": {
          "id": "d5642f49-08c3-4ebe-a1ca-ee04e1611192",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fe6f5ed8-1fd8-4d11-9ace-2b7cd4316de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1657d45c-2c3e-4f6a-a949-def24b01b7f2",
        "cursor": {
          "ref": "af4f1859-c1c3-48e4-83dc-ff5f6870e0fd",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3a5d5a2b-1c60-4d0b-833e-fbccc09da90c"
        },
        "item": {
          "id": "1657d45c-2c3e-4f6a-a949-def24b01b7f2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b7993395-63b9-4bdb-bbcf-3b8845a0ef04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68c8db3-c654-4737-8acd-6a41758f8cea",
        "cursor": {
          "ref": "2a6d30e7-b754-4680-bdc1-b6142d7c7465",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2ad16ba5-ae30-4c78-937b-a318bf8504a5"
        },
        "item": {
          "id": "b68c8db3-c654-4737-8acd-6a41758f8cea",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "325f8047-6794-4c23-b510-ccf6736f1bcb",
          "status": "Created",
          "code": 201,
          "responseTime": 650,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "440539bd-6278-43ec-bea5-822c27f863e0",
        "cursor": {
          "ref": "982cb54e-0a37-439f-8cd9-f0999917e8a2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a2305bf3-35ac-4a93-89df-e4b450345870"
        },
        "item": {
          "id": "440539bd-6278-43ec-bea5-822c27f863e0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "feb1bfb7-72ae-4086-9e61-1a6bbb546332",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d5ec52c2-43cf-4ab5-8364-69eaab690414",
        "cursor": {
          "ref": "adf26bef-2a44-42e1-b48a-7cd1c6700299",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a1e19352-4ca1-4d0e-b116-9bfdbe946c7e"
        },
        "item": {
          "id": "d5ec52c2-43cf-4ab5-8364-69eaab690414",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1ad8730a-5130-4e4a-81bb-6e04a08cbabc",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2cbf2bd6-31f1-4018-95ff-fde254eae6b0",
        "cursor": {
          "ref": "edb3a475-697e-4cfa-bc7f-99310bc9b049",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c995b890-8add-4d85-90a3-8887f2971e73"
        },
        "item": {
          "id": "2cbf2bd6-31f1-4018-95ff-fde254eae6b0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "80ecd7e7-d7da-4506-8d43-e817ac9d4a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fd2f9a-f304-4f41-a2e3-35c7e348fa06",
        "cursor": {
          "ref": "49fafee9-9330-4151-a900-28f5dda93bad",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aa27a03b-df87-4dab-b234-10aef63580f2"
        },
        "item": {
          "id": "a5fd2f9a-f304-4f41-a2e3-35c7e348fa06",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "044f4cb9-c9be-4688-8f07-49c71997dfaf",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9670ef13-1d6d-4e15-8b23-359adab81fb8",
        "cursor": {
          "ref": "461f5b8e-bc84-45d9-a25a-ea1e496999cd",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b9343c2d-8882-4848-b6d5-d9da3b723695"
        },
        "item": {
          "id": "9670ef13-1d6d-4e15-8b23-359adab81fb8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8fd595e7-5d8c-4cc6-8554-bc09188ab188",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9eeada80-5cdd-4516-95c3-ab47d5cde798",
        "cursor": {
          "ref": "9a1d2195-f0fc-49c1-9a54-7050139e2e2b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "dee2f8e5-2967-42d0-9068-0123729f3bed"
        },
        "item": {
          "id": "9eeada80-5cdd-4516-95c3-ab47d5cde798",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2dbb64b6-08e5-49e8-b1c3-d8a1aa71531d",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "87eafef9-fb85-4952-9c7a-eed1201166c9",
        "cursor": {
          "ref": "e29651c9-a13a-409f-b3bb-8509cb391a2d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ad14e825-8fa5-4d75-b479-241efe5b6d43"
        },
        "item": {
          "id": "87eafef9-fb85-4952-9c7a-eed1201166c9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5875bc39-4c97-46b8-a2e1-8f7bfbb4e825",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "25f09af8-ff21-4d01-8faf-0a4e52f8567a",
        "cursor": {
          "ref": "5dcebe60-3c44-4553-aaff-a232a2ecd697",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a99914a4-a3e1-4e83-9aca-ff3763835b62"
        },
        "item": {
          "id": "25f09af8-ff21-4d01-8faf-0a4e52f8567a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d8d577d4-b287-4f40-94cb-88c06d11adb9",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "86ba8978-11f9-49ab-8156-9bca7425954e",
        "cursor": {
          "ref": "f6315794-04fd-422b-bd1b-d9f58811fc47",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f7053874-01c7-4de2-9ee1-8e62c935a03b"
        },
        "item": {
          "id": "86ba8978-11f9-49ab-8156-9bca7425954e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a2480f1e-5fc8-4337-af1d-beac49be08bf",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "617cc7b5-c27a-4f33-9736-182a2a8df713",
        "cursor": {
          "ref": "987a7330-3c39-4316-b51d-c2a041cbe495",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d7ff5704-a70b-4ed3-bb80-110deab8120d"
        },
        "item": {
          "id": "617cc7b5-c27a-4f33-9736-182a2a8df713",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "66465500-37b8-41a5-a560-0b73b562eed4",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "312913a9-67b0-402f-b9ee-58ea68e3a698",
        "cursor": {
          "ref": "56fca977-832d-423e-b919-4820e505b590",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bb6945c3-fb9a-44b8-861d-9b0b830e6e97"
        },
        "item": {
          "id": "312913a9-67b0-402f-b9ee-58ea68e3a698",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "48783802-88a3-41d8-8fc7-ffafea47a5fb",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "58c3feee-1ee1-4a35-9598-9d69cbc5cea6",
        "cursor": {
          "ref": "d975ea86-eaaa-433e-932e-0336e2c80d4a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "61f309cc-f9f0-4e5a-8905-5ed9ea3bee91"
        },
        "item": {
          "id": "58c3feee-1ee1-4a35-9598-9d69cbc5cea6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "55e0ce43-bdbe-4aa5-96a1-ad0e7e100b8d",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "59cefd11-036d-4c4d-9534-7628a17dee39",
        "cursor": {
          "ref": "6ee65a91-c73c-48a3-8641-e4a22cdee4f3",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7d990b58-7d14-44cb-a02d-37c52661bba2"
        },
        "item": {
          "id": "59cefd11-036d-4c4d-9534-7628a17dee39",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "faed9b61-fa7d-466a-9905-6c356ad88ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e118d9f-4450-4e50-88ac-3d23afff040a",
        "cursor": {
          "ref": "1c0929c4-1153-4f25-908a-48afa7046752",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9db5b37e-f6a0-4a61-a5ca-0fb0ca228486"
        },
        "item": {
          "id": "8e118d9f-4450-4e50-88ac-3d23afff040a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "26ba695b-a319-45a9-baa5-bd0184816149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c5d1dd-52be-4f4c-99b4-73dcc35ca538",
        "cursor": {
          "ref": "660e37d4-7f08-46db-9ecf-25e888fd8db2",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a7b7d72f-11c7-4efa-b16b-d9cc21f4f69f"
        },
        "item": {
          "id": "66c5d1dd-52be-4f4c-99b4-73dcc35ca538",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "113d6798-9e41-49b8-99bf-7d6c51315d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51aed9b5-e6e4-479d-96ba-14a58a4a840c",
        "cursor": {
          "ref": "acf7350c-2ba1-499f-b84e-93e2c6c3fe87",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "986299b8-42e3-47d7-8e57-1238df0578b4"
        },
        "item": {
          "id": "51aed9b5-e6e4-479d-96ba-14a58a4a840c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fbad0073-08eb-4992-9428-d33b6f12c4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5979d91-f73c-4dd2-a652-727dc11ba9c1",
        "cursor": {
          "ref": "cdb3f9cf-66b9-46d3-9749-d22abfbd0f67",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "97af6c38-095a-4fc5-b6d2-e8c39db48134"
        },
        "item": {
          "id": "b5979d91-f73c-4dd2-a652-727dc11ba9c1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "775d6b3e-5531-46e7-8523-67bae36ae324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22789fa8-d55a-4d76-83e5-7325a0425f23",
        "cursor": {
          "ref": "3f8da900-369b-494e-a0c8-5f89bb87d805",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ada9aa09-24f6-488c-8736-01e948f3a821"
        },
        "item": {
          "id": "22789fa8-d55a-4d76-83e5-7325a0425f23",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "15c5898c-1da9-4d06-ae06-41a467a1cf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcad836-f234-4e41-984d-de80984141d6",
        "cursor": {
          "ref": "a2d81bb6-4e8e-4635-a335-3811c1269a73",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "513cbda3-5d8a-491e-9fd7-3b430bd699ab"
        },
        "item": {
          "id": "cfcad836-f234-4e41-984d-de80984141d6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5deccbb3-c4a2-47b8-af47-267434434844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5354fb4-c937-4148-96e5-4ddf55117997",
        "cursor": {
          "ref": "9d7a0eeb-9d06-488a-a25b-d9430a965e37",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "725ab49f-1d94-4fe9-9f22-f8df09ef0e8c"
        },
        "item": {
          "id": "c5354fb4-c937-4148-96e5-4ddf55117997",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "54cea98d-bb25-4ce9-92c6-c4e59347ca4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb3eba5-a08f-4eb1-9cf2-9049abc93d54",
        "cursor": {
          "ref": "e201aa40-7fc6-4056-a022-36c29c5f89b0",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "85bb2f38-4772-492f-9ec8-2f29308d99cc"
        },
        "item": {
          "id": "1fb3eba5-a08f-4eb1-9cf2-9049abc93d54",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b314723d-e845-470b-b656-0cc65d95bf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a0e6b9-60ff-4c84-be1c-804de701eede",
        "cursor": {
          "ref": "f34bbc0c-8f5b-43fd-87b1-185270f2e10c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e04a115c-9417-4292-90e6-533846448ffb"
        },
        "item": {
          "id": "53a0e6b9-60ff-4c84-be1c-804de701eede",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5f61ab61-6ef2-4ef1-bc1b-41cd429e9f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68441cf-a563-4ef1-aa52-98f028bf3ae1",
        "cursor": {
          "ref": "f1c8d369-6af2-4234-b567-f777121a9d81",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6a1a2711-7f0b-48a6-866e-94fd03fb0626"
        },
        "item": {
          "id": "f68441cf-a563-4ef1-aa52-98f028bf3ae1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "73409318-753f-47a3-a75f-5613e94e69d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df21607a-e380-48d1-8133-f344aec62aad",
        "cursor": {
          "ref": "9dba4099-a63b-4910-a187-0cabd4fec15e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4203157f-0378-4a86-84cc-192c00266f11"
        },
        "item": {
          "id": "df21607a-e380-48d1-8133-f344aec62aad",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3b4dea38-562d-480e-abaf-e26b7df91ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9788bb7-752f-48c8-b2c4-e7f7892af140",
        "cursor": {
          "ref": "210c6062-c557-4b0e-856e-102c3650b628",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c997e23b-622c-49be-be2e-3217e81f1fdd"
        },
        "item": {
          "id": "d9788bb7-752f-48c8-b2c4-e7f7892af140",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "49d63d46-e667-4aa6-add3-736a22b592ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8852fc-8d7e-47d4-9b8c-3e73f0cb6903",
        "cursor": {
          "ref": "6d4cea5f-8e68-4843-b26d-d01729f148b7",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0c24255d-de87-42d2-814c-4cb387a6b4b6"
        },
        "item": {
          "id": "3a8852fc-8d7e-47d4-9b8c-3e73f0cb6903",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "77575772-9aff-4398-a2e1-7b941c51ff2a",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0b1e7df4-40bc-40ff-af26-8c809e2b53f6",
        "cursor": {
          "ref": "32941314-7f72-41a2-b028-3bd17484f9ec",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e17a5ec3-5363-439b-ad20-bb215b5cfc53"
        },
        "item": {
          "id": "0b1e7df4-40bc-40ff-af26-8c809e2b53f6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "51feb49b-2da6-4481-b715-95b9a809d1e3",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a116110f-96eb-4c45-bd78-5ff48770dcb0",
        "cursor": {
          "ref": "d89a6400-a460-4722-bfc8-13f3c46111c2",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "004a1237-d5fc-42d2-b8e6-d4f8e0443079"
        },
        "item": {
          "id": "a116110f-96eb-4c45-bd78-5ff48770dcb0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3b92e411-0908-4723-b33f-05dfcfb0ccea",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "02970292-ffc3-4c2f-8291-38fe025febeb",
        "cursor": {
          "ref": "6839aed7-9596-4b40-b9ec-64811ae07dc7",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3ac84154-e55e-4634-87f7-6ef28ce2adb2"
        },
        "item": {
          "id": "02970292-ffc3-4c2f-8291-38fe025febeb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "09f79afa-f0f3-4db1-8719-c54e2b86bb9d",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d4d3fbde-0010-4621-8b0f-84197b39c489",
        "cursor": {
          "ref": "94459ee1-f927-4854-83db-b882293d98ff",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4870ab47-694e-499d-be2e-d4bc86eafe54"
        },
        "item": {
          "id": "d4d3fbde-0010-4621-8b0f-84197b39c489",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c31a51bd-7afb-4c20-8cc9-4727b5624d23",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7891663a-f1a6-4468-88ab-b5e12955fc76",
        "cursor": {
          "ref": "e2e69bbf-3557-42ce-a301-b3f8d64869e2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ddd124db-7ab8-4278-9a88-9581d35e52cd"
        },
        "item": {
          "id": "7891663a-f1a6-4468-88ab-b5e12955fc76",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "717ec530-ce00-4428-9ab4-698b63c4ad8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2057a5f-5038-4759-adb8-834c78e048bd",
        "cursor": {
          "ref": "598da297-fe29-4a72-8af6-38fd683b69f6",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "42bd1212-e8b2-49ab-9f11-54d173a21701"
        },
        "item": {
          "id": "b2057a5f-5038-4759-adb8-834c78e048bd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7928c5ba-aada-4732-b968-55f8bb1ff5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0035ef-d7ca-4ae4-a547-28c5cda7a5a3",
        "cursor": {
          "ref": "a810335b-aebe-4b55-9d55-6414012a4b2f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3c3c9e96-e93d-426a-9e95-bcbf2b67d54e"
        },
        "item": {
          "id": "4f0035ef-d7ca-4ae4-a547-28c5cda7a5a3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cde0932f-ed67-4b70-8ce1-3b4a065057bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a9058d-27d5-4eee-a99f-96f9ef8e24cf",
        "cursor": {
          "ref": "86b00773-7b07-4204-bbce-076e4ca37c37",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "081387c3-6c05-4ad7-a08b-13a99cb953da"
        },
        "item": {
          "id": "a2a9058d-27d5-4eee-a99f-96f9ef8e24cf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "edfce453-00e7-4300-8667-88ce86d25ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a90ba9-2135-4454-b90b-584ce0d95096",
        "cursor": {
          "ref": "bc220349-d4e9-4ae1-953d-1bd37e0ca0a7",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6a539bc5-9bec-46a7-bb5a-bbe459e45a3d"
        },
        "item": {
          "id": "60a90ba9-2135-4454-b90b-584ce0d95096",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "28513a94-309a-4ba7-8887-882b0172cdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f88d5eb-c24f-4707-856a-944b03a0346d",
        "cursor": {
          "ref": "4c41b65f-5926-4c09-8bfc-42ab8c058bd8",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5f26e7ac-40d1-4bec-8f1f-34ef58de9e54"
        },
        "item": {
          "id": "9f88d5eb-c24f-4707-856a-944b03a0346d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "083c5387-62f4-4edb-a69c-36ec4cad476a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cc9344-31d1-44d1-83b0-b06da07e4baf",
        "cursor": {
          "ref": "961ae736-094a-4cfb-82d7-38371e914209",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cff2ba35-090a-4fa5-9129-f0a96fa1106a"
        },
        "item": {
          "id": "09cc9344-31d1-44d1-83b0-b06da07e4baf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "79b30d83-a1c5-4639-b64f-a4c765b5eb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a34701f-114d-445d-92b0-1adbe1021623",
        "cursor": {
          "ref": "16eb342f-e513-49ce-99b3-1145754bf281",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "99a6fda3-a6ff-4127-b16a-8f44a5102bb9"
        },
        "item": {
          "id": "0a34701f-114d-445d-92b0-1adbe1021623",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "33d38560-b0bc-438a-a2f2-2b2ed367309b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62105dd-59cc-4330-92b0-2ae858e76b8b",
        "cursor": {
          "ref": "3c476b7b-4274-47f9-99a0-de45cae9c02a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2c1326d4-2945-4927-b000-b887ef0eb52f"
        },
        "item": {
          "id": "c62105dd-59cc-4330-92b0-2ae858e76b8b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b1cf5a86-b7d4-4c78-907a-73b066d51821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd784ece-1a3d-42ad-8de5-20d288b2efc9",
        "cursor": {
          "ref": "8bda1893-4313-48ab-8e53-0a01007d272f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "86718156-4f86-45f4-b010-9c534dcc114f"
        },
        "item": {
          "id": "bd784ece-1a3d-42ad-8de5-20d288b2efc9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7cce32e7-c215-446d-b649-e70df029ce53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66609118-7717-4237-b3cf-947266a0a94c",
        "cursor": {
          "ref": "f019ac9c-8f22-4188-b9bd-5269cf3c2708",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a637580e-33e0-4177-9b3f-07265a661109"
        },
        "item": {
          "id": "66609118-7717-4237-b3cf-947266a0a94c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fd2fba6b-e731-4f8d-90b5-07a24572bcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28b6dad-3d38-4565-ac3c-860528c9f026",
        "cursor": {
          "ref": "e6de6462-ef5b-4bef-8f4d-f411f3fa20ab",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "25d2805f-59ba-4fb6-acc3-ec30548d0e48"
        },
        "item": {
          "id": "d28b6dad-3d38-4565-ac3c-860528c9f026",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c8961b79-23dc-4a9f-9ccf-067493d660e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98aa6f3c-ddc1-4456-aaef-791acf2030b4",
        "cursor": {
          "ref": "0a5dbe75-340e-4b3c-9f2d-91cd168c8ab4",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3b30d830-656a-4742-ad51-7b795ea85686"
        },
        "item": {
          "id": "98aa6f3c-ddc1-4456-aaef-791acf2030b4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "99a1c593-5ac0-4238-bfef-d547da01c360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd0ba85-ce6b-423b-87c1-c8835d30d8ca",
        "cursor": {
          "ref": "4b8437ba-e270-4420-8289-79462e972537",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bf474421-71c1-415b-9e6e-0391af0cc8fb"
        },
        "item": {
          "id": "ebd0ba85-ce6b-423b-87c1-c8835d30d8ca",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1a364ba4-f285-4f25-8b47-46e758206e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd71fef-b182-41ed-894e-fc82ceb668c8",
        "cursor": {
          "ref": "00929732-4a6a-419c-a1b2-e0700d042873",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "85f0f3b2-c15a-471f-94f4-9fe82468ef5a"
        },
        "item": {
          "id": "acd71fef-b182-41ed-894e-fc82ceb668c8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "297e58d6-1014-4ca6-a678-c759a5a70a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e876770-ca09-46ab-b5d3-d1b88277c5a8",
        "cursor": {
          "ref": "7e2e830e-190c-4840-be5d-7f678dae8098",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5ffe42e2-6b1c-4ec7-8ad1-2fdfe48ead79"
        },
        "item": {
          "id": "5e876770-ca09-46ab-b5d3-d1b88277c5a8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0e00fc75-f6d2-44ca-bb79-547f83c0364d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24b22d0-28d3-4173-b402-81ad5bb6e834",
        "cursor": {
          "ref": "88518791-98d6-45c4-9858-6adae3df24bc",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b4bade80-0739-4c72-a15f-b95f1b4bb922"
        },
        "item": {
          "id": "b24b22d0-28d3-4173-b402-81ad5bb6e834",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1706f7ee-b9cd-49d4-860e-1a4445308832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5df41ac-96c8-4458-88db-9af1ddb59f78",
        "cursor": {
          "ref": "49847775-ff45-4cac-99cd-2a8e30d4f0f9",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ae1b4efe-eb4c-4c93-9a0f-d892cee9438b"
        },
        "item": {
          "id": "f5df41ac-96c8-4458-88db-9af1ddb59f78",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "dbe312ea-816c-4567-aeff-b582521fc16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6cb450-a10a-478e-aff7-5a8fba42fcd2",
        "cursor": {
          "ref": "172472bc-e5e3-4fa9-8d6a-f29a0775749a",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5b9e25a6-df4b-4771-a14e-3d7d2bf714be"
        },
        "item": {
          "id": "5c6cb450-a10a-478e-aff7-5a8fba42fcd2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "77ecfa0d-0503-4305-9ff7-229fb8d0d73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f22675-2063-4669-bddd-61fb6a4833d8",
        "cursor": {
          "ref": "57343300-b533-4ad8-ba1e-07eac255734c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a6db3aaa-3627-4145-95e8-7e4abecddf12"
        },
        "item": {
          "id": "31f22675-2063-4669-bddd-61fb6a4833d8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8368c77f-5d2f-4abf-902f-09ded3ad4fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f66797-18cb-49ff-ada3-e326628ca09c",
        "cursor": {
          "ref": "7cf31e47-9ec4-471a-be1b-5d9ad7463f5d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3fcf6c94-956d-4957-9e2b-76cf7893363e"
        },
        "item": {
          "id": "88f66797-18cb-49ff-ada3-e326628ca09c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6f4942ff-b324-48d3-aa0a-a580ca50a6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c488b358-6ece-4ce2-8724-dbc87dedd3e8",
        "cursor": {
          "ref": "69a1611a-1092-4e65-bfc5-5cb16f8f27a0",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7388051c-b746-4114-bddc-26901f9dfbac"
        },
        "item": {
          "id": "c488b358-6ece-4ce2-8724-dbc87dedd3e8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "628d3594-4965-4f4c-bda9-ff443238e50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f1d0c7-bae4-4caa-bd27-907876f8fbf4",
        "cursor": {
          "ref": "d91609ed-ebd0-42b8-8704-da22f1516112",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f8a7af68-9032-410d-91aa-dba2f072c035"
        },
        "item": {
          "id": "a6f1d0c7-bae4-4caa-bd27-907876f8fbf4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "86dde14a-de62-4cef-9e29-96c8f3086198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57833edf-c8a1-4c72-9a92-0ebd51a65493",
        "cursor": {
          "ref": "3c9468cd-6764-4724-838b-353fab437b8f",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "19a548b5-30a8-4065-992d-0defb1565cb5"
        },
        "item": {
          "id": "57833edf-c8a1-4c72-9a92-0ebd51a65493",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9f54fe1b-9194-4598-8b2e-cd1fea45dd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a85e399-fce4-4cf4-8643-7db4286a9f99",
        "cursor": {
          "ref": "b687f7e2-ae4d-4664-a938-892f6afaccd4",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "34444548-9a13-4eea-8f2e-7179764888f4"
        },
        "item": {
          "id": "1a85e399-fce4-4cf4-8643-7db4286a9f99",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a6bdcb6b-2639-42a1-94ca-f768c97be185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34485e49-1bcd-4bac-8331-60db50b991f6",
        "cursor": {
          "ref": "9506eecb-f6fc-46f9-ba20-3fb6a6f0b97a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6a305fe2-853a-4808-8304-2a654d9ac059"
        },
        "item": {
          "id": "34485e49-1bcd-4bac-8331-60db50b991f6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b10e45d3-f006-4033-a05b-f0c5c034d386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034ab410-7b13-4553-93eb-71302e3777de",
        "cursor": {
          "ref": "ae025bf7-4d25-4f05-8280-6ea20bd8208c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "702ec05d-fbf9-4021-ad95-93d2fcb7355d"
        },
        "item": {
          "id": "034ab410-7b13-4553-93eb-71302e3777de",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "606565cb-54ba-4498-9274-ecd9eae586f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931bbf3a-2804-4da5-a08b-00e29ceb8c88",
        "cursor": {
          "ref": "297c75db-b561-49a2-a8f8-48255d0f0a78",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b410a9aa-2844-450e-b6d8-737c1f55537b"
        },
        "item": {
          "id": "931bbf3a-2804-4da5-a08b-00e29ceb8c88",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fe213f3f-5d02-466c-a5b0-4d7bf3e82431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd501640-0042-4c2d-b9f4-a3e3f344a03c",
        "cursor": {
          "ref": "bc7438be-ddc1-44a8-9d0c-41004c90307a",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2ffe097a-ebb4-4118-b328-aa8f07fc1a65"
        },
        "item": {
          "id": "dd501640-0042-4c2d-b9f4-a3e3f344a03c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ad806d12-410c-4d9e-ad8d-33dd4b141fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74871274-f95d-4eb3-9717-c7871af109a5",
        "cursor": {
          "ref": "914148c1-9429-43e7-b54e-1e28cf9e0fc4",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a01c5f06-1dde-42fa-a946-07ed7a739e49"
        },
        "item": {
          "id": "74871274-f95d-4eb3-9717-c7871af109a5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a23a328d-3528-4894-8909-241bf91b1065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cfa0a3-17ff-474d-8cb9-4fb2653eddf7",
        "cursor": {
          "ref": "96b307cf-0e66-4e62-9d4d-2f786b6c2d59",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2ec89733-68df-48a0-b646-e870a2939a46"
        },
        "item": {
          "id": "e9cfa0a3-17ff-474d-8cb9-4fb2653eddf7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a5510c46-4593-438c-ab8e-bbc43f7b9a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de99ec17-78f0-4cd6-84a8-915483037714",
        "cursor": {
          "ref": "cfc46032-b5f4-4148-ac18-968d68021dac",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d732fba0-45b7-4f5b-8703-a90ef62ad1d7"
        },
        "item": {
          "id": "de99ec17-78f0-4cd6-84a8-915483037714",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e9be99f7-a16f-40cf-9c82-bf19e21a6b27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd1e6f6-6181-4fe0-a9f6-9dab3698d281",
        "cursor": {
          "ref": "94ac5371-6b7e-414a-baa7-d7e9528433b4",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "519b736a-a975-4837-a12c-a97928f3b98e"
        },
        "item": {
          "id": "5cd1e6f6-6181-4fe0-a9f6-9dab3698d281",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ab1a512f-147a-40b9-9921-34114b20fa2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9df3f6d7-d5f6-42a8-bacb-12ddbd2006d0",
        "cursor": {
          "ref": "973e044c-233c-436a-ad16-9df53a8c9cf1",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0c762bba-ac7b-4d60-a128-e8f75beb7ad5"
        },
        "item": {
          "id": "9df3f6d7-d5f6-42a8-bacb-12ddbd2006d0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cdce3ce0-713a-48b7-8f0a-6adfb9d82fc8",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "24123600-8d12-4a77-8019-77d4d35c2907",
        "cursor": {
          "ref": "79ab7829-282d-42df-babf-25e9105ff076",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "033465b9-f4c6-4d1d-9e4c-a7770ba91c5e"
        },
        "item": {
          "id": "24123600-8d12-4a77-8019-77d4d35c2907",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "26a6896e-a5d3-42d2-91fb-4fe4fe447fbf",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdeba241-79f2-4b1d-97e5-89c568843244",
        "cursor": {
          "ref": "dd438448-93f1-435b-b968-2b07b9663ff6",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "eb022954-880d-4f83-8e2e-81940113bbcc"
        },
        "item": {
          "id": "fdeba241-79f2-4b1d-97e5-89c568843244",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5dc63073-9cf9-4c4e-9c8e-a25d61a71e22",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5602cdac-286e-467a-a993-6780736c34e9",
        "cursor": {
          "ref": "5bd3729b-f9ee-4651-b634-1df77058bb0b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a40894f5-fe20-41a6-b431-2f4ad0135bee"
        },
        "item": {
          "id": "5602cdac-286e-467a-a993-6780736c34e9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "31a84701-1156-4a0e-8e30-f5ce576e2dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "51991ff7-4db4-4689-b0e0-583f945c1b10",
        "cursor": {
          "ref": "0eb74aab-4f25-4d06-98ab-2623f6d23119",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cf2b9fec-0b6c-4fc0-ab55-cd9b17c6d62a"
        },
        "item": {
          "id": "51991ff7-4db4-4689-b0e0-583f945c1b10",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ddabce48-3dc1-435b-9d5d-6ff12fec8aa0",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-10T00:37:11.747Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-10T00:37:11.747Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9879c6fe-184d-4d6b-af8e-0ccbe2f77011",
        "cursor": {
          "ref": "936cf957-1a09-46f6-a2b2-1d9e235775e0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3bc3cf30-a35c-47bf-8516-22bb9f30de93"
        },
        "item": {
          "id": "9879c6fe-184d-4d6b-af8e-0ccbe2f77011",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "dd9741ec-d359-4f7b-b34c-46bf2397acce",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204051e7-31b4-4a16-b733-5564fa73a747",
        "cursor": {
          "ref": "96ec378e-c94c-475e-9934-40314409d450",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bf7c502b-03fa-43b9-b368-1f1fc76002ee"
        },
        "item": {
          "id": "204051e7-31b4-4a16-b733-5564fa73a747",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f3f3c03b-98bc-4997-9484-ccb86d238db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ceddf5-a5c5-4a80-a853-cc0c6c0e41e8",
        "cursor": {
          "ref": "6ef3b156-af5a-4ea0-941c-f76988cb9d9b",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1199f0e5-6109-45d3-aaf8-d2098132ff5e"
        },
        "item": {
          "id": "42ceddf5-a5c5-4a80-a853-cc0c6c0e41e8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a67cfa32-3a0e-464e-8275-f7376de8ad33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d562cc23-1ba8-4df2-b8fa-1009f517fbce",
        "cursor": {
          "ref": "17d75347-9aa5-46cb-a9da-2f0f01840d95",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1e1962aa-0368-4e7a-89df-cbb5e7a8a37d"
        },
        "item": {
          "id": "d562cc23-1ba8-4df2-b8fa-1009f517fbce",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c0249b26-96db-470c-8c22-480227620898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43f7c99-5b27-4a02-8c60-f4c6957c6a6d",
        "cursor": {
          "ref": "d8a1ff5b-102b-4003-872b-11482736fca8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "79d4e6fb-376f-4d5f-a97b-9e8eb122a894"
        },
        "item": {
          "id": "f43f7c99-5b27-4a02-8c60-f4c6957c6a6d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4cd5c734-1919-4957-b006-4f80ff5a1137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5832f392-461e-4623-ae71-3583c04986f4",
        "cursor": {
          "ref": "2d2a0257-cce0-4696-8eaa-da80449b3851",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "15c4fdc6-f120-4a1d-854b-36bea97f6512"
        },
        "item": {
          "id": "5832f392-461e-4623-ae71-3583c04986f4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8d017fe0-cfa3-4db0-af95-019006aefd20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57891ac2-f37e-4fa6-b118-8a1e3d589940",
        "cursor": {
          "ref": "7173f0c4-0df9-45d2-a032-a66eb168ab1e",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c225a4f4-3dcd-4fa7-b45c-8b8654e4610f"
        },
        "item": {
          "id": "57891ac2-f37e-4fa6-b118-8a1e3d589940",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d6af5978-7e01-49fd-8cd2-ef852f633560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1796cc6-8d38-414f-a585-6cd5af6b4194",
        "cursor": {
          "ref": "8ee0aa4b-3d98-4e4b-a285-758f0d9ceb23",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c0ce79ca-3b97-4bf2-9171-8db648f10164"
        },
        "item": {
          "id": "f1796cc6-8d38-414f-a585-6cd5af6b4194",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f8120a2d-5e7b-43ec-9229-cf81bde5eab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e025c955-93f3-4952-88fc-e4ebe5f94eff",
        "cursor": {
          "ref": "04acd283-95d1-4689-84de-6e76560ac34b",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a1300b83-371e-4f8b-91ef-6bb7f42dbabe"
        },
        "item": {
          "id": "e025c955-93f3-4952-88fc-e4ebe5f94eff",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2c4c9500-56f9-4453-849c-effef43160ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d65808f-cfc3-4096-8a25-53b723644bea",
        "cursor": {
          "ref": "97e6e191-338e-4a36-92f4-9f971c6f31d6",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c31754b4-2198-419b-a820-8413de4384e3"
        },
        "item": {
          "id": "6d65808f-cfc3-4096-8a25-53b723644bea",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9ad4cf9a-1c75-4bbd-bf39-7d712f39c480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285d203a-b39a-4879-a182-536bea7694a5",
        "cursor": {
          "ref": "60977954-37ae-4e76-9b1e-648754544a57",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c46f9e1c-eb3e-4a66-8810-14185e78780b"
        },
        "item": {
          "id": "285d203a-b39a-4879-a182-536bea7694a5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "29952bc3-5af3-4a79-91be-c398bf5d420d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c2b1ae-69c6-4229-a7bd-a12bac21850b",
        "cursor": {
          "ref": "57edb86c-8894-4630-bfd1-49e9f33ee1a1",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2c643804-b92c-4613-941e-f5fb7dd92bbe"
        },
        "item": {
          "id": "82c2b1ae-69c6-4229-a7bd-a12bac21850b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f3979401-6394-4442-ad25-d33737473e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db6b490-f7ea-4e14-bb3e-eeda770d36b1",
        "cursor": {
          "ref": "943bb1df-039e-4a8e-94b2-20254062de9d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d189528c-7159-4302-865e-72a5dff3ab64"
        },
        "item": {
          "id": "9db6b490-f7ea-4e14-bb3e-eeda770d36b1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c11f3cbf-3037-4155-bcf4-d507d85b6561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e8449e-5f7a-4bac-891f-fa9d69fcd171",
        "cursor": {
          "ref": "4e8942c8-9915-4b43-90e8-3cbd31fb9c3f",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f4e091ab-799a-4e91-8d44-43145255d105"
        },
        "item": {
          "id": "40e8449e-5f7a-4bac-891f-fa9d69fcd171",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b8414311-1506-4e08-9c3a-b6a75bca4de8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "41e7ff8e-0276-4a9d-8067-b66a96c79be2",
        "cursor": {
          "ref": "4953ad87-e754-4511-854e-2be424fb1d2c",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9ded37ec-73e7-4789-b83a-02d712a6ea95"
        },
        "item": {
          "id": "41e7ff8e-0276-4a9d-8067-b66a96c79be2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4703ef48-3277-4e4d-8ddb-2bf40da7974e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "200c9fc4-0fa7-4432-ad4a-30239ebbeb0a",
        "cursor": {
          "ref": "30b6948a-3b39-4bb3-9114-57efc93017a1",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ecc7e271-4cd6-4f02-8269-73777f65de2d"
        },
        "item": {
          "id": "200c9fc4-0fa7-4432-ad4a-30239ebbeb0a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2fa433a0-1e83-4741-bf37-7a96e230b4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613ff15c-30a6-44d3-be34-3b34734f5581",
        "cursor": {
          "ref": "cf73c5f4-f8a8-4b64-903c-982fb5e45068",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "43e61988-e606-4449-8a19-825478c5c2fe"
        },
        "item": {
          "id": "613ff15c-30a6-44d3-be34-3b34734f5581",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c815c89a-b48b-4374-a9e9-20d351e876e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620a79c1-d676-4919-8cbd-1717b187d3c1",
        "cursor": {
          "ref": "9fb76eab-e4c2-49ef-bfc5-f407cfc3e625",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b82bee6f-91f4-4305-b799-c13656551796"
        },
        "item": {
          "id": "620a79c1-d676-4919-8cbd-1717b187d3c1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "73b07015-c48a-4353-b918-3eda2c81d947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e661b3-b82f-4c55-be1c-643437af2f0b",
        "cursor": {
          "ref": "826e5529-3aef-4998-84ba-99805dd84b39",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6503d6b7-3e64-4e0e-a23b-de5852f8524a"
        },
        "item": {
          "id": "d7e661b3-b82f-4c55-be1c-643437af2f0b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "122fe85f-2ace-48ef-af20-2113c12b6223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097129c1-b6ef-4483-8e22-35925c657b1e",
        "cursor": {
          "ref": "9d3985a2-975e-45c2-a7b6-ce8b7fd0185a",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8d7ddf1d-f482-4695-ac9c-5f76f248e356"
        },
        "item": {
          "id": "097129c1-b6ef-4483-8e22-35925c657b1e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9f41249f-0254-4d17-87c9-440d64357a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcea3a9-2dc4-4cd2-8628-02363a0306ac",
        "cursor": {
          "ref": "eea04c9a-a023-4d24-8012-23a99af02e44",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ad349992-e1c3-4a1f-93b1-d5cfd3996b76"
        },
        "item": {
          "id": "7dcea3a9-2dc4-4cd2-8628-02363a0306ac",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "86f2d9bb-a9c1-4e28-81b5-bdb8899c20ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9c526c-8bda-46fe-9c59-145312815d2d",
        "cursor": {
          "ref": "32b253ef-b795-49e2-99e2-802411e14b9b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e3c9714f-1eeb-4132-9bf2-03635810f599"
        },
        "item": {
          "id": "7c9c526c-8bda-46fe-9c59-145312815d2d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "365f6094-7c47-4c52-b8cc-38fc7dff6861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7832a6-3c63-40ba-b884-4f11093b898a",
        "cursor": {
          "ref": "11a3b1da-3ff3-4899-b766-f468011b32eb",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e5c9c8f4-4019-44d1-acfd-54633f5e6dcb"
        },
        "item": {
          "id": "db7832a6-3c63-40ba-b884-4f11093b898a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0900492e-8ec7-4266-aff0-09ad4c1a91d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df822801-5e08-4a37-a283-edd87abb7bb2",
        "cursor": {
          "ref": "dcea04bd-d41c-46c3-b32c-0bbf6f2c9458",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7ead71a9-61fc-4720-9000-f32c36b4391c"
        },
        "item": {
          "id": "df822801-5e08-4a37-a283-edd87abb7bb2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5489a3c2-03df-443f-b805-3f5df71cbf7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80f6b97-99ba-403b-8404-64bb0ac3c3f2",
        "cursor": {
          "ref": "06174e5e-e8bf-44b9-ab7c-eb5643d82162",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f296d911-e6f5-4e79-93f0-59b29a835fcc"
        },
        "item": {
          "id": "b80f6b97-99ba-403b-8404-64bb0ac3c3f2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2eaeef06-1c94-4715-ad36-72718b05fe1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386aedd5-c8b3-45cb-857f-458f1c4876ee",
        "cursor": {
          "ref": "92c5ba06-a6a4-46ac-bb61-1011e632ae48",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3257984a-e8c2-4fa1-865e-935e39560ee6"
        },
        "item": {
          "id": "386aedd5-c8b3-45cb-857f-458f1c4876ee",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ccddf5b6-66eb-4174-82f9-56ef823211eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad4c477-939b-460c-a2c0-ed85e03fc8c3",
        "cursor": {
          "ref": "a29f6df8-e97e-4815-a123-ea524729c6e6",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0a107eca-46af-4a9b-b201-3a4e0e15274b"
        },
        "item": {
          "id": "bad4c477-939b-460c-a2c0-ed85e03fc8c3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a902e19d-6465-4567-9e02-00578d22be2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6389b0a5-7fc6-4bea-b652-095db024dda8",
        "cursor": {
          "ref": "9773c65e-ee7a-4bbd-b3eb-5146e02b2cb4",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "46743d80-a8e7-4327-9930-cbb960467f7e"
        },
        "item": {
          "id": "6389b0a5-7fc6-4bea-b652-095db024dda8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "10567498-41d6-459b-9e01-e43bf4eca23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3971a69-1770-4595-97e0-ea743877a8de",
        "cursor": {
          "ref": "ce1ac924-ae61-48cc-a527-69cb4ad4e1f3",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a83278f0-152f-4eec-8452-4351863ea3e9"
        },
        "item": {
          "id": "a3971a69-1770-4595-97e0-ea743877a8de",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6fb8413c-6647-4b4c-98a3-19285b4b7f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f4dde7-924b-4021-bc9f-941374a88ee9",
        "cursor": {
          "ref": "689766c4-ce06-4d9f-a050-26ef22aee979",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d52e897b-3cf4-4137-a053-6630f2dc0650"
        },
        "item": {
          "id": "32f4dde7-924b-4021-bc9f-941374a88ee9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "45b3596a-5a01-4b2a-ac25-e1a04e2c1317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b47bf5-e7a1-4c56-8794-dfe5999c870f",
        "cursor": {
          "ref": "f67af5ef-aa78-49bb-ab98-ea6b1f58890d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "66dd66cf-825e-4bcc-9fbb-09e4b479237c"
        },
        "item": {
          "id": "05b47bf5-e7a1-4c56-8794-dfe5999c870f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a49154ab-57df-4f7b-88b3-fc7bff1b91ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f415a9-817a-47d2-abc6-db238f03bcda",
        "cursor": {
          "ref": "469a0b0b-b54c-48d7-bc4d-0a87236447c7",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a4ccf79f-7eb9-4318-9898-3c7abf40c9fc"
        },
        "item": {
          "id": "a6f415a9-817a-47d2-abc6-db238f03bcda",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9d00ebe4-fcd3-4cee-8ec2-6f5c9978f4ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4087768-9e29-4a4e-8a6e-e8518be09d65",
        "cursor": {
          "ref": "b03b0b7e-a67b-422e-94f1-fec9f42f2826",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7d858f1e-5fbd-426a-89ea-9e6d2ee67903"
        },
        "item": {
          "id": "b4087768-9e29-4a4e-8a6e-e8518be09d65",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e04bd18f-e47c-414d-8367-d961510e8cd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c9e21be8-211f-41e9-a157-ca3a7edcab4e",
        "cursor": {
          "ref": "b15d511c-fd72-49a3-a93f-390622cf9a46",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8f6b3953-cde5-4ab7-b620-a341a6d5191c"
        },
        "item": {
          "id": "c9e21be8-211f-41e9-a157-ca3a7edcab4e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "02aeb079-8edf-4818-bc92-a622a428fc9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebfbd67-fd8b-4d98-863c-4cfd4085dd10",
        "cursor": {
          "ref": "56d2d01f-9fe2-48b9-b2aa-1194d4977f45",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fb1bb430-3228-4139-99cf-284851bc6743"
        },
        "item": {
          "id": "bebfbd67-fd8b-4d98-863c-4cfd4085dd10",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d22e0ce1-9f23-41a6-a4d1-9fc50b7c503f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc52c77-fafe-40d2-99d8-38fdd1c935b4",
        "cursor": {
          "ref": "fa749b51-d50b-483f-9f38-1241eaf229c3",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "58548a77-d4a9-4bd3-91c3-1ddc498615ee"
        },
        "item": {
          "id": "4bc52c77-fafe-40d2-99d8-38fdd1c935b4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7e60e8ce-c46f-4d07-b348-74e7f96d3f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f089722-c379-4968-ade0-ce22242cdbf4",
        "cursor": {
          "ref": "a4248467-16a0-47c9-b4cf-40c5b79b9c8f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "451cb427-e6cc-41f9-97fd-314190611b60"
        },
        "item": {
          "id": "9f089722-c379-4968-ade0-ce22242cdbf4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d4e51517-9bb2-4639-8ce0-210241b2302b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75aa474-d8da-493d-9e2e-f163be95994e",
        "cursor": {
          "ref": "ee859374-0e07-452d-93f9-fefec310dee4",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c097fa0b-24e1-4f68-ba80-785ae9fef6f5"
        },
        "item": {
          "id": "a75aa474-d8da-493d-9e2e-f163be95994e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "19f9d464-7a69-43dc-9bad-187b91d2de38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9deff5-ebaf-41a4-b7e3-575f9f245254",
        "cursor": {
          "ref": "ee523eae-2060-48a6-8ba2-be28ac5dbf82",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "444ba5d4-14ba-4370-a6f7-28b2d47ac7c1"
        },
        "item": {
          "id": "6b9deff5-ebaf-41a4-b7e3-575f9f245254",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "39d55f9b-a128-4004-ada4-d86978370c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a6087f-63fc-4790-83c3-9def85313ad2",
        "cursor": {
          "ref": "5baa9e30-f12e-4bb5-a4b7-76ee5e5ae9ad",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3235f76a-191c-4971-bf5f-24ccd3ad9ba0"
        },
        "item": {
          "id": "49a6087f-63fc-4790-83c3-9def85313ad2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e1a76a8e-fb24-411b-8a95-77a53ce7a453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0975295f-6ecc-4a09-88bf-3628944e7598",
        "cursor": {
          "ref": "9ea11cdb-fad7-4a1c-9bea-8714def1f213",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1e3c0f0d-4229-43ca-b76a-6b01869d30c0"
        },
        "item": {
          "id": "0975295f-6ecc-4a09-88bf-3628944e7598",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c5b59600-cd2f-480d-8179-28c2121ad5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9745534-f0e2-41e2-acae-881f018146e8",
        "cursor": {
          "ref": "cb9b9c24-2369-4441-8cce-8e233e4a11ad",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "be03ec8b-9491-4efe-9018-63d39b493c78"
        },
        "item": {
          "id": "a9745534-f0e2-41e2-acae-881f018146e8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a0ddf295-c2c6-4a0e-9ff2-cc1a4a3abcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cefa2f-d5f8-4a80-abbd-5c154c33def2",
        "cursor": {
          "ref": "19dcf70c-9b17-44ac-ab9e-1c435ab5e2d0",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "40cfb8b5-fdba-488f-96d6-2bf11f165161"
        },
        "item": {
          "id": "e4cefa2f-d5f8-4a80-abbd-5c154c33def2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9987120b-266e-4a8e-b74e-925f5f3efce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222fc405-61a5-4fc8-a557-8f327bbaacbf",
        "cursor": {
          "ref": "a233193c-ed49-430c-b26d-a565e2a43886",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8e3b9cef-805b-454a-96fb-d6e48b549ea7"
        },
        "item": {
          "id": "222fc405-61a5-4fc8-a557-8f327bbaacbf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "164bf149-29fa-4a47-8e0f-863da17e7685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65812208-502b-4897-8929-affcee561f0f",
        "cursor": {
          "ref": "51cb1fb4-bab8-422a-921a-2620a750d639",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "23faafe1-6f3c-4260-a3ad-90550d2de8b3"
        },
        "item": {
          "id": "65812208-502b-4897-8929-affcee561f0f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "99e8f7d7-4d3d-4904-a64f-6696b733c51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69adae59-5b93-4f58-86d6-97e136bce64b",
        "cursor": {
          "ref": "5058df86-5f97-42fe-9f42-7b5f34d71699",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2f39a4d9-6d9a-40a7-a048-97582cf15848"
        },
        "item": {
          "id": "69adae59-5b93-4f58-86d6-97e136bce64b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9fb71a56-a973-4f00-b0c3-18283c8d6947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd1036c-b866-4124-88d1-e34e21d26db6",
        "cursor": {
          "ref": "c9dcfdf3-90ca-4cdf-9bac-04f6b06850e6",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "918cd7f7-af79-43b8-af11-e71b2141fc4f"
        },
        "item": {
          "id": "fbd1036c-b866-4124-88d1-e34e21d26db6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4a29ea1e-82e7-4c92-b9c4-34c40cfa0e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6e1002-1c91-47bd-9561-9c9c5163ba70",
        "cursor": {
          "ref": "832d9d88-1178-4da7-8861-bdb275e00732",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6619e711-19e9-477d-b3fe-a3d932dd4516"
        },
        "item": {
          "id": "6c6e1002-1c91-47bd-9561-9c9c5163ba70",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b1f630e0-f06d-4f13-bad2-c0aa5b1a42b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "2c5f360d-a908-412c-a564-915ed760687a",
        "cursor": {
          "ref": "f84a3e5c-5265-48f1-87c7-227ad57fffa5",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9db7c753-e93e-4e05-86ff-f47dc47b2a54"
        },
        "item": {
          "id": "2c5f360d-a908-412c-a564-915ed760687a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9b60947d-b752-4f30-a727-4d70e5108b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1636b6d-e4b1-40ed-9eb1-2b1b3090f5d4",
        "cursor": {
          "ref": "da5bc143-f8b0-430f-8cba-7ade18069faa",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cca59d57-e106-450b-87cf-14b7965c83e7"
        },
        "item": {
          "id": "b1636b6d-e4b1-40ed-9eb1-2b1b3090f5d4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "be7d09af-ffd7-494b-8f2c-e44f6aed7a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d512e8-5e05-4b4c-91ae-77b72432231d",
        "cursor": {
          "ref": "d0b7ad84-d085-45a0-bb2d-3d6d403e38b7",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0e0359d0-cc59-410f-8656-aade343e6448"
        },
        "item": {
          "id": "d6d512e8-5e05-4b4c-91ae-77b72432231d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0d894365-8757-4da5-be14-7cb2bb2919c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00419eec-86b5-405c-bb64-ebd19d750ab5",
        "cursor": {
          "ref": "657f32ee-4c3e-46be-970a-67690e9bbf67",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ff38aa0d-3ce8-4c03-9ede-44e5d9b1e5a8"
        },
        "item": {
          "id": "00419eec-86b5-405c-bb64-ebd19d750ab5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5ebbdfe4-b2db-4199-bfed-55fa6639b549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e374f8-1bf2-439a-8996-ad13804c78d4",
        "cursor": {
          "ref": "72547593-e1f8-495e-900d-b470c40dbecf",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "98f6602c-0028-418f-882a-a5ab6acddc1d"
        },
        "item": {
          "id": "73e374f8-1bf2-439a-8996-ad13804c78d4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b7784149-b9fe-40f3-b25b-28baf86ad22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24332eb9-1917-4c8e-b923-6a5ecf229b3d",
        "cursor": {
          "ref": "5eb71958-a1fa-4ecf-8c66-27245cd7e88c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bb4a3bd5-778d-4641-b356-21e82ef2b2da"
        },
        "item": {
          "id": "24332eb9-1917-4c8e-b923-6a5ecf229b3d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ff1a0e70-79b8-44fd-bcfc-2847a5a34cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6325e780-d15c-4e32-934f-052d09f597fb",
        "cursor": {
          "ref": "3eebd88d-7922-4b9b-b4f7-439535a5580c",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d6ec5727-6c9e-4ccc-8e6a-09e9d20b7634"
        },
        "item": {
          "id": "6325e780-d15c-4e32-934f-052d09f597fb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "753c58c5-dca5-47c1-aadf-48d70c2aefa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe674e9-552a-414d-b1fa-98da1f7bfd4e",
        "cursor": {
          "ref": "265e0684-f0eb-40a3-9b90-c3ebe0fd4868",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e87a5514-6c25-4cf1-92b6-ac80c4e95d34"
        },
        "item": {
          "id": "fbe674e9-552a-414d-b1fa-98da1f7bfd4e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f963c729-18ca-425b-b6df-2dd2d6d97390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f945e439-4c4c-42b9-bc43-64f281997011",
        "cursor": {
          "ref": "29dd6d66-a306-436c-bc74-767073df0997",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "672d319c-d6ae-4dc0-915b-b9f57015702a"
        },
        "item": {
          "id": "f945e439-4c4c-42b9-bc43-64f281997011",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9fbb780e-33f4-49bc-8921-4306eb789869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25d189f-9b64-4dd7-b516-9905db52800c",
        "cursor": {
          "ref": "33bbfab7-3606-4a16-a874-c9808881dac3",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f8724bcc-e2d8-48ab-a957-9250f65ffab3"
        },
        "item": {
          "id": "f25d189f-9b64-4dd7-b516-9905db52800c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3dd6a85f-4c61-457c-8f23-0c6fef2f2512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0c3798-234b-42ee-9cda-9ae623f035b3",
        "cursor": {
          "ref": "1d5f566b-7a0c-4c14-bb88-37c58b68d5bb",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bbeb048f-3c08-4632-9743-28e1883d008c"
        },
        "item": {
          "id": "0b0c3798-234b-42ee-9cda-9ae623f035b3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ea9cd3d2-4a39-41d6-9177-4af0f17b66c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de9e6e4-9584-4e01-835a-e736cd28f8fd",
        "cursor": {
          "ref": "852d0f8d-0f90-415e-b793-4c1b71050753",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "eb06fb2d-7c7e-47d2-893b-210c9ef44d6f"
        },
        "item": {
          "id": "2de9e6e4-9584-4e01-835a-e736cd28f8fd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c99b853f-ecc6-45de-844a-3a16a0d66ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849045e8-ac5f-4605-a55f-20fc5b41c598",
        "cursor": {
          "ref": "186e4cc3-a62f-42ea-a4b7-ed8c648d6023",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "79cc14ff-d92e-406e-ac0e-7271ea7f2d2d"
        },
        "item": {
          "id": "849045e8-ac5f-4605-a55f-20fc5b41c598",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b8d290a7-0643-4453-b584-d07098b22390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ef36b1-10d2-4c1e-b898-73f6e399c5f8",
        "cursor": {
          "ref": "71bfc770-46e8-4fce-8600-bb7d5b9db578",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "465a9d6e-f8f5-4734-840b-1f667bd7da85"
        },
        "item": {
          "id": "d0ef36b1-10d2-4c1e-b898-73f6e399c5f8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "98b526d2-571f-4992-8e2f-73b8555a1b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1350467-451e-483d-81c1-1d7191429ccf",
        "cursor": {
          "ref": "30bfab6c-bb1b-4e1e-b054-e738b5a4aa72",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "133402f0-d746-4720-9eac-a73eff56af2e"
        },
        "item": {
          "id": "f1350467-451e-483d-81c1-1d7191429ccf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "115af009-01a9-43d9-8d4d-c108a4db461a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9e8590-70ad-46e5-898c-3652f852f163",
        "cursor": {
          "ref": "bb4d2e20-b09a-4e76-9a87-6600922eba34",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8d478062-f0fc-4bb8-b2c5-f8ef47f23915"
        },
        "item": {
          "id": "6f9e8590-70ad-46e5-898c-3652f852f163",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "acccd4a4-0d1b-466d-b464-416228155b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7989de0-391c-43ca-9737-6f581d0130e6",
        "cursor": {
          "ref": "944d74a8-b00a-4424-b1be-ec7da4dc14ac",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "acccf146-547c-4a5c-8484-00e73c784871"
        },
        "item": {
          "id": "b7989de0-391c-43ca-9737-6f581d0130e6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "af56dabf-1213-40fb-b8e4-8b8c102e1b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d98479-0943-4a36-9465-7cd93065121e",
        "cursor": {
          "ref": "aacf6af6-12fb-4c68-ac0a-1af1b2fd8239",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "eb0c1ce0-f033-43f3-a2d8-275926827634"
        },
        "item": {
          "id": "76d98479-0943-4a36-9465-7cd93065121e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c1a8709d-a87a-4bc8-8135-5633de70a6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd50dc1-7d8d-4da0-a943-fbb54d3827d5",
        "cursor": {
          "ref": "e285cfc9-74b1-4ade-a725-1163fa041ec6",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dc282eb2-a0ee-4039-9900-cb5b73b52b68"
        },
        "item": {
          "id": "6cd50dc1-7d8d-4da0-a943-fbb54d3827d5",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6f70df9c-6031-4cbf-84c1-b4809e96ef75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bc9535-20e6-41ce-a229-c97268fa7514",
        "cursor": {
          "ref": "0a02ab92-bfeb-48c0-99f6-855d98b18677",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "89fa3682-97fd-4e0f-b7bb-64cd5fbee513"
        },
        "item": {
          "id": "91bc9535-20e6-41ce-a229-c97268fa7514",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "55e30843-668b-423e-986d-e56f612b4325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4da5624-8c33-4a93-9d68-9a59994b3a9b",
        "cursor": {
          "ref": "2009be6b-7b7c-453e-970f-028958b34cd4",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "52fc1727-86b0-4ed2-bc9d-27dad081d2fa"
        },
        "item": {
          "id": "c4da5624-8c33-4a93-9d68-9a59994b3a9b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1bfcc598-95a4-45f4-b78c-cb0dc236849c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c795f424-e313-4e1a-95e7-f91d6111482a",
        "cursor": {
          "ref": "19db30f1-5453-4be2-b081-512304ae3e55",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6142057a-e0b8-4e14-a8f5-31e07a7e9be7"
        },
        "item": {
          "id": "c795f424-e313-4e1a-95e7-f91d6111482a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "23349842-982c-44a6-ba1c-4ba1fe480f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f31245-7a14-4afc-8f87-77ebca68fb75",
        "cursor": {
          "ref": "ddceff9a-8347-4132-8e96-edf07f7a377e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "261b16cb-2265-4167-bbf4-ddc2d64c7e1e"
        },
        "item": {
          "id": "c7f31245-7a14-4afc-8f87-77ebca68fb75",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8540c0de-a23a-4d04-ae93-c8a482c09a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1d1968-a517-4a14-b8ad-06ac3424e548",
        "cursor": {
          "ref": "5330e26e-4a7f-4147-9d47-f4bbfb0af8f3",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7473e66c-9605-464c-91e8-9ad78c1930ba"
        },
        "item": {
          "id": "9f1d1968-a517-4a14-b8ad-06ac3424e548",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "27f50234-d1d0-40c8-ba97-1124c895f52f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4619d037-ca9c-47b8-8f9a-c148e60c09c6",
        "cursor": {
          "ref": "f1148755-e23c-43d2-9a6d-208f0aaf9e89",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7cbd662a-d4e2-422f-930b-b5143fb95c9e"
        },
        "item": {
          "id": "4619d037-ca9c-47b8-8f9a-c148e60c09c6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8373dea5-bc57-4f54-ac49-12c8f418e2b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac1119d-6109-43fd-88ce-82a43dded1eb",
        "cursor": {
          "ref": "d339e7c5-0231-4c8f-a039-4f66ad1751b3",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bf731eec-7a10-4971-8b5b-10a558a2c235"
        },
        "item": {
          "id": "cac1119d-6109-43fd-88ce-82a43dded1eb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3f8bd81b-1b0c-417d-9065-7e77e2522d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8570d1e2-f359-4c06-902d-89067bc6a3b3",
        "cursor": {
          "ref": "65d46092-f9d4-4a74-95d6-2f47afd3d954",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "88e239cb-ecd2-4f2a-9da1-df376cc2b4c6"
        },
        "item": {
          "id": "8570d1e2-f359-4c06-902d-89067bc6a3b3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c76cf89f-b400-4ca9-9b88-3c9563f50a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71474ad-8af8-4eec-ad93-25795877fa78",
        "cursor": {
          "ref": "c70a4306-cdd3-4fd9-97f7-dc77d22b0546",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7b945947-1699-476a-a792-982f967ae297"
        },
        "item": {
          "id": "e71474ad-8af8-4eec-ad93-25795877fa78",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0054048f-b8b0-400a-b5eb-3abb5b511f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c497a93-8cd2-47c4-bfb5-1babd1515b09",
        "cursor": {
          "ref": "99ed5e0e-4f8e-42bd-8a42-a2ee27da6473",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f6cc2adb-4846-4f6a-9b81-97061848c885"
        },
        "item": {
          "id": "7c497a93-8cd2-47c4-bfb5-1babd1515b09",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9939e195-751c-4ce3-97d7-38cc0accfa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d77f26-0a32-4b80-b297-4803a7bf8753",
        "cursor": {
          "ref": "2d97f051-c4c3-4562-beca-733cccf21c33",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b65a58ff-2e06-4d5a-b1f3-940eb1fc48a8"
        },
        "item": {
          "id": "13d77f26-0a32-4b80-b297-4803a7bf8753",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5283b548-3f49-45b8-b1e1-21d5c49c81ad",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f474fba5-39a5-486c-8fdb-648a72ce203f",
        "cursor": {
          "ref": "23cee91a-2a5c-4be9-8ebf-8db3ff409a3e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2b922103-2b72-41b4-84ca-bed40ecf6e53"
        },
        "item": {
          "id": "f474fba5-39a5-486c-8fdb-648a72ce203f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "59e3104b-53cf-4f8c-ac66-b611870dc69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed288c99-da15-492a-9101-6537d0bfc3a3",
        "cursor": {
          "ref": "38de41cc-0176-431f-bc4d-fa9eb5baa20f",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "96a06e33-c23e-4f31-97da-2dbcf9310520"
        },
        "item": {
          "id": "ed288c99-da15-492a-9101-6537d0bfc3a3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "90ffd6d7-cec9-4b38-bd6e-807faabeb2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879b24c1-0b68-468f-81db-8383cbe28776",
        "cursor": {
          "ref": "66671f8b-2260-461b-b240-da936cc5b29b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "807eb5a8-c7cd-4a03-b63e-8f9d690c70cc"
        },
        "item": {
          "id": "879b24c1-0b68-468f-81db-8383cbe28776",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d31443af-a4ee-462e-a895-753805564b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46fd541b-742e-4cbd-aa63-a75b90f90510",
        "cursor": {
          "ref": "66b58d6c-3094-445a-9afb-2837971a6a1f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1a465a8c-3189-44da-8167-bdc5f9a13196"
        },
        "item": {
          "id": "46fd541b-742e-4cbd-aa63-a75b90f90510",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "527777d2-3217-4072-8134-94ad449bc89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516fe27c-954a-4c94-a325-f321cc413606",
        "cursor": {
          "ref": "4aa730b4-de67-4232-b394-c415eb52ec6e",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "81c79bb1-225c-46e2-b46c-a2f9e125b5f9"
        },
        "item": {
          "id": "516fe27c-954a-4c94-a325-f321cc413606",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "13f18b7f-3481-4d56-87e3-87a29310db8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd322e6-66fd-4834-99f8-5687fda155d2",
        "cursor": {
          "ref": "2beb7c8f-3c6d-451b-99ac-1d7fa4027965",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f5b8380e-bdf5-43b9-9c70-7d76b2b28172"
        },
        "item": {
          "id": "6dd322e6-66fd-4834-99f8-5687fda155d2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e1d980f9-be7a-4514-af12-260a34381006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983a989f-e06f-44ac-b900-56a809f67ad6",
        "cursor": {
          "ref": "158644e8-fd21-4694-bf9c-64b21ca5b8b8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "23b86afa-b34c-4aa2-b4b5-731dbff9ff22"
        },
        "item": {
          "id": "983a989f-e06f-44ac-b900-56a809f67ad6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "53b66f0f-a535-454e-8fcb-589fec6478a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a517f2-26f4-4d82-b148-af5967dc50e2",
        "cursor": {
          "ref": "516ca141-0c4e-404c-9706-be2b9c18eafc",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6faa8d7c-ed87-413a-b9f4-6807d9551c44"
        },
        "item": {
          "id": "61a517f2-26f4-4d82-b148-af5967dc50e2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "737fb057-c3bc-4544-a807-065929f0b601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca958279-7127-448d-8780-079bc127ac80",
        "cursor": {
          "ref": "5913cd55-a38b-466b-a991-5c02c22c9032",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d957d02e-f623-4471-9b0a-eaa81cd1ed0d"
        },
        "item": {
          "id": "ca958279-7127-448d-8780-079bc127ac80",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c30a514c-ee99-4f44-8635-3d95af1dd8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df95c5a-e7b8-46f9-9337-7181d4a6b518",
        "cursor": {
          "ref": "3efa4ad1-b4ac-4db3-9319-59b42b3ad32b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "143957a1-b44c-46b3-89a7-9410a82e6b15"
        },
        "item": {
          "id": "4df95c5a-e7b8-46f9-9337-7181d4a6b518",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f3aef8b5-0fc8-442e-9181-2d8608d9eb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12491626-4709-46bc-9da0-6aea42975679",
        "cursor": {
          "ref": "b7a8a560-326e-4e42-be4f-b729d848ec81",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1285117c-6a94-45e2-81e4-8d31f95b3b84"
        },
        "item": {
          "id": "12491626-4709-46bc-9da0-6aea42975679",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "37de9b8c-3591-46ae-b47a-3cab3fbd78b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de38d44-82e4-4cfd-9f76-f8eca24a06a0",
        "cursor": {
          "ref": "bed7c8ac-f918-44b0-bb19-982f880df21e",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "910fde0a-e425-4d7f-9073-3b44437ea873"
        },
        "item": {
          "id": "6de38d44-82e4-4cfd-9f76-f8eca24a06a0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d7721ff8-ba06-495c-b089-54fad1352d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4709155-1043-43e8-9df6-9a5d92ee03cb",
        "cursor": {
          "ref": "4aa87fab-673d-491f-9a28-652497a0048f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8c830cb1-b146-43dc-aa65-525649427b86"
        },
        "item": {
          "id": "e4709155-1043-43e8-9df6-9a5d92ee03cb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "85052813-85ba-42eb-9ac3-9da1d2acbc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93056c6b-cfbb-4dad-b798-6e7ae9080fa6",
        "cursor": {
          "ref": "10ca34ab-9a8f-4604-b397-b20397fce8fe",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "708d01b0-d1fe-4733-9d4c-394ccb0ea0e0"
        },
        "item": {
          "id": "93056c6b-cfbb-4dad-b798-6e7ae9080fa6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "519ba207-4ede-488a-9a8c-e28c97a28c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba70857-bc9d-4efe-b1f3-075f0ad8ba96",
        "cursor": {
          "ref": "21dfcf57-326a-4ed3-9e1e-ad859f1e9acc",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9a9e74ea-e9ca-438c-94cc-0419d786dd82"
        },
        "item": {
          "id": "8ba70857-bc9d-4efe-b1f3-075f0ad8ba96",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "97e0affa-5f35-4253-84bc-0d77a9a4fee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353e91a6-df09-4340-9bf4-b8de478393b1",
        "cursor": {
          "ref": "acccae71-a7cc-4561-8dd4-239e4737b25e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d39f4306-6506-45a8-96a5-da014c20761b"
        },
        "item": {
          "id": "353e91a6-df09-4340-9bf4-b8de478393b1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "233ade5a-4938-4d7c-8d2c-5c566aa77dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16990f6-420a-4b4f-b74f-5d05c0a07781",
        "cursor": {
          "ref": "337b6a7d-e4de-461f-9dd1-87a79845e598",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2a47651e-2ade-4f26-94e7-883dd272ff45"
        },
        "item": {
          "id": "c16990f6-420a-4b4f-b74f-5d05c0a07781",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fe51599d-960a-4816-b164-0ba0b7b06434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75034da-2679-49ee-a24e-94b8c63ac1da",
        "cursor": {
          "ref": "07544a2d-b36d-4394-9140-2652626fce6a",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "316b78fd-516e-4563-a004-cd174cc21402"
        },
        "item": {
          "id": "e75034da-2679-49ee-a24e-94b8c63ac1da",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "701f2cdb-4382-4c69-a932-22874ad0884f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9565d1-c9e3-468c-aba2-3c431f2e7afa",
        "cursor": {
          "ref": "8525f7cc-51a4-42e2-a0fc-7877d48fb100",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "eeabd435-7a27-4860-8b00-152a88736261"
        },
        "item": {
          "id": "5e9565d1-c9e3-468c-aba2-3c431f2e7afa",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "485f1cd3-60de-4ed0-b2bd-83260f1a5c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c09fad-d789-4258-beb0-8c5d31d0b440",
        "cursor": {
          "ref": "fe496314-14f6-4d38-94ed-0a1f0c4e14ac",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d9f48396-7091-4ae7-a26c-74870a62dcd9"
        },
        "item": {
          "id": "f6c09fad-d789-4258-beb0-8c5d31d0b440",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e1e44719-1c2e-426d-a735-e89e5c2af918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe6604f-b7cf-4223-b19a-e14e1b255174",
        "cursor": {
          "ref": "c447a604-7502-46d5-83af-fcba33c63f80",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4b52a920-6c0a-4a0b-8a75-f211bbf8a02a"
        },
        "item": {
          "id": "dfe6604f-b7cf-4223-b19a-e14e1b255174",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "321080fe-2e94-474d-bc18-1975e66369c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff38bc32-b206-49fb-88da-19d3c6f03d3e",
        "cursor": {
          "ref": "39b2e957-0da2-4bff-8478-77b7da1aed65",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ff278ccd-aa3d-459c-ae2e-94fa297886f7"
        },
        "item": {
          "id": "ff38bc32-b206-49fb-88da-19d3c6f03d3e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "45ba5147-0e08-4c22-aa29-1ce848bb3fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26606391-5a42-4fc2-9831-126aaf3c7300",
        "cursor": {
          "ref": "2da2f6f3-d011-4948-99ab-0992f11d8d3c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "440af6f4-8ade-4cfd-ba4d-23ee5d8f1bfe"
        },
        "item": {
          "id": "26606391-5a42-4fc2-9831-126aaf3c7300",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "099ba7e6-cbb7-4860-bbd4-f265c0247f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a497eb3-45c5-4ff3-af78-cc240e679c5b",
        "cursor": {
          "ref": "9e807cf8-e9c5-4eee-be25-0a0d8b904962",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4bcf611d-1696-4ee3-9800-e61cd3f2bb04"
        },
        "item": {
          "id": "2a497eb3-45c5-4ff3-af78-cc240e679c5b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b58da7aa-733d-4990-b7d9-1bd0fca6b09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc8f7c0-7998-44c7-8a59-bbd19964c561",
        "cursor": {
          "ref": "c80e6f6b-0c28-4086-8f18-5402a2c95bc8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0ad5b5cd-7ae7-4d13-8b35-02881bbc304a"
        },
        "item": {
          "id": "2cc8f7c0-7998-44c7-8a59-bbd19964c561",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8cdde169-0b58-4c0c-be4b-6900a259e31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72c6430-2593-406b-b73e-008e84466a5e",
        "cursor": {
          "ref": "767e9982-f404-4a54-a5d0-6fa2370545cc",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fe954dfa-7db9-496d-8ae0-000cfa35a9cd"
        },
        "item": {
          "id": "e72c6430-2593-406b-b73e-008e84466a5e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e31cd5b5-ebe4-4851-a633-ee7245fb3e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5b84b8-e7e4-4464-95ab-74f0be5e33b9",
        "cursor": {
          "ref": "d42e4891-8a3a-41a2-8fa2-f8e186b85aa4",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f3757ee7-5684-4273-92f9-48ef67bdcd9c"
        },
        "item": {
          "id": "5a5b84b8-e7e4-4464-95ab-74f0be5e33b9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f871db3d-6e3a-417a-97cc-0599ca21a72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e106b221-6e96-42e2-9b50-571f8fa12faa",
        "cursor": {
          "ref": "020feaaf-83ec-4821-8cbd-02d04b580e82",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "78ad8710-9e1d-4f7c-9e85-30ae993f9729"
        },
        "item": {
          "id": "e106b221-6e96-42e2-9b50-571f8fa12faa",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7cbea85f-1bcf-4a05-82ef-7ff406847b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef0bf45-4735-4bde-923e-76ed132de531",
        "cursor": {
          "ref": "dcff08fd-c332-4df7-a5a5-d4580695af20",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8b5d5a46-fd0f-415f-9d30-ca96dd1c95dc"
        },
        "item": {
          "id": "8ef0bf45-4735-4bde-923e-76ed132de531",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4507ad52-a321-4e44-8bed-ec6782b7e386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aea9347-6d40-4911-88a7-de767e5da81b",
        "cursor": {
          "ref": "60c428b3-824c-43a0-b5e5-2dcf3f53566b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "789ad68b-e440-45c2-9b1b-4bac2f0c3140"
        },
        "item": {
          "id": "6aea9347-6d40-4911-88a7-de767e5da81b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ab317e6c-53a0-4032-b38b-4204c519c39e",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1464936c-e913-4880-845b-e43d0ccd646b",
        "cursor": {
          "ref": "bbbc21b9-710a-4a64-b6d9-163735011fd6",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ca03374b-2198-43ab-aaf4-a5b0f8d67067"
        },
        "item": {
          "id": "1464936c-e913-4880-845b-e43d0ccd646b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8f47a89d-4bbd-4d2c-aca5-7f326698d1c3",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3bf22079-d562-4fd1-9c2d-a71a3e370182",
        "cursor": {
          "ref": "a442055c-5331-4df5-a282-a0485e157b4e",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7012e164-f740-4c1e-8195-8b7ac63fc81b"
        },
        "item": {
          "id": "3bf22079-d562-4fd1-9c2d-a71a3e370182",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "88359f82-ec96-4465-91f6-5d2333068e91",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4612df24-f1ea-4d95-8e7b-2ac875237c95",
        "cursor": {
          "ref": "7db47dfd-2eef-4e43-a569-32c470b08c5a",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c6a9670f-4803-4967-9561-fe7d6ab0761b"
        },
        "item": {
          "id": "4612df24-f1ea-4d95-8e7b-2ac875237c95",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6b8364af-64f9-425a-99e3-710e09742089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6d172c-7d39-4c39-813e-fda642383d15",
        "cursor": {
          "ref": "181fabf9-1083-4b4d-af0d-5ed507dfc078",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9a9fc309-0831-436e-aaaa-5210da8de316"
        },
        "item": {
          "id": "3e6d172c-7d39-4c39-813e-fda642383d15",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e45515c8-4b1d-41e8-862f-85b9a319dfa4",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "972e9f9b-25ac-4e82-8eb9-b27ee111b830",
        "cursor": {
          "ref": "9713e29e-3166-48f9-bdaf-20d9189e9d3f",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4047edec-0f4c-4e32-9569-efe447a0eabe"
        },
        "item": {
          "id": "972e9f9b-25ac-4e82-8eb9-b27ee111b830",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d8960931-6961-4cfc-b6e6-0ca012249d80",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7a8cc55d-36c0-4e4e-9bd9-1e785fca263a",
        "cursor": {
          "ref": "7deb1421-081a-4c89-82e7-5c472b3d8357",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "740d55de-d450-4fe8-8096-3d1f737e8370"
        },
        "item": {
          "id": "7a8cc55d-36c0-4e4e-9bd9-1e785fca263a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0d803ad9-41c9-4299-9657-27350ab42560",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4801a5a8-814d-4d16-a88e-944722afa782",
        "cursor": {
          "ref": "ee59fe0e-542d-4011-88d4-efedb6d4f30d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0a6d805d-0e94-4852-b610-236345409ebf"
        },
        "item": {
          "id": "4801a5a8-814d-4d16-a88e-944722afa782",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fbfd1115-2bc8-46ca-a84f-c34e8e08edd0",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "daae5628-71da-4d41-a531-d715871c83ec",
        "cursor": {
          "ref": "032eb4e1-61c2-44fb-9812-bf88e4409b20",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f3e86c8e-adc6-48ec-b79f-435d6b57888b"
        },
        "item": {
          "id": "daae5628-71da-4d41-a531-d715871c83ec",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bd352eef-fdbb-4383-89ae-6f6e275e1681",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ba749772-586a-4378-9023-e27a761bf500",
        "cursor": {
          "ref": "101ddc1c-878d-4d8d-91dc-65d7f712bda0",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "133f77ce-5779-4269-ae78-0126367cecd7"
        },
        "item": {
          "id": "ba749772-586a-4378-9023-e27a761bf500",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "07a1103b-3882-4f81-b2ab-3ca63e4dada2",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8752d21a-1480-45f6-b86a-a2af8979e45e",
        "cursor": {
          "ref": "1ca58ee9-f607-4551-bcb0-579bed697bd5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3da90e14-26b3-4061-9193-1be2c60eea59"
        },
        "item": {
          "id": "8752d21a-1480-45f6-b86a-a2af8979e45e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f4e2fbb1-f684-45fe-94e6-b650d60e46c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0e16e2-94c0-44e5-8d65-a9f7f5cac65c",
        "cursor": {
          "ref": "4d6cd5ce-8c56-4eb9-bd85-33147a318676",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4d4a9637-6553-45ad-80d7-e5815002d9d0"
        },
        "item": {
          "id": "8d0e16e2-94c0-44e5-8d65-a9f7f5cac65c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0c12d7f1-42e4-463e-b0f0-1783215548a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da8ad45-c530-4227-9b75-bc875eb52150",
        "cursor": {
          "ref": "9fb71ad8-263c-45fb-99b0-687e542ce465",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bba2beaa-95e3-4b99-ac50-b3185eb31e84"
        },
        "item": {
          "id": "9da8ad45-c530-4227-9b75-bc875eb52150",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a15bc136-3d5e-4b48-ae1e-96cc646d0933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c816d2a5-6645-4340-bab6-d55793d2facf",
        "cursor": {
          "ref": "8263005e-90ef-45c1-9cbd-4f434cfa9e53",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d42ed96f-54a0-4816-8f64-98693bf48321"
        },
        "item": {
          "id": "c816d2a5-6645-4340-bab6-d55793d2facf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0aabcba1-753e-440a-bba6-b43824364a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752dead2-9efa-45ce-b5e8-5d80f1bd136b",
        "cursor": {
          "ref": "e78a44c7-b952-460c-932a-320d433b6359",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e47d3d58-4f8e-4240-9cbd-28f9c9f49308"
        },
        "item": {
          "id": "752dead2-9efa-45ce-b5e8-5d80f1bd136b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "79b5bb26-89c6-4c42-ab59-572f77faacc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fa998f-2811-4954-a6d8-2444791a0896",
        "cursor": {
          "ref": "0173fdf9-b612-4cb2-9ede-ed565a48d2e5",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8dc7f901-c652-485f-bb09-ac1add19b38e"
        },
        "item": {
          "id": "12fa998f-2811-4954-a6d8-2444791a0896",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "12193fe6-69c0-41ed-8903-9ed773ebb875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157c7e30-4988-4a68-8e4e-1b10515c4566",
        "cursor": {
          "ref": "aaaed6f8-3c34-4601-be81-28d8ad0c1643",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3a9a4495-626a-4d1c-9cc1-2a841725dda7"
        },
        "item": {
          "id": "157c7e30-4988-4a68-8e4e-1b10515c4566",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2907dd8c-3cba-4658-8920-6af089e7560e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1ca144-f3eb-4a20-987a-1c5851b1a318",
        "cursor": {
          "ref": "52aa5210-6dfa-4c75-b018-73abbe4b9d29",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "59e65153-bce6-45bc-b58b-356977552ad7"
        },
        "item": {
          "id": "5b1ca144-f3eb-4a20-987a-1c5851b1a318",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cf9a45c9-45f7-4453-af68-e4d90ebc986e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd5b35b-86a3-4393-8733-b1f8797d173a",
        "cursor": {
          "ref": "53f42d8b-9fb9-4f06-9fec-024de7ac5ab7",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e480e6d0-5dbe-4efa-8d60-855b81c775a4"
        },
        "item": {
          "id": "0dd5b35b-86a3-4393-8733-b1f8797d173a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4a0ca5fa-6842-4cd3-a566-db708150122e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb133821-3687-4681-93bd-51ada001189d",
        "cursor": {
          "ref": "c69fc44a-5a33-4203-b4ef-95fb931b70bc",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "85d06092-0b07-45fe-a65e-9df590c20f25"
        },
        "item": {
          "id": "cb133821-3687-4681-93bd-51ada001189d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6c14530e-2af0-46ae-be4d-96862a49c475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c1970e-d2e5-49fa-a193-07cbedd5555f",
        "cursor": {
          "ref": "e61d09b2-a1be-4504-9df8-58be3fe2e4c2",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ad694db8-644a-42ce-bfe5-3284d16c95ac"
        },
        "item": {
          "id": "96c1970e-d2e5-49fa-a193-07cbedd5555f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "63a88323-fb1e-484d-8352-9d828ea86299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa71271a-e32f-4ae8-b6dd-0424ae7f4c6f",
        "cursor": {
          "ref": "bc936834-3dfd-4acf-a99b-fe1734698d5c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "083678d4-4f3f-4216-9c0c-e36df66ba187"
        },
        "item": {
          "id": "aa71271a-e32f-4ae8-b6dd-0424ae7f4c6f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f4cca751-bbf6-4be5-8f00-0300e5a46909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5eea014-4c83-434b-9532-c96f3033780e",
        "cursor": {
          "ref": "cabfa2ef-790c-49b5-b22b-402725426513",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "84461576-9687-4bf6-bf99-af3c1f36820d"
        },
        "item": {
          "id": "f5eea014-4c83-434b-9532-c96f3033780e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4d0c5815-06b4-4eb0-ac0b-c4d8265c13f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e978dc57-a049-4bea-a4b5-8ec2bb8b6671",
        "cursor": {
          "ref": "3d1c8f37-6dba-4ee3-99b6-90cfccf92ac3",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4e4ed807-492d-4af7-91c8-eb6b2eeea00b"
        },
        "item": {
          "id": "e978dc57-a049-4bea-a4b5-8ec2bb8b6671",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f7fc68c4-4f2a-4028-b02b-bd9f17ba5ae3",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "83511216-b90b-4f93-a97c-f8b1d3a11aa7",
        "cursor": {
          "ref": "c88e969d-6e0c-4e78-ace7-71946cfc6764",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6325768c-c3f0-46b0-b551-cd721da66e9d"
        },
        "item": {
          "id": "83511216-b90b-4f93-a97c-f8b1d3a11aa7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cd07c42f-f0d2-49a3-a6b5-f012138d6279",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e2f44c46-839f-4f44-a3d4-7b2f55d1d360",
        "cursor": {
          "ref": "b5af36e0-d529-4d4d-bc2a-5bc190f4f779",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fa466d2d-952a-4e51-9507-9c3a044343f5"
        },
        "item": {
          "id": "e2f44c46-839f-4f44-a3d4-7b2f55d1d360",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7ab8a18e-5510-42bc-a818-f004668c83ff",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "457b002a-8b76-4f40-8022-4a312c803ee5",
        "cursor": {
          "ref": "f10dde8c-d301-4966-9085-fd8afbe849dd",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "88002586-74d6-44da-8304-16d24e92ae3a"
        },
        "item": {
          "id": "457b002a-8b76-4f40-8022-4a312c803ee5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bff2eb6c-aa8b-4dbd-b5d8-8e922bb74deb",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e42860d1-e838-4415-9013-8ad15b8dfc45",
        "cursor": {
          "ref": "f3e75a26-f6ab-4265-8d3f-bd89b3dc9c24",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9563fe21-478d-479b-9fa7-1312d859cf31"
        },
        "item": {
          "id": "e42860d1-e838-4415-9013-8ad15b8dfc45",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1b3e14d0-75e5-40d8-82cc-75baa84c0166",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "985be391-0d2c-449b-9363-5b537f15d600",
        "cursor": {
          "ref": "a4d7b59e-583d-483f-b5ee-adb1f208ad91",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f72443bb-2de3-4155-aa23-e00eaa5c4cd0"
        },
        "item": {
          "id": "985be391-0d2c-449b-9363-5b537f15d600",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "235705cf-94e1-4455-81d7-6c18b9eabc53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769c5ce6-9dfa-4973-9f5c-19bee491cbbb",
        "cursor": {
          "ref": "3752ed86-6701-4957-bef3-733261c34fd9",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "671db74c-b5ad-4d6c-98c4-2ad7e97eb2b2"
        },
        "item": {
          "id": "769c5ce6-9dfa-4973-9f5c-19bee491cbbb",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c45c7fd0-9d42-4851-8f9b-5b459357b4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c757c5-8675-404b-a469-0e60e1c43593",
        "cursor": {
          "ref": "41c10290-ed5f-4736-a92b-38e86dea523e",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dc1a5cf9-ae19-4a03-ae94-c93c59aca369"
        },
        "item": {
          "id": "72c757c5-8675-404b-a469-0e60e1c43593",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f0e0596d-5f73-46c0-9b3a-5296eea20b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c237091-2caa-4f10-a6fb-80b6604f3659",
        "cursor": {
          "ref": "05caa100-d3c6-4dc3-bf06-847636928b83",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54de8865-71b9-49eb-b8e4-0725a1a96e17"
        },
        "item": {
          "id": "7c237091-2caa-4f10-a6fb-80b6604f3659",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1dbdb691-5815-44ad-ae9a-d096f11eb360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbef6e02-95a3-4c13-82b0-4857201b9216",
        "cursor": {
          "ref": "24bbb857-1919-4f82-b657-7fe729a9064e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "af71a8b9-e110-4a22-870f-87c7d6fb3b94"
        },
        "item": {
          "id": "cbef6e02-95a3-4c13-82b0-4857201b9216",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7f9a2fb6-8076-41cb-94e5-88d5b2cca8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a28cee-d26b-4f62-a096-40a8974fe28a",
        "cursor": {
          "ref": "ab647463-beba-43ab-acdc-404d19df9cb8",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bfc1250a-a532-4da0-b9b4-209ea5085f2f"
        },
        "item": {
          "id": "d5a28cee-d26b-4f62-a096-40a8974fe28a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "676195ee-8ba0-4e0b-a112-0570659eeab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68dfa319-3dfe-4f0e-9d62-632b025401ac",
        "cursor": {
          "ref": "6f2efe2d-577f-463d-a04c-a5df4deb87d4",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7cb93f2d-2728-4f2b-a24b-c42a35722fd8"
        },
        "item": {
          "id": "68dfa319-3dfe-4f0e-9d62-632b025401ac",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cd2b043a-fcbb-492b-b17a-d6fdce019a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68db40b-00c7-4042-910c-8076650ca2dd",
        "cursor": {
          "ref": "ea5cbb47-aca1-4a7d-b0da-b472ef1ec58d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "110af380-096a-4641-a350-344d1b51ff63"
        },
        "item": {
          "id": "f68db40b-00c7-4042-910c-8076650ca2dd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "93f599c5-87d3-44f6-9fc0-40e7183b9603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264534f8-e7c9-463c-ab3b-e8b7b948901c",
        "cursor": {
          "ref": "5ed0169e-9dd8-41fa-9afa-236325ec63a2",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b5d27a66-45f9-41f2-8b67-9bbe3306b108"
        },
        "item": {
          "id": "264534f8-e7c9-463c-ab3b-e8b7b948901c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2449961f-ad72-4428-b2ba-9467988767a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14341e83-d7c5-4383-af90-cf91710ad685",
        "cursor": {
          "ref": "7f4ee8c4-012a-49f2-8614-f8319e78a21d",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7db57833-42d7-407d-9219-46db991b7e7e"
        },
        "item": {
          "id": "14341e83-d7c5-4383-af90-cf91710ad685",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e61785f7-0c55-41c0-b4be-f9448290ce3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfd88e6-4029-4994-a32b-62362dd0761d",
        "cursor": {
          "ref": "32160c3b-4c78-4296-bf32-d8344e3429d8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "dc9d4a57-f005-4b6d-97e9-2349ff70477e"
        },
        "item": {
          "id": "dcfd88e6-4029-4994-a32b-62362dd0761d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cf36f3d5-cf20-4c63-b62e-094fb5dea16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2b7ee0-ab4e-415f-b4ae-ab31eae41b4c",
        "cursor": {
          "ref": "49c73a46-879e-49c5-933e-7219200b88da",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3693a1fd-d0a0-4f05-a5f7-da4380100dc3"
        },
        "item": {
          "id": "1b2b7ee0-ab4e-415f-b4ae-ab31eae41b4c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0b1bd130-3a5e-48cd-a437-4519a4e66d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c281f4c0-dbae-493f-861d-a256830bf0b3",
        "cursor": {
          "ref": "a015d45b-87e2-4983-afed-c236dee21eae",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1d3ee8f0-92b2-4762-82ee-d53aab8c66df"
        },
        "item": {
          "id": "c281f4c0-dbae-493f-861d-a256830bf0b3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "65f49148-a0e6-4f91-a2c7-db4e3b5bb06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7b03fa-0547-46cf-8e9e-b193af019d9f",
        "cursor": {
          "ref": "7e6075a8-d1f6-4116-ad5b-28c1a2f3bf18",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "7e6814f5-6f0a-4ba8-a381-69e13cbe8da4"
        },
        "item": {
          "id": "8f7b03fa-0547-46cf-8e9e-b193af019d9f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3de5d26f-b980-4a87-bdb1-eadb78c8615f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807ccbd1-04e0-4c24-97fe-4078d272cb46",
        "cursor": {
          "ref": "996cad22-2458-44f6-805c-8cdf69edf97b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ec23ecb0-8a41-4653-9f40-6b08622c327a"
        },
        "item": {
          "id": "807ccbd1-04e0-4c24-97fe-4078d272cb46",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "36a5da59-c73d-4d98-af13-c017e1664c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d920b7-c6ce-4f49-91e8-68db2a549a9e",
        "cursor": {
          "ref": "3b930604-0692-44ad-a727-04fac67cacb6",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "bf685514-7c9a-4ece-a889-09d2bd78bf53"
        },
        "item": {
          "id": "14d920b7-c6ce-4f49-91e8-68db2a549a9e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a3e4559e-083c-45a1-9691-e8f8bed729ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2421d615-fde8-44fd-81f6-429454fc0ea4",
        "cursor": {
          "ref": "3c2438c2-7b85-489c-a499-886301b1af65",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ec3d2132-b609-463c-82b4-42f4e4a0ffb3"
        },
        "item": {
          "id": "2421d615-fde8-44fd-81f6-429454fc0ea4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "23827a1d-6349-4f57-a837-b80e6c183361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176902fc-c63b-4ecc-bea8-c4b2000a619f",
        "cursor": {
          "ref": "bde721a6-7ba6-410e-9302-09922f5664a2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d2b05d30-ed9e-49ca-811c-6e268b8b2b6a"
        },
        "item": {
          "id": "176902fc-c63b-4ecc-bea8-c4b2000a619f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "570f5275-ea81-4615-9665-aa072900514a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faeb139d-6af0-426d-8d12-c45dd687e5b3",
        "cursor": {
          "ref": "5da93ef6-9ab9-43c3-ac26-60ba504d3301",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b808ed2d-7d3c-47a6-bf9b-81bb42619c79"
        },
        "item": {
          "id": "faeb139d-6af0-426d-8d12-c45dd687e5b3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f3a23def-a815-43b5-92b7-a7b8d221b8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3dea1b-8b88-4449-8f38-2c565ee54308",
        "cursor": {
          "ref": "647082eb-69c3-49b1-9760-957caff495ac",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "95d32b27-29c3-4d61-b623-cd488254f35d"
        },
        "item": {
          "id": "5d3dea1b-8b88-4449-8f38-2c565ee54308",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fe0e69dc-7d66-406c-bb84-dfade7d800ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f745ce24-a12f-4923-9520-91e0f1c4ebde",
        "cursor": {
          "ref": "b086a1cb-b941-4abe-a5d7-b649f341ccf1",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "156436d6-dcd1-4b9d-b834-a77e065251f9"
        },
        "item": {
          "id": "f745ce24-a12f-4923-9520-91e0f1c4ebde",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "da360032-8f7f-4c2d-953d-c8f8a71c3662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36350f3-37c4-4a3a-b7d9-b0fb12a64e6e",
        "cursor": {
          "ref": "8f61aefb-5e73-4fed-83f7-09786056dc1d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7a5a3653-9eb0-44c9-8db0-27f3afb88e9a"
        },
        "item": {
          "id": "a36350f3-37c4-4a3a-b7d9-b0fb12a64e6e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "15142df4-b8fc-4ead-b4cc-bd7f6fffb951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5753973a-46ac-4fe2-ab75-b5a516fd062c",
        "cursor": {
          "ref": "f4910546-b681-4faa-afc5-7f5e75769b6f",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3ee7ecf1-3c6f-4380-9bd2-ae034c509899"
        },
        "item": {
          "id": "5753973a-46ac-4fe2-ab75-b5a516fd062c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d7ad2734-f174-4a81-87c5-579dde70f2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3917e4a7-c7d4-4890-a8bc-f6486d2becfc",
        "cursor": {
          "ref": "43e359fa-e958-4e98-bbea-6e92fc2a586f",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "422dc896-40f6-4263-90a1-db98def4bc8a"
        },
        "item": {
          "id": "3917e4a7-c7d4-4890-a8bc-f6486d2becfc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6e50618d-3c7c-422a-889c-3097f432968b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49e81cb-7259-4e9f-b3a8-aba2c032864d",
        "cursor": {
          "ref": "08fbda77-218b-41a0-bfed-1050684bd6bc",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2152b4d3-2491-4cfb-a116-f8efbefd1855"
        },
        "item": {
          "id": "c49e81cb-7259-4e9f-b3a8-aba2c032864d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4e1f8553-af73-4c7c-bd02-7a4a5dbd5202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512d17d3-d221-46d8-9a97-96b265fc3d1e",
        "cursor": {
          "ref": "37df86a5-3604-4989-b25d-a90a2c3feb56",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "22f610db-6d20-44a7-90b7-bdcaa184a5ee"
        },
        "item": {
          "id": "512d17d3-d221-46d8-9a97-96b265fc3d1e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ebf8d1be-7f38-462a-8ea1-5a85931a0e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca4f0d8-6c72-4ed1-9599-4c9674191c19",
        "cursor": {
          "ref": "c003b717-72c7-494f-b547-b2df4b30d52e",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5a18fa78-d0ca-4764-a681-cb1f7169a73c"
        },
        "item": {
          "id": "4ca4f0d8-6c72-4ed1-9599-4c9674191c19",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e570f66d-8d8b-4fdb-ae1f-a1344a3f0986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87088025-7313-42ef-a93c-584fea96e9d4",
        "cursor": {
          "ref": "8f81d42f-dd3f-4920-96a7-24913b2f01ac",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "7fc09180-ae2d-4be3-8d32-d6dec142ed2e"
        },
        "item": {
          "id": "87088025-7313-42ef-a93c-584fea96e9d4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c96ad1f2-8e29-4289-add1-d8f90831fee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8faddb5d-4fb1-49b4-a77d-233dbe96f458",
        "cursor": {
          "ref": "5a5ebf02-de1a-4747-89d7-cac57e9d3e52",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "8a4432a8-3217-416d-ac30-befb1a3138fa"
        },
        "item": {
          "id": "8faddb5d-4fb1-49b4-a77d-233dbe96f458",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ff50392a-18e7-480f-b3ad-946419db8055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7daf7484-2f46-45b2-88a0-6a96d180b9e5",
        "cursor": {
          "ref": "14433913-40a1-4836-a1fe-51d419303747",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "dd8ffd76-9e17-4ac3-aee8-88855241eb0f"
        },
        "item": {
          "id": "7daf7484-2f46-45b2-88a0-6a96d180b9e5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "58d5bbf1-8011-4a03-b1e0-4db480344a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1c4878-efe5-463c-9f9f-a6bb5569f793",
        "cursor": {
          "ref": "741b962b-fa30-44a6-a706-ae9ed69ff92e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1e382f2f-df99-4f72-9364-df61bb8cd43a"
        },
        "item": {
          "id": "ad1c4878-efe5-463c-9f9f-a6bb5569f793",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e9d5e5ca-9c10-44a1-b8b8-7768563a500a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2b45da-ecb8-4919-a1d2-04607f52c6f2",
        "cursor": {
          "ref": "3892d355-e559-4999-85c5-6afcf939d382",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "dc6fc03d-6aca-4d1d-92d4-35a7e994bedb"
        },
        "item": {
          "id": "ff2b45da-ecb8-4919-a1d2-04607f52c6f2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ba4cab39-2539-4402-a1a3-ec5be94b8460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f55c80-3273-4922-8466-70e19dc1e08f",
        "cursor": {
          "ref": "44e72f74-cf61-4728-bfc4-99fddcf19cf3",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "06ca300b-69e2-49e4-a53c-0213242556bf"
        },
        "item": {
          "id": "a8f55c80-3273-4922-8466-70e19dc1e08f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c9afabc3-a303-474b-b1ab-86682d38eeba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48332f9-051c-4031-b799-87e8457326b0",
        "cursor": {
          "ref": "a44ef326-a33d-4a43-9894-dd9df82d35b1",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "bd0c9929-61c4-442a-9cb4-7f04ea5d2841"
        },
        "item": {
          "id": "e48332f9-051c-4031-b799-87e8457326b0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dfb26e3c-a4a9-4efc-90be-1306b1a7c670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44ad950-aba4-401b-bf31-928861bf00a3",
        "cursor": {
          "ref": "959df50c-7dcc-45ad-902e-7aae31cda578",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "077c9103-5feb-4af7-8390-e7a50ed7f3d2"
        },
        "item": {
          "id": "c44ad950-aba4-401b-bf31-928861bf00a3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3959ea56-bf2a-451e-886c-ac73e67c0cfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe7382c-4590-4cf3-aaac-8ee0250c42d0",
        "cursor": {
          "ref": "173cd61e-f207-4541-b6fb-0bd953698b8e",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "cd0470bb-6922-4381-b19a-6d20cedc252d"
        },
        "item": {
          "id": "6fe7382c-4590-4cf3-aaac-8ee0250c42d0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ed4092ed-771e-4d5b-b568-c47238e9d56f",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "0269f581-f313-4c37-84db-f87875b200e9",
        "cursor": {
          "ref": "3bed0b04-65c8-4ab1-b569-1b68e0ba8f32",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "20327791-bda9-46d7-b7b1-c276605930a2"
        },
        "item": {
          "id": "0269f581-f313-4c37-84db-f87875b200e9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "224e8bb5-f7bf-4ff0-8c3e-127b39cca524",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa38fae9-b165-4d5c-9133-6474f5258920",
        "cursor": {
          "ref": "b7b119f2-92e8-4a23-a2de-9b9013814d15",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0fe26e57-61be-46f1-993c-e43ce78c27d5"
        },
        "item": {
          "id": "fa38fae9-b165-4d5c-9133-6474f5258920",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5046d85c-62d6-4567-90f3-be83d4da9c35",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba69bd6f-406e-403d-bff8-60c1318654c1",
        "cursor": {
          "ref": "e1282c94-bc3b-4e1c-a12b-264df5bdbbad",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1b328a40-f011-4a81-bc0c-01f8423cfec5"
        },
        "item": {
          "id": "ba69bd6f-406e-403d-bff8-60c1318654c1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6cf92e36-c9e6-4f30-a19f-28c0602bd4c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba69bd6f-406e-403d-bff8-60c1318654c1",
        "cursor": {
          "ref": "e1282c94-bc3b-4e1c-a12b-264df5bdbbad",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1b328a40-f011-4a81-bc0c-01f8423cfec5"
        },
        "item": {
          "id": "ba69bd6f-406e-403d-bff8-60c1318654c1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6cf92e36-c9e6-4f30-a19f-28c0602bd4c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437b301e-297d-43f0-ad21-c56ee7ff9ee5",
        "cursor": {
          "ref": "ef16610e-aa83-4eb3-b799-48403dcd6c13",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ce683a7a-c8d2-4b95-838d-38510678a5e6"
        },
        "item": {
          "id": "437b301e-297d-43f0-ad21-c56ee7ff9ee5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a8317f87-fb0b-4d5d-8422-f995499e6d65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6652667e-3825-448f-968e-bf4232d9fdbb",
        "cursor": {
          "ref": "26b7bfb2-5121-40c6-ac68-690f5fb7e716",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "65a67b83-a830-4bc8-8ae0-21b2ff44614b"
        },
        "item": {
          "id": "6652667e-3825-448f-968e-bf4232d9fdbb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "343805b5-c7c5-4f1c-a56b-4cb6223f32f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}