{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "581e4830-8674-4b1f-9723-9debd2a0900a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "23f21f21-4e98-4637-b491-9e34f639cded",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b7287d2-679e-44e8-9dd1-4fbbf2f15645",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0ecb4595-aee4-4cf7-954f-16649f8291b1"
                }
              }
            ]
          },
          {
            "id": "e8344ba2-47a8-4d55-bba3-d4325153ebca",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f00caad8-babb-4e3d-8a78-f1b6b9d81e65",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ab72642f-23d0-41ed-8d59-96ab71ed88c5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fd8c4c46-a530-48f6-98be-25bb4861076b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "330227cd-37bb-4112-8c77-15773d4e4ab5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c34af667-bb97-4fd0-9d2c-bf4ae5fa960d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5079869-b9fe-4684-9d50-bdbf90b36348",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b72522f2-3ce8-4737-8407-b9920b4f863d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "457d06da-99a2-40e5-8f0f-ed499746a5ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1aafe0a9-2cdb-406d-861e-1d382dea5e64"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6bffaa8a-bf4e-4d0c-a176-b0741ad34b73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "32220be2-4d0c-4791-8618-cd99a06edcd7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36ea45d7-6616-4c05-87e9-573f39ebc5dc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4eb13caa-944e-4760-85c0-88282a0d0b79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78ba3d47-3123-49a0-9568-bbad02edcc17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3e9436b-30f5-4dc9-9bb6-d099eb974ee4"
            }
          }
        ]
      },
      {
        "id": "16ebc52c-27bc-4b41-a736-7c79a14c0503",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "643c182d-74ec-4c96-8fca-681c722b5a58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2075562-6816-465f-a952-cebc7b9e933e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ceebbfea-c66f-48f0-9b40-a71a36c74011",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c7399f-2682-4c02-81e3-50b346c2a5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73df4ea4-5145-4c4d-8f83-f7dccbd084b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f63e94-c70f-4f95-b7cf-40bf8d63aace",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd24751-890b-4285-9a52-f8091884a3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc39f9c8-e175-4e79-b9fa-40557499bee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bb9b5d-10e4-4dfc-924c-5ec5bf924f72",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e07451-46ea-4f69-8eba-c99adc3ba030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f3ded24-037c-48eb-b3dc-897fc178286a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d7f64b6-0c82-4b3b-afcb-7115e6deabd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a988eff4-e02f-4052-aeab-92315a251d5c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11870798-f103-4d8d-a661-6ee103e2e23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4181a8ba-ddf0-45cc-8e32-5236fd23fea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ee1604-0c1e-476d-b98b-c794b5afcbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b076924f-47e8-43de-8f7f-478d5076875e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e155e784-9568-4c62-af47-918f0bf50a4b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9baf7eae-9391-4b15-975d-f391da79f706",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ca3f21f-9315-4229-8d7f-3ea66c125429",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d19e5d65-1199-409d-b37b-2bb39b16a881"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bade69b-8c43-45b3-9df7-66035fab6ca9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "31ca5be0-dcca-4b97-ade4-08922654357f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c3a1775-0929-453d-9e30-baf4113a7d27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77de1c7f-a343-41eb-9e48-bd4a34ea072e"
            }
          }
        ]
      },
      {
        "id": "6b5fcc32-88e4-4953-b03f-22e5feb60bfb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "839c919c-bd1a-4ad0-8596-3c4bbb63af79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9f09062-f4a5-40e9-8314-8a5cf13d17c7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "39ee87a9-cd97-4691-b172-dfa4208fac71",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e08a3d5-b996-4141-b039-b6c072096ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21eab3e8-4576-4b13-94a5-979c0315862c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552b96cd-e09e-403f-9a60-ff27604fc03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f393765-2dfd-4547-9204-b40fa0ebb799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27b0c74-796b-4d47-9f7a-25d8c8742d4b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb92543-433e-4de6-90a9-f87cf09fe712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c95ca55-609d-425e-b509-9c00c643e5e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f73a539-e43d-4851-89a4-00a6d32ddc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "833cb4a4-b280-4db2-9786-c97bb9775864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8341cb-1f45-4866-ab0d-8a9775ee4fa3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e119f8e-7a5f-45b3-9f4b-f92d820ea328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5adbf7c0-ebbb-484f-b7c7-dfce990b0f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ceb65af-0023-42ae-a4e2-a7fcafc56025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88f97d1d-337e-4516-8bcb-825097f83565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9deae0-674f-46cd-a174-b58ba5c923a5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dce1911-73be-4c94-80cd-0eae5b1bc228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298bf60d-ab30-4053-9a25-9efb4ac51064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ace8400-5fd4-40f1-9ee0-c2b2096b15ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8fa2f0b-a865-4615-b6fe-c2ff1dc0ffec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbfb9f2-f9e0-4bd2-80f2-fce67a4e9d92",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5348615e-c566-46a6-9a50-f3021070d70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f2b3af-a3b9-4de5-a2d1-3061bba28b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968fba6f-7595-4af1-b26c-b0f171dee6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "974397d2-e6db-4f94-a821-e96a8bc1b2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158494da-328e-4e6c-9e6b-d7afe21c00ad",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf4a761-f891-49b0-ab64-b72d4d2d4961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f1cad05-d5f3-4cfa-b048-2722e4138594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b52f536-5215-404e-9378-a7f502c80a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f126b7e-33de-44a2-a1d3-f6fc0201426d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f04b08b-13ca-419f-ae54-3b0a7a0483aa",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0008b851-2862-4085-95ce-c0efb8567726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a95294b-5e97-4243-b9ff-a586209ba207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fd4b72-7699-42e1-9a37-69df4805fbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66d4ad05-7485-4e55-9825-c6d858b8c4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1879e5-7436-42e9-93a9-9bb57e9abcfe",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a6917b-1a95-4456-8999-06cc10f9b8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708a295e-acf0-4e1a-af78-5cc58589cd87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97ffd47-92bb-4f0e-afd4-e3ce1aed2d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e68d2bff-c03e-428b-b84f-d46f0259b96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfd7898-b87f-4f9d-b477-aba3fa1f72ee",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8406f447-92f7-4573-ac78-69ba8cc1d99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062c8a44-6359-4666-bf31-8d914799e114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841091f2-868d-461b-b5de-5ba7358c2372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2318d2fa-5d67-4e29-90ac-2826fce3bfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e92aca-a440-408a-b6f0-c80f0ce7e05e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c948be8-7a3f-4097-830e-e88da93e0253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e486c5f8-ec9b-4d48-a7fe-49d601cb8493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99da1eac-e8fd-481c-b338-be99263b651f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35f39c8e-ca5e-43fa-b98d-f04d0a5a1379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4bec8d-3e0a-42b4-81ed-d0b00c363624",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b76e0e5-46b4-4e75-aa83-ae5e367f6fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd284a2-84c3-4c17-99b1-1cb49264fffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a6062a-e9f2-46a8-8a03-9d837c94d594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58e78db5-2223-4118-9c78-763e63be2506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9fea22-919f-44ff-a913-37ff6f159ab6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3c47ca-3ddb-414d-a3a5-2da23ff29654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8d0c5a-5805-4ece-94ff-30358c3f2380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d754a0-7726-455c-b30d-9d7351c980a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e96101ed-4193-4e8a-ae41-c72c7ccdd78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f41c621-e21c-40c7-a0af-aa6de0461b6b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df42024-3999-44a2-8c22-fcaf808a3df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f8521f-ce83-4924-a514-cb9e950251b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dbcd0b-d1cb-4935-9484-7483c34d4ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d24ab6e5-1705-41f3-9fc3-53031ee42e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86c109b-c591-46a6-8ff9-f2bc982a0b7b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c8dc44-5f6d-4447-8b0a-15e00b7f8f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771e18d2-130e-4c48-ba35-a3f0c3a7d412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7316035-5b64-4797-8aa4-9147ad2a7587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "058ae3ed-1a5b-42d2-a07b-62a8c18fe145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbf7301-11a3-4525-bb6e-4e9cae5b2314",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b7af06-441d-4d8b-8025-b9b8de32fd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3bbaf5-7c07-4d98-8b28-1322e1a8975b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae1682b-1e87-4b70-9e32-e33395706619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d269eead-5c42-4211-a745-d3e24dbbcb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16f9958-c545-4d75-95c7-b47faf86c455",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55bbc66-f439-4078-9cb9-73ae2c0e9e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdfef06-3f5e-4d91-8d08-ee96802042e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18c0322-5d2f-450d-b70c-f0afc0c89f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94f1b16d-6a4b-4ddd-8d3e-c170f63b4926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6876891-fb84-447e-977f-2b21d685ee9c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978f0fbc-4d47-475c-8775-70dd200637e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ccc3366-b32c-48ae-835a-2c3564b3837c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc0b129-3683-4d3f-8d01-104acdd7583f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cbac6dd-92de-48e6-b769-a2144413ce52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3aaae5-f0bf-45ac-9eb2-e46acaff930f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d7f6ca-da36-4e13-8ce5-5be91d6d8766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98e8d54-ce5b-4f49-89b6-7a4de5e0b807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431f8fbc-124b-4b2d-98ff-dedc41867f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c39c31ca-94cb-4790-bcdb-f2813bf29108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae51d92-3279-4d5e-811d-b181a418ebbd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356dc880-c111-4cb2-9561-4465532b6327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286b835e-8dc7-42a2-ac37-7d62eaa3ebcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86382693-ad3b-40f7-a176-4a2c88b2ebe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74196342-fbc5-4a0b-9adc-069b3ace1445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc350594-04d9-416e-ad0d-e8455e1f7dc1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef52802a-4db3-45bb-a955-44947c095059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fdc928-c1b9-42f7-88ce-d348c0a62330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c13260-db45-47c9-8506-7ed1de00c439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63d20723-c1b0-4620-9740-46c9deb636c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490059d3-58f4-4731-9648-1316d5b3cf27",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432bc106-bb95-4224-a275-ab043970da11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a908ac2-3393-4ef2-978f-de56f665ee8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b8810c-bed4-4da9-89a2-7ec7ed513357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69d1a063-45d1-47ab-9a29-67b1f21bb571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca6d061-23a0-48f4-afed-41782e47ad67",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665282dc-e31c-4ccb-8f16-0e7186bc16c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e2dd73-0979-4578-8b6e-d095986c55b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da70918d-f1c8-4edb-b380-668765776e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99bac167-98dd-4689-99f4-609206a8d3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fc27c5-3194-4107-aca7-62d0ca5f79c6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772b8bff-c2be-4572-b003-7b502bf649ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f6dd7c-8758-47a6-a7b0-80c5a540befa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b283bc0f-73c5-4fd8-a422-8ead7a283d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e24cf2c0-ec18-4ba8-ad88-f32c48991a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f21adb-8d54-4750-8162-17925bee2b15",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcee6940-9e8a-4268-9502-b8728847f8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4dd657-bd24-43f3-b0f8-b5fb3791d88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862ba894-93c4-4410-be74-0b5f09f0754a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "13030aba-46e5-424f-a65c-b43333bb82b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c79408-9e27-4e6a-bf93-9ab3ec021779",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3932137-9df0-4175-989c-67b99203896b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f968603-03c8-4f0f-8bda-a037d2fad254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5068dff5-e0fc-4ba0-82b7-d911562b40ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "49e3b359-3d0d-4916-b565-eb012209d3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c11324-8c97-4763-9e86-5693c771dc16",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166cc4ed-9084-4630-aed2-0ef299d707eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf72d93-c78e-4d55-8627-21e65d09b697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b567d023-6957-4e95-ad01-033c9f02396d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c249bc-6de9-4e2f-9725-25b4e5b32458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae73713c-fc23-4cf8-8d47-84a2aa117853",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a022d60-7953-419f-9feb-b86e7c99e6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0f26bd-f06c-433a-b037-f70c7b4b3f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5098d5-ef1d-476e-89af-2e81440fd898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac87789d-82d4-4787-8274-dc5fcc2b654d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab2080a-ef69-4cff-81dc-7b32a0114041",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ea2cd5-94b1-4427-a13a-de2d89d3c3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f5e5e8-faf1-4983-ad10-c56884cb565a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83998e5-330d-49de-b412-1dfbce8dcf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a1b8c5-c16e-42d0-ab7d-9174d2e04cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d71f604-794d-4aa5-bdfa-25a31e2aee53",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f730ad-b11a-44d8-8abd-c90937fe3439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1137b774-90ee-40a5-a0cd-7be7711a60e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda5b6bf-ac63-4a01-8bfd-3daace62b31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b42f0496-5e99-4e5d-b990-cd26a125b689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e27258-2b8a-48f8-9eca-c1b9a34d0cbe",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b84ab35-3ec4-4600-8898-7553ea273a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d973452-5eba-418d-a033-0862b9af229d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a826ff0f-fe2a-4df2-baa6-ae5fa4042077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bb238a-5e25-4f59-b0dd-bcfade7b265f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe32d67-da0d-4afd-bfb7-dc5462305646",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90641f4b-e358-4791-8838-f280a01c06f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd238f11-c63e-4611-b433-2a4ac3be8be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d030c41-bb0e-4642-8751-868a8a1101ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7519af24-9d2e-4974-81c5-c4d9ac089fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386496fb-e93c-4606-92b8-08cabbd80d1d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e334daae-8ba9-461c-8156-c2d0b442dd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5f22c4-cdfd-4b02-9880-bf762a220a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b0614b-39eb-41d0-a452-ba31cd5b69e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31317a03-42f3-41e8-b205-65305b5ce510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eecfd3b-04f0-45b6-855c-1985a80f5d71",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e960746f-4534-4807-97c8-7297238cc8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c936c98-5b78-4a50-8159-97b5f8cfd309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08c625c-9248-4d7a-a7b2-758399f00e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6959932c-302f-49e2-8b1d-21df3ad3ca63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bf002d-af98-4d47-a920-ca17a47a4567",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003079e5-adf4-406a-92d8-dfd98ca4e1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5633e979-78a3-4527-b039-532f1f48647d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c958e2b0-7070-414e-8c5e-4f04f1389750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be42bf41-77ce-4551-a290-4e6baa695fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d5e83a-4cd9-4278-bcbd-518c4d1ad76c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e49bc7-1baa-4f4b-8361-ab201c50104f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3b11ed-3f5b-4c8a-952f-9ea1e5285946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfb2c64-1e43-4a56-be28-a24110fac4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c29cbcce-b94a-4f47-be4b-64e28a7eaa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a00d00a-3931-4080-9582-ae16beec0482",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9851602d-dc9e-462a-963a-5565c2c06a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1edf34c8-d92b-45b8-9b10-617d222c98fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8040ae0-5a43-4ee1-9d37-1d11d91d0a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "891fccf2-8b14-488d-9772-7d74cea73bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9e7b6d-f6cc-4767-a58c-98087ada172a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b30ed3-cf06-41df-9ec9-6076b67de477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d929f166-d9c0-429b-96cd-57cfeb52ff86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c6ccff-31bf-4026-a672-7c8a906bbe34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b653f1c9-feaa-425d-9adf-0c9b90a06870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af988e71-eba0-485b-b72b-baf97cdc037c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff907a9-39e2-4422-bd34-9f712af215b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6b4018-0765-4a65-b38d-3f27a70d2ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a55bba-7589-43db-98ba-c6a1362e0e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "94932faf-9268-48ed-a5af-9ebdbba73e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1e5ff0-d865-49d3-94a2-595b1a6221c1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20519e26-7946-4e46-8bed-72c41713ec39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5e97e8-0e1a-4750-b35c-1846128667f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a709fc-45d9-4021-ad34-d0c191adc8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "876653ab-00e1-4093-8f37-77f526476dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b391092-4995-4852-af45-aadad8ff2321",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1136bc0-85c0-44be-b927-5b6933cba6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ee71be-4ed4-4155-9cb4-65428db4b978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c12772-a03d-4543-86c5-525f6b7c0ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "08f594ea-d7ca-4920-af8a-7adcd39ebab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c534f437-396f-41ef-9ce3-af6a6ae3a3c2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ea6e17-b2e6-484a-8eb2-aa42a62c3ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b469a062-a3c3-4544-a26a-17f728ba5979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e42fda-1922-4684-8939-7cfba03e259a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "afea3a06-27b8-43e4-a63e-f5489243b6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8310a9-3f48-42e6-b148-45b94b7e3ad0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe03c6b-8825-4d44-b18f-9ce729ef5543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a796e22-af90-414a-ad16-7c72d4006758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef80778-1ad8-40b3-819b-39bf4b8ded77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "57c21b1e-26d8-4677-8c8c-ae1ed73b3ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09a7fbe-458d-4190-8cfe-e6d9b5d42d04",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301f3e2b-dc9a-42e2-9fe9-47adcd5a5da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0862e9c8-342f-43bf-8c6d-9eb6c0263eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1167e8f2-d579-4d2b-b6f9-edd196aa6538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "666d9080-bed1-4d80-a59e-4c42f1b35faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095dec91-00b9-4926-a474-1430f46e1678",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b014e46-512f-464f-85fa-e174d1436a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1856fe1-d029-43fd-98eb-fa973fe85035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0ef533-6e08-4829-92f2-c8d6d4471253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f304bb5-79b4-4110-ba12-4a9209e157a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a257e9c-a370-42b1-ab62-8f9b1598a4f2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1d0ae6-5123-47ad-a75d-3b19a9933ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b468880-a6e7-45cf-8549-ffff6a53e277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe21da5c-9dda-49e4-ac97-e4309cb66e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d306df-af96-410c-bef2-b58f9d7d922c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79073da-3e02-4120-81a5-2938473a3993",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e27ac5c-acbb-4b6d-9d73-18ff0ff8caad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc82e4c-3c2f-4859-849d-2360e6a7b90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7418f41c-ab99-45ab-ba13-1ec6b69ddaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c54cf90b-ff19-43fe-a346-6569bb54c4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440e8a59-e420-4aee-aaea-b2e17f177378",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0f78c6-dad6-41ab-b916-3e27b906368e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0611ed98-6374-4960-82de-506b26fef158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ab0b0f-cf8b-42dd-85be-8c0b60b7549d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af495d4d-10b7-45d1-8dd5-c64374fef32f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff75fb7-6764-4bff-8c6d-70671fc46773",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54261cdf-3e32-4857-a054-dd0be0c61467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ccfdd8d-07be-432f-be06-e839da378b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667ebe2e-3adc-4c4b-a662-0846c20cdcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8957ffc9-49ec-40bd-b55d-79178887ab08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a47573-388f-4e9c-a1bb-c49419a09177",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b722a95b-497f-4987-a8d2-cf2308d8c53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4310c14-1925-40bd-84b7-19dbdc8e908a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137391e2-4e83-459c-a12a-fa79e2287e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "864edcf8-ddec-4089-871a-bf84e97ef763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df69a25-afe5-4caf-81c0-8e409c9243ef",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7ff4cc-a3b1-4a82-a703-3a060a428fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5295a050-629b-4552-9d5c-6b8972b9783a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c011989c-de34-42d9-9df1-0fe9cd3cb102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e1a80b8-763e-4047-99de-bbe25a780ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98047e4-5ee7-486e-8c55-45ee616f645f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81da38f4-98c3-45a5-9272-5586405c0c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16942132-6f46-49b7-8e91-d19c19c6baf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d25c1a-3377-4208-8a0a-b9f35de9a05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f63fa4-29e6-45a9-b434-9de182247e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f01813-4177-4351-96d5-7c460df7f104",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424b6e5e-19a8-42f6-b27d-be10f50ab2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01527ba5-cc8c-4056-909b-d0977525b612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f259833b-b67c-4dbe-a092-e7b524a07b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "65ba2af6-4648-4dca-bd53-c595187c0761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66753a7-78a6-443f-b811-467f26e576ee",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8348ead-9550-48a5-96aa-478afb0cbb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f4bdc4-428f-4e52-893c-a84a2e26f190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a059fcbb-a7cf-423e-96ca-3ac4f736e1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d328fac-ba46-4c56-976b-cfd1e46e28e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754fd063-75f0-4b7e-8b1e-e9a9e631837a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3344de1-5e78-4c94-97b8-21ee63dcf7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a5123b-0928-450c-8641-96a0a083cfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72469bb4-1543-4512-815b-d6bebfeebd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81d09fbd-cf8b-47ba-865d-31b9e2c8dda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10620262-39f8-4e21-a4cf-b05ad983a7c7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7f0477-fe59-447b-b0ce-f121e85753ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bcb5c6-e698-4d62-af53-81c3d437aba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f451839c-044d-467f-a8b0-3dbb2fd24432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed32c7d1-3b53-4975-babd-b878595087a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25deed24-7c00-4b7f-a762-4a47944a4aeb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d09161-b1d7-4329-8154-bb38fbb15b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deaaa346-5b93-4661-b7fa-e71378509052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a36656a-bf3f-4b3e-8c78-771a75ced1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c5947acb-ed3b-461a-ae99-17076a559911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6533260d-b8bc-4399-b4ff-ef051d169a26",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d557960d-54eb-454b-b446-0d65013eac62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8342b393-760e-44c1-bb6b-5dcb3e36d8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09c086c-6316-4dd7-ba1c-d2195f70dbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "58c195d9-1d4d-45ed-a633-635a2698f37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29909d65-08dc-4fe9-84fd-224f82f1d98c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ac960a-11a3-4cf7-9503-2cffbf885081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10be7524-d404-4e9a-9af5-7ca84cd48cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b384ddad-5e73-4766-ad09-0908c703dfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d24da5b9-75e9-41cf-8c69-fdf69705dd5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366d3aa7-da38-438c-84f3-4f77e6336679",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "204f1060-cc16-478b-87c3-f267d54ba651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc30a11-04f0-4d19-b68d-172385b2d52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9515622f-9fd0-4122-a1a3-6d27c3981ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "35582ab9-5a77-4b1b-8237-5e9c4e5caead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae04aa2-73c9-44d5-85a9-a33cdf060223",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdff612-a04c-4517-9cb3-afdec85a3e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae98385f-ca5f-4e52-9b1f-89aec193f224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e43a92-e87d-41a7-ab29-e013f5642b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aded97d2-f430-4bfa-914f-0141b1fbfc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93023f0d-25e5-43b5-b509-39d98fefe68a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e383f09-e6b2-4322-b980-eb3a83486490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88031c2e-ff1b-4fdf-88ae-6919f29c6a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb27c5e-5c4a-4be6-8dee-1575a9c574ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "06958c33-39dd-4e48-8d85-958dbd9a06b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca6baaf-fc22-4524-83a9-80f200780483",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fce506-6c7b-406f-b9cc-35d383137658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cdb48fa-87f0-40d4-8f84-c5c8eecbbb04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f41de44-b362-42f9-bf1d-280e90f19008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "edf7808b-469b-4c04-ade5-3cfe7933969e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5095579-d771-4544-886d-9e140a292bc0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d26093-4903-4b8e-95f9-3b634dc4c59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b9ee44-ac5c-4750-b588-9bebfd7229f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de057ff-48c9-452a-b681-7d55109b5197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e607d6-a66e-4461-9119-6bc39aaa663d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8ebe07-30e7-49bf-9014-066d89c5e487",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5671c748-7688-4bac-b04c-c945fe80132e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d91d77f-42f4-4f77-bcf4-407e267e1102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840a99f4-76f9-4bf6-b133-c113225a7781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e705390-58a8-4048-8b51-805c63ba3742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544c152a-f0a4-46a3-81a8-8dc514edf5fc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5266b3-9298-4800-9209-c7cdfd26bfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f3bff7-4ae9-43f7-8292-a96b0802bb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee27e950-b261-4766-beae-db53a327a205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a784e2a5-0380-42e5-ae65-550aa861559b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b4b275-d2b4-4aa2-96ba-35bbd466bbe8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d4b47c-e8ba-4d88-997d-d245fa46a115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669b0989-c78b-4504-846d-959a5c4ca066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8010aa11-ccf8-4549-b70e-fa6ba4d1a8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8323a13-28dd-4911-b31c-8016cb1d2fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ad1bbb-8509-458c-9ade-0e574a37fb0b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b18b5d3-ca06-4c67-be32-2639b95c7e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a44385e-2576-456e-b082-9d7bc23ad74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232475eb-0558-433c-9079-8a2ac2f8aa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37943db0-c0fa-4888-95a7-62b995778202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b45bfaf-6914-49ab-bf23-9b34b113e3b0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98af05d9-0a80-40e8-9e86-b5ac3c46c252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb6365a4-9488-43a6-8019-6f11171835d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8039c417-2084-4993-9ce5-fc0b9dc46912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "161dcda0-8d9d-4539-9c88-1de33ac48120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362f1340-c551-4a33-aa58-11f3bfe70662",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35e1661-d0d9-442c-bf6b-fe2f22507eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77717771-d07b-4311-bc73-ed77d3ccdd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ba851b-fde4-48f8-b286-a9089f660951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "158d646b-3f46-4c2d-abcd-bf43c9966f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc04069b-7b58-443d-8a37-dc4b7d47dd03",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcb20c4-7687-4704-9302-023d07eb8ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a429f15-e07b-49d7-856b-59ff1ad77d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b870e896-b771-4743-8430-dad2e97e37b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee875fd-6690-4dae-bc24-cdeb35bd33f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2e5330-85c4-4c0f-b07e-212d2af62acf",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9e484c-afbc-40ba-a2ee-3ed8ce9edd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1abc90-5a1a-4a17-8774-a8fe42b3941f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4aaade1-4ce7-41bc-93f6-246a8a17bc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab19039-3fcd-4e89-a7e7-f8e7185de5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1eeabe-a2ba-463a-b6d9-9cfea8088f69",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14aae1ce-fe13-4ef8-a0d4-133d58b2293a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33dc99db-fadb-4740-bcaa-e3fbeadf55b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a005c0b-b9ac-4c91-a877-44decb73672f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8740f1-edb4-43b0-b553-24ece10b2ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647e7526-d102-4f43-9906-ba74e6ac144c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b297024-9807-45c1-9868-f15817b74531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30298897-fd90-4d67-9077-f032543ab02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e97ca0-4916-448d-8e3e-38ace4eb982c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01ee99cf-2380-4edd-a95a-d359b295584c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9624400c-79a6-40f2-a565-1a74b63f98d9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65976d1-2b81-402c-8e35-926aa964b2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e6f5e7-c380-4410-b6b5-7471a0593b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ab377f-8810-492c-b87a-307a00424931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6718ee7b-86b1-417a-a54c-bcd674cac4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ff85a7-0d10-4ac0-8077-1a9b9d620bf6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda4fd3b-bcd3-4f01-adc4-4394379b15f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be5a7c3-0e1b-41e4-99e6-371935c768b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a895ccc-c188-4e1d-a6cd-bc33d6e4996a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b87bac7-281e-4d09-b9d0-3f65fb549a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa37791f-6bb7-4b31-a06f-07bc929f8ee4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32533dc4-1a4d-48ab-83e0-a608b1b98986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ef6139-1d82-49a3-93f6-01d975240c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a3016f-6edc-4159-95d5-d286ee1f418a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe77fbf-551f-41c4-b1ea-f18a7e69f1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75d91be-4549-491a-b21d-fabaa72f8535",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ddc090-893f-4661-a667-34392259e5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbc59c7-fc7a-4094-9358-0ed39805fb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701fe5cc-b29c-48cc-819e-1c1d8897b10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5662ae8b-8c1f-48a5-9a89-9f0c69e7972e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca3d153-db0f-4a88-aedc-7de9ce76cafb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78482e8-5364-4e9d-b75c-5c635ed744d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a0874c-549e-40c6-b2bd-e69d7130633e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16345607-5151-4d53-ab3a-c2437de23411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fddb1038-cb2d-43b8-86dd-8864f7bf1e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c6199f-28eb-4048-86a5-36a6550ac352",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374a81da-40cc-4df3-9ad4-f57127712e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca710955-8539-4fd1-ab8d-f690506ff932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b96b61b-5e3b-4c96-b9dd-e907fb4a6281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "650557c6-93d9-486f-a1f6-f95a8d166dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56d435a-69ff-4e62-b55f-a43d9da34a49",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129b6094-328e-4a8f-831c-af1b7bb56600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d40de2-d34e-4495-b415-6ef87f919a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72f90f9-4918-4d9d-bf2f-4dc42ec37cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9371f737-e750-4854-b686-9854974973c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5602de5e-6f71-47b8-9a49-d1ed21355c64",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d011295-c1c4-45a0-9b7e-2cc00b9fcefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d864752-f1b7-4086-b209-437c1a71551f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df40811-ee8b-413f-b745-560d925a7a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c5d2a6-8306-4ec1-8459-41133b454081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27a519f-15d9-4d31-9ebf-0dcd0ef3f723",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fae14b1-c45e-4ff4-a324-3890445bea40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba09f620-7d54-442f-be44-c9ce27fef75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8320f07-1c78-4f4b-b9af-1b8a41949710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4e9980-7ab8-410b-8a56-30c859f97a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09e7153-fb8b-4543-b9e1-d66fcb3c98d7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b8e85f-a1a8-4679-9014-e185aff48dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789ce2b3-4074-463a-903c-d53bc5c07984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2ec05e-1325-40e0-b94f-38b89bec9124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e32274aa-94d6-441e-8e9e-8de5b539a301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0ee97e-c57c-45a7-aae5-bc5562200644",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c227e6-14d1-4923-9a04-02820d41253f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93de6170-783f-41c0-a13a-478acd2e48f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2973b5b-e6ca-465f-9147-492417c50a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fce018c-27cc-4fac-9829-9c4606927727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758a751c-fcd2-4276-a992-7fb5d58e927c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064e35eb-87a5-49d9-8c34-222cc6f5ffaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592a57b2-4a77-4a89-b886-96d097eb5dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e474e18-e3dc-428c-bb91-2470c7eac232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad07f235-bd4c-4358-b2a7-7f196302be1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213c6ae5-e0fd-40a1-b78a-f62f4e95513d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b707af-9d89-4e90-b519-eb1308689b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940caffd-36fa-45ed-87da-616d6882f470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52219d37-49ef-429d-86bb-1d414fbce319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da469101-4576-4bc1-b5aa-db4b3018065c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833ea9a1-f88f-4674-a161-a5fb9a998d50",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad063f9f-2a3f-49f5-ae77-c9a9c8865178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd29e25f-9af2-45d5-9839-e70c35204714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f982a6-fdfd-4d1d-96b2-c9830f5b0914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a55bcda-7d8a-474f-ae8a-83e5e391ff4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ff72a7-4142-4a45-bd55-e9546733e5aa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f86bc15-da00-43f9-958b-03a6cf0b1cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475d813e-fb76-44f3-b651-373fda9cb9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b613481-5155-48bf-a74b-7fb155f726a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddcd88d-34f6-4642-a191-6bd8afccc599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d007052-093d-4e6d-8a0c-9e9bb5a9421f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc7301e-6c3b-4168-95a4-29b6ceb1f789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666bc7aa-9210-43c6-b69e-d45befebe703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fc4f72-063d-4377-83f3-bb81200b3d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1e60d8-a20f-4bc2-b5e0-259723b94542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910a3b22-2228-49a3-a21c-cdbc126dc190",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c1d3e3-f170-4e07-814f-a0d4c406cf19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1cb3352-99fb-4247-be6c-b6b3a880feb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a8f561-6d3c-4edc-8763-63f8977f91fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f739383-32f4-4892-b4f3-d713e08b1547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6446db-29c0-4ca5-ab0b-bff7487536df",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e20603-c282-4c02-82d2-3372f46906d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f6b94c-dc0c-48e4-8a7c-004b7701050f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7e06c4-b6d8-4903-8811-02dc380d38df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bef31b9-59ab-4bda-be43-b66f9ec2a7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f67e95f-c6e8-4f78-a2ab-6f03f3c61b89",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e23a68-7215-464d-aafd-dcd6c41b1754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "55609647-9515-4149-8e52-44bb3f0346a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebcf835-fcc3-4da8-90cd-25e79716ee39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc6f2ff-70e2-4da2-8e48-47da6fc11406"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8fb8a999-4984-491e-8bdd-30953122459f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11ece42f-c3b1-4e99-851a-5422f9acc000",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6a4aab-747e-4e46-9d07-5c35b1551df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b2771bc-6f98-43be-a909-bb1c9ac583a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365b4788-adbd-4265-a81e-81243888ca95",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b20cc8a2-aac5-41b1-9ded-b7cb055dc5de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95368b36-cf1b-48a9-bc63-60ab54a48fd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb9f98f3-ed1f-4b2b-a107-7ddd9098c23c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75d68e5a-7c89-4d0b-b8be-a1d4f06d09b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45cf599d-91ae-4c0a-ba02-b19e2eb65410"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1daf385b-292e-456d-bd1d-bfbb12a3fb34",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d168ef3-aeb5-4600-afe0-cb0a0959c882"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b9b5817-dd1c-421d-a966-00c4e7c296b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c46803e8-aba2-4c16-b6aa-7a66b6559a7c"
                }
              }
            ]
          },
          {
            "id": "8b45f9e5-93d9-4bfd-a7d2-1427f2106e17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3c1c136e-4b30-4e67-9f6a-071b72818648",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "934cb32b-9afb-4d3e-a68a-3decd81d8d90",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589870a5-359e-4271-9174-df643dcba423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9f6ac1e9-b404-41a8-9a7b-1f7274061dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce9c1fb-ad13-465c-83b2-4224a3d16a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba349756-f630-45ee-9f61-2ea9c72e9df4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e2ca24d6-9aae-4f66-bd5e-4e3f2dba8859",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07b6b656-d129-4883-9ef5-4ea86053cc8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d5dee92-af50-424f-982e-1617232cb9e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9117270-99cf-490f-a851-1dfcd756a707",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a9facc28-44c9-415d-99e2-8f33dffba2a0"
                    }
                  }
                ]
              },
              {
                "id": "57eabb99-36f9-4362-8ebe-420bef5e2bc9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8c3bf29-9a2c-4763-9d95-052bf27d5626",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2495564d-ed36-4b18-ac7e-a9d5f69145c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c4514e4-ea01-4820-851d-7aee192105a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f2e53152-668a-4e60-940e-481ef9567355"
                    }
                  }
                ]
              },
              {
                "id": "f9a5e34c-8eb8-46cc-97ac-e9ea2a29dfae",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dd4962c-275c-469a-9bc8-e1e6f32542b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e6e5d4c-8052-4021-9f49-94848aaeb113"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41bb7b45-2454-4d06-851e-8c65d64e35e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ba3dc203-f9f1-4d48-95f0-f33a9b379769"
                    }
                  }
                ]
              },
              {
                "id": "2cefe1e3-7501-4fd4-9c84-731d39031985",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac064f85-72d9-4770-8498-0671adcb89aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0db1b46e-6ff1-4726-bb3a-9d9db91094e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53776f36-67bf-425c-8257-2a895f7d4098",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "79626154-a996-4455-b4e2-751c87cf1414"
                    }
                  }
                ]
              },
              {
                "id": "1b22de19-6b58-4d81-bbc1-bad00d14a490",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "786c0b8f-fc83-4193-8eb3-b19098db1ff8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cfbc7ed5-0b13-4f4c-9363-d0a0677027ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64a80eef-141d-46c1-a552-72ce4a62578d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "23f60e70-fba1-43b0-9bc7-a5a71e324d9d"
                    }
                  }
                ]
              },
              {
                "id": "9cf316ed-4466-455c-ac79-bf2c0fc7e5bb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51446f06-b21d-4a9f-85bb-037b55e2fba2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c13cea2-acbb-4ddf-9d4f-af8ec0107f9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bc93dc2-aa6a-4652-bc1f-40804972962f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29342474-2d6e-4292-8961-2f88d6894d07"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "591d7a17-7ce3-426f-b407-38b29edf49c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1db0aab-10c9-4a69-81c1-bec40e719214"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d315148f-36e3-477c-aa89-2f61a2439628",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6c4f020-ef2e-4605-a497-b379fe488687"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3bfa4d5-2f88-4fc1-9c28-a287cfdbb0d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6371e69d-eec9-4a56-bfac-5b2112c9df0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d66d2d9-d626-4de8-9fb5-1cdc985c4cd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4bce26be-98c3-481d-97bb-710fd393edd8"
            }
          }
        ]
      },
      {
        "id": "c2eb16fa-a79b-42be-916e-1d740d75bef0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "809f1e80-778b-4ecd-bd32-4ca2d9ae5deb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9a3cc397-aa79-4a7c-8445-fb87a267c838",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2304ff31-5678-4ab5-aacf-6a899d241843",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ad0cd7-2a1a-48cf-9e22-31767cc37203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925ab11a-83b8-499c-84d9-756831b1a441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db630541-30aa-446c-a60c-18fdbbacb9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bebc5539-764b-49ee-b2d8-e0437513f9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400d1eb4-0528-41d5-8a38-342fa274a2cc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea8eef8-10c8-4037-a018-d89c839a47ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15d6643-f911-4b81-8913-0032d0223ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cc03c4-5b6d-44c9-acd5-742ca121c825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dee45f4-11fd-4a9b-b071-28cf2cc004f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c81b628-5fe3-4f56-a095-79b6b5d34d69",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8005c77f-7caa-49d1-8d5c-16c35c02953e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e518bc1-a34d-4f5b-ae8c-1f95f30a8296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70acf9d0-88d5-4ed2-8ba0-63ee9a2e54a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e80b414b-0641-4f36-8fb6-4244c4ae58bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a1a7b4-f890-492b-b624-f4b627ef777d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540f6f73-07a6-4985-a82b-36d5bd01f76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524655c8-3f9b-417e-932c-bedfc8de61fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc77bab5-5778-4338-b1c7-897bd79e90cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cecf85f-655c-4319-aff4-a7c8bfb855be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13806582-04dc-43ca-a5c9-89c7fc57eee8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2023c5f0-b43f-42de-8a8d-4c4987fe507f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004587b3-b172-4677-8ec1-9629f7db1c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e637668b-f4a4-400a-a981-d818e3bc60ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "326a8d8c-a9ec-4e1c-b85d-74aee6de2698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f79d6f6-2f96-4628-b3a2-78e7ce35a2de",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad354f23-926b-4ee3-a6a4-77ee09e695b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfcc825-1ad3-497d-9205-ffe46ea78e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c1381a-74f4-4a24-8908-98501faab50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46a4291f-ccba-49c1-8b0e-0d1e14aea1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e64e16f-b78e-4975-a47a-da7e45995b86",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0a34f2-d235-4e38-9c15-89ec99a4a752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c260d0b-489c-465d-bd33-f56dc1f603fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6d0b8c-89d9-41a1-a8cd-3eb3c4717b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "756fee8b-2afd-4b17-bdb5-b49546fd1c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c1ead5-e323-4c05-ab0c-7a1192211ebc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c3fec8-bd73-4ca6-b5cf-204f8b780017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba37dce1-7490-4cd0-98a3-f6b400bb8afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32989b4-e18d-4aed-aab8-6434c58c67cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da08386d-ee98-4c74-afc7-7797b69dbc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3807a080-1290-4542-914b-d3c11bae2f7e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476b9aaf-29be-4b43-be85-b66834023516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3384d6-7a21-478f-b62e-577b65d50513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6c3238-2f87-4512-a8f5-1afd3726a9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83d591b4-3bcd-426a-936b-6b8fb9084dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4109c37b-5c4d-496d-a414-c05c87367e59",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e05dcd-3d06-4c7f-8482-e56254acec09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397dfa8e-d1d8-4b69-8f1d-34a5f1b285a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa216a0b-af77-43c3-a35b-3e8453c7e740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "430a5b14-8800-4180-b952-9a07a837ce3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef548785-6683-4622-a2b8-c1b2ef4818f3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c8e042-329f-42ae-886b-dc37d9b8dec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f923bd-66e6-40aa-9f71-883669e6ccaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10003c8-3464-42da-98b7-c837b64dc5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ef49beb4-2f0b-4e86-98dc-ba9bfe0bc231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d22504-f61c-4240-8319-0455ac2f8f0f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08917c34-3716-4673-895c-4c33fd71a951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3203c2-cdc2-483e-a1b7-2a1410032dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60f92e9-f8cd-4f7d-a4cf-71afb4f8abbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a59d2d5-5dd7-470a-8438-d66a48630816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a9c4ab-e6cd-4f0a-b1d5-9c5b4486c2d7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa45a9c-24fc-4ec1-9c99-9f48f7065d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fcf59d-e998-4491-a74e-d04bc22cb1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77a7a0c-4132-49e9-9c64-bb5a6aea76b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f99479ec-2761-4382-b399-9a428a38790f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397ea1ff-b652-4ea0-b664-f3edcf2f6346",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9979bf-cae9-42cc-b6e6-5c08c77d2255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05180326-78aa-48c1-aacf-50789b2341d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fc0796-9366-42fb-b3a1-f21b542ba5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ae7291-2a41-4523-b907-110067d8d5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4d4379-638b-424b-920a-ba148d34f214",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38771733-8112-4f94-97d4-9693dd2a1911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bd6f46-ae8b-4f40-8cb7-3671a03834f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0526a1-cc48-48b1-ac8e-29a84dbf76d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b772d2-01d0-40aa-9026-3c2200dd7ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714719c0-384f-49b3-90f4-7d8bf8132cbd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bd0d1d-f5a5-4045-b746-eb1ebb27a26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4108b16-b42e-4d55-9ef6-f4635345d0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c179fa00-d1df-413a-8aee-4a0ef412513d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb82030-f849-4374-8ba1-60263fd452b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f9e99e-30ef-4d1b-8268-6723e4a547bc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b68a67-871d-46aa-bd3a-5a1521e2cc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fea816-fccd-445a-8fe2-6e7e19971d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b13a950-34d1-4a2b-8efc-e9f564800fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee212e7-eb41-4f81-9f4e-3c859e49d837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb410ba-0ccf-46da-af00-96273223c80c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea13d9f-b822-4f77-8d8a-523ec24de8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a780a1-20c3-4c76-ac6e-49c186fc1ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a7b1a0-3cc5-4c3d-b803-c982c6aacb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3e203b-ec15-4aac-b533-2fa16fd5943c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147ec0e5-4c31-4399-88c1-3aa9f46e35f9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3a0397-4f46-4b04-9329-c5591f418da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63f3899-00d2-40ad-8a4c-b9716f408345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca7f621-f559-4403-87cb-4d593edba3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45305bc2-d4dd-4675-84da-716fd18de4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473d5fec-98d5-45de-9b80-6a4b419eeac4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4516b83f-d9ba-42ec-9cdb-27a82aca2e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2d4c47-e75f-481f-80f9-7c551fcee708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159eefb1-a963-4710-a043-3cf20e80342d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4b367e-1af4-4767-b6b1-04be993616fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfca3c9f-22a0-4cd1-906e-c6e3037d9cca",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8dd75da-4c33-453f-b3ed-f5a3b7ca363c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d3dfbb-2cc8-4079-8336-71a265b2b8d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbec97bb-4fec-47af-b5cb-f7fea5eb95c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab43adde-e1b8-411c-ac49-2620fe4a3dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da69baa0-45e0-4014-a848-c39c512a3b5b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ae09a9-9820-4d54-b48d-c64742443a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99451e2-e888-4fba-8300-2d33d5675dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08212cef-b2a8-4198-864f-1d68a7e2d92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3553c6f-ae6c-4bb0-9c6a-be98e1d3f710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44052341-d053-4ade-aa99-5dc096a6af68",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0092ad-8d91-4f36-bb5c-068b174e18ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924ee445-5bde-4ddb-8323-5d6ff9421de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f7f26e-d074-4207-aa90-c82f537a218e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd34327f-cc90-47ee-893f-b17ac7dafb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa10f7d5-6ea6-42a4-96f2-c9bce5a6ba7e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88729971-2c6a-4739-ad93-809adc287d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94876859-7282-4e6e-add0-5d3c47dd975c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af676dd4-8411-4927-a0f5-bc93c5582f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1507d437-ca71-47ce-84a9-e3630beefdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31473f2-5673-43f1-9da3-1d362f600c67",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2cf275-988b-4b1d-9383-a100b6419e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c52afb-36f3-450b-b554-c801c0734f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab25c9ce-47ab-4c36-90b6-99ca7611daf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41df9059-bcaf-41a4-88b8-6829fbb5933a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1bd6ee-5f88-4e44-8041-a2c7a0ac8d01",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0149a062-824b-42a7-947f-e313d93943dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b359d01-bc45-422a-810a-d2c31b4fe418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e194d244-f0f3-410e-aa9e-eace4a312a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5434c2c-35a9-4830-ad0b-8c8989a36ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81278ffc-abeb-4c1d-89c2-886816b03a90",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98af796f-2ecf-4ace-a99d-c468bd3b33a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a64f5a-45b1-43cb-95fe-e0a8cd34e1fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6f6f91-d53f-4044-9d3b-5ca1103c114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c7a64a-ba10-4ffd-81ed-c917fad06467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702a53ad-087b-4e5b-a808-a9ab14cbe53a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf94ce2-c669-4651-b8a9-31137299ec1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3610f0e-225e-433f-981d-a2512badd54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe73f9a-41a9-44bd-87d0-51907d45f6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b825a54b-ee67-4db1-a7a4-307d911b6ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b639f4d-7887-4254-be44-e223590d422c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04174b91-32f2-414f-8baa-cd80ba6bd80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93ea7e0-6ddb-439a-8a85-32c2e494638c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b124180f-fdda-48f7-874c-3d3dd49fd92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "993036e9-cfe7-481b-9d0c-54149a2c8267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bac5d7b-b4f7-466c-a4f5-650213000a08",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c60a8b-6f2d-4ba4-b862-a116ea50f301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef4ea5c-2f84-4cc9-ab03-405e26c3d0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a864c8fc-0b20-47be-9c2e-b27037913fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e134b9-f800-4f78-a083-0d33e4574bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8637ce3-48bb-4945-966b-f8e3bf2db112",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b155c6a-53d7-42e2-ba2c-0dc14beae65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f808ccdf-59c8-42a6-9858-adfa766e7469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df47a3e-13d6-4755-8afa-0e7e8f0b6386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "151d7aec-f9e2-42c9-b18a-79f3839b912f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e246cfb-090c-4472-88a0-727c5546f4e7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48007d9a-9c73-4b4a-a8b4-84b08f546c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10447f23-8fd7-46a4-9376-0c0cc856e330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58c132e-370a-4953-bd58-6ca4ebf965a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e46cb900-a675-4809-a9c5-d66620c2072d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62610afd-0176-45aa-8ad5-8fe55ec3bc72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c2fc51b-6e09-49c8-8721-e6d64a42d8f6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223c834f-3345-4658-bfd0-4dd75c6cf028",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "df3e6e43-c9a1-4c15-bd21-887bf3e856f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa76554-6cfd-48bf-ac5a-a6c1b66a282c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08629754-6735-4d09-b954-610ae91f8873"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1fb48ea-4ff0-4de6-863b-c2120303f949",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40e61984-929d-4046-b7fa-38d75eea9aa9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05e97f5b-6398-4685-a614-80bb71d36a1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e77100dd-9b98-48e3-8e0a-7dd41cdb002d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1559f8a-245e-4cc3-b6f2-46ec7924a723",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f96db8f6-273d-4231-ae66-680993c35413"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de494946-3272-4d73-ba8e-9a9c1d4e3ffd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90d64a11-401b-42ef-81f9-f075f442ff7e"
            }
          }
        ]
      },
      {
        "id": "02b14f05-368c-4f9d-bc66-ee30099eeb5e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "86bbb6fc-2e47-42e3-a9b8-747a27d44f10",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8111a43f-201f-49e8-b178-63ab305efdcc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b0f27d5d-9f10-41db-a626-e37c4a730750",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8c3c47-821d-4c30-8cb4-e40c6918ea26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a307de-892b-4182-8fea-a2b71c6d5445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ed6072-7ce7-4df3-a4fc-9f24b9f34f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "afedc050-3a50-4f2c-96cc-f45a4fede6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56b2117-a2a5-465e-b8c4-1654c286067a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2289341-1215-47c8-b60c-7d66443d3b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e06bdc45-5bb6-4d9e-8c00-bdd9269f4521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492f6537-d2e0-4c1f-98ed-005ad9966889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf12290-0655-412d-8312-e815fd1c4a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a28e23-4740-4a1c-9456-eb4dea0dba96",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3024f2dd-0cbc-4ddd-a842-5fb021a8ac96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2bfd3e9-1145-4ac3-9814-257bfc04d2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a166279-647b-447b-8321-9b17ca46e0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59ee6e13-3af3-42ed-86cd-d070f626f3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689722ba-189f-4cfb-a3f7-ed0585c754e3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7ff337-a5f9-4b50-88f2-fee582e36411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120a95ac-c5fd-42ae-99fc-ce84bc70d5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d408df3b-8853-428d-86be-1948b9907c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53ce2073-c68d-4f3c-a9d4-ce24009e2197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1041b752-f6cc-4fb3-a580-a278c57f9174",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc62d0d-9144-4578-a2eb-51819f51e366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4147456-05ec-463d-bc63-cf2b6a7c9324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cd4b0b-d161-4de9-95c2-7b698afd2b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d09ecd-459e-440f-bb34-863d44875e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2e5929-9fb2-4fc2-be82-687d7d9c7a64",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7628d217-487f-4f88-86b2-ae7913e25595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80720562-23fc-4f64-8d0c-7474cdbc405c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9138022a-2d66-448e-b043-f2777d05a269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6686b2bf-faf5-418e-a3f1-35c23f5cc8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0200b474-f44e-436c-978f-72ddc8b47292",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce289bd-8669-4cc3-ac74-fb537076144f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8866067e-307e-46cc-86bf-034705c4b8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ad5ccf-0e50-4280-a563-d90d93958e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8e9c4c-be20-4c41-afcb-3e1c3678d3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d09ee3a-e2e8-4686-8788-629a74a0e89b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7f906b-4199-4cf9-8ada-a70eed9b9877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4a9823-8b94-43ab-901e-445c9c868930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da4052a-f2bd-49a4-950b-9b0e3a506ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d443acb-0bde-4a3f-830b-aacb6ea52df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31998170-8794-41a2-b484-135491ef3885",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f0ac1e-08bd-4011-8ab0-ea7fd27f6fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f3166c-d5bb-4f0f-a457-4d20433291ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633736ea-7810-48fe-a4fb-d30cacfb183b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf158d67-c48e-4a28-a807-0132375c9999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b61a718-cfcd-4f56-95bc-49795c796856",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331d37f8-8928-4fef-8538-5abf4695fa64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69511a6-8702-45e8-baea-a062bab568e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25a1654-2d29-4a4a-a13b-ab2a2d832d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10890462-dd52-47f6-a573-7ca4e796ddaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bd3597-696c-4e7e-a261-93706992b952",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfcc7a1-8373-4701-9569-da361251d5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7802f628-f0fc-4a1a-b1bb-378874401b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777888ba-073e-4222-b045-0953e3c8bb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4d056fdf-21c1-4eec-8711-3086de525e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421b686a-dc78-4df2-b1a8-25f231026cbc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c586ace-2f17-4028-8d07-b80cedcc2368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5ae4d3-c926-4636-9b19-726eb6b06822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb942b8f-aeb0-46b8-ac14-146f6b8ffddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78a63b83-3147-4497-bb5f-bc3234e30b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385b9357-480b-485f-a9c0-fdc1d20d1833",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3717dae-e5a8-4347-90fe-2fd6a7589c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a57c1d-8955-45b5-bbe0-4e6832937723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff101244-2800-4acb-b891-f0173c241f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "382d1ab5-056e-4841-b1b5-df2174da9c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e13a99c-be19-48b1-a801-334a641b8c0b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11eb13f0-205c-4d82-acbc-286ad04839f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdaee2a8-8e1e-4092-a2c6-d1bc3e35d7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40052116-5b71-4120-9a8e-e226f7d76c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "301f733f-be04-4ba3-98f1-162326c7cd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92b2d89-d0ce-4874-aee4-cf0edcbc4381",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d846abb1-d3f4-4c1f-aeef-c7449bcf6984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eca4b38-9a90-420c-8156-f08a54a11b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fddf83-1557-42cb-9acf-958b040c687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "37579a78-5a8a-4274-b606-428353c9ccbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab80cee2-2c4f-44b6-b35c-5b324186c967",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e34c589-ce6d-406e-8d39-1e8819125b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47fc2e16-09cc-470f-bf82-35ff167c2058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a279d4-0230-4681-8ba7-547cd7d8ccfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d76bac44-6605-46b0-8e94-0de75139850b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb58156-f062-47db-a90b-fc4323d98be0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e552f4-d3e8-4343-bff1-f7e9a727ce2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b742c201-a006-4d96-bbfd-54bfc5f0f509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5a10f3-28da-4871-a52e-2a366285a89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "80f9d626-03d0-4a21-a602-459b4b6795ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af22d145-100d-4508-92d5-a0c2938775a4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782b29cb-5f80-4cce-876d-8caf5b471ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c5c1cd-407b-4bf4-a3c5-f4e9a374fcd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e74bd8-0f4b-4f20-8f0d-04ea3b59e3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c0f467-7916-4c2d-8d04-2fa2f03ff028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3683ce19-194b-4c91-ada3-6b1f6e6f3678",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51ff91c-9781-4aa8-9d48-8bbf850866da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f663fb0b-0af6-444b-9d05-daec48bfa2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1c5daf-b172-4d02-854b-7807e754afda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26208daa-cb62-457c-b6ba-4ee0aee6c831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101ddd8f-4279-41b5-b4ec-286e4c340e39",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edac051f-d526-4973-a0bb-98c10414615d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614087d5-3cef-466c-babd-d1eb04b82eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ebb116-8f00-42c9-8339-d0456520bc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d72c773b-f13d-446b-bc79-6badf472a792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a815a0be-a6de-4dcc-99db-cdff91e336de",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69af366c-3539-451a-b59d-4ebf85e2074e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c8543f-afc0-4977-80c9-f183455070f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d312796-8e0a-4acf-8681-33dcdd648f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92d448cd-f854-4e6c-b253-95eff88457a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a0657f-bc00-474f-9e39-187c4b9e7e9e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bfdb05-9dcd-4698-ae3f-8d6739e71f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3555f3-b424-403c-928b-20e053f5c536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cd144b-9ff3-444e-9620-d4fba4ccc93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa5c1b0-8a32-46aa-9100-78f61508d821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e81e8a6-50ea-4e49-bf2d-6fa27e6c4e5f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4837d936-d604-4b58-be39-b0a8fdea2851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0d66ba-8919-4ead-95ac-1832b6d16533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ffcc2a-f891-4280-abb2-f7270b550f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9cf1c3-7373-4cd5-ba4f-e9c92d054e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17070132-77bc-4b2c-b583-3c44722ecd08",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037fa92e-54ce-4b1c-ab76-70b7d63f707d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24640d2c-1ead-4c8e-8618-fa8637695868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6508e4-df9f-4c31-b524-c3b9aab91035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90174ca3-1337-4042-8f74-9cea5b06703a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99438c1-f388-42dd-a9f4-e529571b3d97",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f03b82-be82-41f4-b63f-d5a814dd48fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40abf89e-88b4-4a3c-be12-45ea80240ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d018d0-0b26-401a-90e8-ae504c78d649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75857d7f-2611-4719-9153-514f07d7042e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c695255-18b3-4f22-bde7-c14c3a84999a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b4c7a3-8066-485d-8326-6db9500b8d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f78f11-fc6e-4600-b1bb-5bc77a5ba6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419e23cb-e242-45a3-8a3a-f44bd7117f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf10508-e40a-4149-a871-d6b083875a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb56449-0cdc-4b0d-b8ef-bebfb090b66d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9235bda8-b031-4b75-892d-5b9f2afce18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dff1c11-d5ba-41ad-8a7e-8c85825f340e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0527c721-308d-430c-acb7-c9a38e95647f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fca588c-5aef-40be-88b1-4fbd8e4de88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83891ac-e32f-4475-a228-cbc638b32735",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b726435-d800-41ca-8a89-af490eafda46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de96e57-47fd-4217-896f-33b65d16824a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117b0e64-ad11-4232-a72e-14986e49613d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a8ce4f-0061-4caa-9379-7b1ce8500fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ef1e18-3896-4091-a238-44532afb4c3e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d15b3b9-ad9f-482d-83ad-342b66501aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267f68ff-2c9c-4714-9e3d-f5600a5cd442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceed3bea-fcf0-4dcd-ab95-4ef04f35b1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e416ad3-30d2-4f69-a6e1-d7d62b4b8d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d3df03-9ab1-48e8-9909-89a17f3fa35e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17e2f58-8429-4486-a0c5-0d98d99b483e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1a2a6e-4def-4060-b8ca-7f144b2168e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23adfa9d-71aa-4c34-a0c2-9f96ae83e97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46cc9c9b-88ff-473e-9087-b92c0b0d7371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb141f5f-fe75-4403-bb9e-57189852c92a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40daa3c2-8c8a-465e-9125-d2512929ac5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5deccca6-2e1f-491b-9aac-4b0f8a0aa728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb355d6-02df-4b42-96ff-542763873103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7a765d-ddc7-4e99-a5d5-72417e7d6aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef882f4-7ac3-419e-9599-b0ff7cb5e66f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7450732d-c961-457f-8777-3078fe2d0731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d984301-3f17-45ec-8e6e-5430964aca48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1256c54-875b-4cb8-84ff-04e48c06d1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7987f4e-2de8-4928-9087-2368f0a90db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18d1cb9-2226-45cb-97da-8ddfdf692c66",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fb2b4b-03fc-472e-bb86-a3569cd017c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0604a5-677d-4274-ab79-77abdc900c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec847a79-0b1d-4340-8597-3f0798370b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad760df4-3f78-4560-b39a-f21564dbf505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4aeced-cb41-46fc-a70a-6916f9f1e78a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd1be30-d479-4f9b-ae16-b4f58c08d4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13eeb721-9749-4beb-afef-9d8fa2dc3547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b169f9f-0994-4253-99ef-5879dcca4e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06ec2ed9-ba21-47f8-837c-2c5a846fbc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c8e617-cf32-4664-ba24-054ff88f61b3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdee978-5ada-44ef-a042-766fe6b873b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf4361d-4885-4d1b-b984-ea65faf6bcbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e0a4f1-2140-4998-b69c-6be67758d9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6d7e13-461e-4b35-8a52-c9a5fe81e4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861161c2-0ca9-411c-af7b-f907f5c76a1e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e97c67a-64a7-4ad4-a74e-8ec83052c27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feae727a-7b28-46de-9b6b-45e168303a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e926729f-ca10-4d5f-9116-482fb53b02c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "297360e3-82b1-4ebc-a023-ccc0fb83cf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4b3d74-82ae-4200-85ca-78cb7c4d185c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d1e43d-3a52-4e7e-9a45-91acf9745808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31dac4e2-f2b7-47e4-8a05-9009fd835292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fde9c66-0ac3-44f2-9e82-ed7267e6e3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a81f28f9-e37b-45a8-8c2f-cc3e997ddfcc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5de1fa06-1cfa-421b-b796-8034268acaa0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7e41249-139b-4d0e-a5bd-581a3e342a98",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3cbe64-322b-4f9c-962b-c7fc2b5f45bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "78226ee9-cbdd-40fa-bc62-442dcee3c3d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38180ac-a5d7-4098-b152-910213420312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d703d62a-cddf-4ed8-81d5-d510d85480b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "024ccc64-e03d-4b68-95bb-167baffcbd02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7c1eebc-7ec0-4dfe-9fc8-01ae8ebfaa39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f0b5c8c-3f16-43af-97dd-071cc14f7533",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d05289c-dcb9-4adf-97a3-9a2656c2f7f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff5ee2db-f76a-49d5-9462-4baa75c9d546",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0ea40749-05c6-4b05-a035-183c2ad3af05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd8ac73c-32f1-4c60-b880-a4cc9ad7d719",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "483cc86a-451c-4d5e-b8e7-0f293485b94d"
            }
          }
        ]
      },
      {
        "id": "abb0f72e-c540-49ae-bab5-8b8584df5bce",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c27fb113-c5a6-4289-ae62-2549c99a3eaf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e27a090-ab29-4086-9999-04e4e0ecc5c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b224e1a5-42e0-4b24-a182-5623d6d2bdc8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48055aae-c142-47b7-a204-3f0b38fe5272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced8e139-8108-4d7e-b0f4-86a25f0448e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e2956b-a1a5-4ce5-bb61-4b61f13a43ce",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dfb393-2528-4b07-ac61-0adb85b7364e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb86eba1-dd13-450d-adee-0d96ee1a83f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef9db68-73b7-458a-b339-9d9ab267d3c7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "987fc7ba-0352-4821-9526-915100390569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a286f7-e4a9-47bf-b2c6-758d2c28994d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b53f75-9bfc-4e09-9aa1-d5979e0e9616",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aced0341-326f-49dd-bd0e-a5e1fdc9b151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dfff793-44d7-449e-b8ea-81eaa87f1d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3106622-2f96-4f3d-915b-473954033663",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f649f920-215e-4369-8810-8e3c12cf5f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ceb186-b6fd-4b90-b42d-1cc2c6104e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded343ca-8bbd-4d7d-a4d2-4a3c96110790",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0c9933-6b11-4c7c-a737-ed00a72bd0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268fb5b4-eedd-425d-bf90-512e0a5ca0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb2a12e-bd60-4774-b04f-149cb89d847a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569bb5c1-980a-4e65-be61-e42ed7e7e6a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94137a4-ac41-4674-84fd-ff33e36ef89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df78ea20-71ef-4ef8-b576-fa0cd742b933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71a6b10-ba00-4d35-94e4-1dcf31b84cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33a5245-3d77-47a0-a878-e9f680677528",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89dcfdaf-6922-44f0-b1a6-b9b8b9efaa53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cabfdafd-7e0b-4e19-9302-2aa80f7b1c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2cbd52-95d1-48c1-83c1-6b7f78dc79b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206d1b84-0926-4a3b-a364-594d7b0fab3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c27a442-0df6-4194-84a1-d6bd046d756c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2fb87ce-54a3-417f-a5c4-9ef9ef936d7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbb4d170-119a-4956-837c-994bd13d819a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aac923e-50e3-451a-b180-7757c2b4e289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b38ad64-879e-42a0-afb0-8012e5478e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cebafa-a8f3-48e4-bac7-1a2be5c98aab",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c23c6a-bcb0-46a0-8ada-05be738e9892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e2787d-a2c1-4b5d-b71f-d6f3f28d50a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9d358f-0af7-4375-bd8c-df8ffddfad7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd99041-ec54-49c9-aafc-1dd71a463548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2834380f-d534-4df2-96f5-1fde4042afbe",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9828b829-102b-45d8-8965-611b02a1bb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e9016e-0d88-4296-977e-2216c3694359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134a23cb-5578-4197-8556-fcaf2a8e62ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399e3f91-4a6c-4d4b-a732-0d015866e525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e19e5bd-ea4d-4153-ae9c-a4e5eebe5fe7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a34b31-fc52-4a4e-944b-f2d698afc81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c63f7a-610b-4d25-b76b-3cf33688a711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357f1ced-daf8-418b-8a4f-0dc124ccb5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fa481c-c21f-44a5-8a13-5c8e7e062b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51933c9-aca0-46b0-894c-b339a24e692e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e270d0-05f4-477c-9e11-4170d220c2a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b9e4148-80b7-45e9-89bc-cf421e6a6f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a6ea4e-3a64-4e5f-83cb-b43b2ca5f00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f397bf00-2f1e-4d89-8ae3-acc61f78be08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9465bc0-6753-436d-ba85-d13fecf44358",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfd8244-3d7a-4a3b-81ad-78e950eac49c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5c77019-6539-46d6-99b4-48dff4a5f30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeee2ad0-cdad-4e01-9a3d-a1bef360bfec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbaab3a-a51e-4c9c-bfb6-bdce02052c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d8a368-3e7b-4f2d-9607-d7edeef8c6a6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02eb3c1-5109-44f6-88c8-7bc44cc892b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28a3c57f-491f-4e97-807b-cb470b7157ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c657eb40-1a62-4d18-85bd-4737446beacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e31ccc-e136-49e5-b908-b21300e5c96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd7d07c-f03f-49f7-b9b9-1064fee4e497",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997bb6f9-1496-4ceb-aa3a-726aadfd97dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad1adfe-1d74-46e7-b840-cfbf3f44866f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "822147a7-f267-495c-af5f-96a2226f482f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4efda7-ab6b-488e-941b-1482307cc0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79087a1-f41a-4194-b10c-192d7253f5c9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554f7548-9926-471e-88ad-e036deefb442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5357d1dd-a8a0-48e5-a0d6-7502f30e3a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2520bdb1-47cc-4dbf-ae78-346611eed2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5d5f64-8a7c-4fae-9cd9-413217ff6aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b8948e-e1ea-41a3-85cc-79401bcf9341",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24ec442-dc73-4418-ac7f-a948d587fd27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a5042d-951a-43b0-ab8f-0455d3d6de08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "917b4d7d-4d0c-43fe-9a07-4e226538a3b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4746c505-c0a5-4454-96b9-cfcb44f267a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec94cd3-f080-4d05-83b2-7be6126959d3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd6830a-3515-41ef-9ab0-e3a3d7302657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb8afba-c680-4dbe-a35a-0bd3de77c337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ce4be0-b85d-416d-a05e-f27b0c35743e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565db526-df36-4dda-8756-42b22be0b5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c816dc-95e6-467a-b349-3d3609db4504",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81268194-3be7-4a27-8ad9-49801110f771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cfd4ab-f45a-4a04-9970-235ea640ce31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038432fb-23ca-4246-8789-1b06c6baa934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40302099-1f0c-494d-b37e-5c9f20205353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c41024-b342-49e7-8718-d806c501590e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588f31f4-9a30-4900-91ef-0105eb0ad5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5dc24be-40c9-4b4f-b966-e5938433facb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df31ffa5-88dd-432f-8efe-cc624ddc9b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd79336-6a5a-4fcb-b995-9049726e6dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f9c99f-8131-47fb-b159-4deeb3d54fc3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e7b952-2df7-403e-ba0c-4dac21eddbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab05cbf7-a73a-4c4e-afe0-6f563dbf892d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "098012b0-bf2a-4985-b30f-fe5422dfffe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3da9011-e2bf-4a0a-b362-142b467ac74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b4b146-b425-40ea-9484-a46b0c1fe534",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6f2762-0fa6-48ad-b1f2-bf96402c90dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63909020-4a3b-4b10-b16f-7bb527659f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52cb05cf-fbac-403d-a1b1-c1d90539b852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04bf265-6ca5-4392-afc6-a135c434bf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfcda06-3d92-4c57-9e1a-6ca93f945712",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8a19cb-e1b0-43c1-9849-62881c1025a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f9ce305-2d15-416b-a406-c8cdf3e26077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c9ce9e-e23f-45f6-863b-e0db89ba1586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96ce00d-91cd-4ab4-8044-54fda042ef4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77503e81-70d9-4253-85d9-30ca987137de",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3576e508-83b1-46ec-8a89-d99f30455ae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e014feb1-524c-444d-933f-629750ff92e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cc3c83-f13c-4893-b45e-95406fe0a636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abcc1e7-a4e8-4770-8783-0d0f5100d221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6409ca82-efa6-457d-84f9-1cf8ecce1888",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c305734-374b-435d-a7f9-c161a4d82d95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc068523-29a5-4961-9573-1763bbc831b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4c3137-63ee-4865-9c96-a5e34f5fa2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70a813e-20a9-43df-8f3c-7c43e4906aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635dfd03-66b8-47a0-a4b4-d5a50db84917",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b74af5-9fd1-4f02-a3ec-6cf242e58792",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55a0a257-9b14-4df9-a022-8aeb1ba40fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34774cdc-d945-4786-9fd7-87380def8b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdcd37e4-882d-4005-b315-a46fffa19309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce088230-051b-4275-b60b-84b7c46f4327",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b220b254-739c-46c4-99fb-9c0c26c9fdf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f06cb40-27cd-43b8-b2f0-3937fae3e10e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d87d686-3d49-4420-a58a-b753d4742cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c8c57e-3234-4581-98af-f0ff6d75d1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25085e5d-1421-47b8-be2f-5550b5fdee3d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d966c7db-3d34-41c2-842b-ca6e53e5e767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90aca8a0-e892-4ec3-be3a-a8a7c60f197c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4000dd-a48e-4995-ae0c-5aae6c569590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45b72a8-2d13-46d2-89a4-25b85f890790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6847c1d-3d50-4ed6-996a-dceea2fe7aab",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e981e17f-6780-402b-9ca9-0804273eff5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23b09b72-ecc3-41e2-85d0-e1fc8f07114b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fc329c-30ec-49f5-9f69-059ed5a7d5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad95350-bfe5-428b-9277-964eb2b83158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4781f5-34ab-458c-b03d-3827f3d84263",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86587eb8-db8c-43be-aaf7-07019f5d4eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab234227-5b3f-40d3-89e8-0260c7b77872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e706e6-374a-4dbe-8b16-031ee79e7d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374e9122-42b2-4ec4-9b89-08d01522dc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3183920-529c-4b40-b673-c67de3e7490a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d95d930-7680-41ed-b616-d9a3214df6d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d61b0a1-f79a-496f-acdd-35cb7d8fe9c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9dde12-7097-4c59-a951-17ba1e7cf806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab5b8e4-b448-44b3-9fc0-23894240f9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6baf925b-0936-4990-a801-4e737abf09aa",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915b63ed-a85e-4bc9-af7d-460a49d6a515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dade4ef-e7ab-43cf-9147-f51db1c82ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f057c64-5595-4f59-b296-b940270fe611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6613b40a-d041-4208-ae5a-4ded674c2112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633b4059-b560-4937-a445-1e8f08913181",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf3687d-c995-42bc-adc9-7c71eeff5aab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "366292a7-1317-416c-a095-61ccc3e1943d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2907e544-53c9-4512-8123-fcb4f7e579ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8181072-7618-4f8c-9557-b1275f63fd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44613094-bfe2-45cb-9734-cdd735615670",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2798580b-1e04-4abf-be5a-dce83db7a769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4b7517-e3d9-4aa9-9e4b-d58dc081c907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7525814d-ad72-4a83-a243-5e18c8c14d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4284a28-dff2-441f-a4e8-f7cf138e16b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a18f61-3699-44d8-b031-8324be6ddbbd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4045c1-c2ad-4b79-8fdc-204e92b24119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e89324b-a1ea-4d60-9843-4670a169eee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058092a5-30ef-4f95-922a-31e1bc2e7f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad2ef4a-be71-4261-a293-f4f6b304253b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716607a2-8ffa-45e9-90a3-d07ffa9c3c67",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777eecfd-f23b-408d-a9a4-1baf26761e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0973b33-aae7-46ef-b650-d9562ea1a3f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd45922-11d2-4fac-b60d-f431116267ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821b0b8c-0b07-45b8-a6ae-4536e21fbac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d590441-2b77-4013-ab30-7f699437d044",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3790317d-fa2f-47d3-9915-de0e6dccb2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ae894e-4a56-4a74-a195-54a5db0cbd9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e956adba-6d32-4981-8b3b-e65b47d5b475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f331bf61-ff0a-4495-b793-eaad1df37e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2627b7ff-ade5-4942-a796-48cd98dcd238",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d55c150-22be-4bbd-be6e-b395a05e7154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7daaea6-10f6-4a99-b9fe-95b7c5d72114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e46483-5132-4da2-8e13-376570f35d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d0f20a-54e4-49da-bfc4-5ef8a33be280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8117075-d44d-4cda-9830-955f86549bd2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d63fb4d-6c67-421c-b651-430808b1a78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36252b95-7ec8-4cf7-8f22-4725f0496d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bd4447-a46e-415c-92a6-3990dd2f4d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1251f84f-9a6b-453a-a72d-89a8c95e7f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beee813a-5475-4507-bcce-d2694eaceb1b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439ca184-c39c-4af2-935c-267b96cc6d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f949606-251c-4232-bf58-5a71f79785fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf7f6a8-e95b-4ee4-ac43-5ac4a0b7d4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660dcc9b-3c92-42e9-b15b-1231403fee93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05155ebf-7ef1-48e9-9e18-752758de0b91",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e050fcb-6750-403f-8f7a-5d4d121cd757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300defdf-5b77-4247-81db-0f7c7bfe6165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5b47fa-6a25-42fa-8df8-de8eb8e2df6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37339175-36f9-4be6-98ef-af4f0a093b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e118cd-41e7-4f25-bf76-8cbace909838",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4daaaa6-7e11-4d81-9d6e-b8e7b8074196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05433348-a0fc-4769-a7bf-9167143e7239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c38989b-5523-49d4-9d9d-0955bb2b996a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd22d65d-d4da-47a3-8823-9116f8e15645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e86e73a-d832-479b-8de8-d305a592cbd7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db4c994-fc9f-4610-bb6f-2894553e1bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2720687b-bbb6-421b-adeb-41e161b0b418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37ced99-e187-4e3a-9458-bb82fb41fb89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d507890-a942-45d1-ba81-8f3a590c36f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009875c7-da4c-4107-8054-6af6befb4f49",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca91557c-2a83-44f9-a48a-449e67e81480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b35d6c1-c092-4569-9c1e-5dafdb6dc6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52372fb-aa8a-4c62-be94-2deb7e8641de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7f1952-aa24-4088-9467-fa4cb2909ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d577c689-fe45-41e8-88ce-1291d40388a4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e663c071-d133-49ff-9872-1d1c08662e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c675aa28-f58f-48e8-b136-35d711cc5f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f78c9d-443d-43ca-9e3f-d81e99425899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e901dfb-6a1e-4b29-9fd7-60511cd9e9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32db8fef-961f-44ff-80cf-18d7ea02842e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6c4fa7-51f1-4d7c-b4bd-a24cc339a7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23b0e5b-e3c6-46a4-a679-c1330e2904c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8473b084-d803-4178-923f-f94ae8ea4c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e04fd0-d5dd-44e9-b1be-c26cfd546f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6277212-2393-4050-8945-94578715d73b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73394fa3-e021-4049-8a23-36e8d6a678f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a944a4-3fe4-41b4-9649-5ad26f6f56fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b7ce86-3a55-4776-9cee-44eab5eedab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e7c23e-6593-40e4-9c9e-d0699380e651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d605881f-6bda-483f-a861-dab56fb21985",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8aefff-d8de-4825-b9d3-758e9e40fff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6f2c69-23a9-4bb1-884b-2ee6829d2c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bb9fc5-7aec-4718-9482-9fd77503b2a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3dc50ae-6333-4abf-8d1a-e5d9f080b0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d0f6b5-ca10-4272-b152-858055648b89",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638508f2-ccb7-49c0-bd47-3267c8cc1737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeff8fd8-3f33-4bc4-a785-b2038879b0ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe2c471-2b9e-4c65-84fa-0424a5443546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa4cfed-5da8-43de-abb6-225e738dc8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e07b6a-2960-4f4d-acfd-d9c369451565",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b7d295-a748-4cea-af09-5a1ff93bedc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47882ba-bea5-4936-b67c-88e92dde07e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525b42ef-43b4-4c1a-b117-2ef1d70c049a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a38899-13ff-4804-8c59-98dcf4fdd109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb71bf3-8da2-4e22-924b-7e45941a841a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c074d7ae-f0a5-482c-a3d7-907123c7476d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2245cd1e-0f75-43d0-9188-28441c1ce1a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f672cd81-6c3d-4650-829b-484ca5b7bddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5a7f46-f0fc-4dc4-a7d2-b4dce1f00eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86397085-b936-4822-b6d9-29fa96d0dcef",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64aba5e6-a81b-4707-b32d-274924f11cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac61e6d-f568-410b-b585-d1ee252848e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef21bf4-6a62-4067-9cee-a4e29fa5a15f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f98d547f-aaed-49d0-808e-fb59ac2f001d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e5a820-4964-4b75-abcd-e51458098561",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f7da9a-b5bb-4b7c-b6cd-d174d64aa828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9530609e-65f1-4014-9ab2-1b581c19640d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fb030b-702d-43bb-8d72-26830070b3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4061e099-7262-4c13-a38d-3f5fac080576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b0d70d-0992-4871-95aa-af8ff2ea06c7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f249918-a4af-4f03-bc65-9c84ce88507e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "367186cc-49c9-4045-ae82-63ddc192663c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736e1521-adbb-47b0-afe6-6d7ba321e22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7463c308-429b-4b19-912c-e4ee5b36d149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48eb9f8-0c5b-4d29-8167-bdb8a1f2d674",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9a205a-246e-44d5-b687-922e9793650f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7453835-117f-4750-8e4f-a21f82fed79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544422f2-5d4f-4dc3-97ed-a4b127c35805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7f27eb-309f-4c35-bf5c-a48f6a5a420c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c51020d-0d21-46fb-9661-7a48059d7347",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f791ca32-e865-40af-a4c8-9cbddea8354c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9294ce-5370-4281-8250-fff17e9064ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8837bb-c48d-4ff4-b6bf-bdea0a20cc3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2df5bf2-895c-430d-bf24-1279bfce8bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab93b94f-285c-45e9-9f2e-8c1d40bed241",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88b97cb-c77f-4bb9-8e4f-be926cc6614a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ac19ca-8280-4a73-9588-e0124a537eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98002f16-763c-43d3-927e-129635237ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcff6736-407d-43d8-ac53-2203f66600e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ac3e19-1c0b-4340-8ddb-7594e2b10366",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb34ad0-5f8f-4395-b09e-3ea63cfc4a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee9985d-6a07-4a75-a523-8fe54fb241cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e07b6a-2306-46b6-b83d-d7c20b042659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522538de-d051-450e-937f-f00d34fe205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcec1dc-84f0-4d39-901b-6115f6fce150",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9321dadf-580d-4ba6-a5e1-3824da8f6cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3729784b-c456-4405-917f-f5df83ed29e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bced86-6396-46d5-9c3e-a78c69f4f37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d55f9fe8-843f-4a21-af5f-f409acf12b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267f8069-7b29-4da2-ba20-60f8f16fbeab",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2e8050-6544-44f0-b034-36279ab9704a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f2abfa-c4a4-4e01-a520-b8d00c7e0e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d045d53-cb85-4db2-bffa-1af9bdd9ad5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c318147-7875-4c8b-a67b-bbdb4c46d6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75eecff1-1567-47d8-bd4b-1618580aba5b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4e8310-c394-481b-bce5-bca917c0b72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a4060e-822d-48bb-8faa-1d2e2359ba25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0675093d-e590-4eac-b605-f0ce1801bf7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a5a576-0aeb-4f36-ae25-e97a149c648c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700bb572-8f02-4b64-92b5-28acb40ae4ec",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69d79a8-a7a8-4ffb-acdb-f40daaaa9261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aefcd47-0567-44a6-ab6c-03bdff92e7bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a75087-92c8-4bbf-b586-e223a1e7629f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c585d93-1aaf-4604-964c-07c4e9c38362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bb51ba-381c-4e98-8c7c-77ff13785572",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd68f477-2603-4005-8752-d5b2446018d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "916b5be7-f5d8-445a-8332-02f1247142aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e8f25e-a2f3-46ee-8af6-49eb891fd328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7714e912-7c94-4f31-879a-7e0f46cff06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fe5682-9914-4f7f-a038-6698ee69936b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a613310-aec2-4ef0-82d6-fdeecf8482e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dff99a73-7dad-439c-8413-f5ad9be46182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de65f71-5306-486b-ae90-82f9d2b40887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4327429-2c2a-4b8d-9bda-d5585d365f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020557ad-0141-4751-b9ae-19522261ab91",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10182518-bfc8-4457-8ec1-bb4a2f58304d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "795ce583-c6da-44a5-9246-74ee90522756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de9556e-a38e-4fb1-adbf-7d1a5d19c679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b60756d-c154-4c97-8b02-bf1926e8c53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924dd20d-315a-49a3-bedf-2598d5f91a5b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bf08dd-059d-4f12-855b-1cf0473f3052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fee7a76-da5b-40a5-b4b1-a28a52d1e386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6560dd3e-3ee0-47b4-841b-4b6d4d404932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85bfbebb-3c22-4dd5-8463-92a58a197b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8769ddf1-bab2-4a78-8716-cbc772cc5a1c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4107eb92-d457-4287-b6ae-30c747ddc98c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66c1471a-f45f-4b04-b81a-20275c72e40d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63472f13-4105-401c-868a-fd2225f21775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5556a8-cc91-41bd-8d97-ef47322b16b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1d7bc4-32c8-44b3-bad5-a75307f17751",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656a81a9-4f9a-44c5-aee4-01c02eecbda2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "557fb694-cb4a-4b32-a8bb-593539202ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77523ecd-89f2-4aa4-8a18-d37801082fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019d0015-1df2-4fad-b0bb-181d8d025ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36123733-92e2-4e9d-a247-f8ef4a53c409",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890f00b1-cf50-406f-8705-73aacbc1f159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df02e151-4a14-41c3-ab04-540198f48742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffded9ad-a097-41ae-8233-9c610ce0d3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73243f8-3209-422a-b19b-87ada84dc08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb599e7-195a-4747-beed-b1e6f9194db6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af471cd-19b0-407b-882f-f1cdad1a6500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40cd62ea-7259-4a9b-9d4f-64d01327a013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afc4678-f12c-43e0-9bf4-2a0ee3b847f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364067a3-b6a1-4b5e-b579-b4fdbdd9f900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8408a4b2-2307-49c8-a76e-c651a7c92f81",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143b3b87-d0ef-46fe-9b37-562ec9983dbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07e079d6-d8da-4594-8764-76f5a6e5a80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7daa647f-4cea-40ab-9d8c-e8d6dbd869cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8754a38c-e98f-4fa8-82b1-d2c3a76f6692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de74927-8846-41c1-af02-f852ef7e0b6a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6a4a28-ef8a-4579-bafd-33fa50237ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39f5a238-07b2-4dbd-8121-ad01e090f8bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62748a82-5622-4b27-948a-0135eaf189fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98375c96-562f-4d8c-9a5b-09a8b5124a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b2ed57-72f9-46e7-8076-d0614b2772b2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dbf09f-4ced-45ec-b427-61809a7a6b47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b763d6e-a6a2-4c67-a616-9f95bf611cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4656189-67d0-4563-8f98-ec87ce8abe07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6101a30-9cb4-4345-8dae-535536347e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93057630-0c4f-4892-beb3-6b08fd141793",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ec3ad0-f8e2-4173-9e39-4e4efb71bba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "793d358a-92c7-42b3-9739-e7f3c666099a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752a4fc7-1b1f-4eee-8f56-8ee88c16ff0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58a3d51-f729-4a75-887b-b5c6a646e727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7d8693-ded1-4224-920d-eab30922367d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f3c1ed-fe24-4116-868e-df344235f550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1eb023a-8bf6-471d-8497-de6b6bf35dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b7bf4b-626a-4219-9d51-6dece4819b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fc9613-4ca4-46c5-a354-5c96899c20e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bf5e56-b742-4c16-bd9b-67210879ea31",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05bdc1a-830e-4205-b2ce-2d7bdab45702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe2ed7c1-d3e5-4075-b51d-c43a959207a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac19091e-5f16-4c56-82f6-6b29b93da4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfab20f-711b-45d2-b315-85d6e872e308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f796de06-1884-4d16-9cc6-c9fe447f1ca2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996dd2be-4c84-4f6d-847a-cb40a0bce183",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86864bde-7c16-47b0-aa6d-54f0740c6040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cad09f8-b433-49ed-afb9-b4c0fefda838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae08b75-42cb-4963-a41a-3a6d2ca08598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b8cf33-d584-427a-afc4-21deaabc2da7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc7ca6c-6231-4e48-b868-5d913aed3e96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05dd502e-d75c-443f-a432-3530b7681b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7c307d-5dcf-480e-928d-c645ecd16d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c557029-2d3d-4fe5-b73a-0f3fadccdb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab67de9-00f3-4750-b6d2-88dc766d5fa2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c688c9-20ee-49b7-94fb-80bfd97821eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e050ff44-b97f-4617-a748-05845a1830fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "138efb5e-f94c-4c6f-bfd0-0ff835354987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40b8732-14b6-4883-b6d0-c0685713190f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed7fb6f-50ee-4dbe-88cd-d2fc5ab91dde",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bf7bbf-873e-46bc-80b4-76cd42565f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d0ca2df-9df2-4bc6-93d6-62895f3805ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d934e4d-ad6c-4c75-b8ca-386c616aa3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e75f44-36c3-4d88-a086-d1e351a8bcb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349824d0-14fc-4151-9256-bb5e86299b6c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fd440e-e3b4-44d4-b78b-d946a14c5f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8c6f610-c549-4f39-8330-8d864bfb8070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e963e9c-d805-416e-85c8-f863a11a1f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fddc14ec-7d7a-4d68-9c1b-0e32abda7163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8304a21-4e33-4c8b-8cfc-52ebc06407a8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381b7c73-e92a-47f0-9bfb-b84f467a9fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f0fdb9e-27a4-4394-93db-633544f0eb2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd95a5d-e79c-4278-b3ed-57ffb2ff3d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc36f34-f38d-4ffb-bfc0-2bd914b15539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2b4029-0d11-4b21-99d4-3b75f89331b0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b6f9b6-c4ec-473b-b9c2-5905fdf5ab48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f48e287e-884f-41be-a474-5fdcd8ed1017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f650e253-d4ce-4f67-8b20-48f37be14a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ab5445-8eb6-4995-8f4d-d9abf28c2ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e133529-9987-43f0-bc7e-39fb48689bd6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edad7014-4e02-4495-b5ea-ae03224dd907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfde0308-bab3-48a5-8305-2ad668b1097b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5f2f00-5eac-4eee-abf5-cb1993e8933c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e472b3-8e3c-4d31-9311-68ad714b3691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a819ef-d05b-4756-ba91-a65cd5700862",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61de080-1772-4cde-9843-150f5222e46a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "945743aa-dd7d-49c4-a299-dc2bce4c2bd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1d892e-0999-4910-b8eb-b45166b45fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0527fba1-91f3-4c50-b74b-535b2f8ad6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078b0aeb-4d5f-450a-8179-a8c80cd042cf",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18969fa8-6de9-4963-bced-9573231c11ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e244ae3-ec30-4edd-b1ff-761ac0f3c42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c043a60d-fcfa-473b-a3f3-69c68687c8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4faad2-094c-443d-879a-cb2eed53aaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263578e1-35d4-43d9-8c6e-bb29c3a0a7e2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bfcc11-c2d7-4847-bba1-5090b83c5f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "973a229d-402f-40e5-9fbe-e94d961632b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb359b8b-dad2-41ec-bcc9-c105a0baaf5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5824e71-f604-4f47-9fb2-6818f785d09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6d79c9-d2d8-48ce-b1d3-bbfd6f6c92c6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47a5e64-57f1-483e-9e6b-4bbe7f6db5e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7543fc42-c36b-4a1c-8d5d-be5223772142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914d2837-260e-49f4-88a3-e384cb8f24dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828677db-80a8-4000-939a-ff1cdcaef9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09904e9-72cf-4115-8f80-a55c68ff824b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a56d0ce-cedf-45aa-a65e-8c306bf68715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93a926a8-aeab-423e-a861-594948234164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6121e51b-e103-4786-9952-c82d15a3ed9e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6279fa-43cd-426f-845f-5fd68e9d4a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a801386e-f354-455f-bbc5-26add711b153",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f5aeb0-d58b-4597-b50d-920b12fe118f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb493886-46ad-47e5-a02b-6f4459dd1a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cb5060-5fe0-4cca-803b-e681e068071f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078cefe2-7170-499e-b690-73aa9dd6fb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71537511-e167-4f15-bdd4-11634ad7847f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13f4de3-d0b9-4bc3-b7d4-949f942b5dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7089291-d247-46b1-aa05-e99e9242003c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f81ba9-881f-4c65-a32c-3c86258fa168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2989adcd-47dd-4c37-b6a4-6294d3495b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89afc1ff-ffbd-427f-9aa9-8b02fe83b086",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0840d74c-eecb-4b69-bbd4-085314f959ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aee60116-6b49-4e3c-83a5-7ba4d9587583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f9a2cb-0ed8-4347-b738-b8bdf0cd3f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2b39ce-27d2-4710-975d-f576ecf02d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8b2c2a-c061-4df9-9945-1a2e5017e56e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217206b1-9853-4b27-bd6c-0ff4eae93e00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "379a76db-b08e-460a-96da-95f6c540de7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace55fa9-29e4-4a12-acb9-a9eeb50b7ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc33de36-f117-4785-8697-bb58e10cf79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b987b59-03e0-432c-967e-6903c79c0a47",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d790d6-0410-4583-9623-dd56a102b33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892e21f2-22d5-48cb-b114-e4511fe90ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd2a33a-4bff-4d70-b46d-ee2052a43023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ed4792-287e-4f64-bd4e-cc3066b0aff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebec0ae0-40cf-43f1-a777-29c88bda5672",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82631b51-8c78-4015-aaad-eea34998ecfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d795e9cc-cf4f-417a-b339-da36fbf07224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccb7da8-4564-4dd5-8ff6-82ba3b5a0044",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd1c8c1-f30e-42c8-8755-02f49139c5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190467da-d971-40b8-8299-95b6caf0b18a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca8de76-ab2a-4f73-a898-b6a01e647e2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e526f6b8-8872-44f4-ae86-30860fdb0aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd09ccd3-a2bc-44a4-94ab-75d0ed98ad8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ca3d32-20af-4ce0-9df1-95fef58e692b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c8549f1-bae0-4b59-9871-d78b5cceff76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e362f52-c762-42de-9b7a-89447dfb23d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3427da4-265c-48ff-8695-1701f77caebf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "256b24e0-d23c-4d1f-b3b7-29b87cc19a3c"
                    }
                  }
                ]
              },
              {
                "id": "28b00165-f909-44f7-a6f9-4c79fb96ebe9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "936b9cf4-4d7f-4f40-8045-683c7efc3be2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b480919c-adbb-4c56-897e-4047e9066e25",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d4d6dec4-7c4f-4dd5-8b74-ffd1fd89e0df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6438e4a-ddb5-427a-ba50-0fb950c81f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f6213b3-9abb-4ca8-a938-e992cd3618c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65cefe3d-2215-4eec-843a-8a5307aa5537",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0ed62f7-d9d5-44c4-8b91-a7b37abc20ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08ab1f58-131e-4d68-be61-fa76eeae0a70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c198586-2311-4d9f-8191-451d302ea7a5"
                    }
                  }
                ]
              },
              {
                "id": "98f26b45-8d50-4657-9773-d0fbc6311ecc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4abc7c08-d15a-4716-a4a3-834443597abe",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1984fce3-09eb-4f5c-b8d0-32de89e93aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "708fd2cc-c866-4ae6-86ef-09c7dadb364f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939c3417-bc52-4cec-a950-b098fb22e99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9533a2-c103-494a-b8b1-117886d31924"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "44f8db2a-f9f8-4626-ad9b-381e187eb08a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "65862fff-6c27-4e65-afa2-44ba687db0e9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "843ecaff-befc-4cdc-94ab-4afdd51ffb98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8d852e3e-ca20-4f04-b095-5328d84a74a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "534cb385-71b2-48ca-a3ef-49816c22cd28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b413da70-ac11-4309-aea6-af6a7ff4495b"
                    }
                  }
                ]
              },
              {
                "id": "004f2296-703b-49bd-8b27-c36438dfb26d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f71c97f3-129a-4daf-bca1-d5d4f86d3e6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a88145d3-65ef-48b0-9753-ff4ed58f4d90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88a5663d-ddf4-48a9-8a90-c4c263257b78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "199b5e2a-dd3d-4850-9fb7-a8fe3b164b16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ff9bfa9-c831-4b8a-916c-fea9f4ba2995",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "51ee2977-22b6-410d-bec6-18002517059d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "009c8223-05fc-446e-8086-db8f72bae0ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80fed583-d340-42f3-acec-e1227fa3b2de"
            }
          }
        ]
      },
      {
        "id": "8ac6166f-3afe-41d5-9035-83480a6b29ce",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "55cc80a0-0eb9-4d4e-b399-a21313c50f4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ffd86e5b-1fdc-47cc-ac3b-0dfdd622002b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4244791-770f-47e0-b893-09ee526d782d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b028f085-38d9-46b1-8d22-468191ec993a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9718ac53-c359-40f7-9735-9c88efe18a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e3bdff-27d9-4abe-9e16-76934de01009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "355e25b6-0d91-486e-8724-263355313d3e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58c94f5b-0c14-49a5-ac9b-32fff50316ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "288da230-a6f2-474e-80fe-4c2544d37ed3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7fc347d-4c1d-4087-816b-63d7ac9d1da5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ed6aa48-9f12-462c-a88c-fc846e827e3b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00a12392-59bb-4ea5-813a-9354c2741196",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9732428d-bfd6-4958-ae42-c9e77ba1547e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "822bcf0a-0c96-4aac-9201-59610c0f6f70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44c96d01-c130-46be-a1fe-91d5c2a39397"
            }
          }
        ]
      },
      {
        "id": "e82de5dc-c825-4190-a7cc-b76f0299cc3f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d10ec64a-1cf0-4197-8f57-73bbd9733458",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e3a4442-9dc5-42d5-b5fa-4bce57d185bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8907a03-b4b8-4997-958b-bf3b74b7b503",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc251a92-77ef-4657-9608-1f99b2a6fef5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "949c47df-d33b-4c60-996c-9f5933331f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb165bff-c1af-4182-b581-61776d1e660a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "885a7031-59a0-4428-b729-2ceccd814b53"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c4e44c2-7f07-4958-ab07-cf491edbdc26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bde2003-fb1d-4af4-a8c3-5ea4d1f47fb3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1924e63a-bbc0-4e17-a591-5dec23e019bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a3cce2d-a5ca-4d1c-b4aa-811a6f57ab48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "664a4cc1-577c-4cf3-ac8f-73aa2afab57c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a3ebb9fb-fcce-49ff-b9cb-ec5dcd80257a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b01e86e5-8973-4196-873b-e79648f7b3ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b1b1285-a73c-4861-abd4-ad7f29e3a785"
            }
          }
        ]
      },
      {
        "id": "e223f311-d527-45ee-9cad-7644191f7eff",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "56f95a0d-a9ff-4936-b7a8-11da40db04ac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "185fcf46-cc8c-4f56-a401-90393bb32d3e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c4116314-86b6-4969-bd90-894cba737f88",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169118a1-7f69-4e3a-af7f-ec26a919b95c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb0c7ddc-c538-45fb-8c9b-813f2e1cae6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc5e2c4-4f38-40bc-a64b-e93ebbef41de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41c90845-516d-47fb-bb5a-91d602b8a7a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8777a39a-4663-4d18-9028-cd7d034c4429",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be049e34-14cb-402b-bca4-fd3fd38b37ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "123641d9-51bb-41d5-a621-69f315043d21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a809042-8c1c-47c9-bf30-e6d00e7b2a1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e07af15-38bf-4258-9ebe-13df51510015",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aca14a5f-e713-44db-b17f-cefbb699e3a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36c9adc5-d3d3-4d56-9ccb-90e58ba5ec6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6801fc46-0717-40dd-8728-898830e0b9d7"
            }
          }
        ]
      },
      {
        "id": "272b21d7-e5c1-489c-b8b4-cd17afffdaeb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0adfec99-8d0f-4dcb-9991-ea6a48e96f5d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4314910d-0157-4287-ae13-c8c49211256f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7d714738-945e-4d99-b8fb-699c2862f0e5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "819ac75e-17f5-4afe-b8a2-cee7a6dea7c8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0373398f-7a9e-483b-9323-145db76eb84c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 114.92982456140345,
      "responseMin": 6,
      "responseMax": 601,
      "responseSd": 62.686482397785134,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702946170570,
      "completed": 1702946212651
    },
    "executions": [
      {
        "id": "23f21f21-4e98-4637-b491-9e34f639cded",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c0b1599d-0e8a-4570-a9df-e81234d0cbd4",
          "httpRequestId": "74d0ea06-5df4-42f4-aa0d-3a6017d030d6"
        },
        "item": {
          "id": "23f21f21-4e98-4637-b491-9e34f639cded",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a66c2eec-ac4c-4972-9832-e01bd1ea2881",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 0
        }
      },
      {
        "id": "e8344ba2-47a8-4d55-bba3-d4325153ebca",
        "cursor": {
          "ref": "7222e9c9-e835-4ef1-a0f7-7a26b36e4afb",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d9e3eb77-6e82-4311-b1dd-180d6c877fb3"
        },
        "item": {
          "id": "e8344ba2-47a8-4d55-bba3-d4325153ebca",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0d010c22-82c5-4fe3-802c-6f4bfc2c9e66",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "c34af667-bb97-4fd0-9d2c-bf4ae5fa960d",
        "cursor": {
          "ref": "638017ec-f0fc-44e4-bcc9-9c588f9751e3",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "22202137-b15d-46fc-bf03-d7e6544daac9"
        },
        "item": {
          "id": "c34af667-bb97-4fd0-9d2c-bf4ae5fa960d",
          "name": "did_json"
        },
        "response": {
          "id": "5bba341d-a22c-4571-a89a-38133eaceb4f",
          "status": "OK",
          "code": 200,
          "responseTime": 354,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceebbfea-c66f-48f0-9b40-a71a36c74011",
        "cursor": {
          "ref": "cebf2dfa-334d-4bbb-b965-f2159a4212fc",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "32637c94-c615-4ac8-af3f-dc003215b9ef"
        },
        "item": {
          "id": "ceebbfea-c66f-48f0-9b40-a71a36c74011",
          "name": "did:invalid"
        },
        "response": {
          "id": "456d21a1-5e44-45d8-87fe-6876a2bf5b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceebbfea-c66f-48f0-9b40-a71a36c74011",
        "cursor": {
          "ref": "cebf2dfa-334d-4bbb-b965-f2159a4212fc",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "32637c94-c615-4ac8-af3f-dc003215b9ef"
        },
        "item": {
          "id": "ceebbfea-c66f-48f0-9b40-a71a36c74011",
          "name": "did:invalid"
        },
        "response": {
          "id": "456d21a1-5e44-45d8-87fe-6876a2bf5b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f63e94-c70f-4f95-b7cf-40bf8d63aace",
        "cursor": {
          "ref": "c90aa389-d8a3-45e7-9927-ff65bbefdfa8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3bed17ed-665e-4c0c-8e1d-99a83e562323"
        },
        "item": {
          "id": "08f63e94-c70f-4f95-b7cf-40bf8d63aace",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3024c94c-56f0-4a20-b84d-94b4faff5924",
          "status": "Not Found",
          "code": 404,
          "responseTime": 150,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bb9b5d-10e4-4dfc-924c-5ec5bf924f72",
        "cursor": {
          "ref": "d1c384d6-d479-43ed-b2a3-2cd27c08145a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2617f526-8c3d-4a3b-b2a0-8ae7074a4756"
        },
        "item": {
          "id": "e2bb9b5d-10e4-4dfc-924c-5ec5bf924f72",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8780a808-fb88-4005-8600-0d3c6258ea24",
          "status": "Not Found",
          "code": 404,
          "responseTime": 104,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a988eff4-e02f-4052-aeab-92315a251d5c",
        "cursor": {
          "ref": "9156e026-9d80-41a2-89ea-9f559f6cea0a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a68bdc6e-ca24-4194-acfa-26b1e6492684"
        },
        "item": {
          "id": "a988eff4-e02f-4052-aeab-92315a251d5c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cb2b5470-769d-4003-874b-b711fef78f70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9baf7eae-9391-4b15-975d-f391da79f706",
        "cursor": {
          "ref": "0bdcf1c2-065d-4e25-8ab0-e294e675770e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2d49d154-5c36-49b9-802b-930d3778dc10"
        },
        "item": {
          "id": "9baf7eae-9391-4b15-975d-f391da79f706",
          "name": "identifiers"
        },
        "response": {
          "id": "1bce2719-63ea-495c-a4be-a9f5dfd2bf65",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ee87a9-cd97-4691-b172-dfa4208fac71",
        "cursor": {
          "ref": "8d518d8c-15df-4a7f-b3f5-bad7099a9325",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f77c1203-7ed3-47e0-9906-9deacc66c2b3"
        },
        "item": {
          "id": "39ee87a9-cd97-4691-b172-dfa4208fac71",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "07ed6110-fb18-4f11-b9ae-344f4905f1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27b0c74-796b-4d47-9f7a-25d8c8742d4b",
        "cursor": {
          "ref": "f215709f-1bf3-45b7-bd13-e371c88b9761",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "14d9a443-ac51-4b01-99ac-f3dd6c8dabf0"
        },
        "item": {
          "id": "a27b0c74-796b-4d47-9f7a-25d8c8742d4b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "931f4dae-593d-44e0-920b-41d41b1afa9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8341cb-1f45-4866-ab0d-8a9775ee4fa3",
        "cursor": {
          "ref": "4788d61e-716e-4e3a-94dc-5b3563b37d21",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0012c99c-6dd3-4a26-9f44-438851d35155"
        },
        "item": {
          "id": "3c8341cb-1f45-4866-ab0d-8a9775ee4fa3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e0c539fa-41e8-44bb-a0a6-0db5c2b0666f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9deae0-674f-46cd-a174-b58ba5c923a5",
        "cursor": {
          "ref": "99bd7508-3fe1-4644-90b3-277b997108d8",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1b5cfe9d-5343-491f-a134-6b6671c7f2af"
        },
        "item": {
          "id": "aa9deae0-674f-46cd-a174-b58ba5c923a5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e1c885b7-bccc-42b6-82bb-b271f172f810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbfb9f2-f9e0-4bd2-80f2-fce67a4e9d92",
        "cursor": {
          "ref": "5954d89c-3287-47ed-ac63-71d5326ec80c",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "879f0164-a0d2-42aa-a5c4-0b4696056c55"
        },
        "item": {
          "id": "9fbfb9f2-f9e0-4bd2-80f2-fce67a4e9d92",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "096cb343-649e-4e1c-a911-b8952e9baa3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158494da-328e-4e6c-9e6b-d7afe21c00ad",
        "cursor": {
          "ref": "5914f44d-a446-4e52-91ed-f88591ad6bec",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8194bc61-1dd6-43c3-bd8d-4234054fca3d"
        },
        "item": {
          "id": "158494da-328e-4e6c-9e6b-d7afe21c00ad",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "87b25ae2-3560-4a3c-89ce-feb6e4ce90f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f04b08b-13ca-419f-ae54-3b0a7a0483aa",
        "cursor": {
          "ref": "1f784d72-5aef-4b3e-a230-cd5e7cdc4f4d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8e8c50b7-fa1b-46b8-81cc-61052876e9c2"
        },
        "item": {
          "id": "9f04b08b-13ca-419f-ae54-3b0a7a0483aa",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c2e73aea-a7c6-4b4b-ab51-917164b2efa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1879e5-7436-42e9-93a9-9bb57e9abcfe",
        "cursor": {
          "ref": "c8324691-2bc0-4b46-8fb7-380200195c25",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2475e6b2-d6e2-476e-890d-56972e1bf949"
        },
        "item": {
          "id": "ab1879e5-7436-42e9-93a9-9bb57e9abcfe",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3edbd654-d21b-4be6-ac02-df0345e2203a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfd7898-b87f-4f9d-b477-aba3fa1f72ee",
        "cursor": {
          "ref": "6900b709-cc85-41ad-b0c8-1f683a948d65",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7336945c-f5d2-47ab-99b7-9d3b49de20fb"
        },
        "item": {
          "id": "8bfd7898-b87f-4f9d-b477-aba3fa1f72ee",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4daea59f-6abc-4fca-b58f-a4567750e5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e92aca-a440-408a-b6f0-c80f0ce7e05e",
        "cursor": {
          "ref": "06841197-055b-41f3-85bf-09378b0b5e81",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d9e78589-2483-47e4-9203-dc1002e138fb"
        },
        "item": {
          "id": "d8e92aca-a440-408a-b6f0-c80f0ce7e05e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "667639af-9363-44a8-b760-237eaca56fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4bec8d-3e0a-42b4-81ed-d0b00c363624",
        "cursor": {
          "ref": "3bfacda3-2ca6-475a-a8ed-927ebfee32be",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c06cbebf-28d1-452f-a4e3-d823e27c392c"
        },
        "item": {
          "id": "3c4bec8d-3e0a-42b4-81ed-d0b00c363624",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1174b5ac-4b81-4028-a364-3ea0268cee0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9fea22-919f-44ff-a913-37ff6f159ab6",
        "cursor": {
          "ref": "44dd7f54-cb69-4f60-b5a1-ebad2a80492d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a8d40d5b-76b4-4aff-a7f2-3f29c1d707be"
        },
        "item": {
          "id": "ff9fea22-919f-44ff-a913-37ff6f159ab6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3afaaf50-5715-4b4f-8597-e7b99483c346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f41c621-e21c-40c7-a0af-aa6de0461b6b",
        "cursor": {
          "ref": "f8bec7d5-5033-4a9a-ba69-43907ca2eac5",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a18aca85-02c2-449d-91e4-b9a5c227f9cc"
        },
        "item": {
          "id": "0f41c621-e21c-40c7-a0af-aa6de0461b6b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7ee6dcb9-1d7e-46b2-b928-309c12649f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86c109b-c591-46a6-8ff9-f2bc982a0b7b",
        "cursor": {
          "ref": "86ad26fb-4cf5-4842-b0e9-3b6ec51dfda4",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "49e0f224-f365-41f5-80f5-169451e87cdd"
        },
        "item": {
          "id": "e86c109b-c591-46a6-8ff9-f2bc982a0b7b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3a43a987-8d3f-4c78-b48b-67236c42aa24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbf7301-11a3-4525-bb6e-4e9cae5b2314",
        "cursor": {
          "ref": "c01cffbb-4227-4f3a-bf8d-14e4e0d1fad3",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8a67a6be-7756-4f13-a485-bf9575fd7d05"
        },
        "item": {
          "id": "1fbf7301-11a3-4525-bb6e-4e9cae5b2314",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cd42a19d-035e-4460-875a-373228895dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16f9958-c545-4d75-95c7-b47faf86c455",
        "cursor": {
          "ref": "ff699003-eae6-4bc6-8ecb-e05c798192b3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "aa31bbab-c3d3-4c12-9f3d-3753dfc530e3"
        },
        "item": {
          "id": "d16f9958-c545-4d75-95c7-b47faf86c455",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e7525842-b6bb-4b24-a592-caf922206340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6876891-fb84-447e-977f-2b21d685ee9c",
        "cursor": {
          "ref": "41c57431-f7fe-4182-b0e4-67720b159847",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2b45d4c9-8722-4219-bf29-8b9d5c34d2bc"
        },
        "item": {
          "id": "c6876891-fb84-447e-977f-2b21d685ee9c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ac9fe5d7-11f9-4ff0-87c8-5ba2e4306f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3aaae5-f0bf-45ac-9eb2-e46acaff930f",
        "cursor": {
          "ref": "cfa6ed31-aabe-436c-bd6a-375114a172bc",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2dc10232-6985-4fb6-85d0-2aa603920ccd"
        },
        "item": {
          "id": "6b3aaae5-f0bf-45ac-9eb2-e46acaff930f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6a7721dd-95be-4431-ae81-0255f240dc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae51d92-3279-4d5e-811d-b181a418ebbd",
        "cursor": {
          "ref": "aa8e4a8c-8436-4608-af73-47bc51dd5e8c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7ce70461-bbe1-4602-bfcd-a6bbfcb7aca1"
        },
        "item": {
          "id": "7ae51d92-3279-4d5e-811d-b181a418ebbd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "915d69ba-e4df-4937-8b29-8e1e1bb7255d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc350594-04d9-416e-ad0d-e8455e1f7dc1",
        "cursor": {
          "ref": "8e14e7d7-748d-4b1c-9d04-8b89ab5bcabd",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "45e8a954-7242-457a-bdd9-14e242c7b6f7"
        },
        "item": {
          "id": "bc350594-04d9-416e-ad0d-e8455e1f7dc1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4cdfb7ce-8c18-4c75-958c-6c56de0bd93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490059d3-58f4-4731-9648-1316d5b3cf27",
        "cursor": {
          "ref": "84787ad1-b090-45cf-a131-9482b3172b14",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b7228d96-f106-4fd4-a3d4-3e65e7ba0a37"
        },
        "item": {
          "id": "490059d3-58f4-4731-9648-1316d5b3cf27",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7de75697-f964-49b7-90e8-f3eb610ee77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca6d061-23a0-48f4-afed-41782e47ad67",
        "cursor": {
          "ref": "1daada5b-95f6-413d-87ba-4fa394f1216b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "003af6a0-887b-411e-a839-eef3adad14cc"
        },
        "item": {
          "id": "aca6d061-23a0-48f4-afed-41782e47ad67",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1d2e0dc8-c1e0-4a3b-b117-06f55ea31e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fc27c5-3194-4107-aca7-62d0ca5f79c6",
        "cursor": {
          "ref": "3d551932-6893-4a3b-b681-589e09371bf5",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ade65a85-5be7-4ebe-b742-11b41dd9b259"
        },
        "item": {
          "id": "31fc27c5-3194-4107-aca7-62d0ca5f79c6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "32bae236-1ef1-4765-8320-d89ece9e8923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f21adb-8d54-4750-8162-17925bee2b15",
        "cursor": {
          "ref": "cd8bfd17-d737-4af3-bcf3-75ebd0078587",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dba90252-f03c-40bc-834f-c75a5ab57003"
        },
        "item": {
          "id": "75f21adb-8d54-4750-8162-17925bee2b15",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "940f5710-525f-42f7-831d-4755e8c8e6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c79408-9e27-4e6a-bf93-9ab3ec021779",
        "cursor": {
          "ref": "b40b374e-0ce7-450e-ac8e-e2947b1b09d1",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1a8953e2-466d-4119-8332-57abe2eecfa5"
        },
        "item": {
          "id": "c6c79408-9e27-4e6a-bf93-9ab3ec021779",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "22168811-0cd2-4059-bc69-6b8f3fc05325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c11324-8c97-4763-9e86-5693c771dc16",
        "cursor": {
          "ref": "16c2176a-674e-4c4c-a326-b67a82db58ca",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "87063ebf-d0a1-4043-bafd-6caa13a8bd54"
        },
        "item": {
          "id": "c2c11324-8c97-4763-9e86-5693c771dc16",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ede519e0-25f8-4f4a-b7f9-b3a6ff45311a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae73713c-fc23-4cf8-8d47-84a2aa117853",
        "cursor": {
          "ref": "bea62283-dd2f-4808-9f21-f3940c477521",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2f2aa5b3-b230-4710-a73d-c2137714e45e"
        },
        "item": {
          "id": "ae73713c-fc23-4cf8-8d47-84a2aa117853",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fb0990b0-0950-4619-a955-f59042737d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab2080a-ef69-4cff-81dc-7b32a0114041",
        "cursor": {
          "ref": "7700fdef-cca1-4b38-bedc-97c14738af10",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "aa3eee8b-c93a-4537-92e1-4c1c9d5d9072"
        },
        "item": {
          "id": "8ab2080a-ef69-4cff-81dc-7b32a0114041",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b2a417ac-2507-43d0-8d90-e972a9ae1dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d71f604-794d-4aa5-bdfa-25a31e2aee53",
        "cursor": {
          "ref": "835999f6-d16e-4a49-b848-fe4a3e1e01c7",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a931a323-8e3b-48df-9a51-641361eb40b2"
        },
        "item": {
          "id": "9d71f604-794d-4aa5-bdfa-25a31e2aee53",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a96bda7d-fa81-4c43-8a5c-94b356a6c406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e27258-2b8a-48f8-9eca-c1b9a34d0cbe",
        "cursor": {
          "ref": "f50ee760-86c0-4968-ac15-8002abef9057",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7d6cd93e-04b7-4a3a-b2be-956e32241acd"
        },
        "item": {
          "id": "41e27258-2b8a-48f8-9eca-c1b9a34d0cbe",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6d934f07-41ca-4b99-bf6e-847d86acd9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe32d67-da0d-4afd-bfb7-dc5462305646",
        "cursor": {
          "ref": "7e76ba61-bb7e-4580-8856-79b8dd2f3510",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "08a8842b-8289-4a19-ad09-dc41194931a2"
        },
        "item": {
          "id": "ebe32d67-da0d-4afd-bfb7-dc5462305646",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "47a71f61-a272-4e79-b54f-4ca45b129a36",
          "status": "Created",
          "code": 201,
          "responseTime": 601,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "386496fb-e93c-4606-92b8-08cabbd80d1d",
        "cursor": {
          "ref": "20b75c29-1182-4be5-99e6-85e184b0704b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2b9496fb-d5a2-4689-81c8-98df3f2d073f"
        },
        "item": {
          "id": "386496fb-e93c-4606-92b8-08cabbd80d1d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "273d4490-8b61-4b59-8091-6ffc0246f752",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2eecfd3b-04f0-45b6-855c-1985a80f5d71",
        "cursor": {
          "ref": "071cbb20-76e8-480d-80c2-eecb5ddf22f5",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "beac1633-1fdf-423f-9be3-cea57178d77b"
        },
        "item": {
          "id": "2eecfd3b-04f0-45b6-855c-1985a80f5d71",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "79a6c580-3470-4dea-8c1e-6a43fc3a3d72",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d2bf002d-af98-4d47-a920-ca17a47a4567",
        "cursor": {
          "ref": "41f3a3f4-eae8-4647-a949-325ad10a1e48",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "efd7bbde-25af-47ef-9fa3-f79d51432c9e"
        },
        "item": {
          "id": "d2bf002d-af98-4d47-a920-ca17a47a4567",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8e5695fe-6b40-4aff-9950-c1a67b166f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d5e83a-4cd9-4278-bcbd-518c4d1ad76c",
        "cursor": {
          "ref": "c8c74c40-d056-47f3-92b5-dea08065e33b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ef22bc19-9814-4cdd-8623-6de1499f6277"
        },
        "item": {
          "id": "c1d5e83a-4cd9-4278-bcbd-518c4d1ad76c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c5099547-0f8f-42bb-9cdd-5fa0dfb39a2e",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2a00d00a-3931-4080-9582-ae16beec0482",
        "cursor": {
          "ref": "dca99615-21a5-4d7f-b632-558286d58773",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "52143a25-e525-4851-b9d3-ac93d4145266"
        },
        "item": {
          "id": "2a00d00a-3931-4080-9582-ae16beec0482",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6aa5b48e-04b6-4f37-9621-a79125a8fc73",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "db9e7b6d-f6cc-4767-a58c-98087ada172a",
        "cursor": {
          "ref": "d89f9404-0fa4-4326-8de5-0031ead36413",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c7e0c899-109c-4c54-9776-20689cf739d6"
        },
        "item": {
          "id": "db9e7b6d-f6cc-4767-a58c-98087ada172a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "619985a8-6bb0-4a76-8fab-3147c22a71a1",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "af988e71-eba0-485b-b72b-baf97cdc037c",
        "cursor": {
          "ref": "7bbfbaa2-6f3a-475b-b978-ddbacd953105",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4dea7413-0002-46ce-8f96-48a50199a6c1"
        },
        "item": {
          "id": "af988e71-eba0-485b-b72b-baf97cdc037c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "260e2619-ae56-46c0-b88a-43045d679307",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9a1e5ff0-d865-49d3-94a2-595b1a6221c1",
        "cursor": {
          "ref": "a3c7141a-31ba-4f43-b7e1-d31a701541fc",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "910e1b2b-e377-4fcb-9ad3-c1df6ecb8d5f"
        },
        "item": {
          "id": "9a1e5ff0-d865-49d3-94a2-595b1a6221c1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "27d263ab-9c9f-4942-bfa8-1feeb1bb0af0",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7b391092-4995-4852-af45-aadad8ff2321",
        "cursor": {
          "ref": "25e8061e-408a-47e4-9427-bcde77311205",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5cd547a6-f368-439c-8afa-26cb55e97949"
        },
        "item": {
          "id": "7b391092-4995-4852-af45-aadad8ff2321",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bf1152b2-3eae-4c38-9a07-f5b7230eea5f",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c534f437-396f-41ef-9ce3-af6a6ae3a3c2",
        "cursor": {
          "ref": "a84a2f16-c40f-4eb1-b713-683aceed3ed3",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b59c895b-d541-45f5-b4d1-630422b556ea"
        },
        "item": {
          "id": "c534f437-396f-41ef-9ce3-af6a6ae3a3c2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "db5e8686-b831-4993-83e3-453f5669ba84",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "fd8310a9-3f48-42e6-b148-45b94b7e3ad0",
        "cursor": {
          "ref": "ff5a8974-58a4-4d43-967d-baca63fd8a6e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9d465470-f222-4dcc-afcb-a6860d832797"
        },
        "item": {
          "id": "fd8310a9-3f48-42e6-b148-45b94b7e3ad0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "53f07913-556c-4e27-ab4c-582b1a1594af",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c09a7fbe-458d-4190-8cfe-e6d9b5d42d04",
        "cursor": {
          "ref": "bdf261de-a271-4a60-b221-08be5a2011a3",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "65a4d044-6d24-4875-839f-a8df2e6bae51"
        },
        "item": {
          "id": "c09a7fbe-458d-4190-8cfe-e6d9b5d42d04",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0f15ca6d-ee6d-45ae-9b32-a90ec8da85d5",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "095dec91-00b9-4926-a474-1430f46e1678",
        "cursor": {
          "ref": "932efe3d-a32b-41e7-aec4-2c54a826df24",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fb2f9e66-32a7-4d11-8320-1c875a485ef9"
        },
        "item": {
          "id": "095dec91-00b9-4926-a474-1430f46e1678",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3385a7ce-cdd8-46b5-986f-3895f485a093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a257e9c-a370-42b1-ab62-8f9b1598a4f2",
        "cursor": {
          "ref": "f79a3d79-6c40-4708-87b4-491583e76db4",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "355b3755-5b85-43e5-848b-8128eb666ccf"
        },
        "item": {
          "id": "7a257e9c-a370-42b1-ab62-8f9b1598a4f2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e03937e0-e1ba-403b-a535-2d9e6e119e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79073da-3e02-4120-81a5-2938473a3993",
        "cursor": {
          "ref": "a119aae5-cefe-4198-b6bd-2ac8f1aec162",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d8944d7f-c406-4aab-929c-662f1f387571"
        },
        "item": {
          "id": "a79073da-3e02-4120-81a5-2938473a3993",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ae1a290c-da81-443d-a87b-7e33899ec468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440e8a59-e420-4aee-aaea-b2e17f177378",
        "cursor": {
          "ref": "10ffe314-eb93-4aef-92cf-b83fc381c343",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e892c159-a4fb-42cf-bc4c-7ee8a0879c87"
        },
        "item": {
          "id": "440e8a59-e420-4aee-aaea-b2e17f177378",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "eac662aa-281f-4386-baa6-b1ecf8bb651e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff75fb7-6764-4bff-8c6d-70671fc46773",
        "cursor": {
          "ref": "8f398f47-6602-4ace-9304-efb2f6ec6e5f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fa5f99ac-d359-4023-81ad-86cb5608638e"
        },
        "item": {
          "id": "8ff75fb7-6764-4bff-8c6d-70671fc46773",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4169f6ee-b77c-4f42-a8b4-c94a0cef8130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a47573-388f-4e9c-a1bb-c49419a09177",
        "cursor": {
          "ref": "d581f0e7-5c9d-4d66-aad4-6e8d79a78938",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b4d9f642-6d10-4d31-8004-928ee95cdecd"
        },
        "item": {
          "id": "28a47573-388f-4e9c-a1bb-c49419a09177",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cfa0f135-5d18-40ad-a934-95a05244d981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df69a25-afe5-4caf-81c0-8e409c9243ef",
        "cursor": {
          "ref": "07a56701-1016-4f33-8af4-f4fb869a76d0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "19dd854a-5731-4894-bd46-74dd8ef05c59"
        },
        "item": {
          "id": "8df69a25-afe5-4caf-81c0-8e409c9243ef",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bf7fe67c-7a26-4484-b109-235fbae6c212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98047e4-5ee7-486e-8c55-45ee616f645f",
        "cursor": {
          "ref": "c1d49cd5-56ca-4df6-9e67-39ab8ed9b7fd",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "26eefc04-ceea-4253-903a-d8c8363a3a15"
        },
        "item": {
          "id": "c98047e4-5ee7-486e-8c55-45ee616f645f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "35dad432-cd4b-43e9-a0d0-988750dda5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f01813-4177-4351-96d5-7c460df7f104",
        "cursor": {
          "ref": "59df3e6a-76af-454d-aa59-678007c8beb5",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c200e95c-02e7-4a2c-afe1-4b80418ffcdd"
        },
        "item": {
          "id": "a6f01813-4177-4351-96d5-7c460df7f104",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "20d668fc-1773-4132-8028-18c460afb812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66753a7-78a6-443f-b811-467f26e576ee",
        "cursor": {
          "ref": "ba874acc-5410-4efe-86a8-b36e5a2840f0",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7b22f711-ef20-4c6a-aaa1-3e6c43f16d74"
        },
        "item": {
          "id": "a66753a7-78a6-443f-b811-467f26e576ee",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3b943e1a-1b13-4e3d-a8b1-3768fe8d3836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754fd063-75f0-4b7e-8b1e-e9a9e631837a",
        "cursor": {
          "ref": "8aa97506-a5b2-4b36-8c56-e57fbf027504",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "05630676-75d5-4544-89bf-1f57bb08a017"
        },
        "item": {
          "id": "754fd063-75f0-4b7e-8b1e-e9a9e631837a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3da1cc48-acbc-4be8-89e0-641bff120092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10620262-39f8-4e21-a4cf-b05ad983a7c7",
        "cursor": {
          "ref": "e13a7e4e-8abd-4e23-8228-473716e5c3d3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e400945e-9d78-4065-afc9-6cf9b61d2379"
        },
        "item": {
          "id": "10620262-39f8-4e21-a4cf-b05ad983a7c7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ef8eccbd-834d-4d63-96eb-949f12a9c186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25deed24-7c00-4b7f-a762-4a47944a4aeb",
        "cursor": {
          "ref": "fcd7b02e-fbed-4cd9-99e7-f9d71a94cf5f",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7f9e1372-b6e9-4675-9a09-f63e25d19e4a"
        },
        "item": {
          "id": "25deed24-7c00-4b7f-a762-4a47944a4aeb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "408973ca-a2b0-4be4-b86d-7c0e14e77ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6533260d-b8bc-4399-b4ff-ef051d169a26",
        "cursor": {
          "ref": "c5f7adac-4357-4d7d-8e5b-a79ad8cf71f1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6472984a-b449-4408-8c68-cacb229349a1"
        },
        "item": {
          "id": "6533260d-b8bc-4399-b4ff-ef051d169a26",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a20f7f1e-7cd1-433d-9f4c-f7f9db1908ea",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "29909d65-08dc-4fe9-84fd-224f82f1d98c",
        "cursor": {
          "ref": "b7c65dff-f27a-4795-9ec2-59bb3efd62a7",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "48264618-3fb8-45dc-a7dc-4c9abe81ca0b"
        },
        "item": {
          "id": "29909d65-08dc-4fe9-84fd-224f82f1d98c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b25267eb-c424-4cc5-9b5b-fe4ea9c7c76a",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "366d3aa7-da38-438c-84f3-4f77e6336679",
        "cursor": {
          "ref": "2e278cce-f9c0-412c-bdb7-612c7f559dbe",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "51ba16d4-af3d-4345-aaf6-39eab06b8586"
        },
        "item": {
          "id": "366d3aa7-da38-438c-84f3-4f77e6336679",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "244cb104-9e5f-44bd-9123-1714a151962b",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "eae04aa2-73c9-44d5-85a9-a33cdf060223",
        "cursor": {
          "ref": "c9709910-a311-4b0b-a70d-e984cfc5eac0",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b8ab4b92-5f81-4fcd-ac81-bc272c756629"
        },
        "item": {
          "id": "eae04aa2-73c9-44d5-85a9-a33cdf060223",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b4bfc5fe-f3bb-474a-ace2-d4a62a73386b",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "93023f0d-25e5-43b5-b509-39d98fefe68a",
        "cursor": {
          "ref": "3f222200-495a-41ae-b205-3cd152a7899e",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "534c26d1-079c-443f-bc53-eb31a62a9622"
        },
        "item": {
          "id": "93023f0d-25e5-43b5-b509-39d98fefe68a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f6e8b354-76f2-46d7-90a2-64c5b926a355",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1ca6baaf-fc22-4524-83a9-80f200780483",
        "cursor": {
          "ref": "2fb01634-1d0a-46dc-a76d-c7c08affc230",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "12bb94fa-7939-4f22-8ea4-cfb1619eaf2b"
        },
        "item": {
          "id": "1ca6baaf-fc22-4524-83a9-80f200780483",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6ef5fe09-1f5a-4f74-b5fe-9544eb00a360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5095579-d771-4544-886d-9e140a292bc0",
        "cursor": {
          "ref": "131c012e-1316-43c7-879a-564fe870b6cb",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0928d235-fdb4-4284-bbf0-9e53c7f064c4"
        },
        "item": {
          "id": "a5095579-d771-4544-886d-9e140a292bc0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "818d090a-5953-4261-a45d-6aabe2c1c377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8ebe07-30e7-49bf-9014-066d89c5e487",
        "cursor": {
          "ref": "4604e9d2-0539-4c38-be57-1da76d4d9b43",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e113b8d0-283a-4eab-97f8-40fb7555d58a"
        },
        "item": {
          "id": "3e8ebe07-30e7-49bf-9014-066d89c5e487",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a94118d1-8045-49f8-bde9-22d5e13580c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544c152a-f0a4-46a3-81a8-8dc514edf5fc",
        "cursor": {
          "ref": "7dc685e9-5d1a-46d3-842b-dd1ae13c8211",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "403d9f2b-31d7-43f0-b19e-083bf7ee265d"
        },
        "item": {
          "id": "544c152a-f0a4-46a3-81a8-8dc514edf5fc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6586bb9e-5153-461a-9246-c97171e21a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b4b275-d2b4-4aa2-96ba-35bbd466bbe8",
        "cursor": {
          "ref": "3dbb445e-758f-4ddf-a264-47981913d22b",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "01d0971d-602f-4a77-8210-b56fb74b5d55"
        },
        "item": {
          "id": "88b4b275-d2b4-4aa2-96ba-35bbd466bbe8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4cf64e57-034c-4d00-bded-d7a58c488168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ad1bbb-8509-458c-9ade-0e574a37fb0b",
        "cursor": {
          "ref": "d8ee25a1-2507-4493-ac6e-f63a6a31d3e4",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b5088e2b-6dbd-4f23-8160-a173afea59f8"
        },
        "item": {
          "id": "b2ad1bbb-8509-458c-9ade-0e574a37fb0b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bc3d8333-0fe4-491b-ab3c-a37347e63661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b45bfaf-6914-49ab-bf23-9b34b113e3b0",
        "cursor": {
          "ref": "4dc4ff72-dd4c-4edc-a0cb-710347565e42",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0b684168-0805-4414-aeeb-7fcd2f85038e"
        },
        "item": {
          "id": "6b45bfaf-6914-49ab-bf23-9b34b113e3b0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8a8607de-a882-4a20-bb74-addeb7e1c6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362f1340-c551-4a33-aa58-11f3bfe70662",
        "cursor": {
          "ref": "fedffd36-0df5-41d6-9c7a-1850dce0afb1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "314b20db-01d6-4459-8b5c-37aceb65ac2d"
        },
        "item": {
          "id": "362f1340-c551-4a33-aa58-11f3bfe70662",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7406e2c6-91d5-45f7-8a90-06d3b2c2932f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc04069b-7b58-443d-8a37-dc4b7d47dd03",
        "cursor": {
          "ref": "bb75703e-eedd-43af-b6ba-82bd3c01c159",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "db2fc652-f8fc-4deb-aa6e-5b9df132fe07"
        },
        "item": {
          "id": "fc04069b-7b58-443d-8a37-dc4b7d47dd03",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "300e4bdc-2955-418f-80c3-3b3f23dab7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2e5330-85c4-4c0f-b07e-212d2af62acf",
        "cursor": {
          "ref": "c747052b-adb6-49f8-8b00-2752978a14ad",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9eb763d9-f3fa-41b6-8a16-d8af9dc9a9ba"
        },
        "item": {
          "id": "6e2e5330-85c4-4c0f-b07e-212d2af62acf",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cc242d12-1d7d-48b7-a21f-939d6749acaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1eeabe-a2ba-463a-b6d9-9cfea8088f69",
        "cursor": {
          "ref": "1437c7e8-42d6-4da6-822e-049050ac1646",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "be89361a-276c-4f0c-843f-9bc3f015472a"
        },
        "item": {
          "id": "6d1eeabe-a2ba-463a-b6d9-9cfea8088f69",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6d00ac52-2496-43f7-9ae5-d751fc9f55d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647e7526-d102-4f43-9906-ba74e6ac144c",
        "cursor": {
          "ref": "e13d50f2-126e-4c06-90f3-9d5dfac1a175",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1ebf2dd8-61f2-4468-ae05-491ae52e606b"
        },
        "item": {
          "id": "647e7526-d102-4f43-9906-ba74e6ac144c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f197b82e-e8d0-4b9c-b4a9-df08fe395b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9624400c-79a6-40f2-a565-1a74b63f98d9",
        "cursor": {
          "ref": "b74443ba-e1e6-4eff-9211-a90225ac95db",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f9cd5486-af61-4fa5-a60a-2e2752a58632"
        },
        "item": {
          "id": "9624400c-79a6-40f2-a565-1a74b63f98d9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b4277071-84db-40cc-8eae-da095f02ade5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ff85a7-0d10-4ac0-8077-1a9b9d620bf6",
        "cursor": {
          "ref": "1a770e78-1480-4bf5-bdd0-f643d5e6fe43",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6bfcbdcf-3592-46f2-869e-cd92a54a4d3c"
        },
        "item": {
          "id": "f2ff85a7-0d10-4ac0-8077-1a9b9d620bf6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0ee34347-4e6b-468a-816c-e975b39a3ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa37791f-6bb7-4b31-a06f-07bc929f8ee4",
        "cursor": {
          "ref": "6935c474-568d-4106-ae2c-4fd0f158886a",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f15075c0-03a4-4119-8167-8ffd10ee2a2b"
        },
        "item": {
          "id": "aa37791f-6bb7-4b31-a06f-07bc929f8ee4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ce639b9b-53d7-4264-b373-e9581ddc0ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75d91be-4549-491a-b21d-fabaa72f8535",
        "cursor": {
          "ref": "f5fe87f8-f6d9-4232-bfed-ecb35dccf30f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5ff0c743-1ff6-44b3-b9a8-d7554a702d27"
        },
        "item": {
          "id": "d75d91be-4549-491a-b21d-fabaa72f8535",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d4df33bf-cec7-4f74-89e1-d62e200f7a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca3d153-db0f-4a88-aedc-7de9ce76cafb",
        "cursor": {
          "ref": "f27b4006-8a98-4dd2-a72e-32d5aa77fbad",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2062cb27-8016-47d0-892a-acd449100bc3"
        },
        "item": {
          "id": "9ca3d153-db0f-4a88-aedc-7de9ce76cafb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0afb9314-40f4-4a56-a974-16c3a865a098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c6199f-28eb-4048-86a5-36a6550ac352",
        "cursor": {
          "ref": "6af81635-1495-41f7-8749-8b19e62e4333",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e9f10897-8847-426b-bab6-db4633e32792"
        },
        "item": {
          "id": "63c6199f-28eb-4048-86a5-36a6550ac352",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e0ddfe94-888f-440a-8881-71836f860f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56d435a-69ff-4e62-b55f-a43d9da34a49",
        "cursor": {
          "ref": "1edcbfc5-18e8-47c9-af76-6a5989a4ed41",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7cb67ab4-c7c0-4b7a-951c-1e0beb4c8978"
        },
        "item": {
          "id": "f56d435a-69ff-4e62-b55f-a43d9da34a49",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a5e60920-4a66-424f-836a-6505b62d7f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5602de5e-6f71-47b8-9a49-d1ed21355c64",
        "cursor": {
          "ref": "8d0ba993-b820-4a23-b3fe-da7b8ead411b",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5332a720-f5b1-4bc1-8dad-edd1dd50eab3"
        },
        "item": {
          "id": "5602de5e-6f71-47b8-9a49-d1ed21355c64",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9cf6db1c-36bc-4a40-9e02-098ee2b904ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27a519f-15d9-4d31-9ebf-0dcd0ef3f723",
        "cursor": {
          "ref": "176a7161-0922-4a6b-9e42-62a938ebdf10",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d9b8576e-f65e-4f8e-9985-1eca0da5d5af"
        },
        "item": {
          "id": "d27a519f-15d9-4d31-9ebf-0dcd0ef3f723",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9162f6da-d8aa-4179-9b19-4d75744748c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09e7153-fb8b-4543-b9e1-d66fcb3c98d7",
        "cursor": {
          "ref": "d8cb53c0-82f6-4d27-8a54-3511e40a77fc",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d97169d0-d355-4b80-a33f-d839a325d4c4"
        },
        "item": {
          "id": "b09e7153-fb8b-4543-b9e1-d66fcb3c98d7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bd7618d7-8051-42ad-942d-38132c1f8a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0ee97e-c57c-45a7-aae5-bc5562200644",
        "cursor": {
          "ref": "3eedeb49-9288-4ec9-b358-adc239faa29d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9ef48eda-c9fa-48e8-91a1-290f3bd6b703"
        },
        "item": {
          "id": "9a0ee97e-c57c-45a7-aae5-bc5562200644",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a45fcee1-dea9-49db-9e98-37338ce5530d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758a751c-fcd2-4276-a992-7fb5d58e927c",
        "cursor": {
          "ref": "06680b19-4580-44f1-b50d-4075e386a032",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b057b843-5369-4046-baa3-4ae1ff99d9d2"
        },
        "item": {
          "id": "758a751c-fcd2-4276-a992-7fb5d58e927c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "415f1bc9-a11d-4d93-b8f8-215924071cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213c6ae5-e0fd-40a1-b78a-f62f4e95513d",
        "cursor": {
          "ref": "ccc2d09d-95d5-4c50-a461-b96013e77e5a",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "04c6d644-8385-4752-bfcf-678a3380a5a1"
        },
        "item": {
          "id": "213c6ae5-e0fd-40a1-b78a-f62f4e95513d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6d5cb2fe-caf5-440a-80b7-34237d0438d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833ea9a1-f88f-4674-a161-a5fb9a998d50",
        "cursor": {
          "ref": "bdd1997a-0df6-4c35-b722-128977dc121c",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "491c570b-3ef8-4320-ae30-659a3e6798b5"
        },
        "item": {
          "id": "833ea9a1-f88f-4674-a161-a5fb9a998d50",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bc969125-1c31-4b30-94a7-8cb94d50e299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ff72a7-4142-4a45-bd55-e9546733e5aa",
        "cursor": {
          "ref": "c318dda9-f350-4058-9056-42da8f769c7f",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2ea20f59-8031-4a60-b4ea-ccddc638339d"
        },
        "item": {
          "id": "15ff72a7-4142-4a45-bd55-e9546733e5aa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "76157bb5-9f71-4d88-a257-9b073c42205d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d007052-093d-4e6d-8a0c-9e9bb5a9421f",
        "cursor": {
          "ref": "05b2db5a-36b1-4849-bb00-971c6ec3f8ea",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e2fd44c6-103d-450e-a888-63006eadeb61"
        },
        "item": {
          "id": "3d007052-093d-4e6d-8a0c-9e9bb5a9421f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "bc0fbed2-53ab-4563-837a-1363111806f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910a3b22-2228-49a3-a21c-cdbc126dc190",
        "cursor": {
          "ref": "5d309642-5ac8-465c-9c03-f006e4f68fdd",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0a1df2b3-8c34-4371-8a3c-f619e65dc80c"
        },
        "item": {
          "id": "910a3b22-2228-49a3-a21c-cdbc126dc190",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8aee9813-ee9a-4a05-bf8a-11eeb3792c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6446db-29c0-4ca5-ab0b-bff7487536df",
        "cursor": {
          "ref": "c5744d38-070a-4ab7-a370-b294f13988c2",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7ec245ad-07e3-43fd-8fbb-59e4aa582517"
        },
        "item": {
          "id": "ab6446db-29c0-4ca5-ab0b-bff7487536df",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c6fc85a5-3dc4-4497-b9fe-b9d3a54b5df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f67e95f-c6e8-4f78-a2ab-6f03f3c61b89",
        "cursor": {
          "ref": "ff60e467-02d8-4547-b918-fb415958f3a7",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bef9b83b-b397-4f70-aec9-e79979183653"
        },
        "item": {
          "id": "2f67e95f-c6e8-4f78-a2ab-6f03f3c61b89",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5aee8c5d-6134-4015-98df-a5a3171738df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ece42f-c3b1-4e99-851a-5422f9acc000",
        "cursor": {
          "ref": "14135d67-e1b0-46a0-bb3d-d68a020be7e2",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "51a48beb-d485-44e2-a231-786a16c21f84"
        },
        "item": {
          "id": "11ece42f-c3b1-4e99-851a-5422f9acc000",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "666a8726-b6be-491b-964f-7aff97cf29db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934cb32b-9afb-4d3e-a68a-3decd81d8d90",
        "cursor": {
          "ref": "4d6736c0-30b0-4a29-bbb3-d7490aefdab5",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b3d379b3-344f-4e61-bc54-1f24f37d2490"
        },
        "item": {
          "id": "934cb32b-9afb-4d3e-a68a-3decd81d8d90",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1ba25a23-5538-4a55-9c5d-0a568c2a2dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e2ca24d6-9aae-4f66-bd5e-4e3f2dba8859",
        "cursor": {
          "ref": "589d9402-853a-4acb-bd10-671ab3d2ddcc",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0fb5179e-c9c3-4e1e-bd08-8fe421c59c04"
        },
        "item": {
          "id": "e2ca24d6-9aae-4f66-bd5e-4e3f2dba8859",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f6f73101-9e85-49d3-a38d-37d078d95e10",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "57eabb99-36f9-4362-8ebe-420bef5e2bc9",
        "cursor": {
          "ref": "fcdc8f2a-9257-446c-b30a-58cb1a0d4e15",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c09a9f72-2a46-45a6-acf1-107acd08d4b5"
        },
        "item": {
          "id": "57eabb99-36f9-4362-8ebe-420bef5e2bc9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6f4c9fd8-9960-442f-9a89-c7eb1451ae75",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a5e34c-8eb8-46cc-97ac-e9ea2a29dfae",
        "cursor": {
          "ref": "095cac78-15ec-4f98-ab5c-19b082a51070",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "44c91232-7582-4708-a786-134b2052be42"
        },
        "item": {
          "id": "f9a5e34c-8eb8-46cc-97ac-e9ea2a29dfae",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d06350be-926d-40cf-b2fa-625d44072019",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cefe1e3-7501-4fd4-9c84-731d39031985",
        "cursor": {
          "ref": "29d442a6-a4f7-41a5-b1a8-649ba5ddd162",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "47890a26-5fe1-4f16-b038-fa4299916f0c"
        },
        "item": {
          "id": "2cefe1e3-7501-4fd4-9c84-731d39031985",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "64b65601-d280-430d-8224-4668cdfbb938",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b22de19-6b58-4d81-bbc1-bad00d14a490",
        "cursor": {
          "ref": "de771f1d-d3ad-4217-bcdd-1efa501fd28d",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b9711828-6923-4f7e-962a-c9417c323d83"
        },
        "item": {
          "id": "1b22de19-6b58-4d81-bbc1-bad00d14a490",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f6957fa9-0b83-4610-b613-072c219922a1",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-19T00:36:29.373Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-19T00:36:29.373Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9cf316ed-4466-455c-ac79-bf2c0fc7e5bb",
        "cursor": {
          "ref": "35d36a74-13c9-4fe1-aea8-abc70058ae1b",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "75ff740e-2b75-40fc-b5fc-df3a3d49430e"
        },
        "item": {
          "id": "9cf316ed-4466-455c-ac79-bf2c0fc7e5bb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7c3fcf4e-a4c8-4900-8921-e85efe68ac37",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2304ff31-5678-4ab5-aacf-6a899d241843",
        "cursor": {
          "ref": "f781b908-1cbb-41fe-bc56-c496a58eda87",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b8722c4c-d4ab-470d-97c5-520d5df55b09"
        },
        "item": {
          "id": "2304ff31-5678-4ab5-aacf-6a899d241843",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b8710aca-3a62-43cf-bd8d-f8ac57c59aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400d1eb4-0528-41d5-8a38-342fa274a2cc",
        "cursor": {
          "ref": "2bf52398-3b61-4775-a50e-3e51220b0ef5",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "529a58cc-ef83-473d-a16e-8a23ff4c7f75"
        },
        "item": {
          "id": "400d1eb4-0528-41d5-8a38-342fa274a2cc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ddb59ff5-13ad-4215-b238-708f0488e245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c81b628-5fe3-4f56-a095-79b6b5d34d69",
        "cursor": {
          "ref": "7a58198f-0435-47d7-ba38-1f0b20e2e51e",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bc9599cb-5fe9-46db-8b49-1c159c995774"
        },
        "item": {
          "id": "2c81b628-5fe3-4f56-a095-79b6b5d34d69",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4278845a-7c10-4218-a366-a13d81f417a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a1a7b4-f890-492b-b624-f4b627ef777d",
        "cursor": {
          "ref": "05fbd454-e84b-4709-b43a-f5e5688dd984",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "607419b3-6ca9-4242-b373-e236e8879591"
        },
        "item": {
          "id": "f7a1a7b4-f890-492b-b624-f4b627ef777d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5eec67dd-5815-402d-ab2a-8f2851049f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13806582-04dc-43ca-a5c9-89c7fc57eee8",
        "cursor": {
          "ref": "636ec3b1-0b90-4683-af31-5166c558bd7d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6d3ba550-2cd8-4ab0-a1c3-862772077a53"
        },
        "item": {
          "id": "13806582-04dc-43ca-a5c9-89c7fc57eee8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d8243430-ad4f-4696-881b-d7ea64ccc406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f79d6f6-2f96-4628-b3a2-78e7ce35a2de",
        "cursor": {
          "ref": "1c47a2e1-2168-46ec-ba02-829981ae0317",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9c82b0ba-e23c-47ee-a55b-550f87932b90"
        },
        "item": {
          "id": "4f79d6f6-2f96-4628-b3a2-78e7ce35a2de",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "53c528a9-9bdd-4075-80ac-77d845137b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e64e16f-b78e-4975-a47a-da7e45995b86",
        "cursor": {
          "ref": "a6747dc7-33d8-44b7-aca7-45d11654f799",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "98e4f2c7-1864-4f80-b27d-c5e671a806a9"
        },
        "item": {
          "id": "7e64e16f-b78e-4975-a47a-da7e45995b86",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "063d6166-4111-4462-8da0-eadc5ae81067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c1ead5-e323-4c05-ab0c-7a1192211ebc",
        "cursor": {
          "ref": "a69f2a0f-ef4b-4951-bdf6-a78c5cd37101",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "339e177c-7b4c-4392-8fdb-c616b58b6246"
        },
        "item": {
          "id": "d9c1ead5-e323-4c05-ab0c-7a1192211ebc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5579afbd-56dd-4ef4-8904-c2c8d5fb467d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3807a080-1290-4542-914b-d3c11bae2f7e",
        "cursor": {
          "ref": "d7d55b68-f8f3-42ca-93b2-fd26daa49b7a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1129b7cc-9e2c-4415-80c3-0873ebdc851b"
        },
        "item": {
          "id": "3807a080-1290-4542-914b-d3c11bae2f7e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "16d4d325-b82b-4a38-9894-9f59383e13ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4109c37b-5c4d-496d-a414-c05c87367e59",
        "cursor": {
          "ref": "7e4a9348-b81a-47df-91f3-b2586e1b65dc",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fc133477-76b3-474c-aba7-80a5df9c1a09"
        },
        "item": {
          "id": "4109c37b-5c4d-496d-a414-c05c87367e59",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "42565137-af08-4c64-9392-f122f8e3d7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef548785-6683-4622-a2b8-c1b2ef4818f3",
        "cursor": {
          "ref": "e0605ac0-b313-4906-866e-daf0bdde1bb9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "12da9f7b-2b6d-4ef6-8d24-c2c96013c099"
        },
        "item": {
          "id": "ef548785-6683-4622-a2b8-c1b2ef4818f3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9cf7d2ce-03c8-4461-8780-af383bbe0878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d22504-f61c-4240-8319-0455ac2f8f0f",
        "cursor": {
          "ref": "65407ae4-8009-4dba-b4f6-3076da47945e",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e3b74ef3-c197-4132-a6c2-93934bf4ae4a"
        },
        "item": {
          "id": "f4d22504-f61c-4240-8319-0455ac2f8f0f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1fdbdeb3-4fec-40d4-bca2-8ab82429a094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a9c4ab-e6cd-4f0a-b1d5-9c5b4486c2d7",
        "cursor": {
          "ref": "5d8a1c61-08f4-4f58-baab-6b7751cee659",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0c3e0169-ddb5-4ed9-a743-bcfa829c2f2c"
        },
        "item": {
          "id": "63a9c4ab-e6cd-4f0a-b1d5-9c5b4486c2d7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4f897f5a-2c2d-441e-bb11-72e6cd0223b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397ea1ff-b652-4ea0-b664-f3edcf2f6346",
        "cursor": {
          "ref": "da03b4b9-ec92-4b2c-a5a7-3f22cb4b75c9",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "481fde22-c877-46bf-ab9e-f2a1364e4283"
        },
        "item": {
          "id": "397ea1ff-b652-4ea0-b664-f3edcf2f6346",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "155dfe9e-89d9-41f3-a8c9-4a53049efd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4d4379-638b-424b-920a-ba148d34f214",
        "cursor": {
          "ref": "db710b88-1972-4b0b-8c2c-58d50a1e1eb9",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0ab82747-48b5-45da-93e4-31de3acb0ef4"
        },
        "item": {
          "id": "ae4d4379-638b-424b-920a-ba148d34f214",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a18d2a89-8fc4-49eb-9178-aa1a3c6255f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714719c0-384f-49b3-90f4-7d8bf8132cbd",
        "cursor": {
          "ref": "104dfa0f-760f-47f2-91b8-f821172123ee",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b8b64d67-5229-4265-b2f6-a9ba127f6d35"
        },
        "item": {
          "id": "714719c0-384f-49b3-90f4-7d8bf8132cbd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9d7b1b33-ce2a-4b92-8a41-a54712838215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f9e99e-30ef-4d1b-8268-6723e4a547bc",
        "cursor": {
          "ref": "56242a94-3d12-456b-8255-09ec38f44f4e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5a0263e1-4cff-4eee-9b44-1affbe25b276"
        },
        "item": {
          "id": "71f9e99e-30ef-4d1b-8268-6723e4a547bc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9534a9d5-27ca-4dab-9ac7-2ef213f5851d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb410ba-0ccf-46da-af00-96273223c80c",
        "cursor": {
          "ref": "9f1c9826-6aad-4c0f-87a7-91a7e0a2afe2",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "44cc36de-2291-4343-bd10-8f40657ca6f0"
        },
        "item": {
          "id": "0fb410ba-0ccf-46da-af00-96273223c80c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b9de855e-a24d-4cc0-a3c6-ef13842b8026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147ec0e5-4c31-4399-88c1-3aa9f46e35f9",
        "cursor": {
          "ref": "49f6facf-1e24-469c-9c72-95f6a74764a6",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "72a89bab-cd76-4aec-bccf-8580cfc69592"
        },
        "item": {
          "id": "147ec0e5-4c31-4399-88c1-3aa9f46e35f9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f5e6e52d-0eb6-4bfb-93b8-a6f9285cfb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473d5fec-98d5-45de-9b80-6a4b419eeac4",
        "cursor": {
          "ref": "31e9c595-0d30-4a75-b9e7-54596894c7f9",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "68409583-5887-4843-b4cc-c454a09e623e"
        },
        "item": {
          "id": "473d5fec-98d5-45de-9b80-6a4b419eeac4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b2e1fa08-9d4e-4e2a-b070-062680dc3755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfca3c9f-22a0-4cd1-906e-c6e3037d9cca",
        "cursor": {
          "ref": "a16aec27-52fc-4683-9594-a87b304b1175",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ed6e3d29-1afc-4781-989e-dff775c18e8e"
        },
        "item": {
          "id": "cfca3c9f-22a0-4cd1-906e-c6e3037d9cca",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "47abd11a-e936-44ac-9191-ae1eff8564dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da69baa0-45e0-4014-a848-c39c512a3b5b",
        "cursor": {
          "ref": "f537087e-9430-4ac9-b870-92e3f2aa92e0",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a8dcf559-20dd-4430-b1b2-e1a5b5426b4f"
        },
        "item": {
          "id": "da69baa0-45e0-4014-a848-c39c512a3b5b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b0689a05-c229-48bb-b251-33b6a36f66df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44052341-d053-4ade-aa99-5dc096a6af68",
        "cursor": {
          "ref": "05fe90ad-bcee-41cf-a0b4-e1ce8bcb75d5",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "54aa3e6b-c80a-41d1-be91-0ba432d23d44"
        },
        "item": {
          "id": "44052341-d053-4ade-aa99-5dc096a6af68",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4b9aa2d3-0907-41cf-a25d-e201a8b6d792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa10f7d5-6ea6-42a4-96f2-c9bce5a6ba7e",
        "cursor": {
          "ref": "bbb30356-0d84-485f-848e-fb39b7e2ae5d",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bd8b0a32-4d59-4b67-bfe4-197396fb4068"
        },
        "item": {
          "id": "fa10f7d5-6ea6-42a4-96f2-c9bce5a6ba7e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0e1de220-364c-448d-847b-2b8df60173bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31473f2-5673-43f1-9da3-1d362f600c67",
        "cursor": {
          "ref": "f107eff9-5b4b-462a-acf1-6009031bddd5",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a07c5fee-4c7d-4848-9a79-7661e1e81a2d"
        },
        "item": {
          "id": "b31473f2-5673-43f1-9da3-1d362f600c67",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c1621272-6957-43a2-8b3f-44373f119af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1bd6ee-5f88-4e44-8041-a2c7a0ac8d01",
        "cursor": {
          "ref": "c341ca81-a864-4697-aefb-c99d84947852",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2536111a-9782-4cc0-8843-88283279c644"
        },
        "item": {
          "id": "4c1bd6ee-5f88-4e44-8041-a2c7a0ac8d01",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "118b194e-9848-44cb-a2c3-e563c518edc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81278ffc-abeb-4c1d-89c2-886816b03a90",
        "cursor": {
          "ref": "d22a4b71-096b-429b-a3ed-9ccb48965969",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6140e8ce-a70a-46f4-864b-95ac2712d185"
        },
        "item": {
          "id": "81278ffc-abeb-4c1d-89c2-886816b03a90",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "33f4959b-95d1-4c19-9e82-226c2113e27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702a53ad-087b-4e5b-a808-a9ab14cbe53a",
        "cursor": {
          "ref": "43f3a96b-7954-4eab-a50f-b5ec66929bea",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0cb476b8-9cb8-4cd6-a793-3375ce1feb6a"
        },
        "item": {
          "id": "702a53ad-087b-4e5b-a808-a9ab14cbe53a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0ff4307c-4975-4564-bb75-6a0152a68cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b639f4d-7887-4254-be44-e223590d422c",
        "cursor": {
          "ref": "16cd39ca-15fd-463b-ac25-b0fc4e3d1af5",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "14191018-5551-41a9-955c-b8fef438f778"
        },
        "item": {
          "id": "5b639f4d-7887-4254-be44-e223590d422c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bce8054c-bb97-4c0b-9c57-33c1cdd067fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bac5d7b-b4f7-466c-a4f5-650213000a08",
        "cursor": {
          "ref": "6f453a6a-b251-44af-a518-e2ddcd2308fb",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0a960a43-04ba-451e-b20d-fee9fa44e991"
        },
        "item": {
          "id": "4bac5d7b-b4f7-466c-a4f5-650213000a08",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "978eef53-0062-441c-98f3-c076c64ac64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8637ce3-48bb-4945-966b-f8e3bf2db112",
        "cursor": {
          "ref": "fee7adbe-ed41-499e-a02e-5a8a3b16e164",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b8e5554f-f7f7-4d05-8a74-a87ae1fd3538"
        },
        "item": {
          "id": "d8637ce3-48bb-4945-966b-f8e3bf2db112",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f916c643-856d-425a-a434-d3e813a1de7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e246cfb-090c-4472-88a0-727c5546f4e7",
        "cursor": {
          "ref": "db08bb6d-7d00-4057-bafa-7779638ee60e",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d1a43bb8-40f8-4a5c-9850-734d6b1be094"
        },
        "item": {
          "id": "5e246cfb-090c-4472-88a0-727c5546f4e7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "82e56655-30ad-4c64-9efa-3fb3589d9550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2fc51b-6e09-49c8-8721-e6d64a42d8f6",
        "cursor": {
          "ref": "c32a2293-75c4-48e9-a830-39759e5789e3",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e1d07dbf-f9a6-443d-90c9-ef6f3c282fa6"
        },
        "item": {
          "id": "8c2fc51b-6e09-49c8-8721-e6d64a42d8f6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b57f24ca-5426-4f3d-aaf2-1f1372f7df13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f27d5d-9f10-41db-a626-e37c4a730750",
        "cursor": {
          "ref": "80e6a674-87ce-465e-99c2-2ea0cc7281d1",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8032a5e3-b070-49eb-a6cd-b26d92808a01"
        },
        "item": {
          "id": "b0f27d5d-9f10-41db-a626-e37c4a730750",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a00b1b36-522a-4f06-9ce9-9bba91df6ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56b2117-a2a5-465e-b8c4-1654c286067a",
        "cursor": {
          "ref": "e5102f31-cd75-4103-a79b-cac95f308498",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ba8e3a4e-29f8-4da8-9e63-7516df739bce"
        },
        "item": {
          "id": "b56b2117-a2a5-465e-b8c4-1654c286067a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2bb22f7e-8724-401b-8f78-539ce3574873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a28e23-4740-4a1c-9456-eb4dea0dba96",
        "cursor": {
          "ref": "222ecfa4-945a-404d-b77a-7ff2eba481f1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bfa78a3f-2078-43f2-b7b4-2ab3d4309915"
        },
        "item": {
          "id": "f9a28e23-4740-4a1c-9456-eb4dea0dba96",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d11d62c7-e39b-49c2-9816-ff50ba2216db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689722ba-189f-4cfb-a3f7-ed0585c754e3",
        "cursor": {
          "ref": "e9a03707-213f-48c8-a764-adb08e764e15",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d351ca74-7330-48b8-ae93-dfdeae89df91"
        },
        "item": {
          "id": "689722ba-189f-4cfb-a3f7-ed0585c754e3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6e6a5d12-9555-45e5-9db2-28bb171080cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1041b752-f6cc-4fb3-a580-a278c57f9174",
        "cursor": {
          "ref": "6beb26f0-bc61-4531-9e10-b086bafd82f1",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9f7cd0d1-ee96-4218-8837-59d17c347825"
        },
        "item": {
          "id": "1041b752-f6cc-4fb3-a580-a278c57f9174",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "917ac4fb-4c66-4f57-8167-47b7d4686b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2e5929-9fb2-4fc2-be82-687d7d9c7a64",
        "cursor": {
          "ref": "f87c6195-bb61-4318-860d-a0c091ae84ae",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fbd29ec0-5054-4ad3-9510-b5166c4199fc"
        },
        "item": {
          "id": "dc2e5929-9fb2-4fc2-be82-687d7d9c7a64",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1c5c9d52-4d50-479d-a90e-b5a1e1c1adb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0200b474-f44e-436c-978f-72ddc8b47292",
        "cursor": {
          "ref": "12d4ae1e-b404-43a3-a08a-1f2728b17b55",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e914d7b2-12ae-41b3-871e-fbe784ecdb3a"
        },
        "item": {
          "id": "0200b474-f44e-436c-978f-72ddc8b47292",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6d7326b4-272c-4e5a-a0ea-c1d3fbd26bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d09ee3a-e2e8-4686-8788-629a74a0e89b",
        "cursor": {
          "ref": "52fee1c5-10e3-4881-872b-a15532b12ca8",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0b57722d-8a7e-4a63-83f6-eda04cec7096"
        },
        "item": {
          "id": "7d09ee3a-e2e8-4686-8788-629a74a0e89b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "747b0334-5d44-4258-85bb-af4e8cd77533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31998170-8794-41a2-b484-135491ef3885",
        "cursor": {
          "ref": "5180954b-29a7-4911-a900-76f0ddef7ca8",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a6996851-d0b0-4d14-a42c-bc2f3a824fe8"
        },
        "item": {
          "id": "31998170-8794-41a2-b484-135491ef3885",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ad5cb3c-32af-437c-b4c1-47c971f20971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b61a718-cfcd-4f56-95bc-49795c796856",
        "cursor": {
          "ref": "6251a614-dc32-4665-a038-8550cb3a6756",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "93a53402-c7f1-4bd5-ab8a-c88482c3b20c"
        },
        "item": {
          "id": "5b61a718-cfcd-4f56-95bc-49795c796856",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "15d6d556-3bbc-4d6e-a3e5-08983e0a3749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bd3597-696c-4e7e-a261-93706992b952",
        "cursor": {
          "ref": "4097c481-57ea-4b94-b771-75a8b0c24210",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d4610ddd-b50b-4550-8aab-ebc3395f90a3"
        },
        "item": {
          "id": "94bd3597-696c-4e7e-a261-93706992b952",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d8f4924a-7966-40cc-afaf-a0657a356462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421b686a-dc78-4df2-b1a8-25f231026cbc",
        "cursor": {
          "ref": "f263fac3-0b76-41b6-bcef-571fd8c9bf5a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9ceead34-9d2f-4a55-a50f-e808ed45f509"
        },
        "item": {
          "id": "421b686a-dc78-4df2-b1a8-25f231026cbc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8faadf66-2800-4748-936f-47b4dc8fe336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385b9357-480b-485f-a9c0-fdc1d20d1833",
        "cursor": {
          "ref": "7381bb49-5282-4ac8-a85d-bc93a8bfec8e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "08f8a191-7a9e-4549-b6d1-ee29ba0afdf5"
        },
        "item": {
          "id": "385b9357-480b-485f-a9c0-fdc1d20d1833",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a6148b2b-0047-4a4d-a980-ee2ec62fa43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e13a99c-be19-48b1-a801-334a641b8c0b",
        "cursor": {
          "ref": "bf1d6318-86d3-4ee1-8820-fa7ba882efd7",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5607c5de-ca19-48c6-9a26-9d0e6f1c6971"
        },
        "item": {
          "id": "9e13a99c-be19-48b1-a801-334a641b8c0b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "350e3ea0-12f0-4eed-aa89-bd0fe11df0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92b2d89-d0ce-4874-aee4-cf0edcbc4381",
        "cursor": {
          "ref": "6f474d54-bd30-488e-8204-9056a5a5984c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "481ab571-511b-4e99-96ad-4924646f1fe0"
        },
        "item": {
          "id": "b92b2d89-d0ce-4874-aee4-cf0edcbc4381",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d0803fa-4d29-4b27-b377-e0a27e6488d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab80cee2-2c4f-44b6-b35c-5b324186c967",
        "cursor": {
          "ref": "a9afd212-d9cc-4c8a-92cd-2e48f80419ea",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4dc6b9f7-2e37-4192-a705-c5659febc554"
        },
        "item": {
          "id": "ab80cee2-2c4f-44b6-b35c-5b324186c967",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "80088db7-cbb2-4a34-b568-29af7454aa65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb58156-f062-47db-a90b-fc4323d98be0",
        "cursor": {
          "ref": "71f93754-c4d5-4869-81db-85cc8ddf7a1a",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "22a90f7b-bce0-4b32-ad42-ef2bcf62b7b3"
        },
        "item": {
          "id": "3fb58156-f062-47db-a90b-fc4323d98be0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "db94647f-c087-4294-81bb-e13ec102165c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af22d145-100d-4508-92d5-a0c2938775a4",
        "cursor": {
          "ref": "999e4dc0-fc21-46ce-94a8-f39d319cc8e6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fbe2afb2-e839-4e26-8c76-59f78fa23cda"
        },
        "item": {
          "id": "af22d145-100d-4508-92d5-a0c2938775a4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8f6a5220-85b7-43e1-97ba-07baddbc1aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3683ce19-194b-4c91-ada3-6b1f6e6f3678",
        "cursor": {
          "ref": "d9670302-d6ec-4ebc-94b4-93a4181aea49",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f34cdbbd-a18c-463b-93d0-133a57ca1538"
        },
        "item": {
          "id": "3683ce19-194b-4c91-ada3-6b1f6e6f3678",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e9c7959a-476a-4078-aba9-0ed0fa0c9754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101ddd8f-4279-41b5-b4ec-286e4c340e39",
        "cursor": {
          "ref": "4ac4e625-759b-4615-9f87-d8793a5ad24e",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c5cd73ce-c115-4eda-bab8-67d38bc7777a"
        },
        "item": {
          "id": "101ddd8f-4279-41b5-b4ec-286e4c340e39",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2056c977-3cca-4ecc-a3bf-0afc52a6dad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a815a0be-a6de-4dcc-99db-cdff91e336de",
        "cursor": {
          "ref": "863e6e06-f314-4f2c-a9de-d420f95e3bfb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a22158d0-93c8-4961-bdee-7f512dadd8dd"
        },
        "item": {
          "id": "a815a0be-a6de-4dcc-99db-cdff91e336de",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "af510f2a-3230-4dcc-b0e2-e9bd66a8ef07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a0657f-bc00-474f-9e39-187c4b9e7e9e",
        "cursor": {
          "ref": "c30f0893-7689-4378-b52a-8ae3ea3da0b4",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3c0c23e2-f789-4b60-b74d-ae955ff4ed30"
        },
        "item": {
          "id": "15a0657f-bc00-474f-9e39-187c4b9e7e9e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d7666ed5-c3e7-4298-a76c-69cb5d1e0b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e81e8a6-50ea-4e49-bf2d-6fa27e6c4e5f",
        "cursor": {
          "ref": "5bc333dd-e84e-4b36-8eed-67af0021f5b6",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e76f377e-8d04-4eb9-9694-f41efb732622"
        },
        "item": {
          "id": "1e81e8a6-50ea-4e49-bf2d-6fa27e6c4e5f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8db821d9-0ee0-452d-8163-2c51a94f943e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17070132-77bc-4b2c-b583-3c44722ecd08",
        "cursor": {
          "ref": "a741ab14-d16e-438d-86d3-d30b60dd8d08",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c82addfd-6b9d-4e19-be9d-75e1dfe17d31"
        },
        "item": {
          "id": "17070132-77bc-4b2c-b583-3c44722ecd08",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a67e72d4-e9f7-4578-bee7-c284abc3e0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99438c1-f388-42dd-a9f4-e529571b3d97",
        "cursor": {
          "ref": "575cca45-15be-43d0-9c96-d53627ffe5de",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d5f16e9d-ce6e-4f07-9a0f-a93ae08f7d5a"
        },
        "item": {
          "id": "c99438c1-f388-42dd-a9f4-e529571b3d97",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f23632e2-a3b9-497b-b16d-5052b87149f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c695255-18b3-4f22-bde7-c14c3a84999a",
        "cursor": {
          "ref": "645f40e5-3f87-4f68-9bd3-1d3c9711918c",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1bd0b1f7-2350-417f-9775-0d5b9986ca4b"
        },
        "item": {
          "id": "3c695255-18b3-4f22-bde7-c14c3a84999a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6e2d982c-8026-4e16-aec7-a7d29d968c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb56449-0cdc-4b0d-b8ef-bebfb090b66d",
        "cursor": {
          "ref": "d389f4e6-2a72-4be3-b0de-7a874998dc48",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c51a79a5-b4f7-41e5-a6fb-64ac060b236a"
        },
        "item": {
          "id": "2bb56449-0cdc-4b0d-b8ef-bebfb090b66d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b44a5b3a-9c0d-4e30-986c-e3e36fa1a3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83891ac-e32f-4475-a228-cbc638b32735",
        "cursor": {
          "ref": "764f0ca6-edd9-4f32-8bcb-ad3f2f1c8db7",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fcc19e5d-ed25-4c29-83de-13a33f54ed18"
        },
        "item": {
          "id": "e83891ac-e32f-4475-a228-cbc638b32735",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7b65e881-a1ec-46d8-a060-16491e6b52f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ef1e18-3896-4091-a238-44532afb4c3e",
        "cursor": {
          "ref": "18cd3bb4-bed9-4aed-9bc8-1e9c7e2ddb06",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "49e12807-ed67-4ef8-8845-897af04cb93a"
        },
        "item": {
          "id": "b4ef1e18-3896-4091-a238-44532afb4c3e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "46fc2368-3962-44c8-a40c-511c8fa5164d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d3df03-9ab1-48e8-9909-89a17f3fa35e",
        "cursor": {
          "ref": "f2778142-8241-4c8b-8e16-d1c4bb389cd0",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "23287c2a-497f-4e15-b271-393a3ea4a0e7"
        },
        "item": {
          "id": "84d3df03-9ab1-48e8-9909-89a17f3fa35e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cf67795f-1145-46c3-ab64-21000d232277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb141f5f-fe75-4403-bb9e-57189852c92a",
        "cursor": {
          "ref": "fc6a1483-ea4e-43c7-8178-579e8f94e0f1",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f63ae06d-24a5-4c24-8193-6df5d9862e54"
        },
        "item": {
          "id": "cb141f5f-fe75-4403-bb9e-57189852c92a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "feb4a762-248e-40eb-8fd3-d1afd804be36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef882f4-7ac3-419e-9599-b0ff7cb5e66f",
        "cursor": {
          "ref": "f37e2416-785c-4f33-b28b-1c6940b96714",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3ef8f99d-a05c-48c2-8ef1-5e56aa76c7fa"
        },
        "item": {
          "id": "cef882f4-7ac3-419e-9599-b0ff7cb5e66f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9ba62c35-d356-4453-93e3-0062bdebae10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18d1cb9-2226-45cb-97da-8ddfdf692c66",
        "cursor": {
          "ref": "f02e775b-211b-4a72-ab99-8a05d2617376",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c0f26a66-3038-488b-9d51-de9d3499d59e"
        },
        "item": {
          "id": "c18d1cb9-2226-45cb-97da-8ddfdf692c66",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "44915acc-7f64-4625-8035-1e925d940072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4aeced-cb41-46fc-a70a-6916f9f1e78a",
        "cursor": {
          "ref": "a61e1680-3bba-4794-87d0-9acd2182dc01",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ea499c2e-568e-4d15-b72a-7baf4f6f149d"
        },
        "item": {
          "id": "be4aeced-cb41-46fc-a70a-6916f9f1e78a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "1ff86ad7-11ad-42d1-a66e-488ebbcf6ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c8e617-cf32-4664-ba24-054ff88f61b3",
        "cursor": {
          "ref": "6c51d8de-4e08-451f-989f-775375870dbd",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "35e962e4-62da-4e7e-8345-e2f7b465b064"
        },
        "item": {
          "id": "c4c8e617-cf32-4664-ba24-054ff88f61b3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "311b4bd9-dbff-4030-8c64-8ecbf6fce0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861161c2-0ca9-411c-af7b-f907f5c76a1e",
        "cursor": {
          "ref": "17725156-efce-4501-809d-26d76d486763",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ad337ede-5fdb-4487-86a9-590e94e525e6"
        },
        "item": {
          "id": "861161c2-0ca9-411c-af7b-f907f5c76a1e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7ea271a1-a655-46b1-ad99-dcfe4ce1e000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4b3d74-82ae-4200-85ca-78cb7c4d185c",
        "cursor": {
          "ref": "b53d23a4-7fff-44c8-8278-322902f03c15",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9f74e963-cfa2-4bf7-a8a9-fb850ff3fe56"
        },
        "item": {
          "id": "5e4b3d74-82ae-4200-85ca-78cb7c4d185c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7df0c0e1-e63a-4c9f-a398-481923507826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e41249-139b-4d0e-a5bd-581a3e342a98",
        "cursor": {
          "ref": "845aa176-6166-4c3d-bc3d-0a2208b52cbe",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "caa41ea6-95a7-48d7-adc4-87b1195df888"
        },
        "item": {
          "id": "b7e41249-139b-4d0e-a5bd-581a3e342a98",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2e0d79b7-1adb-4279-a76d-fe284845c17d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b224e1a5-42e0-4b24-a182-5623d6d2bdc8",
        "cursor": {
          "ref": "99ef2b12-e366-4781-beae-b065a4ae4c37",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3ce75c83-6f0e-43b7-9ef1-110a6cb283db"
        },
        "item": {
          "id": "b224e1a5-42e0-4b24-a182-5623d6d2bdc8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "101de16b-3d9c-40a0-81a9-ec0ceb2c0db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e2956b-a1a5-4ce5-bb61-4b61f13a43ce",
        "cursor": {
          "ref": "845b1296-bb9c-4d83-98e6-d9252de95c96",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ec12777b-d788-4eb9-b63c-c588413d768f"
        },
        "item": {
          "id": "a0e2956b-a1a5-4ce5-bb61-4b61f13a43ce",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b6551e27-0880-4e2a-9a11-f23c3facde79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef9db68-73b7-458a-b339-9d9ab267d3c7",
        "cursor": {
          "ref": "429cb57e-3354-4eb2-9b78-ab7901dc6670",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "50e60f13-7cfe-4112-993f-bda53b10b561"
        },
        "item": {
          "id": "6ef9db68-73b7-458a-b339-9d9ab267d3c7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "91d196c4-d2d9-4d77-88cd-3baa3ce8702f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b53f75-9bfc-4e09-9aa1-d5979e0e9616",
        "cursor": {
          "ref": "376b167a-f037-439c-8514-3488fedc32bb",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4227e801-862f-4447-8caa-354bcaba6f45"
        },
        "item": {
          "id": "b4b53f75-9bfc-4e09-9aa1-d5979e0e9616",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4eacd5bd-63a4-4188-9f0d-05f0d5fea2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3106622-2f96-4f3d-915b-473954033663",
        "cursor": {
          "ref": "e976f00c-3719-40ba-ae2d-aa6e26a95b45",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e1a96e4e-02ba-494c-ab8f-6d38d8fac08f"
        },
        "item": {
          "id": "e3106622-2f96-4f3d-915b-473954033663",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "94b0a93f-6c2e-4e66-b57e-e1ef483dc5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded343ca-8bbd-4d7d-a4d2-4a3c96110790",
        "cursor": {
          "ref": "cfb717e5-1b09-42c8-9904-9e9820dc5974",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "434302a2-aa12-4316-8421-97acbe558e38"
        },
        "item": {
          "id": "ded343ca-8bbd-4d7d-a4d2-4a3c96110790",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "76464d35-18df-43b6-8141-703d92311a9e",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0fb2a12e-bd60-4774-b04f-149cb89d847a",
        "cursor": {
          "ref": "f0ff0994-dc12-4bbf-8695-608e80e9b9c5",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "896113b2-fbe6-4520-8943-25c35f3a62bc"
        },
        "item": {
          "id": "0fb2a12e-bd60-4774-b04f-149cb89d847a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "03eef94b-25bf-4ef7-8845-1936a236197a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33a5245-3d77-47a0-a878-e9f680677528",
        "cursor": {
          "ref": "10b72199-dba1-47ab-80d0-fbd66011687b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "20b69f57-eedd-4a21-8bec-60d6ffddeed2"
        },
        "item": {
          "id": "d33a5245-3d77-47a0-a878-e9f680677528",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0307575f-2f32-4845-bd6d-ea3eda88b080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c27a442-0df6-4194-84a1-d6bd046d756c",
        "cursor": {
          "ref": "c1256b58-2638-47a4-95c5-ba7cc768c145",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "564495d2-17ad-443e-8d54-4dc4e3b24598"
        },
        "item": {
          "id": "7c27a442-0df6-4194-84a1-d6bd046d756c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3241785b-dab0-4af2-afcd-9fb0d1a5e4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cebafa-a8f3-48e4-bac7-1a2be5c98aab",
        "cursor": {
          "ref": "b3db6c76-f957-4a50-83ff-6eb1cc074e25",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d8b4eec0-3e01-4240-8365-b9f7abe8eb82"
        },
        "item": {
          "id": "96cebafa-a8f3-48e4-bac7-1a2be5c98aab",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "78f52544-a4b1-4185-8328-a01c0a06cae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2834380f-d534-4df2-96f5-1fde4042afbe",
        "cursor": {
          "ref": "8a1df571-c8d0-48e0-a251-f68367e69cfa",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "60390368-de12-4232-83ef-192c098ed8ed"
        },
        "item": {
          "id": "2834380f-d534-4df2-96f5-1fde4042afbe",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a13e18e3-d368-4c07-9ecf-9f71d08a99e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e19e5bd-ea4d-4153-ae9c-a4e5eebe5fe7",
        "cursor": {
          "ref": "aa0761d6-a47e-4b05-9701-8c0e0e2cbd0c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "42c66dc2-d506-4c38-8779-989a9e8f7acc"
        },
        "item": {
          "id": "2e19e5bd-ea4d-4153-ae9c-a4e5eebe5fe7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "427b3904-e006-4a72-9f87-f57782867350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51933c9-aca0-46b0-894c-b339a24e692e",
        "cursor": {
          "ref": "84ab110e-d828-4421-8b1e-3c5cacaa9829",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "881a576a-daa5-47a3-a57b-e535f80cb59f"
        },
        "item": {
          "id": "d51933c9-aca0-46b0-894c-b339a24e692e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a8265ba3-ac60-4f38-aca0-384d07c0bd78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9465bc0-6753-436d-ba85-d13fecf44358",
        "cursor": {
          "ref": "d0e78f68-85e0-4c50-9d87-dafba19f1ac1",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "38c0eb86-eeff-4230-b666-e53763be4cd2"
        },
        "item": {
          "id": "c9465bc0-6753-436d-ba85-d13fecf44358",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "874b79b7-c715-4e5c-832e-0571995c10a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d8a368-3e7b-4f2d-9607-d7edeef8c6a6",
        "cursor": {
          "ref": "0569d341-adc0-4f05-84c3-7120b7b3b496",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "197144b3-cd8a-419f-a351-0cd2a9972842"
        },
        "item": {
          "id": "33d8a368-3e7b-4f2d-9607-d7edeef8c6a6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fbf743ee-7a27-4413-9d83-99d77b701383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd7d07c-f03f-49f7-b9b9-1064fee4e497",
        "cursor": {
          "ref": "641a6fe2-8ec5-42a5-80c0-19ab0e97a5d3",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "55aa5d61-8d19-40b1-a6a0-6dad8ceae75d"
        },
        "item": {
          "id": "5cd7d07c-f03f-49f7-b9b9-1064fee4e497",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "95cf5435-4e6b-463d-94ca-75ecb20b3c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79087a1-f41a-4194-b10c-192d7253f5c9",
        "cursor": {
          "ref": "833bf31a-7d67-4ea3-91ed-ef824b7e08b7",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "69ba4def-cc61-459f-a020-2a4bcba2f4b4"
        },
        "item": {
          "id": "f79087a1-f41a-4194-b10c-192d7253f5c9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5034dd13-bced-4a5f-b6e0-b516f21c88fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b8948e-e1ea-41a3-85cc-79401bcf9341",
        "cursor": {
          "ref": "aa7c347e-fa67-4dcf-b507-2bfbf6bcb855",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "422ed769-78a4-47fc-8002-f0442fef2598"
        },
        "item": {
          "id": "64b8948e-e1ea-41a3-85cc-79401bcf9341",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "120e8ff9-fe34-4a8c-80c6-05d6eb200b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec94cd3-f080-4d05-83b2-7be6126959d3",
        "cursor": {
          "ref": "6f004ba8-7c31-4509-acc7-ded58957d4b0",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5e032306-2101-4c87-957f-b4e9147c9026"
        },
        "item": {
          "id": "7ec94cd3-f080-4d05-83b2-7be6126959d3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "622c3351-1fae-4ea4-9eb2-0e7f7942220e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c816dc-95e6-467a-b349-3d3609db4504",
        "cursor": {
          "ref": "94875f77-b731-48bb-82d8-6dded241dab9",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ac9d2db1-a326-4f06-a25e-582ae059b551"
        },
        "item": {
          "id": "93c816dc-95e6-467a-b349-3d3609db4504",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5248b5b0-cfdf-450c-b951-28918eac823d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c41024-b342-49e7-8718-d806c501590e",
        "cursor": {
          "ref": "d61021c6-665a-43ae-860e-949d7aeec204",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9de9ed7f-3fd4-4bce-9063-a654b61c40d1"
        },
        "item": {
          "id": "28c41024-b342-49e7-8718-d806c501590e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bb500bd0-5f96-40a3-bfb9-e5ae48c8e9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f9c99f-8131-47fb-b159-4deeb3d54fc3",
        "cursor": {
          "ref": "7d7e8511-8140-4e5f-8f42-e9ba44f8ded2",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fc66cf37-095b-483c-9040-dcf7fcd12ecd"
        },
        "item": {
          "id": "19f9c99f-8131-47fb-b159-4deeb3d54fc3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "64e4cbe2-2dc8-493f-bd1b-c1f2413c025a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b4b146-b425-40ea-9484-a46b0c1fe534",
        "cursor": {
          "ref": "3785235f-4c02-4644-8eb2-382d5ffe0769",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "10aee971-0d10-4915-9adf-ab2871de168a"
        },
        "item": {
          "id": "d5b4b146-b425-40ea-9484-a46b0c1fe534",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3033aa58-69d5-4108-8613-01d23dc6df9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfcda06-3d92-4c57-9e1a-6ca93f945712",
        "cursor": {
          "ref": "bfda073d-ff94-4675-83a8-f799c308d884",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "42b929fc-561d-4410-8e57-3c875a4a3355"
        },
        "item": {
          "id": "4cfcda06-3d92-4c57-9e1a-6ca93f945712",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "24c45e5d-4282-435d-b3ec-3e834ecded1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77503e81-70d9-4253-85d9-30ca987137de",
        "cursor": {
          "ref": "ac395b92-99d1-4b77-9530-d63f31a53ac9",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6dfe0717-e055-450d-b063-a81930f8a388"
        },
        "item": {
          "id": "77503e81-70d9-4253-85d9-30ca987137de",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f8f76c5d-5ce8-43c2-9a13-8a53b4df5875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6409ca82-efa6-457d-84f9-1cf8ecce1888",
        "cursor": {
          "ref": "7b8413aa-f3fa-4422-be4f-12782a5e24be",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b391003e-a13a-4a4d-91bc-127cc9ee73b1"
        },
        "item": {
          "id": "6409ca82-efa6-457d-84f9-1cf8ecce1888",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c9f8a2ef-9095-423b-a75d-8271a4f4a28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635dfd03-66b8-47a0-a4b4-d5a50db84917",
        "cursor": {
          "ref": "cf258cf3-55d1-47b9-9ede-157f0025892f",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "568bfe97-6eb5-4427-99e1-b4959069b58c"
        },
        "item": {
          "id": "635dfd03-66b8-47a0-a4b4-d5a50db84917",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1e55da8b-c58b-43c4-ad55-e486a672f3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce088230-051b-4275-b60b-84b7c46f4327",
        "cursor": {
          "ref": "8430704a-7a68-4048-a066-8dd1fa564f47",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1000210e-45f8-4297-a3b4-c1b492639379"
        },
        "item": {
          "id": "ce088230-051b-4275-b60b-84b7c46f4327",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d611acc7-29f7-4547-9318-933f115bb5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25085e5d-1421-47b8-be2f-5550b5fdee3d",
        "cursor": {
          "ref": "b1a96210-8f71-4d9c-8855-e0ef6e84f321",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "34b6318a-97f4-468a-8ffa-a5a9a33606c6"
        },
        "item": {
          "id": "25085e5d-1421-47b8-be2f-5550b5fdee3d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8831df54-8e27-4f60-b158-ae3e35603ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6847c1d-3d50-4ed6-996a-dceea2fe7aab",
        "cursor": {
          "ref": "3b9ba76c-0462-48f1-9058-e8fcb9a9f073",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1f1eeae3-20ef-4bed-b6ea-6eb262ce75e2"
        },
        "item": {
          "id": "c6847c1d-3d50-4ed6-996a-dceea2fe7aab",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "34768e5f-4d1e-44b9-9942-572c470b3fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4781f5-34ab-458c-b03d-3827f3d84263",
        "cursor": {
          "ref": "9f4419d9-1bb1-4b82-8963-91899b8c2faa",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bf1d3845-e9a2-4442-8a50-546cd9a6c298"
        },
        "item": {
          "id": "cc4781f5-34ab-458c-b03d-3827f3d84263",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a9557753-f3ce-4c6f-9815-fe67beb7a039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3183920-529c-4b40-b673-c67de3e7490a",
        "cursor": {
          "ref": "0ba2d45e-33b2-4759-8ebe-9b6fffd4572c",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "762c39c7-cee0-4c8b-b80d-c70fafa1fb77"
        },
        "item": {
          "id": "e3183920-529c-4b40-b673-c67de3e7490a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5e947758-47bb-40d2-b860-37f4a320a499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6baf925b-0936-4990-a801-4e737abf09aa",
        "cursor": {
          "ref": "5ef51b0a-e1e6-4003-a205-165521c5f051",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2bc52cee-4a08-4522-9162-802041db0037"
        },
        "item": {
          "id": "6baf925b-0936-4990-a801-4e737abf09aa",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f2e32667-c874-4fe2-83f2-00590db3648b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633b4059-b560-4937-a445-1e8f08913181",
        "cursor": {
          "ref": "016d2995-821c-48b9-a738-5d39279b2306",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3fc1e44a-01e2-412b-a50b-1244a0fd0c87"
        },
        "item": {
          "id": "633b4059-b560-4937-a445-1e8f08913181",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ae077730-ce43-4ca0-8ed0-4b5a452bb6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44613094-bfe2-45cb-9734-cdd735615670",
        "cursor": {
          "ref": "1919428d-f026-4b3f-a433-cbae5e5c7eca",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ba27fba2-a2fc-4508-872a-a5b386baf9ff"
        },
        "item": {
          "id": "44613094-bfe2-45cb-9734-cdd735615670",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e52252b2-a4c1-4e29-a3b2-3a78b84f2f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a18f61-3699-44d8-b031-8324be6ddbbd",
        "cursor": {
          "ref": "d42d4c17-a181-44e9-a25a-86cd2d5c4725",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b799ef81-ba4f-42a0-8b86-5c598c01a54c"
        },
        "item": {
          "id": "e3a18f61-3699-44d8-b031-8324be6ddbbd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bfe00959-45de-4c17-8023-75d0c266d685",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "716607a2-8ffa-45e9-90a3-d07ffa9c3c67",
        "cursor": {
          "ref": "a436aca5-48ed-40f0-8d05-dd90a523ac02",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "75490929-22f8-4ccf-b9ae-9e5d0b3b1985"
        },
        "item": {
          "id": "716607a2-8ffa-45e9-90a3-d07ffa9c3c67",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "60fc7c5e-e224-4300-bffc-599b95d29243",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8d590441-2b77-4013-ab30-7f699437d044",
        "cursor": {
          "ref": "09a3e948-cedd-45fe-8aee-4a757aea1084",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3ed23a9d-0485-4319-b61d-5efedcc6b604"
        },
        "item": {
          "id": "8d590441-2b77-4013-ab30-7f699437d044",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c3606055-8545-431f-a38e-a3f0189334a4",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2627b7ff-ade5-4942-a796-48cd98dcd238",
        "cursor": {
          "ref": "5e83314a-0a91-47ca-bd46-aa7e05db50f5",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "308ad23b-0aeb-4b41-9df5-81ca4862dfa8"
        },
        "item": {
          "id": "2627b7ff-ade5-4942-a796-48cd98dcd238",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0e5c1aa7-1b6d-4b79-ba02-c00831773b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8117075-d44d-4cda-9830-955f86549bd2",
        "cursor": {
          "ref": "e702ca09-c742-449d-a5ec-5cef15a38f3e",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f6fd05f0-6ec1-418c-b5ea-25752b2be5cf"
        },
        "item": {
          "id": "b8117075-d44d-4cda-9830-955f86549bd2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "eab121c9-ed22-4a82-8d3a-61b2f4bc9625",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "beee813a-5475-4507-bcce-d2694eaceb1b",
        "cursor": {
          "ref": "96e72d63-0c7e-45ef-93c0-8ac7e3501628",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "57bcf22c-47b4-49e4-ad63-a7991001211c"
        },
        "item": {
          "id": "beee813a-5475-4507-bcce-d2694eaceb1b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b32d2212-cf8c-4936-aa20-4110fe12e1e4",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "05155ebf-7ef1-48e9-9e18-752758de0b91",
        "cursor": {
          "ref": "de655d9b-6b34-4f16-b401-45c469d486b0",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0fe4fb75-43da-4604-a6ec-1b1de579a96d"
        },
        "item": {
          "id": "05155ebf-7ef1-48e9-9e18-752758de0b91",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "379f20dd-1067-4cbb-907f-21483805eddf",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "49e118cd-41e7-4f25-bf76-8cbace909838",
        "cursor": {
          "ref": "b90b1103-e238-4ed2-a16d-39a9e488983e",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d8221f81-2ec2-450a-8760-cce1ee4e3c53"
        },
        "item": {
          "id": "49e118cd-41e7-4f25-bf76-8cbace909838",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "923d9bb6-c962-4327-915f-2ff0805cac5c",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2e86e73a-d832-479b-8de8-d305a592cbd7",
        "cursor": {
          "ref": "4b4a7a84-0ed2-47d7-98fb-04cec425c498",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "13f04bab-47cb-4fab-9a1d-e644afde070e"
        },
        "item": {
          "id": "2e86e73a-d832-479b-8de8-d305a592cbd7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9dc84884-80c7-4c35-8e5b-016cd8125c0f",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "009875c7-da4c-4107-8054-6af6befb4f49",
        "cursor": {
          "ref": "c5f40a28-cae1-410b-b2ba-29cb015acef3",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9ff29723-f151-47fe-9209-8dd9d0376aed"
        },
        "item": {
          "id": "009875c7-da4c-4107-8054-6af6befb4f49",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a915b733-5fa1-44ee-a7da-99db003b6d40",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "d577c689-fe45-41e8-88ce-1291d40388a4",
        "cursor": {
          "ref": "2f886107-d122-48f8-a286-fe918a58500f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6f1bb186-7d27-426a-9090-b96edcb6f35e"
        },
        "item": {
          "id": "d577c689-fe45-41e8-88ce-1291d40388a4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c6f3ccc4-4136-4f0a-b0dc-3befafd93815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32db8fef-961f-44ff-80cf-18d7ea02842e",
        "cursor": {
          "ref": "ba90b839-91f4-48e1-b708-330070e3da24",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4d20507a-98ab-4d17-b2dc-5c9d8f443ce4"
        },
        "item": {
          "id": "32db8fef-961f-44ff-80cf-18d7ea02842e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "28b9ebd8-8026-4cf1-b779-ef6388497009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6277212-2393-4050-8945-94578715d73b",
        "cursor": {
          "ref": "7030a554-282f-4aab-9f4d-e5d2583a21c1",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1024444e-cfef-42aa-8e11-19e80d03c9b2"
        },
        "item": {
          "id": "b6277212-2393-4050-8945-94578715d73b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "eeef60ac-531d-4b13-856a-0a14d68e2809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d605881f-6bda-483f-a861-dab56fb21985",
        "cursor": {
          "ref": "8654e051-1ae6-4ec6-92c2-5627636143c1",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ab2d18eb-3468-4d7b-8dae-5c84b44fdb2c"
        },
        "item": {
          "id": "d605881f-6bda-483f-a861-dab56fb21985",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a7ecd882-310d-441e-bd71-c65751cbfef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d0f6b5-ca10-4272-b152-858055648b89",
        "cursor": {
          "ref": "47ab7deb-d990-4e87-b0ce-3703e80a1021",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b462d03d-eb87-4a85-bb56-afab20dd572b"
        },
        "item": {
          "id": "85d0f6b5-ca10-4272-b152-858055648b89",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bd0f934a-e59d-46c9-b127-ad7fe20a2066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e07b6a-2960-4f4d-acfd-d9c369451565",
        "cursor": {
          "ref": "a0e9d912-5fe7-4884-80ca-959ac7ebbadf",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9ebf838a-d8ff-46f7-9726-e31fa929d86a"
        },
        "item": {
          "id": "40e07b6a-2960-4f4d-acfd-d9c369451565",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a8cca1fa-9619-4f8a-ae13-8b5d4c7e22bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb71bf3-8da2-4e22-924b-7e45941a841a",
        "cursor": {
          "ref": "2f10ed4a-d2a4-4ad6-9c22-57b86fbeaa23",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cd98a2cd-adcd-4a14-91a4-7f92de960d5e"
        },
        "item": {
          "id": "bbb71bf3-8da2-4e22-924b-7e45941a841a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9c5075e7-8d06-403e-ab4b-1c48a3b34552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86397085-b936-4822-b6d9-29fa96d0dcef",
        "cursor": {
          "ref": "6960b958-3e4d-49e1-96c6-77bdb8284f7e",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4e8aa22c-d85e-411d-8e4d-729bd1725303"
        },
        "item": {
          "id": "86397085-b936-4822-b6d9-29fa96d0dcef",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3241220f-ed0b-413a-9594-950a00bee49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e5a820-4964-4b75-abcd-e51458098561",
        "cursor": {
          "ref": "7862892a-7a7b-4adb-a570-515bcee8810d",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ea2ab274-e674-41fe-b9c1-1f5a4ef673a1"
        },
        "item": {
          "id": "f5e5a820-4964-4b75-abcd-e51458098561",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5993ca9a-40b2-40e6-939e-def7d8781d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b0d70d-0992-4871-95aa-af8ff2ea06c7",
        "cursor": {
          "ref": "53dd7b71-3e99-4dce-b9c0-9506be41acce",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6b887f9f-803a-4805-a2b2-939eba9218d7"
        },
        "item": {
          "id": "92b0d70d-0992-4871-95aa-af8ff2ea06c7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d967d680-5bb3-446d-b904-3da867680fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48eb9f8-0c5b-4d29-8167-bdb8a1f2d674",
        "cursor": {
          "ref": "ca8953ac-8ecd-4d46-8e59-7f79c8c638b4",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c10383fc-669e-4ea9-947a-e7eff2ac5c14"
        },
        "item": {
          "id": "a48eb9f8-0c5b-4d29-8167-bdb8a1f2d674",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cb13810e-ddee-4d68-9f77-cd1fae811f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c51020d-0d21-46fb-9661-7a48059d7347",
        "cursor": {
          "ref": "eb05dd32-b65c-4ac8-b90d-3f629ea9844e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1459f1f6-bd34-43fc-81fb-8c5da0ca7227"
        },
        "item": {
          "id": "6c51020d-0d21-46fb-9661-7a48059d7347",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1063d446-d0c8-4c23-b4dd-03479733a41f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab93b94f-285c-45e9-9f2e-8c1d40bed241",
        "cursor": {
          "ref": "3ec4905c-1b04-444b-8156-28ee3dc6651c",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f71f9896-d3d3-4ae5-bdee-e203139ba5f6"
        },
        "item": {
          "id": "ab93b94f-285c-45e9-9f2e-8c1d40bed241",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a172f560-60ec-4f8d-b8fd-25df575333f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ac3e19-1c0b-4340-8ddb-7594e2b10366",
        "cursor": {
          "ref": "cadad9b7-1449-41f4-ab45-6deaf6f39937",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b6c4abad-f883-42e6-8e29-60760cd876e5"
        },
        "item": {
          "id": "83ac3e19-1c0b-4340-8ddb-7594e2b10366",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f3fdba68-0673-486b-bb75-c05614cd7545",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "dbcec1dc-84f0-4d39-901b-6115f6fce150",
        "cursor": {
          "ref": "d0320e87-34de-471e-8520-f32d1dc22926",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "578e19f9-daeb-4e24-82af-78860d2dc518"
        },
        "item": {
          "id": "dbcec1dc-84f0-4d39-901b-6115f6fce150",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a0f77382-8ce6-480e-b27d-45d52b4fc68d",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "267f8069-7b29-4da2-ba20-60f8f16fbeab",
        "cursor": {
          "ref": "3e1349e3-b3ab-4cb9-8004-3bacc6adc47a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1a993849-f9e9-499b-9bb9-5cf32c2ad3f1"
        },
        "item": {
          "id": "267f8069-7b29-4da2-ba20-60f8f16fbeab",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d7a666aa-7afd-410d-aa64-86f88a7fb822",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "75eecff1-1567-47d8-bd4b-1618580aba5b",
        "cursor": {
          "ref": "c8d2079f-b94e-4acd-95af-bce5e0bb1aa4",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "afde287c-14ed-4183-a3c1-c3002d0f118e"
        },
        "item": {
          "id": "75eecff1-1567-47d8-bd4b-1618580aba5b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "08dff229-2f69-42ca-846f-48e02401c0a1",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "700bb572-8f02-4b64-92b5-28acb40ae4ec",
        "cursor": {
          "ref": "0b18c10d-e00d-45ba-98c5-3fd2428fab10",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "357e5971-0e46-4713-a6eb-c11d2f3ef858"
        },
        "item": {
          "id": "700bb572-8f02-4b64-92b5-28acb40ae4ec",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cf5f617c-e9aa-42dc-989b-f23e5f6ce701",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b8bb51ba-381c-4e98-8c7c-77ff13785572",
        "cursor": {
          "ref": "3eeabc15-ed49-4cff-b900-add08523c780",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a7e564e7-8305-4895-8293-8d362958262e"
        },
        "item": {
          "id": "b8bb51ba-381c-4e98-8c7c-77ff13785572",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "05befdb0-2b3f-45e3-a815-0c9b60e082ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fe5682-9914-4f7f-a038-6698ee69936b",
        "cursor": {
          "ref": "d0ebdc1f-bf13-40e8-aa72-b3e9ed65ba7c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6172b39b-ffd4-41e7-9f16-864c720d36b1"
        },
        "item": {
          "id": "b1fe5682-9914-4f7f-a038-6698ee69936b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f8565acf-40ec-4176-883f-8518547b2253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020557ad-0141-4751-b9ae-19522261ab91",
        "cursor": {
          "ref": "9742df6c-61ed-464d-a953-4ba79adf4e10",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "55b2a304-bd59-4af8-844b-cae9686711f1"
        },
        "item": {
          "id": "020557ad-0141-4751-b9ae-19522261ab91",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "96275098-258d-41db-8408-7a3af4921506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924dd20d-315a-49a3-bedf-2598d5f91a5b",
        "cursor": {
          "ref": "9075c5f7-05bb-4466-914d-811c58e23fb4",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e8cf0129-5439-4fc4-89a7-8e4d6be004cc"
        },
        "item": {
          "id": "924dd20d-315a-49a3-bedf-2598d5f91a5b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "685d57ae-50fc-4aee-ac4e-34e07ae50536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8769ddf1-bab2-4a78-8716-cbc772cc5a1c",
        "cursor": {
          "ref": "9da95b05-1354-4689-820c-f9da643aa3a3",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "10a86a6d-ecde-4f74-911b-8d98af19db44"
        },
        "item": {
          "id": "8769ddf1-bab2-4a78-8716-cbc772cc5a1c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "abd34cdc-820d-4512-b89e-43aec5eac41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1d7bc4-32c8-44b3-bad5-a75307f17751",
        "cursor": {
          "ref": "40be26d3-6833-44e0-93ad-4c3bddda2b6d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4bfa8195-eea7-4338-a122-af3c5e707bb1"
        },
        "item": {
          "id": "8d1d7bc4-32c8-44b3-bad5-a75307f17751",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3c3071e2-d5fa-48a4-babe-1af673bcae45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36123733-92e2-4e9d-a247-f8ef4a53c409",
        "cursor": {
          "ref": "1eb3e868-cfc2-4295-9e19-96606449521a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aa60f661-7e4a-4819-a907-c306f1afa7d3"
        },
        "item": {
          "id": "36123733-92e2-4e9d-a247-f8ef4a53c409",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6fe1870f-381c-40d3-a2c2-6415e39e75fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb599e7-195a-4747-beed-b1e6f9194db6",
        "cursor": {
          "ref": "d6073860-2a15-4404-89cb-c63985cc69dc",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f81a675f-2190-4433-913e-023207d2916b"
        },
        "item": {
          "id": "abb599e7-195a-4747-beed-b1e6f9194db6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bff5cfca-e6bc-4346-89f4-ae7fb35112cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8408a4b2-2307-49c8-a76e-c651a7c92f81",
        "cursor": {
          "ref": "3cd0d17e-2fa9-48d4-bd4d-095ce0b7109c",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "197af51d-4548-46b6-b3d8-6c00160a5617"
        },
        "item": {
          "id": "8408a4b2-2307-49c8-a76e-c651a7c92f81",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ca750b24-1ed6-4779-9fd2-5be3b8b11a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de74927-8846-41c1-af02-f852ef7e0b6a",
        "cursor": {
          "ref": "d4469c85-664d-4058-9363-49e1b1cade00",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "aa73c739-3f67-4ace-8059-48ad1bfc6ca6"
        },
        "item": {
          "id": "9de74927-8846-41c1-af02-f852ef7e0b6a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "523ee73d-7f77-44f4-aa6c-fb5af5145de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b2ed57-72f9-46e7-8076-d0614b2772b2",
        "cursor": {
          "ref": "8c02055d-dbfc-44af-9814-fc4f174c988d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4952697c-aec3-40ee-94a8-1ff85b563200"
        },
        "item": {
          "id": "29b2ed57-72f9-46e7-8076-d0614b2772b2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f33a08bb-f29f-4e4b-8586-082ed7b9fc83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93057630-0c4f-4892-beb3-6b08fd141793",
        "cursor": {
          "ref": "b7054546-443a-40c3-98b3-29ea2f730293",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7a83c7c5-f5e3-404b-9adb-7365401a06ee"
        },
        "item": {
          "id": "93057630-0c4f-4892-beb3-6b08fd141793",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3db48762-ce29-42dd-ae37-3321432e1253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7d8693-ded1-4224-920d-eab30922367d",
        "cursor": {
          "ref": "6320bebc-e85f-413d-97d7-99204488c1af",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "14227350-1696-4574-95fb-5b23c5faf66a"
        },
        "item": {
          "id": "8d7d8693-ded1-4224-920d-eab30922367d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8a1728dc-88d4-4a45-9b70-218bd10e8b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bf5e56-b742-4c16-bd9b-67210879ea31",
        "cursor": {
          "ref": "5274acdc-08b9-4c62-94aa-7fdf0e13a4aa",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6835edb6-7fa8-4896-b2d8-c7fb601746cb"
        },
        "item": {
          "id": "29bf5e56-b742-4c16-bd9b-67210879ea31",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7a86d620-4960-47cf-8749-7c2817187c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f796de06-1884-4d16-9cc6-c9fe447f1ca2",
        "cursor": {
          "ref": "ec806a35-83f6-4077-8187-cc56bf31d167",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "74c8e0c0-f311-46a3-a2c3-a1f49ca6715c"
        },
        "item": {
          "id": "f796de06-1884-4d16-9cc6-c9fe447f1ca2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "43a3447d-3319-4e09-a823-c100fca4c4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b8cf33-d584-427a-afc4-21deaabc2da7",
        "cursor": {
          "ref": "1d77cfe0-a108-4c4b-964e-f103980344a8",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "69c28d91-05e5-4c81-a828-e69e84525d38"
        },
        "item": {
          "id": "45b8cf33-d584-427a-afc4-21deaabc2da7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "71ece114-b108-45e7-90f0-48ccaada8c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab67de9-00f3-4750-b6d2-88dc766d5fa2",
        "cursor": {
          "ref": "6de4155f-988a-4acd-aea3-a3868225458e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "dd8ac3a6-f147-4482-aa78-43c867542a1d"
        },
        "item": {
          "id": "9ab67de9-00f3-4750-b6d2-88dc766d5fa2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "023fff22-bb91-4484-9546-44c1addaa7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed7fb6f-50ee-4dbe-88cd-d2fc5ab91dde",
        "cursor": {
          "ref": "573e8c97-0871-4a68-ae5f-fc6c4d60b554",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c89caaa9-9add-4f4d-ae6a-a9b2f072c196"
        },
        "item": {
          "id": "1ed7fb6f-50ee-4dbe-88cd-d2fc5ab91dde",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ea84f5b2-e52c-436f-904f-ee0a9f2cc623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349824d0-14fc-4151-9256-bb5e86299b6c",
        "cursor": {
          "ref": "ec7d0693-eaef-466e-afbe-d6e210ecced5",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "dd2281bf-4708-4760-b12c-4da25df93daf"
        },
        "item": {
          "id": "349824d0-14fc-4151-9256-bb5e86299b6c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "74cd084f-008a-4b54-9554-5f548d4d2332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8304a21-4e33-4c8b-8cfc-52ebc06407a8",
        "cursor": {
          "ref": "3cf67159-ed83-44d5-a84d-bc2c47c619d5",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "db7a0ed4-a02e-4fb5-b3d8-7b0fb8d1c763"
        },
        "item": {
          "id": "d8304a21-4e33-4c8b-8cfc-52ebc06407a8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e0c3515f-4f28-48b0-9b65-cf68d9d4fff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2b4029-0d11-4b21-99d4-3b75f89331b0",
        "cursor": {
          "ref": "b28c63c8-fe85-40bf-b3ca-2f3534846d11",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "eb265887-53a1-42f2-9baf-208f3485af73"
        },
        "item": {
          "id": "7c2b4029-0d11-4b21-99d4-3b75f89331b0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3c4203ca-1c86-4e7a-8da7-556cfe10c6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e133529-9987-43f0-bc7e-39fb48689bd6",
        "cursor": {
          "ref": "1a4e5643-fbbc-4ca5-8206-9c1985a68655",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "68d6186d-123f-4a04-ad9f-f632ad4d01c0"
        },
        "item": {
          "id": "7e133529-9987-43f0-bc7e-39fb48689bd6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4995fa2c-0ac9-4805-ba15-2c6d5507b1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a819ef-d05b-4756-ba91-a65cd5700862",
        "cursor": {
          "ref": "3b0e0d8d-2d64-4cd3-b412-f138e6b2d0b1",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8790ddce-151b-4b5b-8a4f-901ad756a0d8"
        },
        "item": {
          "id": "f6a819ef-d05b-4756-ba91-a65cd5700862",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "029de7d2-c7bb-4065-9157-d176e91db174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078b0aeb-4d5f-450a-8179-a8c80cd042cf",
        "cursor": {
          "ref": "c7812665-21c8-49b6-acb0-6d8632de170a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "deb945ad-3580-43cf-83ff-32fc170dd804"
        },
        "item": {
          "id": "078b0aeb-4d5f-450a-8179-a8c80cd042cf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "39c66a6c-b2c9-4e84-b8d1-9aa6f803c849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263578e1-35d4-43d9-8c6e-bb29c3a0a7e2",
        "cursor": {
          "ref": "ac306bec-4d60-46e3-ae65-ac355233fa66",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3bfe3295-aeef-42d2-9d0b-3a6ed60c1fe9"
        },
        "item": {
          "id": "263578e1-35d4-43d9-8c6e-bb29c3a0a7e2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "96d3f8bb-09d0-400c-b5dd-bea4052704c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6d79c9-d2d8-48ce-b1d3-bbfd6f6c92c6",
        "cursor": {
          "ref": "6952f33f-274c-4c58-b7bd-60f750889ada",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "6fad7650-e69f-4cce-a75e-bca2db0e9387"
        },
        "item": {
          "id": "6d6d79c9-d2d8-48ce-b1d3-bbfd6f6c92c6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "eba711b1-8cae-4c77-bcf5-f3588d128b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09904e9-72cf-4115-8f80-a55c68ff824b",
        "cursor": {
          "ref": "cf7ddb60-be0b-4588-98a5-1f5ef40501b2",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "43bb051e-580a-430d-981c-5e535dd94f85"
        },
        "item": {
          "id": "d09904e9-72cf-4115-8f80-a55c68ff824b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "437abdd3-873e-4ff4-8d8c-066443e56102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a801386e-f354-455f-bbc5-26add711b153",
        "cursor": {
          "ref": "e5f0555b-7e5e-47bd-bf10-32c12322c54d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "bea506d4-6595-4aca-ae1e-223b421b7542"
        },
        "item": {
          "id": "a801386e-f354-455f-bbc5-26add711b153",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5cd9741f-70f0-4ea8-8964-8d51bf8be299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71537511-e167-4f15-bdd4-11634ad7847f",
        "cursor": {
          "ref": "615444c0-58a8-4532-837b-e516a2839c55",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6101e0bc-aa93-4f53-a2a6-a0ee2b7f0844"
        },
        "item": {
          "id": "71537511-e167-4f15-bdd4-11634ad7847f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "caba8d31-1431-4bd3-885d-b88207b649cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89afc1ff-ffbd-427f-9aa9-8b02fe83b086",
        "cursor": {
          "ref": "5199e41c-40c3-4084-b117-601c2046ddaa",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "22833e17-1bef-434d-bfa2-d100ff1a2ed2"
        },
        "item": {
          "id": "89afc1ff-ffbd-427f-9aa9-8b02fe83b086",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3654c25e-e100-4d1a-a14f-67a31de1c412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8b2c2a-c061-4df9-9945-1a2e5017e56e",
        "cursor": {
          "ref": "34d10490-073c-49bb-bf00-bf75fbfd0cdf",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f8c9d473-9828-47fb-b4bb-8bbd5826119d"
        },
        "item": {
          "id": "5f8b2c2a-c061-4df9-9945-1a2e5017e56e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3e902f9b-d92f-4f60-87c1-98b8bba2f17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b987b59-03e0-432c-967e-6903c79c0a47",
        "cursor": {
          "ref": "880a0e5d-9924-427a-a441-bac46784f10e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "b7234cff-2943-4c0b-9839-d00fb11b2bd1"
        },
        "item": {
          "id": "3b987b59-03e0-432c-967e-6903c79c0a47",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "24e08460-b9f9-4ebf-82b6-c2030bf33117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebec0ae0-40cf-43f1-a777-29c88bda5672",
        "cursor": {
          "ref": "0c8341ca-eaa1-4046-a1ca-77aadf47c628",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c0fbae74-d936-4e68-a2a1-1e1fa3fbdcf7"
        },
        "item": {
          "id": "ebec0ae0-40cf-43f1-a777-29c88bda5672",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "efb7dfa2-d11a-43c1-83a4-ca132155ecfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190467da-d971-40b8-8299-95b6caf0b18a",
        "cursor": {
          "ref": "9aa1dd31-ae97-41e6-ae8a-4ef3609e4202",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "2120f091-6aab-4bfb-b96f-78de425085ab"
        },
        "item": {
          "id": "190467da-d971-40b8-8299-95b6caf0b18a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ac4da7b7-fa8d-4756-a1ba-945c5dbce340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936b9cf4-4d7f-4f40-8045-683c7efc3be2",
        "cursor": {
          "ref": "7e853d0a-a32b-42c6-8752-8723e8adf10b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "369a9d72-54eb-403b-b1c7-573b59ab8ec1"
        },
        "item": {
          "id": "936b9cf4-4d7f-4f40-8045-683c7efc3be2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "669dec0f-9ff3-4740-bffc-67014c04512c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abc7c08-d15a-4716-a4a3-834443597abe",
        "cursor": {
          "ref": "f7eea2e3-3eb7-46a6-a996-e86d80b834f9",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ff17be78-91f0-48f4-ae2a-ea345a0b9958"
        },
        "item": {
          "id": "4abc7c08-d15a-4716-a4a3-834443597abe",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d28fe142-c720-4001-a949-5e3ac1ca06ee",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "65862fff-6c27-4e65-afa2-44ba687db0e9",
        "cursor": {
          "ref": "797495ee-6778-4c42-b4ba-0eded2e83591",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f56a0e8c-fcef-4a4f-8ed5-4692e9ee9444"
        },
        "item": {
          "id": "65862fff-6c27-4e65-afa2-44ba687db0e9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6aa13070-b6ea-4eb6-976a-2cff73f685a3",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "004f2296-703b-49bd-8b27-c36438dfb26d",
        "cursor": {
          "ref": "d128a93d-c023-4e33-82b0-927e8fda0a67",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d62f56bd-39e8-46d2-9ceb-25444abb22ea"
        },
        "item": {
          "id": "004f2296-703b-49bd-8b27-c36438dfb26d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5a4b7af5-f02e-4698-b519-658143ca16f2",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4244791-770f-47e0-b893-09ee526d782d",
        "cursor": {
          "ref": "db68acf9-764d-4fff-8bc3-df75019538b0",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f21e4208-e417-481a-8c02-c83d950efb3a"
        },
        "item": {
          "id": "e4244791-770f-47e0-b893-09ee526d782d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aee48c17-4282-4e2c-80cd-721dcf1e7c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4244791-770f-47e0-b893-09ee526d782d",
        "cursor": {
          "ref": "db68acf9-764d-4fff-8bc3-df75019538b0",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f21e4208-e417-481a-8c02-c83d950efb3a"
        },
        "item": {
          "id": "e4244791-770f-47e0-b893-09ee526d782d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aee48c17-4282-4e2c-80cd-721dcf1e7c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8907a03-b4b8-4997-958b-bf3b74b7b503",
        "cursor": {
          "ref": "83478289-02fd-44bc-b9c8-52e8a1589313",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c982e83c-aa14-41d5-9ae6-dff2ae21c895"
        },
        "item": {
          "id": "c8907a03-b4b8-4997-958b-bf3b74b7b503",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d58eca48-46e0-4b3a-a8b3-b0db6a5e69fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4116314-86b6-4969-bd90-894cba737f88",
        "cursor": {
          "ref": "f936a0b9-6e71-46e9-a72d-54de5c467794",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "8e30feed-9d79-4022-a687-e75bacb00ce0"
        },
        "item": {
          "id": "c4116314-86b6-4969-bd90-894cba737f88",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ad17019c-a10d-4aea-8396-fd0bb74f8d49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}