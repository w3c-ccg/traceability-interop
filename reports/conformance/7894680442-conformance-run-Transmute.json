{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ba599d4f-0cce-45b7-b0b7-212e86db5bdb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b93fad89-4396-4810-8451-bb9abeb23de0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50cabf72-ccae-4368-9188-dfb625325e37",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "10e74efa-391b-4b36-865b-d2a159b883d0"
                }
              }
            ]
          },
          {
            "id": "28002205-b011-4aef-82cc-3a02b5977e16",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f67443f4-683f-4d4c-ac43-2f48ffd9993d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "49cd55e5-3b7b-41fe-87b2-b4686b87c28e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "433ffc3d-5e2c-42ba-8fb7-70d56e3bd46b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b745a32b-130f-40e3-9ab9-a30cab59d482",
            "name": "Positive Testing",
            "item": [
              {
                "id": "438a627d-b84c-4890-83e5-33ae550b7cf0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42cc2218-d182-4775-861a-baa80d03ee85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7653f30-79ef-40c5-8bcc-d389b8ba4287"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7c42313-990e-476d-b4d0-1e62b7c3d9ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87d682ce-eb13-4f1d-ba1e-00db51c63152"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5f32cc43-55c1-4ec8-a678-b03f462ca5d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1953f9f6-58fe-47a8-977e-470c1528ca17"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "930ed746-4c4d-4d9d-97a5-baaa8b9f887c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2703279e-5256-44fc-b84d-b193dd29a7e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68ffa7d6-9e63-4f62-943d-7db8e7530122",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "616ae9e1-7b7d-421e-aa34-b0f426e10014"
            }
          }
        ]
      },
      {
        "id": "6e932055-40c4-4e2c-8bc0-e29d30244347",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aaeacaca-9edc-46ae-8c27-e694d69ab624",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43c26dea-feb3-4f7c-ab89-27e9ddd30bf0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66f5b997-6795-4fb0-93d7-b366be12d115",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fbef9b-3242-4723-a6ab-10875130a5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d789faf5-0625-4ba8-8d6d-0623d1751250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b33998-cfa9-43fe-9bdd-4aca428bfd84",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a3c451-89da-49d5-ba93-711b1b425f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7c080fc-9736-4e55-8acf-55161ea29f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca288e1-0b72-482c-bfd8-a44833453f0c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db10545-11b8-4c83-8eb7-6069f3125bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "405b603a-faed-441e-b42a-29cf03915ea8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5dcea205-133d-484a-9404-f0619bd4ba16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78f6d825-a3b1-4613-8f2d-c7a5b1e351e1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57204352-a89d-4213-ba5a-f0eb109a4abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "421a20e7-3ce0-4c35-ac78-7642d91b77e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b733ca-8e77-4461-8b7f-5b428d8dab26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39de7e85-5629-4979-838f-5c0b848c756f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "47bc0125-9e00-484d-a9a7-bead71d54695",
            "name": "Positive Testing",
            "item": [
              {
                "id": "10e19dc9-5717-4860-9422-fc7fd9ac243d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb5aacfb-1307-4adc-9db3-9708dcd16bc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f2452d7d-c4a7-4e2a-b3aa-ce9f815365ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05284a80-d7e7-4afc-8d00-2f0b32c93299",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b3ea7740-36f3-4365-b90b-05772bbcc7aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa81b640-156a-4689-ad77-0823f2ed0b02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3e7beb4-3909-4d40-8d2f-a69908b56f31"
            }
          }
        ]
      },
      {
        "id": "30226c1a-47b3-4734-8924-a235187fde4c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "28d10ec5-4be2-46f2-9c30-c83c8cb5d2d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0a3d5b8-c47f-4dfe-b7bd-39839469f45b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e779bd7b-8729-4c5c-a666-4d1afd39580c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf265c58-1177-43b1-b4fe-89abc3f5312c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671ad9ac-bf59-4442-9467-b17c75bf1726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c275a421-420c-477b-916f-b7db875f1886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4eff9ec-89f3-422e-acdc-7dbcd52d1f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39d8d70-3aed-4e86-9d2e-5a204c51ba37",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038a0e74-f96f-49a3-9233-57f8da8a4c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b715f68c-a52e-4111-9610-95b1704b040b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3383324-8c6b-4533-a23e-197652bd42c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "329149e5-4bff-4b86-9a45-707d6c6ea67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1a279e-78c2-4a77-8cb3-79919cd0cd29",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6adb83-7578-49eb-b95e-a3be23183c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11bf4ee-bf89-43a9-89f6-22df1acaef80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf30df3-5b2d-4b91-8efe-f9af5df40694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "986cfdac-7a9f-43e7-a14b-84182c3beca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afada0e-e576-44db-a761-4cb0548ddc0d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73b2a1d-29f5-4961-88dc-7d4a8a990feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4cb824e-d078-4fc0-9d45-2fb6dcab2e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca19f1f-97f0-4a91-8793-53a20f62af49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e5754a1-daf5-497d-8ff2-cce4ee01d569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cb44df-9c52-43df-89b6-4b010e73aa9d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bd5be0-2ee3-43e0-b61a-9a147a5a2752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d865fdd6-fa9d-404f-8380-1f750400e099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1ad699-db15-40b7-a43d-86c5b1393098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3776371e-04c1-4567-a8a9-008fe86bc654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f834e618-ebf5-4034-924e-61f305927042",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da217701-41d5-4ae6-a2d4-743796bbb64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e828a9f8-f5f2-4adc-8d90-c35ce3a3d570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deeabcc1-d006-436f-a553-6185fad99987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4ddcce0-08f1-403c-aca8-9972e6beece1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dae962b-4121-4e95-880c-1a22da7f1d87",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a41d8a-b87b-4bce-914d-0086e2d1eefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7a2314-dfc1-4264-9ca9-89843c839a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0847a360-8867-4c9e-af2c-b9cdc6a933f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41fd0fb9-2801-4493-880e-d9e70a88120b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e601019a-d849-4f84-b693-4fe3599b7459",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cd31f3-5088-42a9-ad01-eb34fd4f8d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3de93f-e05a-4327-b640-f8b03902c4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24addd75-de55-4042-8a50-12405b6af369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b47199a0-92e8-42ae-af4c-88c1e463bdfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebbb561-8d48-4f14-a06b-557a96bad083",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d53d05-61e2-4065-b57d-e6aba2632e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4177618b-343e-4018-a096-c2ffb7e06e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4150c06-8020-48f5-8b87-493fbf962363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2678b2bd-4cb1-414d-88c2-f867d4eaf0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a3303b-ae3c-49a1-81b4-98c783b73017",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d37df3-8b61-4b73-a580-9fd90c34fe32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "556cc3a1-1da9-49af-a090-886900699013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790c420b-0666-4e38-9c48-439af1d53da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab2fd4dd-064c-4452-b7bc-ecc468c4a72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c29570-10a4-444e-bd91-6bc7a775a757",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbf268b-b2d1-4c14-9015-a816401e7583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a28a03-529d-4a5c-9809-9d8282f750be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b527957a-0f0c-4738-93fb-9c8b8a5fbe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fed1dc8a-7543-4bea-a372-8ceef3fb543f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4758eced-547f-41ab-8150-bf4d1371f285",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d0dfab-47b5-4a7a-9237-20126cd3e20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42bb9f51-0f0e-493e-8af0-2bd7e5add05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec51625-111f-4f18-b30d-5314be318a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5add83b-0f56-4583-ab5b-e929174951f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79af0fee-9441-4a16-a6f0-cba66ad6acff",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77307be6-78ad-4867-b164-5a766290777f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d66fe0-de7c-4e08-8272-a2459997ead6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544b5bef-edd8-4ac2-904f-f43e588daaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a5fe237-d066-4c35-a3d8-631549b42d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3183055a-f95e-4106-831b-12684ac4091c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989ef5bd-a46a-4a4b-b81a-8e97ab46f652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7755020-82a6-4833-a0b0-f82109eb8773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833ecd3f-fcb4-49db-afe0-cc4e822b4368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b512c1e0-379b-40ff-915e-04a6d6d91188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c31120d-4e02-4d43-b355-ebd68f48e09b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1050aee-5acf-491f-82c9-9b68ca50aa13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2382c3fc-13a9-4830-ba65-9dc0b4cbf4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4e9f13-d107-402e-93bb-9b1789326001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22f775b1-7d6c-475b-be71-9b80d3663387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297c9741-ad52-49b7-903e-5afff0aaf751",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0d6234-8233-474f-a2ab-59d4cfe73b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7874343b-d1ca-4579-a67f-cb8bffe60e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b4a12c-c319-4436-bb96-c619cbeecef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7e965ee-7544-4a16-a2cd-93b6aa13973a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23949404-0861-43e9-8d12-1b069f59eea4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33461c7f-1192-4ee9-ade2-924b3c63da1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2ea88f-c201-47a6-ad4b-828611a8f4db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0068d2f0-3be7-4cec-9f61-547c0ecdf48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6401869b-dd22-4ad4-b48d-4e8ca3c98cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c46ce42-7441-4081-ae73-0654d501bbc4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4f8e42-5820-4ed7-92b3-26e140c53f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa84afe5-90d1-4300-9bba-50df206a891f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c807c2-c444-40d5-9d41-5b589eef6615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "445fcff4-aef8-4c26-9142-e9151a374c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c430855f-4ea2-443d-aa56-c9aa55256f4b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcd889b-f21c-459e-b390-969423e7ecb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5795314a-0965-4194-9f07-ad9593444a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a90a4af-36f7-451e-9d64-177393497861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85a17fe6-55ba-4324-8ef5-bbe5ab467a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f8608d-3067-4021-a53b-0af4d4e9f5b1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59781faf-c0ad-4dd0-b368-0fd415e1e681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dcfd099-febb-4fad-ac63-12bf4ce0e8d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afb8c0e-6ce6-4ce9-bb37-20be49c36215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c7f009-2815-4d92-a72c-f4eb25b5bcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae31ac9-e697-412f-b88c-d4af30cf2c13",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c912df-4dce-496a-bf8b-b3693926b297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edf55a7-877e-4fbd-a38b-9e17aa63b78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1357950-3f81-4b6e-a74b-bb72aa8a098a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03f8c08a-8f98-49f5-b5a0-2946be713f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7dff85-596e-4ea7-bd46-ef219fba9550",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad88b66-6c28-41a8-99e3-3d9cb5a4baab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae2624a-c5ea-4b3b-b540-b25b8a706665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7e01c7-f0eb-47b1-b7c4-2b8f6a0d9497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9935e4e-5467-4beb-ae5e-9fe6d26c058e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99848597-d5f8-4c54-872a-675b3e06927c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2ea093-2663-41fa-bb37-ce138c5b4dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0fb333-c2d6-4300-9302-39a8eaed7fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29580c14-4396-4fa9-b2fc-cd581014a443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ca8f61-1a97-45ce-9fa4-e57e839dcd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e3c8e3-1510-44f4-8886-23187e07ca69",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ae66de-6e4b-4668-a94a-98fff1df4611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcca5fcd-68d2-45ea-9af2-b05dc4926fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd521a8-f432-4613-aa24-2b6009f87a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c642fd-39b0-4cd0-bc9e-be24162f742d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5388b604-ca1e-4122-b7bd-53b607d52bb9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da53c80e-66fe-45fc-88ef-4a6f1aa418e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89da8738-2687-4ebe-844f-5f47a4a9d827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893e8796-5606-40dd-9dbe-c555dfad5555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "110360de-96fe-467e-a589-aac7ae1e1db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8867ea2-38a2-4b02-9137-f0805ea194d7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c324dff1-f9c3-4a7d-b034-32dc8f7d5ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b300ba6d-5b90-4e29-a06e-1a9be6141a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4a5d57-7ef9-4d6f-a62e-630eec9d1278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d01104c-bb2b-4267-8187-b274c0a45447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1a82ae-a0ff-49e1-a81e-034a4459e8ed",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fde1eb4-092f-415c-bc33-64438ef15fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f996ec-df6f-4098-afa8-dd336b65a3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29611e1-3e81-4df1-97fd-b73680972a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fff227e-4629-49bd-9bf9-01269565fd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466045a5-ece4-4134-85b7-abf865359e97",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf02a5e-d988-4ae6-aa0c-ecdc0e49a29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc1c8c9-07a2-4ec7-876d-34585c53bcf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6298e927-8c18-49b9-a521-62ef1f23231f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d54afead-aabb-4a41-979b-803d9a27861a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edce3bd3-9c05-40c7-ab3f-2c4b66a4e0f7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51bfa11-5e7a-478a-832c-71e967770666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373f3dc1-7aea-4b1a-a7b3-d9f7ca807826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7cb06b-5db2-45e5-87e8-6013b09484ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84d01a73-3dd1-436c-99e1-a8b39acf668c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f4cc2c-51aa-46d2-a458-d464dedcc0b5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc42cb3-fb5b-4e7d-9dec-74e764b89357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8136e9ff-1e9b-4c41-9fa9-954e1be02f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5577e71c-06e0-4169-9b97-d1bc4489b4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1e0bfe-f4e3-4b72-ab62-c621e6fb09b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64d6044-ab12-4fb4-a4a2-187aff251b71",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f14dd9c-840e-49d9-93cf-e4e9235a0de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d26f9f-a2c9-44b9-88d1-cf5550a5724e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabe3c47-14b6-41c8-838f-6fdbcb90b7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e07443d5-b963-4c76-9d33-41fbbfde3577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79923ca-7591-4639-8ae3-83aff72eb24a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec647ac-f743-46a6-af30-eca4a7c7222e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20045d40-3b9f-46b0-a373-d836da54318f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d617a14b-7d32-42b7-8ff9-2a276c0502a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aabb393-8a88-4b08-aaec-205eadb62a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504249f0-22ba-4721-a641-69cff280506e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd802ca-64a2-4860-a6aa-91caf7b659f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827aa283-bec7-4d80-8bdb-25ccd2c8b2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64db9ec9-9fe9-483b-a54a-b50655c813e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9de10c2-40f6-4408-9a17-8694bdbb3aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f423b6dc-8848-4bf8-9062-44675b34a73a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae7e89e-16d4-4931-b1e8-fccbadf31dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f80048-3bc6-4690-8153-556d678de61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e115fba5-49d9-44be-8d1d-12a968fbc9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8dc7672-c67d-4b61-ac61-729c9a7d58a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94baeda-4e5d-425e-9d5c-03ea971f7cbd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82171274-6c46-4d48-ae9f-ebee120feebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4f65fd-bf36-411e-9db6-4176fa873d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81351137-0530-4d40-9b7e-0382353f17b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "abec5380-370c-4eb7-a968-3ff1f260f2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3b5cd4-44d2-4337-a46b-1e6db3dec9c4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31c52d5-ec4f-4d5d-b533-f958f6ad1097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52155e04-c1cc-40ba-9680-bb87193a969a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef336c6-14b9-46a4-a9a1-2cc80d11d513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc2a8ed-6fab-4cce-aa59-787d06268444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c8b1e5-3333-44d1-8ecd-2f2ff9e97f1d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4afa19-7c86-4ef8-a625-eb92fd1dc5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf91eb46-9863-4b68-979f-5903dfc56683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f198c045-8213-4b88-85cd-7bb2c5503994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79235c5f-ca27-4d4f-801e-6b90e8c43444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89657744-3c3f-48c6-af0c-679cd24c5a5a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4024ed-74f1-4393-a7fd-a741a41f3057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c14173f-0f05-4013-b491-ef48edd71822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35aab58c-0278-4d52-a90a-90e971642428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0af5eb91-55c9-4768-9146-725fda3cc822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1588e4-bc51-4ad7-8e41-86fb2948995c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56043435-0514-4f64-a208-f0531338145d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52626a85-472d-456c-9cce-3e605d2bbf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e346e4a3-03d5-4814-8aaf-ad24a3dadb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7121c8d9-e45b-4029-80dd-048100c903be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8266b277-7027-4e09-8a27-b964f47be3f0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06d2b90-0434-45c5-9bf7-c3001d851a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e63fda-9acb-4043-bb3c-77258380a5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b6280d-31f2-44ee-acfc-ba03876057c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "33e59c41-ea68-4bc0-b846-a584c366a832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28cbbe00-8d83-4011-9d8d-aa1ebf50a417",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2aa5dfb-b1aa-4a5e-9ac2-427b093e2d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb64a6d-b6c4-4cdb-b1c9-d41535f83d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a4c9ee-9637-433a-9935-7d505704f5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2b1e10-face-4c04-91f7-a84f4ac7e7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2175656d-528c-4173-ae9f-5b4d82e2cad8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e3ba6f-e55f-4acc-b3bc-5796f595dbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beedf891-f048-420f-964b-d862c0b00e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba7653e-c76b-4699-b15f-92a91abb3c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e6b1a5-78b8-47ea-9ea6-c09fc4cd2a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43e9a82-baec-4595-bf3c-38480298b5a6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd324bc-f99a-4c7a-b24b-5738adb7e550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5365993d-8b82-4671-8d23-5a42200aa58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e7be63-e3d0-444c-bc5a-ffaf31677054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b693eb-7bef-45ce-97de-ca6cf514c258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b715d554-b19e-412e-95eb-13bb5de189e2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcdb0f4-3907-4046-9bfd-480c254706be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0025d3d4-b712-446c-9876-42dd6330466a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac56268-a4dd-42de-8a1f-dc797ac7c1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0bfe3f-1c1c-40ed-af6e-d163c9c19507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea1b579-96f2-414e-b30f-c3ff14d895b9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075e150f-bd57-4abc-a603-8e298ac57d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b2a21d-4026-42b2-aa65-11e81d90db55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a18fe6-5046-4297-95af-7c22e06fab64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f6de2a-0168-444a-b6d3-ccd015dd8c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6508f646-58ff-4373-b95d-2524926d7a9c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b7887f-fc3e-4020-be09-0fea07eeac76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c8dd90-7202-499e-b5c2-1552c06dbd4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af36c5f-4ac0-458e-9d91-110c67bcd5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2955e6eb-3b73-466b-b359-ad8a544445dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d241785-11e5-4b23-be4b-b0aace885430",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4616b5d-9a93-458e-aab8-f845ea280e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb08fa79-07ec-4f23-b56a-4450d118c2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82b1abc-a4c4-4fc9-b414-2b265b12964e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb36f666-334a-40ae-9080-9eeb64018deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf50393-9cc1-4251-ba72-37cbadf25afb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49a4bd7-399e-49a9-8615-b6835b61faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920206b9-09d8-442c-892a-7d738b9b18b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2722b9-a6ba-4c6b-b7b3-09c9d6447f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95ed9a7-88aa-44f6-87e3-91a81ff80781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4827d8e6-c49c-4309-8f94-cc64dbd0b1c7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84231e7-53eb-4498-8d5b-eee360d35505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb33c04-e51c-46ac-985a-eca6cb6987e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebbef99-ea68-4cd0-8e5f-01476f26f282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c511e3-2ace-418f-98c6-757fe2448b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d85c8cd-22a8-4d38-8b72-ba77e445ad35",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8b7e9f-e332-42fc-b55d-84418f4215a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912196ca-7029-431b-8b19-80d91a1863f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714ff4ad-b63d-4ab9-bf53-0502372f35e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c848e385-f9b1-47c8-ab2e-bec628d947b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffc136e-dbf9-4a35-a2a7-2e240beaa185",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8f8a38-71bd-40c3-a640-c37da2889894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283979bf-82f1-47b8-9f5e-05a9f5c53090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73389540-fa27-4415-a130-f12714db9593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "02e0ad65-a5d9-4fb0-a30d-6bdcb4134e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe290d3f-8603-4713-89a6-07e9b86ea0e2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befe090e-7794-489d-b73b-862d5fed8723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227fd5af-ce89-4b16-a39e-cd5e778830e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167cd0ae-d418-4f25-841b-e525521fa025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7d4b9d-d36b-410f-9c1d-326334491841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a843deb-c41a-463d-97f7-5fd75320fa6c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c183deca-2187-41ca-b375-c605cc998f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5510fa-f394-42a3-8646-6068bc1f485e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369a2e19-a01f-44a1-9223-9cc4864378f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "775a3b1e-86f7-411a-8325-3f28116b527a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0746f74-0715-490c-8240-e4609e52de28",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a23fe66-593e-4667-8bed-0b0d463860d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29b3dd3-e2ef-4dfc-a260-d4dbff16f57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d301f8d9-cba4-47a2-877a-5287d2dabd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39c64053-3c42-4f37-9d86-258ae9ab71c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c091bad-e03a-4287-914c-d648e10b387b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761e4783-e072-4280-bcd9-e8b47907bfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65333822-c3bd-4bfc-8299-e998d53a5e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93acfa80-23a5-4360-bfda-b7a131699a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11a12ef5-cadc-469e-a6b3-fff163cee91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15af7480-1e79-4200-a78b-fecde9eb7334",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644bbcec-66ca-4e26-be9d-18986479103e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65804a4-05ec-42d9-9f10-0ed4b047e9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a525cb-6aaa-4026-86d4-590bc89de2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "934ae8d7-b1fc-40d1-8515-c653122f2b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f90d779-2254-406b-b50c-13988f5da178",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dc9ad7-f71a-490b-97f4-ec8298189f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d3df8e-d07d-4601-bf78-ba87eb924e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5ce932-19b1-4632-ab90-bb9edd02a4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b74c3e7b-2201-46f4-ba6b-5a89b45428e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee505000-7cff-4a6d-9248-8005a7904626",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b26382-db79-456c-aa6c-8fa01da73499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8fa26bc-2338-4403-be5f-69ddb2b1382d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a017abb-cc1d-4906-8dd1-24d861d3e3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6950c6f8-b050-48ca-9944-d8aa543e68a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d721b984-b9b9-4139-8488-ee1090ca4bfc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f409834-b40b-4194-8c48-04c7f8991433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84dc911-243f-4af9-98f6-a928e3498ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb38fb7-4252-40f5-a9f9-aa5d63661690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e44c31-6b5f-4d2c-9acf-4af33eef6917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f754e678-6fa5-41b9-b9e6-c0217a4a3f27",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49aa38f1-e50a-42f7-88d0-022efbebda88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32d1018-51ba-401a-9b3b-5ca367d9c953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26333faf-a42d-43ee-894f-d62784506d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0090ffe-188f-4948-b3be-0ea01617674f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f867f545-681c-4608-b9e4-522a2721e991",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c9b8be-e2b8-4e40-9423-5d524b2b042b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c532e64-1bc7-4f55-9444-4a8961342eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d852911e-5dde-4a11-9f26-5b45921ed20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "808544ad-32e3-4cfd-a5a1-6b8596bed7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bbed33-31fc-40b8-bb4b-d4cd82dbe8fc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363d0e71-f1b4-411d-862a-644f09268e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11535c74-776e-4f6d-a520-84bd288be374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5c88ee-38e6-462b-8a73-416fdaeca5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdc51521-88eb-4b70-9acb-7b40356e8770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae71a1c-72f7-4090-a99f-8569d4777dfe",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82492f3c-320f-4877-a8f9-cac27d8abd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c05381-cc08-4d0f-a37d-c3622cc48c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9226298-f1a8-4acb-8498-8e42a7e0153a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e334817c-d695-4852-9c5b-3e8479515aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f39c1f-001f-49ba-92e5-85a080bf9fb0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717cf4fa-630e-4d36-b70b-2644f42ed0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d96396-e47e-4f29-9283-9bd9a9cf60c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fe493c-33d3-4d54-b130-a58c681052a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32460dca-c766-4ce5-aac1-9d50abbac585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebeab3e-84ac-4fad-a3ae-8339a7fdc381",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8915ac0-e47e-423e-9c7e-f1a49abad0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d667924-b44f-4d30-a70b-c8004a7cec57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc00cbf4-2620-49fc-a4b0-06921fe194a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d1c50c-1757-4581-8ec6-f8ed2b8e9055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c22f6b-e988-4f9f-a5b1-b94c92693dd9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ff1440-71ea-487e-b560-74c01185860e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9ae72b-8ef3-40f8-98e9-3aa68a743d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ab82c4-d729-41b1-981b-4b3703f8c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa57655-4670-4818-9d70-bf8519cf0f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c714a6-8c55-4ebe-910a-232688cfa97d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d96894f-5775-4fcb-afba-8f187a332b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9e1ad0-c9bc-4288-896e-9d55e5554446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcb4dee-d1af-4132-9a9b-eab4d9c7204d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb417923-e86f-43a0-9885-815383eaaafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d05d28-b75d-464b-917f-03d051f8836a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf852e26-8cb9-4628-a019-ff9067bec48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abe7dcc-eab4-40de-a998-afac8899f3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fa3a95-8f50-49e3-acf4-15e6c52e2950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "79cc757f-2595-4e92-b885-264aa3d39e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79a5548-4e17-4e1a-82fe-4b341be21ac9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c542e88-2981-4ae1-94b9-b2f8361d3897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b319f30-e67e-4abd-94db-cb8b9a4718f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72acde9d-7e38-4f52-978f-89de2fec4dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "877a451d-da7c-4fc1-a58b-5939f6bd5ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9c8b96-71b7-4818-aaae-f64bcbcae88e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f73fc4-c89c-4332-94fc-65d082328553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1bfc91-6a30-458b-ba5d-f8018f68eb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9342d56f-eff7-4496-8201-c46278c1739b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3462ab7-7736-414b-9faa-9ddab4ac5023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac1f7c6-768f-4dd8-9c42-c06e00e84240",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c66d36f-99cd-43be-942d-7e5f3ab45e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed401cd-9b18-4be9-99a8-fe012246d3c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd13a880-cd65-4442-b1be-9d4e7b54d75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0fee5da-0d45-426f-92e6-04aec6c48981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d833753f-0538-4cfd-9fb3-f0cbdb4a6cda",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b040dc59-cbee-4536-8169-cbd7eb837a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7ffe4a-cd8b-4712-91e2-292dadaf5beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f753a986-dc1e-4c7f-8336-ab15c7beaeec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec036b0e-5bd1-44b6-80e5-e683f98175cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb8011b-430e-4de4-9add-776b140ad4a2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "571b90b4-4f1d-41b2-9830-a197a72c9468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad12ef51-5854-4f7c-a39b-1ba362f57fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bef913-6de8-48e3-b3b5-6916bf6df8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d7a564-303a-4a55-ac19-d02614b24820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd12441c-9df6-4603-b6b4-0f2200cf7251",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3abbbee-a648-431a-ba57-72ae938a291a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92f8f19-2eea-46ed-b08a-2869329cef67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc64d6d3-243c-4260-9812-bd6c38226408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a26c5b9a-583e-4f8c-b770-0c33ff04cef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19abe98c-f3f5-4b77-b2a4-708e21104b4f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7084622-183b-4331-8b78-4b66bd07f6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85555a3f-019d-4387-b060-06585430e431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80843cc-fbfa-4504-b844-496fcb669e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07dd1142-6641-42b3-b7d3-a4ed1d50513d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b43ab08-03b5-49c8-81fc-24a5e8a99205",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68099cca-7814-4334-aa95-90c7b556e32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6833cf2d-1bd2-4f98-ad8f-dfd43b378754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c321eda-64d3-4241-af9e-3e909ece3f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fabd5744-fcb5-45a9-abe7-d4731cd78210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa63121e-aad7-44c2-a232-23a6176cea44",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce00f926-4b7b-4549-85f9-821dec318175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4173efa3-fcf3-4a5b-87a0-a13a89b818df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acfc2f2-9986-4e0e-a572-93a3f155a7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa07ebc-2645-437d-94d4-b226b6a5329f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6173902b-89e0-44bf-9580-3af9bc82dbcc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948c7f7a-1fa9-43ff-b945-7bcf12635b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c9a090-d51b-44b9-901b-c31e9260957e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82800d89-a885-4c61-b01d-031d31e235af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c39614b6-b638-4a32-95f7-6636ec360f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e76772-95f7-4685-bb60-63d0503c2f4a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227cab10-76cf-4741-bd20-bcacb34abd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5baedcd-b83a-4784-a426-dc497f077bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac752254-0fa1-4d65-984c-2ccee77ce9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd91066-6c51-4215-8928-06ba1021e99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c957f62d-a774-4aee-a374-d15229a6fe5a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47aed15-9159-4667-a7a7-33d8a0c9d7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82f77d8-aa58-45df-9a00-ebd52556b022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01146402-3aa0-464b-abc8-13b2d28361d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b7c8037-9f9a-4626-935f-d2c69962e466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2234ceb-aaa5-41a8-bd4e-ad948dcf051f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41fb604-3b16-4068-b935-d72661688a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d920da8f-2f75-4319-859a-f5e91d1ad531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e73d8b6-2e53-4963-bc91-903b7c9dae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a255729-54f3-45f9-94bb-e59a6911b367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6593f34b-6f7e-416c-88a6-a4c3779d6568",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae52438a-11f3-464f-93af-66e2dcff96a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4160c82d-2096-4e1a-a813-f261a029b07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de46699-609e-4c3a-896b-f564cc8a93c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5060cbd9-0f3b-45d5-8a80-02e3248927a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0613990e-0456-4665-9702-c65f4f406f63",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d8a87b-eae2-4cd6-832d-04a924bf1c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426f11e4-04be-4054-b4a6-60cbc01d0a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cc6eef-3d76-490b-93bc-a9c54aa06c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e74cdcf9-73ba-418b-8dcb-9fa1e42ae3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0326b1-abad-4c86-af87-8faa0bfc0f6a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261d87ce-8984-4c2b-a9a0-cf3c243e8386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9251f1e3-c77e-42e4-a88f-21d8815a45e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424b42d9-c6c1-42cb-afe3-198c96e40c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4b6a36-de80-462f-b0ef-6db8d765f138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f457228d-563f-4dac-b70b-d92e370d12ed",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8071f32-ad04-4038-bbd9-1747ad8e66a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda2c76e-a5f8-4a1a-8f2d-743cc008adce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0efe94b-af7c-4a52-8eaa-aa9e50dfd2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e66dfa68-00a2-4dd9-8acf-2152f607c8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48884ed9-a49b-4181-9c40-1226780a2105",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542c1059-3136-4bbf-8c25-95f91052596e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3833b5fd-44fe-433b-8168-240632b472d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e28b724-f99d-4400-ac90-87c91f145970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c73aac8d-d973-4e35-83fa-60b496d6bf3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48907a37-4a03-4fa7-9e66-7cc785e2d16d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe183be-7b54-45ba-baad-62f4c118675b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3de25d-2d85-4444-963c-7c5ee3ae4cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723518b1-de11-40d8-9055-532eda019a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4db9b8-8372-4f4f-9371-0bc51468073b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf5e43c-8859-403f-87c1-6ab6616824df",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bc30ac-210e-4a0a-9ec8-696b1c9a553b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1236fe6c-3a86-4953-984a-46139a872371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c08b57-e04e-471d-88d3-3a38371d3072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "34e40388-82d9-4351-9601-8767e1948bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408cd63c-999d-4074-bfb6-c68b30f995d3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac5a542-a775-434f-bf16-c732736b22a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77845ffa-d2f7-4717-af5b-ea91f2c00b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a8face-8600-403b-b1d8-e4d6aa2556ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "86814eb9-9f7d-4b40-af07-56cb20ef99ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046f349c-24bf-4d9a-bb83-34a55d02ecea",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14080a63-7103-4af9-b365-c3f47c7cb104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc28107-a9e4-4f3b-8363-2fe2d5553361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d28886-255a-42d8-adf0-dae8f5ff10a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "40512c3c-82c4-4ef2-83eb-9365c7cc2a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae2858e-17b2-4858-a753-b38585088966",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48265555-fabd-467c-952a-438fbb6077ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfd3f84-f53e-4f5a-befd-6546fe53448c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdffdc7-f0c4-4783-b05d-fe26a1ba3c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "503af43f-daba-4dc4-8a96-a99ca2eee505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9900dbf4-5136-4b62-a3b8-f2c272683d00",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a6a10d-7bac-444e-8c7b-c7023190aaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9c027805-1fe9-4036-84ea-5466998cae7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24f7433-c9ef-47fb-8c20-1b716aa3c54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d94850bf-6ea7-4c60-a80c-de31b3ec480e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4dfb2754-e0f7-406f-be61-ad57dcec5a7e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb59c51f-94cc-4ea0-ae4d-3fd3729b5a23",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c17dc13-f0b3-44fd-9fba-35b20d61d4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c279213-296e-4ba5-bb36-6a48a2e6214b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db9d3a5-0111-4216-854c-18298ba806c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4f1f90f-eba6-4f44-8eee-b4e38c21974e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7819b84f-360b-4f56-8b52-32de8e91c2a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccb87924-04a2-405e-904b-97d87b0c541e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6ce1efc-d589-4256-a067-9ddfe6eb94fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd6d5e21-6c1e-4bf7-92a5-528021fa11b7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cdc90584-a586-4a29-b3b6-992a6fff0ed9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2505b13f-8404-4484-9b4d-2f14071a8a94"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d0024f5-b53d-4b6d-becd-e7be67535580",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7fed5098-8917-46eb-9ea0-5fe68ac5ba7c"
                }
              }
            ]
          },
          {
            "id": "10e7d509-2645-4706-b982-88d9fd9a6983",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1d25c1e3-4a18-4804-a847-4d0ad70704cb",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "01c24cc6-1bae-4e25-b411-cf4257b6a7d6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fb54cc-e369-4b87-bc1a-ef507a9f12a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c8cd18a2-34ce-465f-8170-17d7e1682c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45567369-25f2-4adb-b964-16f47cbdb6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180caa54-e44a-43e1-a0ae-4d9ee49c232d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3164a337-c633-4687-a1f6-3f0d0456bd10",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b3ed729-1d65-4786-ac7f-c9f02521ef2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e54c453-29d1-4787-a126-a7a765d8501a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28bdeee2-12cb-4916-8306-9a56c605fdc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "46e739ad-28a5-4596-a4b4-860d351c09dc"
                    }
                  }
                ]
              },
              {
                "id": "3093e936-dbba-4346-a1c5-ef8259afdb9b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b922f335-cfb6-411c-aa9a-feedd575364a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98f9b669-aad9-4e13-bfb2-fb3629076569"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "812f3813-f599-42b5-9640-86a0e790bd7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "30d2e3c3-10ee-4ec7-ae01-0b0c6159c352"
                    }
                  }
                ]
              },
              {
                "id": "778bc803-a3e2-4edd-b6b0-3b22fe2f0a7b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd9f7b60-e628-4039-b4c6-baceb5c26d41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "242fb373-b4cd-43bf-bae2-4ff3744f877a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "014dc757-f5ae-4d61-bbdc-de0858959e26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "209157c9-458d-480c-be17-cb8248b4569d"
                    }
                  }
                ]
              },
              {
                "id": "4810ef53-f32d-4f5b-b406-1ebc1fc881df",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d607ab40-8495-485a-a968-6c23145e9c4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70f1ad45-793a-47b2-be2e-0b9d1cd53598"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8ccb6fe-ac8c-48d2-8e6b-15765f6d7449",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ca80ff25-93de-4238-9a17-7f4aa1c3cc5c"
                    }
                  }
                ]
              },
              {
                "id": "0ccd7b8b-5fbd-40f5-a3ed-c71f388278ea",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c5a7e60-620c-4210-aa80-9d75ee850e3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd9a728a-c803-4bbe-8dfd-77cf3278b9e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edc4b712-e6c5-4988-a845-15bd72df7868",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2afd1f94-4d79-40a6-99d1-dac01b8a5f0f"
                    }
                  }
                ]
              },
              {
                "id": "474b84be-bb84-419b-8591-589319c43908",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e6f4ea0-ea4d-44a6-83b7-5cb1c45dd2bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cce28f0-ed34-40f0-8e68-0c4ecae600e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "389b6250-c4ec-4e16-8d6c-e661c84f92a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa9e39cb-5ae7-4f6d-a031-7a39933ddfb6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21b06936-f1e9-4382-b28e-6800517e6833",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "459caace-397e-4075-bf65-3d2c5f4f17e7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "615b24ec-9449-4f52-9dcc-11cbef134ab6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d0115c7-92eb-4d02-baaa-6fa75ae09a13"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "855af98a-f74e-4cf7-b966-de7cd379986b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0ed87de1-87c8-4903-8727-3ade5ca8af5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70cf41c0-1ebb-4fc1-a07d-e0b6ad8278c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d91b93fd-45a3-4c2e-9a90-81cd36887e5e"
            }
          }
        ]
      },
      {
        "id": "c1634413-4943-40ac-bb33-92442be997a7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b7b5f52e-fdfb-4a5d-8eb0-199a5f60caab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dabba6bb-9264-4cb2-ac08-3fc42e35499b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "badd94a6-2263-40da-88e1-bdfb34a1380f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed75ddf-a45c-48dc-9ead-ef44fedf0270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2070750b-501a-43e5-9031-93de94177673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34127d4c-896d-49d4-bb11-c411cc75d03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "89f978d3-da01-46ea-ad6f-ad674e362b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584449d9-8c1d-4014-a07d-59ee39d54193",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7980869-4e2f-476a-a9f1-3b649e4bd3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca58164b-b715-4426-bb61-9edb0fce4315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01923688-708f-43a8-b02a-6903e567d2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a6ea83e-91aa-4896-bd9f-74801d685cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14dbb09a-b0d9-4f72-bae4-e05824779bab",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6840fec-edee-44d9-abe2-304bdbccafdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8a4e17-7646-43fc-a021-f44b37d41f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d960024-0292-4f02-8bc8-18c8cbd6ef77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7319280a-647d-437c-a205-300785856e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18cc249-1428-4d5c-9532-7a70d31eb1c9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc805e7d-7ea3-42ee-b514-be8c531c1766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1af8664-509a-4715-929c-db7737899fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f59c535-8e7f-499d-8a52-fe0f3eddbc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b64feee2-c777-4b66-b6d6-67763b27565b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68609a6-1515-4eae-af75-f71c602ee5eb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de187bb-8bb3-4615-9fc2-70f44eff01b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc455db5-d60f-4da7-b3d3-739970bced95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc6494e-99bd-4a3f-be2d-b975eb4e06ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f06667-99f6-423c-83b4-1c1792a16184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b13f3d4-ada8-4676-8a33-ee935d9286b7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefc2475-281a-45c3-a430-a3648f3a4d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b557aa12-04c1-4a1c-9d40-f25446b65022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8500c54d-85fc-4ccd-8719-c597cd192992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3aecb94b-bb15-46c7-8dc1-1363a395023d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29436a16-ecde-4385-920c-8aebe2fc7c9b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c829995-936a-44b2-8731-e7e4530ecb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7981565d-e30c-4a41-9800-30246821de0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945c6700-e6bc-4610-829a-b71057a46ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "03ab8143-9e02-41bb-be95-1afa6067e722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d76ccc-d9a8-48e8-9913-7197445e0f7f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115659e7-f192-4fb8-86b7-2784675c75e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf42e97-2cd6-4fc5-838e-04235cb4874d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe0cf78-b503-4558-ba35-d061a883f6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4eeeb97-b1f2-40ca-a273-f1d790617e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fea2fb-f229-497d-92a1-6a73719fbb95",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2f5248-9344-4ff9-8201-a66cfa2537aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b2da11-8606-47e4-b086-c20ca61ce4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8ca4d1-4ef9-4a28-a6d5-c484d832b375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2e2645-5aae-4c28-9e15-31feabf4e1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a3bd0b-5b31-456f-9da7-2f86d586d34c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4920e086-94e7-4d6b-bffa-3300067e8189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc869361-3be5-43df-9faf-9d87bfe7fd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23fcf63-37c5-485d-a497-a4a85d3d7300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "486d637a-abb8-4d9e-abb1-56b00a619dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326eaa7a-121d-4aad-a84f-c2e4c7344677",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2bc8d9-1443-405f-a5b3-ec43d405ad04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c2cfed-040b-4942-b909-3c3039f4e6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968f07fd-3b8b-4df3-b33b-5f1d18a80001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d0aba9a6-b28c-43d6-9c82-a6b2a5915483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15112313-a51c-4231-95ce-c28d2aed3315",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d956b3f7-9ad2-4b3f-80cf-f35767be8766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f453f11-e612-4eaa-8ec0-b547fcdcd8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a13398-acd9-4ae5-a684-924336304234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13140a61-b31a-4f85-ba65-07d3eab3b71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24d286d-87df-48f6-bfc6-9a75b823b5dd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416238ea-5082-4f7e-ada8-620c959b8804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db81842-3ed8-4e07-96b4-7b3e70ca7a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207f5c8b-cc73-4881-b442-c98924559aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20d96f10-2e63-46c5-9b06-aac77823c94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e39095c-4c89-4ce6-9e8f-79a698707937",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a928ba-58d8-446d-beb7-0f17f7fe67a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d91ae7c-a8c4-404f-834a-d3309ea801f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a5b7e7-28d2-4818-8a4d-bf6ae7100c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "59ecfd1f-7c57-4422-b237-2a910c7ce2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f870a8-4380-42d8-a69e-8109fa2a8422",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbded310-eadf-47a6-9497-9d03fc740da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b1c560-900b-4b4e-a028-783f4d92c35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fe1544-9781-4157-a070-804679a215d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "112f3eec-b5fa-45c4-ba85-b14671d80abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876c3c7a-dbde-4c84-ad96-68432fd6c907",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263a7e51-29de-4c06-8296-ad297db6398c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a86e02-8381-461e-9049-94ac966d130e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadf907e-e062-4f48-8520-857c1aa7d7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1150d8-fbc3-42b0-8bf7-1a68e649e30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62291c5d-f53d-465f-a4d4-456a80e954a9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b18143-73d5-43bd-852c-9ead205f11cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5a301d-24a0-4162-b52f-7fbe4b557f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea79a227-003e-434b-8216-b89cfccb0733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "31bae511-c901-4bf9-9755-55db382e0a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679c0e79-be73-4c91-8d84-329aba34ff88",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ab7d48-0d04-4f3d-ab72-00d8fbef2694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c3adac8-3c8c-4e89-b633-ecc995af0912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b6c590-9e30-420e-9cca-57704dfac717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d640ecf2-fdf4-4bf5-942e-0568cda854df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9174fd93-ce0f-4630-a9e2-2f6f414256d1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1a999c-6c77-4f76-aaf1-e3c2eb054219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce3465e-ea5e-48f3-b389-ddfe2493499e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef945c5-ac2e-412d-94f5-47462f3261b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39ee9ea7-b723-4327-a595-867505543f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88049ec-36b2-44d2-95cb-a858a0b5ebcd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84127f19-307d-4eef-96a4-3b65a1ee0494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ddb6df-01fb-4265-ad3a-5e7d47e6b467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a2fe2d-9941-44e5-a976-36e5b22497a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fe2e4a-5dfa-44d2-b18b-55d88f324c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ba9340-9db0-4bfc-bdd9-8052adb6fd8b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478edf9f-2128-4465-afc3-950fdf4bd267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0045a149-86a2-43ef-bddd-e93baa559ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dce3bbc-dae3-461d-bc69-65c9088c9a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e22df7d-8ca9-4b02-b584-c72592d84245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b490f0-8404-4fb6-9d2a-d2c1f7a8ca81",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b165775-d8c3-43c3-938f-a97f027d6fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa34914-b0a7-48b8-afdd-852fa7cff82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b06815-2c46-4a34-9a1d-37fa91c7a420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11dc8c09-8aa2-4613-8d1d-bdfcd7646feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21424dac-016a-4476-a22c-75116f2d6a69",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1cdbd4-a802-4432-bf41-5f77852d5b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c465bea-64f6-4a64-90db-586879c5e526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dcf2d7-5ba1-48c1-a160-cb8c231b8c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a4a1857-e5d1-4ee3-87e0-f4ef77b49de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a187ac23-ad85-40e3-ad69-3c5438c77d5d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7c5e2f-d404-4839-832a-5d93519a6b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce34f71-9ef5-4ee9-b6e2-1e9b4c58836b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1239ed-845c-4bab-bf1a-e691cb8d6ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e06336a4-9994-42d4-ba76-ad9463bcd0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b071cb93-3fad-470f-a2fa-ce906aaa9ac1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7ab002-c0d9-463c-a5c2-bef40e2834d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d342b8e-8ff7-4c01-8fa0-5297799d51b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f698d8b-cf13-4ec3-8a3a-d871ae606e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "901b4aee-3489-4c10-85a7-7effa9cf931c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c071360-363d-40a9-9bdc-b48d1f8821a5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a877dc5c-f0d4-4e34-a079-924598787ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c543bd25-73f6-4620-8d5b-c2c6a9b953e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6b86a2-2234-41d7-8c7d-13255c42f657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78fa33bd-b78e-4725-8335-7e8702ac4a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae696791-3aef-4b23-89f3-87ac6bd10f1d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad43d12-b75f-46e2-8320-8f81b73f89aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0031eed-46b2-4827-848e-4faa4134bffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feef01cd-c13a-4c0e-b347-28dc59fb81dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "382245da-127e-48a6-aa85-12812fe82315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59b614b-07b3-48ba-84ad-12b102437365",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58a4488-9c70-43a3-bce1-308dc0e181fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2061980-2dcd-4d43-931b-c4dc7f0a6296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b245f76a-0fe6-43ca-8a92-ebf0fd31a846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c449715-a21b-43a4-a895-0146e5059cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0109307-dbc1-458a-a213-c6f4f56a01f4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4522b069-56f3-4325-9ff9-9394265fd1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c68115e-7667-464b-b04c-01d954741b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55d5afc-de00-41a2-8a8c-63ad2978465f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bacf602b-a9bf-4210-b6b1-c3906791119d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6175998-5e09-4cda-8af3-a061a197e94a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde4cd01-7a95-4036-9e28-1bfe3d270e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fa7a89-996e-4a3d-8d90-b5dd311f5e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1236e3a-6566-4426-9464-ba4e711804ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2e5ae3-78c6-4eb7-ac08-4b0ec2a13645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f080086c-49bc-4123-a67a-34cb4e2d66fe",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4de0c39-ece0-460a-b5e3-be85f7ae42bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d858e97b-0a62-4352-8471-2f2355cd6994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29b3729-2a04-472e-91d9-a1887bd67078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95b2b002-b9b6-422c-a694-a7234020ef2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e713f1-e084-47ff-9d88-6639b9ebe0e8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434ec21d-b8fc-4871-907d-bdb7e4a2301f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4907453-99ad-4abc-b0bb-8c1bf0b17fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95bc7ef-49fd-462b-ba65-763961f3027d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4cf38a-7d85-407d-bbe4-89364a252832"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e7e89ce-c31f-4f3c-83b3-96908be5f759",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a76b715-9c8c-4b9d-a793-9a7b88926220",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442b0f7f-d327-41a5-9726-049264d2a14e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cc772baf-5d61-42de-a617-d5e24ee0934d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e2edb8-b07c-4b5e-9fd1-cc2dd6912e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "956b26e6-b7af-47fc-9f08-4b555caa5997"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6743934b-9734-402f-b270-40a0e6b93e99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8160d230-5a6b-4e9b-bdea-de78bf0539e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f21469c3-7657-4350-986a-4a99e2b6d560",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f367138-7c5a-495f-8f3b-6b2bfc11715d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92e3d53f-4d7d-402b-a7d8-f5f0efd41201",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "80a56d5f-3a5d-47cb-a99a-2ff398948182"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c39d6a8-d0b3-4867-9874-02c8c30f735c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0157014d-9900-46b7-8bb7-a552df4ad5ed"
            }
          }
        ]
      },
      {
        "id": "1522bb8a-c18e-4078-8d7a-097eccedbd56",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "87938181-36a0-44e5-92a8-3418f6fec851",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7926c60-2ca8-4404-bbfa-7c7c8f948329",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04d9a4cf-1639-4139-8d5e-bfb51a78ffba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6c4e3b-1cb2-4fc4-95a5-62dc8c896eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc2151b-31da-405a-a2b8-d6deee0ecc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb374fc5-487f-4c6d-8a6b-683efba08881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6365c7ef-4a3e-4d6c-9052-08ad85dea585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00199049-65fa-4d51-b5e4-c92ea1f5a12f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f53bd0-d1fc-4615-a100-09fc7f1d6dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e8378f-89c4-4eb6-ac37-ebbd8d0a57c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1b088b-9b27-441b-9b3a-de9aaeb38a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c3ec78-0433-4791-9ace-c98be900408d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b2c169-1cc2-4c55-8247-6d536331bf7a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca24f5d8-fcef-4f9f-a931-24e9eff3a3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c0141c-b94e-4629-a91c-a53f9c9cd3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc697e2-ac9c-46ea-9def-35abb0d790c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc0bf11-ec7d-4455-8fb4-a31dc7381d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2201fb70-f2c1-415b-9014-9192ee6f3818",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bea6be7-fe72-4ec1-beb1-e85b22f89b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125e513c-7c2d-4de6-82d0-dc87ae2c348c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1561d82f-6678-4869-aaa1-35bea343f54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b96f9d-a160-440d-b4ee-d8df4117a91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704792e1-4ad2-4335-8983-60f5f1a10bff",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d081d36-5e94-4633-8f5a-3210bf5d8f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1030c772-f8a6-4773-9e00-b218f64502b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea4009c-ee70-4fed-b112-580bf706d8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f8fe11-8597-46e8-9c1d-9301521808b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800d62da-4dd0-428f-b4d0-b9c3c6fff10c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f376bb-e685-4538-a2e7-a1aa9587b7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412372ec-3bb6-4111-9e3d-952f3431b216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c1065c-53d0-42b2-bc8d-40cb60b01356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb62ebac-789b-4d73-bb69-bebaa9ad808f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8416eec4-f991-45fb-849c-47000d8bdec7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d58aae-7617-46ba-90b0-2e15b3a411ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a072958a-6566-401c-8af5-68a4423124b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9fcdaa-69cf-4dd2-ae5c-1f3b33356269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcae9a35-cf98-414f-a152-517b9ca2ee5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d530ba02-9077-42cc-b674-76f8a2ecbda0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04957ae-9659-4b81-a756-cbb6c949b916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5121444-c224-4850-afb9-b15a817f36be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bf0fa0-8a28-4536-85c1-93a0395bf438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b3ba24b-d212-4664-9e15-3825086b8369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca30e7a8-7d5e-48a1-a6a4-30d03cf8fe61",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349bc6cb-cd00-4554-a649-85b9db238188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6b59ad-c9a0-4d27-8517-774aaeaa24da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0fff9b-3990-4c68-8868-04320afa032d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e0eb46-51cc-485d-92fe-c01bfb27ab90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad66178-dc65-4f50-817e-b91692643f60",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6533e351-e79e-483f-b251-033db92ea4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c99d7f7-931d-452d-9f8a-c5e5fd0c1a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2971549a-b8f5-4197-af1d-d24c4b9184e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53af2c69-db88-4af4-b63d-2f4a79def4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2b6931-c26a-4626-9fd5-267a0fa223f0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7904bc8b-f755-4840-856e-eddc9d3585e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7a9499-96f7-4dc6-a2d6-5949395ab178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7410336b-aca5-4947-a310-a507c3dc0573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "484dffd3-971d-479f-991f-368246abbbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56df0f1-f82d-409b-b9cc-b0a80146c33c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec5a591-cd05-4059-a166-5b7f666bc0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dffc229-a8c0-44a0-b100-d4871ea3d8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e3631b-3b73-45cb-9269-d1b719027251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "baed7ebd-be6c-4e4c-a255-dddd93e0defc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b367deed-92b0-4857-bac6-8310f5f495ae",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81cb371-233b-4619-8dfd-e0168b90c2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0423c0-35bf-45cc-8e87-4e4a20977680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af90215-cddb-4b1e-8fe5-294e5f3ce8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f961e0f0-bf3b-45f5-a0a4-6c206a261763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726c53dc-90ae-4562-814f-a6d217ce4a92",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d48283-ecf8-4fc7-8ac3-da5342804188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291aee35-865c-4c36-82dc-c7bbc503f61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efe5d4b-2b71-4f7a-8e3a-b8c2afa713ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "059db4e5-b533-4819-adce-52908c338eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd21585-4266-47ac-a563-b754a4261e45",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890323c5-9b4d-4dbb-9fb3-f55c4598ce79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79be893a-f84c-4f4f-99c7-89b19c56511a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f468fd-b02a-4c73-b895-7eb4d9d68cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1593dd1b-fc31-4959-a1db-d08596d50677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafb7a21-e34f-4749-a687-9accb40c7bd0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b811e6-6981-45b7-98ab-02ef17bec509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598e0afa-b910-47a3-bbb9-c8038046da3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ee3d01-0e6b-4885-bc59-d01066d07757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4395a4e9-f3f7-4c56-a3e6-c6c5ec38c276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a9f0a7-b5f6-42fc-9999-10cda06bf567",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fd8f33-a52c-4e5c-a19a-8f6780a1ebbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad12d983-209d-492c-b49a-f158c34d41d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff6c490-2d59-49c2-84b4-13fd3601a52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "93052d35-1f71-474b-bd27-7a0fb8f01085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36084a72-b1ae-4c35-9e86-7ffef7034f91",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4869fc03-4e72-44ad-9c2e-6b46c61a3318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4469ed6-38aa-4812-b9df-a7f4e592f166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0813b9-f53a-4547-84af-450e91c8acab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb2bf15-1334-4931-ba73-af0386ee8175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a066c79c-f853-430b-9424-f8081265a2d3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735088fc-7b36-4cb8-8cd0-373bb7ef33af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3972e06f-0dd5-4972-9936-4942df87ccc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7226bc9-14e1-4e21-b45e-369268a03783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9389d92-e8bb-4b99-b914-3100d7538072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f1f3aa-29b2-4cfb-8111-9d82c6a4ed6f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3a9b3e-233d-45d7-9794-00f45f1d37ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733a38c7-a2d6-4910-8248-3495afe20513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3877d2fa-3959-4f61-86e7-3093cfea116e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c374c2c6-81c8-49f2-9f85-b5c9a518b495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8964295f-8ebe-4430-a1a2-279e0672434a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e840da-4e6b-4ea7-b7fb-416c719189a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edddc5a-54e8-465f-aa36-988fa79a6e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a4b3b8-eccf-4647-a3f2-abc78c7d52e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64671930-1b5c-4c6a-95a7-754e082e2561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971157e8-9e88-4deb-a3b3-699c738bf199",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21dd915-37c3-4f57-9d19-8107068ca76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff9dac7-39a4-42d2-aeea-dc380fbdb1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfce333-bade-4d60-8ee9-9b6d1b5ba340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb5655d-5c89-4cb6-a159-e40f999a09cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1b983d-7762-4efa-bda0-263d7459ed5d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410185cf-4886-45da-9776-ba7670d4b484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d36bae1-0562-4034-94a7-de48e118b01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c215252b-604e-4502-b617-e96d8d2af545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "942d1a2a-a16f-4001-952a-65a5c3adeb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c311b769-938e-4333-8700-f15d23ef160f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c405d28d-4f7d-4e5a-8654-fa2ba0853c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fed0e9e-bf80-4c8f-bfcb-9f5cb733b8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d37e99-d424-41fc-9bd4-aafe1c384d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b47b6d0-edff-408d-8c16-84cfb1d939ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2945a7-affc-456d-884b-0506c00edb0a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a04b05-35be-401b-9ac9-a95dcc68fffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3567acc-c7a4-441a-a1ba-501f20a883b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f16b2a-06d6-4377-9ef1-c237c384e203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "815f5e94-f419-47a0-a1e1-74dfe3112dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874f4223-888d-455d-a8a1-49100e830ff2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc7e345-2650-42a0-836b-79aeada4fe0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3513ab05-1a0b-4963-a039-104addf1b610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1d3c20-37ad-4a2a-953c-1625f3d8f68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0e0bc0-edbe-49dd-b235-8cdbaa14a4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edbe44a-daa4-4ae8-bafe-95adec199e28",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f4a140-8c4b-4774-a42e-a964e609ce18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca1b9cc-f2c9-432f-822f-19b5e1a41425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f4db63-cd7e-44b2-a1e8-61890f490b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50271302-239d-41ba-aab2-236a3c2b5ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04442085-a046-43ac-bfa4-c82a2c5e15b3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262580cb-fc43-41b0-a160-6dba2093ff78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3974d93-d4a7-4e86-afd9-dd960013ab94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e71c452-759d-4a91-9bf1-a2c44a1e13f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65616b78-e189-4d5b-a4aa-6d84ac676875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab88b3ce-9538-411c-915b-cd07624bf3d5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7548c6-8a03-4bee-9752-45d2982cfa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea22bea1-07d2-4fe0-a4d2-2d8801a8e735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13982e2b-fcba-4257-9dc4-f309717ba1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dea7d24-9d87-4afa-90c8-7d110ce6e225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f720f508-f648-42a8-96b3-e559dbf17de9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e83ec9b-1ff5-4c83-8d1a-3af524d5c075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fc158b-0514-4641-a5a9-42874915a829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e29469a-35de-4dc6-a922-02a1ec8987be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35423a54-a275-4dad-b786-67ae236be18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf24aa2-cafe-440d-ad77-8c40910d0801",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8266f9-02c4-47e1-b550-800cdff20a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9b1368-149f-4781-960c-d803b183f017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a458e3-a1a6-463e-9165-89f9f8dce120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a08bbfda-23d4-4191-a6aa-11b92922882c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fd7410-951a-45e6-9cac-0702092ff4c7",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a206d6-4a0d-4659-a056-71dbc4e10240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d528ad88-c529-4504-b1e1-8f435e2ee494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fee05e-3251-456b-ae9f-cc47c58bec70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0903831d-0a4d-4440-8d9e-89058de6a3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceab51f9-d024-41f2-9e3f-39bb7339c01c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc785dba-7ea4-4444-ad9a-74a76393be09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b00f7a-3cf7-4cb9-91f8-479f54bc8b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4d3a6e-5a0b-4e16-bfae-290b4573bcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4de340-8f0e-4e0b-b8c3-6602075c2db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3447ede9-9501-4d87-9a99-e4d2dc01a134",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761b0bca-65af-46b5-9986-f7366d5d9771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3e099a-e07f-4ebd-acf3-23b65ae73493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268b8ef3-f89d-4598-bd41-16501d2f81f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef47360b-d9b3-4ccd-8034-e348c883dba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387dca58-05c5-4524-b97f-a2ba078ea9b8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d00feb-2c9a-42c6-8982-54a86d11b4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1247e508-11f7-41ec-ad37-eca95a0377e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7939dedb-2d40-4fab-bd27-4f85c52987f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc47e2f-661a-44ef-8846-5355d5304f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bf7d35-e629-4747-b6e2-ae6594250bdf",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d0c049-9b63-4802-9d4b-83d6265c4181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6601b05f-2b38-4859-8f20-c67c87047272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdf3e54-2c60-4975-a74d-d163ec67b552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acfa0bfa-4a4d-4f99-98f8-07767f446de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7668dd8-a965-46c5-9cef-b6db890025ed",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3d9291-3435-4399-95a3-6fa0f5a86a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bb3c2f-837b-4074-ac29-78dc6f688200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0f9074-f6e9-4f34-a0c8-b70c5c4cbd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68f6dce2-6309-4b16-98b3-ded8816bd39f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8f4944d0-0e6f-455f-afb8-e24b735b5204",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3df54b3c-e9ac-482e-8475-3881a035ef7b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f95e5c-3c4e-45af-8224-e50d17c46bed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8528b757-7b5b-41aa-8c47-31444fd39afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a8f1fa-8fb9-4607-9eb9-157b059fbc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d10cbb01-f339-4750-ac92-8b0d61bd2a4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e098cd06-6cda-47d8-b7e4-2d950dc7c362",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7277c038-6a75-4bcb-90b8-1982a7d1c5bc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba3a6bf6-4c15-4000-a65e-4432431db03f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6c51e46-9224-496f-8882-9d6cce709be1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0875b4dd-7775-45ed-86ca-036871954b9d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a6904be-c94d-41e9-be71-1c2f35378203"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "316759b6-9451-4f90-878b-1c669823d340",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc4a0877-096b-4925-abec-27f3e715447f"
            }
          }
        ]
      },
      {
        "id": "5b0352e3-583d-49db-baa0-0c1e324bede7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ae427cc3-f85c-4227-b4bf-a2711f871d10",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db44545a-8504-4bc9-99e1-5851808d3558",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "947e94f7-f1d1-434a-bcc3-1a93f31542ae",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b2a32a-d564-4e0e-adc6-faa6893046d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa81206f-74c4-43a4-a808-9d4d2b1ce61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe77c38-1bd3-4924-bf26-783354d142b2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38513910-752f-44e3-9a61-d59fb99c47ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157fc6fe-ec1f-4719-a26a-e4600c7d711d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e13797-32c6-48d4-88c8-05c22534a348",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5853db00-1bc3-45ad-9810-5dc661b94172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021b2977-ae01-42d7-932a-1f114b83a6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2354c1e9-1157-4454-b32c-a30cc0b48c2c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5adafd1-54d4-4c78-84b6-7773dbb9dc09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43744fa5-5dd5-44b3-9c5d-a6a4efb6c645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165acf5d-2bf6-4bd3-904b-1185161ffb58",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9203e936-a14b-4fec-866f-5d4aa3493a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d0a41a-d85c-4c58-90a1-179de8bbc8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754220e0-aacb-4f63-9b49-9ca2ebfea89f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef84e085-9811-4048-a0f2-8cac3fa8abc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ab93a7-23a1-460d-9158-e03f8f5438b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05d0e56-eede-4604-a760-dda2a9385e01",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d49c7dc-5096-4abb-b701-3e3fa3dc88ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd5783c-0566-4a13-8830-ca6809053c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ccf823-e8d4-461d-94d7-ab647e509791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9fee72-be67-40cd-aa93-c11ecec1fb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10ebebb-be77-486f-acd8-d7748f874b1a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbb3dfd-24c9-4052-bb9f-c34a1f5a6841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b32582e-317e-4c9f-ab99-4ded54d892fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de01e1c-69cd-4306-9c92-345f48b2951c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82cae46-2aac-412d-b8d3-07389cc1e61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b800211-940e-4c64-a80c-e8e40af791f0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de12e513-19ba-4f24-bf8a-d6a7da2cc1b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "173d3660-ec2d-4584-ad59-cae27c14d78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87a03e1-ae3c-4915-9d9a-432c49cd0ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5561a960-ae38-496a-9013-616d0bede298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0182fda-e84b-415e-a6bd-62752491a496",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2cbcb3-688a-4af0-9b41-a8c04c586733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "203079e5-786e-485b-afb9-e1dce1100dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fa4287-109e-482d-a3ae-cb8c30400143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebde292e-84bb-4f75-94db-795a16dabe99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686e5bbd-b715-4715-a3a5-430ba95896e5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac71685-985b-439f-bddf-bdb7bd7eaa59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecb9c80-35ad-4573-b6f4-9fa5da7760b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c990e49f-27e7-43cf-9bae-1d40144530d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83973053-80c8-4792-be24-1b0743d16d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9946fd-f5a6-4f17-b1e4-76d2b318e293",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83489f1-0252-4de1-8f40-a82288c45158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc55609-1baa-47a8-883b-baae628ecb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f2affa-455e-44ba-9102-ecb73f285611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beeadcbf-ab2f-4b4f-ae16-ce9670abf3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b324120-1506-46c6-a623-06a2f5025323",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89441728-1b1d-4755-9243-ec78c79687a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a2e17c3-2e43-4c7d-bfb5-54e2397f8670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb92378f-54d2-4176-b6fa-c4e501ebfce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7559458-4915-4041-8cb0-03c590f3ff55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec8b825-3ff0-4bf2-a3bb-8b9e71bb3fc8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73776082-53c2-4f2e-9d54-62aada6063c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb094fd6-a322-4464-a448-9f199c0da3a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c699851-9642-46a9-ae30-5cae26fb04d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e3bb2c-b426-4f6d-aedd-810e42b80830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c589742-9f7f-4cfa-a8a9-24b237fa4ad2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b47f33e-12b3-45e0-a739-4ac741a9d38f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b63a003e-1f01-4b52-aa70-4135788ec166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de4f232-98b8-48b4-a57d-b1c9ec450e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba31f48e-7024-4109-a1ea-ae5f1007c12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2016586-4a3d-4f75-b591-8bc3b04293ab",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de127a83-c7b8-4a9a-b5dd-d0e5fdda84fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67453d20-9235-4476-bd98-4391852b69e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61f9927-7079-4b42-a193-f8e6ed1fa378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2293af-8efe-49a7-891a-d22bea394b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c349ed7-d498-4367-b590-db1226d1570a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6bd291-7eca-4775-8d48-5f65362c4cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88990f61-d44f-445b-973c-5638f35d11ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023dfa36-db43-48d9-a117-6854721d28a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dcb7c30-c8dc-4951-9aed-7d4ad359224e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a2a7e6-1075-4e1b-b67e-4960d3e3c404",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f71513-2324-42cc-b562-1a5d83c79852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298d7f96-3f88-4618-91f6-56340b77497e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2308308e-78b7-4365-b1ad-a5a0fd827d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899196f1-06e6-46b6-9bc1-c0fbcc2ff4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b741a6d-b45b-44b5-ae19-846397cd7197",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de61b8c-8914-4356-98dd-45863360db55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3128273-fed8-4f64-8f4e-782ac01fdf52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323f367a-0c01-4423-9a2a-fa790a9fd93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2251409d-508d-4f38-9a6b-4a14cef3cb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e945b2-74dd-4baa-a456-2d7a03090612",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc885256-18d1-4857-9790-84b3d1243fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70cd4d85-44e5-4c77-afb5-f959f051cfd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f689cc0b-40b1-487d-b8cf-26aaadefde2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4555bc25-2299-43c9-864c-8ec50da66c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b673f79c-8ad8-42f5-a861-e93af33b0828",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f737a48a-ae49-4794-92c0-12fb51d49944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131d6d53-ce1a-4686-b3a8-90bf69561fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3f4fb7-11d0-4347-a4fd-0c509863a166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66a6830-e369-4a9c-9d04-83c481aae830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190628df-1aba-43f0-b068-f5ec741a962b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e36d48-d4dc-41e9-a01f-204db388fba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74c5cb6-d786-44c3-a840-faecb9bde304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8531155b-8a74-4198-afbe-d244eea1b7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "367c513e-354c-4f9c-93a6-ef79a06490fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60104d05-a1d2-4296-83dc-3b685f3ab7ec",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fb79a8-eff8-4243-91e0-e334265243be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066b00db-a465-4d39-b981-d9df2657db43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45233d4-d4f7-4eab-8fcf-608a1048f7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe54643-3083-439d-9071-7ec98de5ebfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bbc036-f7f5-4aa2-9896-e03a2693a10b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426ca771-69cd-47d6-a4cf-08ed697330f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67cb50c1-8490-453c-bf92-ecd8da9f08a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14877b88-075e-4dc8-9c5a-8a07586aca11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21873253-73af-478a-880f-9e40134aee58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0ee2a6-9efa-4ace-9dbe-8372962c1c92",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e43e34-97bd-4ca7-b510-c303592d1d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e2864f-d5a6-4947-80a7-f656061c7e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "438e18be-7f82-4625-90d1-d998ed15a238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b56b683-d316-4b98-91a5-053e929bc94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18edf647-4476-42ed-9d5d-9f6c068ebe1d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e509e25-3472-4b52-819f-58a60d02658d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caf4fc78-a205-47c5-9ccf-0ebcbd7c7135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7b3a10-17bf-4403-8ae3-bff89ac671f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42020a8a-66e5-4bb1-a01d-52cafe2563aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2f35dd-fc18-42c9-be7d-d6b43a1aef71",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e0b49b-6ddd-4891-b783-88c5d3979a94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4dd28c7-7afe-4be5-aa9b-ba60fdd0d2a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18324190-de0c-4e19-bbfc-8083bdaf970f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cb40b3-6a5a-4c20-832d-e451257fd113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec858bc-0847-4da6-b9ba-87ae8b152455",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db53e10-5ffb-4765-af17-6a21acae2b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51e6b0c-125b-46a0-99d1-f113e2795523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c587265a-8a1f-4e31-b0b2-eec05110d2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabdce92-c8af-472e-a2fa-6803f69057d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e126852a-f1da-4792-bea8-47f83fb4c9eb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa118e0-9558-480e-a849-2163b3365a1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f817d26-bab0-4b9b-9793-cfa681c533c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec046cdb-092e-4f2e-9b54-5f7e1ff11848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e44f0c2-fbe4-46c3-8296-886825082e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc0f172-ae5f-4448-88a9-295f00968b3d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ff68f5-f2d9-429a-a005-e0a4755c1389",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a884381a-fb3b-40e1-9019-6c33edb771d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450be995-f09a-41a4-8f6e-9527d3b38567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0069ac-af61-4c6b-84e8-8e5d476b9b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783a0959-2720-42a1-ad7b-7f5362d56219",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bba91f-9f9b-4224-9296-ff3e2f9c4d9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb6b08a4-2140-4e9f-aafd-d76d0e1ca8ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b48e795-2806-4851-9e83-3758bae6beea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b4d2c4-5dc5-4ea1-828e-f8922f3d04d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc788cd-7fc6-4f45-b058-d78bdf884834",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6bfdd7-27ca-4935-9468-beee772f72b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc21277d-696a-4595-81cf-761654557da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c609de74-b260-43ae-90ee-b9ead4c2cdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69126702-adab-4517-b485-297c0ff8c756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a9e471-c0e5-4c39-8494-9501b25409bc",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee4d03e-448b-44dd-9f8c-3e36e44d319d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8728e3e2-2b02-46df-b3d0-bbc021cef896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de7a147-6bbb-4ff2-9bf0-878baa7153dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09408c55-443d-4a68-b73d-0e418c355e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fb939c-5b22-4a68-8397-1687e96a020d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb7d0e6-4971-465f-b5fe-691ab4c532b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d8a13c8-285b-4a03-bd7f-24cf7cc3e644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb294b2-6da5-4be5-b541-38074b6afc86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5415ddf7-19cb-4158-8dd6-24e502b3f203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8b1a97-eb66-413c-93e0-be8350f97174",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0adefb2-3d1a-4911-840a-f932b9833c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd007f69-6dc7-45e4-a03e-6f5d73e8d88b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94656d1-8664-4cd3-97fd-ae54435b2ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732a1b2c-83ec-40e7-9c40-b45cf287f247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768da605-9afb-4f1c-956c-3330f041346c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f72a22-187e-4da6-86af-291728e1e992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19542ddf-27f6-4515-a65a-895d1bfa1419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd561d1-074f-4a18-8a6a-c5b09be8f9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1908e7-7d52-4296-b6e0-bf2ea2bf9ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54eff6e-f224-4c1e-8f5e-04c618c01834",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5396ffb0-f2bc-49f3-9269-aac82ca4198d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce92460-85af-407c-90f7-81620d492b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c2a4a6-034a-41f4-a21a-495cfa0fae23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f01b47-4ffe-4cf8-b6a8-44bd069743bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aedfff-04ae-43f2-8f1f-bd505cb55377",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813515aa-f87d-444c-b43e-2bb0a974554f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb97e85-443a-411f-8ff3-10eeb5274522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea656ccc-3c80-4614-a6c5-504bd2bf20fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dd2f54-c7ba-45ee-84da-1329a8560aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cd8d8a-b534-4d7f-aa12-36da22270d9e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3abf191-adf9-4108-babc-353f2543003a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbc4e15-0aa5-4d34-8a6b-94588ab18f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97203bdc-ccb2-4b63-91f7-cc943211390c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8b78bf-15ad-459b-8b73-47eac3dcdd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699f4079-74dc-4541-b182-43db5aef31a1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030de9ca-562d-4b50-aa6e-5c10d0b97ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0cc91f8-2c0e-48c5-b4ee-51bd5cebfaa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8473cc8-e07c-4eba-b8fe-f863cadcdee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b59075-75aa-4afd-9162-b1864444fbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a131ea-a7ff-46e1-ad99-632f5290c654",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ceb25ad-f01c-4a6f-9dc9-e29040571d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e90b4f-4c2a-455e-8a6f-37c53622b170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23152e5d-d61d-4269-b4ba-4c83d0c3a775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7177a7-a5c8-468e-81ca-ac814db8f8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6edb874-da7e-4ad7-8008-79dd5155f866",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7b3e2d-4cf7-4290-91ea-6ae8e1a9da4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1fa525-fe1c-4c6a-8d4f-c58c46a49d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63f0709-7e58-4c6d-8aae-256aba768866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e72c8b-10eb-488a-9a30-e1bdb1858377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aee66cc-4cfb-4796-9a66-733726d04cdc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d203c2e-54a1-42fb-8e53-782937489ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7b16b9-dd44-4a60-88db-45e6fc3911ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fdc64e-2149-48c5-bd90-80d421c31961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94db7702-4244-455b-9a46-82c1e8b92b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a62e2ce-6d54-4fbf-8d0e-7b2abb8c985f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5352126-cb82-40b6-8c02-66deee39cfa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae1a3f1-6aec-4e61-91be-34204dc27c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac648149-a563-4815-a612-49243387def1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08b1efa-de33-4af7-bf9d-3390d08a5417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eadc208-240f-4074-bb97-0bedf26a76de",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158a387b-133a-420d-a603-dc5e768d82c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3de56c0-8f87-41ab-9b22-47801bde6ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c75876-9323-4222-8ad1-cc0ae4d3bcf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89489fa7-5d4a-4857-9fa1-3e59d80034b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faeb037a-5f23-49e5-b5a3-5f2782944556",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc5896d-3aca-4a2b-8fff-8de84668a0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98aeeb6-1490-4e87-afb5-dba05abf5bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6763290-3d20-467c-b1b8-32c47df41a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7edafd3-ef76-45a8-b5e8-419c2a035ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad0d7f3-8db8-462b-9c81-098eea48c3a0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bcee62-d2b9-478a-a90d-6f89a2fce0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2930301-a5b2-45f4-8f1e-38ac8764ed6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f90166-eee1-4ffc-9513-07dd8d5f302c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5164ac81-6170-4ed5-bcd3-a33034075571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e4469e-aef6-475a-afe5-88eefaa80d9f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b4ef03-f46a-46f5-b0ba-3fe246845d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81358e29-34f3-42ec-be68-038cbd521c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2937631-d2ca-4425-84a1-ac10b6209820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bd95ac-68b0-4195-8ca9-fb46563206bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707e9dd3-fdb7-4e81-8a16-eab77b257880",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b2d2fa-b0de-4244-af59-8f1ada137013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16f9a60-7b6a-4b40-8d2e-fed259ba4fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f556743-3d3a-469f-a46e-7c2e74d507d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8dac3b-8c93-4a67-9d68-1f322070557c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9cbc114-f37f-4efc-99ad-1188e0564799",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be243964-7b5f-4962-9f31-bb57217ab5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6543890-cc21-406e-adbc-30fe50f5336c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4f0531-2c57-419d-8966-90a008a16fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3ed54e-70bb-4cc6-a17a-eaba09174b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620f4f31-51ba-407b-953f-d1ad4d68eadb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fedfd7-da90-4f68-acba-f770cbe5ddcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c65b9b-4969-499a-a774-08e5022b3aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae80485-8962-407f-80a8-e393cc7895e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25da933-70ec-4506-b976-6ff7d84cd5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8d381c-9e9b-438c-a861-fba8f649eb28",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e51cf1-adb0-46ca-94b7-eefd78775661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a4599b-87d3-4619-8c8c-988335f4f715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ae5a30-c3e8-41d8-a1f4-7563eea460d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2c8b4f-7d25-47ce-bb08-46a4cbc6f711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d419882a-d9e0-4354-b5d7-e34e59b7781e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb0dc6a-1495-46c7-954b-2052852c99e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27165f4-befe-4225-8970-fe6f88660ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fdf4b3-1caa-42b4-b47b-b40683efaaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda2a180-b174-41bf-b35d-5686d9d5f86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb18159-d532-422a-abab-878a49b5eb4f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4cf372-ed4b-44e0-9208-b86e2da0fec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5002eb-3e83-4d18-896a-3574470a3b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab301e81-ecb7-4639-b3ec-6fd87f061d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e27fc60-bbe4-4d96-8905-913d794fcde1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f60fb72-cd1a-439d-b610-dfc356fa4df0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e94dd59-32ec-44ae-af47-408701f2c172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a65b59-c943-491a-bd48-f4169d9171fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd643231-8168-4fce-a8af-e1da28bf9a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01b7b66-c45a-4248-844a-c7cf95947c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626ae601-7dda-41e4-80a0-49d137605f08",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78be8126-f295-4846-a3f6-7ccbd1b706a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba77647d-f980-4ed6-bb62-beecafb6e190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83addcca-113f-4980-89d6-7dfcb5484219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b427bf-416a-411a-b148-18e1eee4234e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df5e27c-e469-492e-a0c3-cc5c34d317c8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7595f1-64ba-44c5-bc08-ef369cf6479d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1b5df5-932f-4461-8ed1-55359113903d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "199f3210-58e3-4d38-ba2e-3a7ce7cf6556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e970864e-fc48-4f52-8fcc-81ef0854b8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec632ce-2576-4421-99f6-648da5ac389c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995177c0-aec2-4171-958c-116c9689b003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7e8abf-3e99-468e-b9b2-94270a898ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7311a5d-5dee-48ba-af63-06fd47a43dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad32f76-835e-41f4-bcc4-d1edd8966463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018e812d-c123-4b19-92a1-c30d0545eeba",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbebf3b-fc89-4b5b-bb25-8f069db44e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80606199-7cbb-4291-9796-469f3b9409bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb02227-90cf-46da-9e1d-3fcdd712a07d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b67138-0d4f-44e4-a7d5-03a96796f6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a40d90f-ef4a-4b3a-9fb1-93e51462eb63",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d909f7a3-f93a-4a6c-891c-91101c240ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dde8b36-ec51-4acb-a5c0-2ae8d6fea287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da51176-f427-45ce-84fb-544bb8357f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaae3fa9-9cb8-4992-a38b-191f0986482d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7661ab06-07c0-428b-99e3-c733f690301b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb3bcc1-eb5b-4160-b621-d4ce340f6907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfaf1cc9-0281-4e9c-9cc7-22544ff1a7ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2247ef-742f-4f3c-87d0-c5881c19c70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d263844c-0c49-476b-93b5-7c7a9b44aec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15591fe4-8268-49fe-b269-71b7de918039",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf289e0-12ae-4184-a125-f4fe9a013bc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f22dba8-775c-4fc9-ace4-e5dffc81f158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301d59fe-ffb6-4155-8230-7515e0c9133d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af53610-41db-4299-881e-32c2fa5f23b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b318e5-18dc-460e-ab13-645961641a18",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a9f077-a375-4412-9697-2cd9623bac6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1df23e4-da76-4577-83b5-e0b4fd6e3cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3833fbe6-7f12-4c31-8b6a-e853908bd76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5686c3-fa86-4eb5-b3be-c79cbb6e9399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d57b95f-16d6-4336-994e-4ff0905815d2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393e8f59-e542-4fe2-af40-102c902ee3e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "027baee8-63cf-4b04-8018-9ec62887a6f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1210d7-8552-4ea0-9233-516e1733248a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e20b72-be31-48da-be64-1d44eca4e122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8857e25-2ae2-434b-b58d-7066dca6fe6d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27502d99-30b6-42f7-8e7e-576cba86fdfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a34f807c-b22c-4ea6-af24-0fc0c8f35f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd2fd63-f7a1-4337-b0d5-fdeb1f1696a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0136f701-a6a7-4d71-97ca-1d99a4a2ab92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea8a321-31b0-4959-b313-a47d745833c8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab39672-b555-4a3d-ac46-3847ddd6f015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1727a6ca-11b9-4b7e-92c3-c46f254ae89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950abd7c-6d6a-4820-ae26-eaceec69a438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecb0c9f-fb75-47fa-90c0-d6dae139812e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d112cc-8cdf-41e7-8d57-22eeb9698a07",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7029e15-7de7-4095-af05-285c3d0178d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5b0a2e4-64be-48c0-9a26-ec2f26c200c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "135d036a-bd5c-40e7-8f17-ae7b15bd9b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848f0b02-2f6d-4c6c-b80f-00f817ecba67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf7142c-c062-4fef-85c0-ab1fa8ba47f3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6060bfd4-daf5-45d8-9942-d40a09573b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa42bd13-b6e3-4e35-a731-0200a70dc854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef5a37d-1f5d-42dc-ab5f-58e51ad131b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef211f4-1b8d-4324-b119-3ba6ba1f6a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e88952-2b1f-49aa-9e78-4137f05e2061",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158c4058-60e5-4cfd-9245-f36fa7bbb8dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73a8c136-6edf-4632-9a42-56b4be6d0fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf4f236-0665-4cac-963a-1f1e6cbbdb37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4338a18b-7bb6-4295-9b42-65d235f9df2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ed22bf-17d9-47b0-9794-af8dc555bb6b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b81873-eaed-4844-ac35-affc480f3769",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d48e06c7-8886-41c3-a069-a69a49a2f216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa21ae6e-b18d-4105-969f-d9b8dbe900b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1092721c-a985-43a0-8be3-4aec1330f7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807447e3-6205-405c-800b-b0f7f25fb25d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28094b5a-7ddd-4563-8a79-43ef4883f0a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5acdbd92-7a9c-4b3b-b3d4-df2b434f562d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798b27c3-dc1f-4bb2-8160-f3a1dacc6985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76be13d0-c37a-4afc-8d30-1ae0d7381a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35b4f82-1a4a-4a9e-98dc-beb52d533583",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163dabb2-da09-4ed9-9371-d3acab5ae998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39931e9d-a91d-402f-85f6-4c9e8921f705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745085d8-0d59-486e-8e55-990cf225b1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cbae17-dc51-4a13-8f29-2f3a4b74e4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971cce8e-92ca-4012-91d2-d2602365a56d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c28183-de44-4f22-86c1-68b4a80bd3c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d158c4d-be0a-49ed-85bc-a17bf3def565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fc9924-7b25-41aa-ba4e-68f3e73023c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f1cdc5-ab09-4633-9f66-5aeb89b71bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124f6d67-28e6-429e-aff1-e582b544540a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9364dad6-cf29-4e5e-a85c-434e341dbd80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd06572d-6b36-44f0-964a-0266ae7e54ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5243eac-1144-47be-9397-59e3f5b7da30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e776cbb8-2dd3-4601-83b4-3fee10f53475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84105801-d809-4c95-a1f3-d9923cb9768b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e27ce05-e98d-4722-942c-48a2ab5043cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b953d3e-c13d-413d-bd14-ddb3566cfb03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73143511-c80f-4e60-94d0-587beda05dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3215011e-3267-45d2-81ee-56cf4f27d251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddcf0351-4766-4573-8cd0-7d1728610d11",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c758ca-9ffd-4815-90dc-08477c9bf429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3c74da2-354c-4dd8-9013-05599c5e32e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6366e357-ac12-4d0c-8b94-66a481931750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb63fd9b-7a7c-48d1-8a42-cecf83028816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08203763-21e5-4cd1-8c23-6f6be6f902e8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1cace9-df17-472c-934d-bd85f9e9b861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e43afeaf-2fdf-44ef-bd4e-2f57657d04fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29272b8d-1d53-4ba7-8e10-393cc47db54b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e01da8-06fd-4b20-8a6e-4b136c0e157b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9176673f-fce1-4ab7-bd8e-da7875c23618",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed4c99c-6d21-47e1-b05c-3ab7e4098d6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c09e0f3-66f6-4a64-96d5-cdec4310dc95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51044ef-d874-427c-ae2a-14c676c5c39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b5eb06-82fe-4c46-898c-a87e06648ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e160380e-3898-450b-81d4-7472763f1e0d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81a9ea1-93e0-4f7e-820d-94f36e5b42b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18dc4525-51d7-4196-90d7-fb1ae7059559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e43623a-2f04-4e21-8841-6bec6d1438ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be2710e-e08b-46ed-91cd-caccb2278da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3646d1-574c-4a84-9f0a-862dfdacf5db",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fde8358-f497-4467-ab7c-ecfd75646c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c7abbe0-67f4-4261-ace5-429b12ac0b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cef55c-a9fc-44c1-a020-2d3c814a66d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0c658e-987c-4634-8769-5c01b9a295d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0ee2d7-99b8-4884-9e43-0291124a2f47",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2c8255-ff0e-47f0-953f-e3fca1f18112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2fff7c6-1d14-4c05-8435-de719f6ac91d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "680643b1-0b1d-43be-a2a7-a41b66c7bbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626b0ce3-af0b-4f19-bd0f-21552ddb4b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3e79fa-9b29-4fa6-968a-1fbaa85748a1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbe188e-41aa-421a-bfd2-d91c18923107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f85a3e-ee60-45ac-bd78-b529b132954f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45c04ae-41e9-4769-a13e-80001a3547d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc01f25-347f-42bf-a5de-4101f723044f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e3fa39-9419-444b-b218-b7ed5b3eee45",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0494ac-12ed-41a1-adf8-1643a778664b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c9e1c98-4d7b-448d-8d73-f7fce97b9aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fe82bd-2722-4554-a886-4ed49cabdc9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066d92aa-76d5-4619-bd2f-cae0fad20c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2d028c-cc86-440a-94c8-96b4ee124b80",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03af54cd-12bf-4c27-99c2-91bcfbb20989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d92d37-aae3-4fc8-9a91-e0b316bd5011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0491140d-2a79-4555-b9da-bcd196a2042d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f387a900-b899-41e4-8e77-b129ed081218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6d8b41-641c-4fd6-84c9-4ab840c8625f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6fac9e-1046-418c-a8cd-6b6e221630c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a580cd46-f9f9-4859-8f61-26f45c327e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cefc2d-b796-4de4-8c15-1fe69bd14e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625889c3-d6ee-4aa1-85c0-add7fbff8944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687ab791-2fb6-42d6-8acf-cf48722cdf91",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5f28d9-2493-47f9-98c8-6cc09c3216e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c965fe-fc76-4529-a815-612086ffbecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44734a7d-373f-4c06-be11-06e174ec1786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdedf837-4987-409f-91a7-cc63e52ad5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcb17d0-cc1c-48e2-9975-d54b162beef6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b287a636-5903-4d92-9a6c-07c99fe3f2cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a0d330d-76a8-4078-a28c-134b011ad574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea7b358-23e2-468c-a39f-302b1482fab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f444a2-0ac4-4d26-8817-d0d91caa0dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d208fbc-ff55-4c4d-8c80-e9a6abb2a3bb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc94704f-5900-412f-802c-84e55a256285",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "059dd6c9-0aee-47ad-a08b-dfcb8d538a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc845eae-57a3-4186-97bf-d51b2d691ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7e0a0e-1200-4254-8204-c5fb93e3d720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66e1f5a-5861-4ab6-b0ce-e6eed6b6be88",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39974791-2a03-4ec1-a6fe-6dcdf3fc7a13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00b277fa-4a39-4b52-b840-3af5c5c8d830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce5869e-8430-45d9-9580-58b96f128ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6eea9a8-11ae-4280-a792-67d8293cb9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ab519d-8fba-4835-b19b-458820e44bae",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e4efed-61e2-42ca-b3b7-bff4c08f0c08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71d76d2e-bac8-4ecd-810c-95a91bd44da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b51f22-7721-4216-9039-b8db25f2e2b2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74db5f1-4dbf-4f5f-918c-3e04e7ac7216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb376860-6cfa-4fbc-8b6c-6c0e6f977d8f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2eb7342-0854-495e-9663-74e98d2b531b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9141230c-9b74-48ba-a9b1-bf82ef515dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b29f49-08a0-4c3d-8edb-2325c4587554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5264ba21-1f3e-45e6-84dd-aa7f4bdb48b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c53ae3-9766-4925-a70e-dcd1582ad544",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70391c56-9ef2-4beb-a5c7-9e17b84b316f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c32237e0-c34d-408e-ad7e-cf0c935c1d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffc6551-d08c-4012-858e-060bca99c22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b98cdf4-c9ce-4358-8193-2b39f01627ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46168f3f-b6ee-454c-be2e-2a45fa8fd881",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8c5fb1-1691-452d-bb7c-a87b01cf05a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b9e489-1523-4a0b-be4f-34159cee99b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2ac250-03e5-4a36-83fb-da7203b7fbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3cd46e-a014-4d1d-b9c6-11dcc3e86cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8259bfe4-6ccd-4ca7-af9f-fd778831dcdc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c9d827-acda-4478-bf96-a357e54b1e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df74fdb1-2d6d-441c-b378-4d9ce2f3b377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac5c9dd-3bdd-41e9-9bb4-eb8b877b3292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d657cf81-7bc9-4dad-8cdf-2670eb323987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78c49d0-a5a3-4947-98be-bb7a4df992a9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e36e2b5-2b87-4e8d-bf2e-a3491b1f15f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e080869d-f206-48f4-b155-cc06334f270b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d2e0d2-a1d6-48a3-a31e-2cbe5781d5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616b8120-e197-497b-83fe-bdc0a6ee7f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e29ef3-7108-4665-8042-84a6273e7eea",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4696618d-9185-4a8b-84f0-ec43406af6f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd87e879-bba9-4afa-9f0d-9f7e42c5014a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2078ed-904e-4663-bd11-49ad87d0167d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df809a89-3812-4a6e-9ca0-a0d88096804c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f4a44f-4cfc-415f-bb1a-d0caec90b99a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b648154d-34fd-4d24-96d4-aec4c8a95947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fcdc1a6-0979-4de8-acb7-b4cf67627682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294eb672-f7b1-4910-8a20-5346b911c552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdf9320-f847-4378-8803-cf20665adb07"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8de52262-e3b3-4905-acdb-3326b2a326b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7153f5ba-90f2-44cc-a90f-6681b930d9e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "764f7b20-646d-4d7c-ae03-d05850aa3710",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3f688f7-a4eb-4728-9298-5eff42210943"
                    }
                  }
                ]
              },
              {
                "id": "9d233ea2-0217-49a4-a393-de1c22fe3097",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e2f0e66-8e34-42f1-8d42-518c1805c891",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a19b3ad-ac49-448c-9ef0-c7a4faed6e5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6cb67530-ce03-45ec-aef6-2010d0861a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a6a778-a9c0-4ac7-9aed-3102e4e29f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef820d2c-0195-4c6b-9664-2f666a1934f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d11c9d04-4131-4885-96be-5a5c2a591844",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06baee23-002b-4965-8aab-3e08e12c6574"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b58355c-7740-4c85-8e4a-52fb4e554596",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62fd6104-9dd7-425d-97d6-82dff97eb25b"
                    }
                  }
                ]
              },
              {
                "id": "41db2bcb-46a4-4b8d-89b4-e4d817227383",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "20ebd50e-2948-4492-b906-8ab8c22b8009",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2aad79-4e9b-47b6-90f1-be84245a54a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7a11078b-314b-44f8-a9f7-8f7cfcef2556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea659d91-b796-48dc-87bb-a5d10da34007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7db8d8-0f5e-4fd5-b1e8-2f9529f57e68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2ff35ae9-a11b-4d93-9af4-ef7c7063123f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "15f2ed47-953e-49bc-9f71-bba800c6d1a0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0704b70-2a06-4aca-8d09-f9293b92f484",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9e425050-9a41-4e1e-b381-13206c7204bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "776c5e8d-61e4-4938-b5f9-48a81987900f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3f824ad-9094-4f6c-b50e-3f8c6255ddc2"
                    }
                  }
                ]
              },
              {
                "id": "3b256ba8-48c6-4738-a217-c1059a804097",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd13bccf-8d71-473c-aeed-a39afd0e0cea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f52f7643-0668-4ebc-9ea0-8b0893f0819f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3af921d2-4f86-4bce-a868-fe9176720db9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78a803c5-de38-4f8e-b90a-b6f8d7cb69f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "454dd218-f072-4917-b862-5ec4efb560a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "07900c32-6e8b-4dff-af05-34b7ea9cecc8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f34c975c-5f0b-437f-b6fc-4203a7262d62",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8e8e0fe-a672-435a-9d6b-dc4de296935b"
            }
          }
        ]
      },
      {
        "id": "b868ee59-778a-47dc-a27d-eb763772104f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "efe83fe2-a481-4926-a418-0b521d41b44a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2bf725b-28b8-48d4-b119-b553ed2bed46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e009afbb-c4d9-4363-bbe6-21e4baeee006",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9889e9a3-9cd4-4597-b12e-20edcc8ff5e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a48d5f0c-4ebf-4950-aa48-b52c1c9297c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c5859c-c0e8-4858-a617-0d99c64710a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84cd303c-5249-498d-aaf8-81887736ee72"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2521a289-e022-47af-b8de-306e0aa57a15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3233578c-489a-414e-b7b7-819cdab7ec34"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be41d8f6-dff6-4010-aea0-a9077a046d7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5608aae-e470-49e2-8625-e36d0c023c3c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fb7d272-b4db-42c9-a77a-88f2da69354a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "31174c39-3475-4431-bade-f611ef221b50"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f118e3b5-3f8b-497a-8964-7f6724fd2b74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8dc87db-39bd-426e-8a01-caaa6ee8b45c"
            }
          }
        ]
      },
      {
        "id": "e0c84f9a-1a30-4773-9b65-bb114f9e73c3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "79bcfe5e-42c9-4d42-984d-ed38ce5f5c47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f48d453-29bb-49fe-949c-4c6801c39752",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ca3e869-66e4-439f-a907-ac5c03525394",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a58c5dd-cefa-4154-8265-701fc0d26603",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4feed565-dbd3-449a-8b10-35829d8886f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecc9c5a-d061-4ab9-a0d1-1a6b7f760aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6e90dc8-f7fd-4aac-b7eb-56157cd4d63f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a8ec9b0-9994-4d5b-b974-bc98f3084fd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a35d359-93a8-4cde-a865-560e0ef48c77"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf145b99-2ac0-4785-acf4-36754889582a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57eb2cbc-8095-4ae3-9b15-44bc3f2d04e5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3bda2eac-0c54-4f26-8f15-90f6be2d3d6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cfe9d6ef-2e9a-4da9-aada-8dde5b7af411"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f5e7d27-aa3d-483e-8a8a-cbf06fc655d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8149de4c-6a5b-4b10-9418-a5191b7c26aa"
            }
          }
        ]
      },
      {
        "id": "2b444c3f-6538-4417-aa91-851edcdab70c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "afeb5018-2860-48eb-8500-bbe772258469",
            "name": "Negative Testing",
            "item": [
              {
                "id": "915566eb-1258-4a2f-98d5-7a636cb346f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4b4b4c9-b937-4350-847c-8c4303889787",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f866a87d-61bf-4711-9b9d-08b1502b1009",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0f05bd6-eab5-4fad-bf47-3309440cbba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d6260c-da80-4692-a73f-fd3b68ed125c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "831a32dd-e188-4a0f-bae8-7bf095747ffd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4c1aeb2-4d8d-4230-9a1c-a6ad672361be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b268233-863d-4dcf-85be-1776b40dbeaa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6eeaa97c-19e2-4713-8bf7-da2fb33b4e35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fe1eb99-6e4f-440d-8ac3-e82d5329a94f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a8b8d64-b4ef-443a-8a86-354381b7b81a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "90c35b10-d6d6-4130-8d93-63d157c9d7e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2beeba9-bb86-4470-9012-24c68daf61ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a73e5b38-b5b4-41a3-a505-7290c9cd3e33"
            }
          }
        ]
      },
      {
        "id": "29280620-556a-412e-83bf-3618fff84aca",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b57bf14-97b8-4b59-8e73-134a940c86c4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edf75631-096b-4795-9137-1d65be645611",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "335ea796-a1ae-410c-933a-1acb14e9288d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4faa3e03-4eac-48c4-9e29-3f6301b4380c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c6fa742-01d3-4d5e-af16-2af5d2a882e1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 86.41134751773049,
      "responseMin": 20,
      "responseMax": 904,
      "responseSd": 38.51886724249803,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707870847307,
      "completed": 1707870905841
    },
    "executions": [
      {
        "id": "b93fad89-4396-4810-8451-bb9abeb23de0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dd7c664d-b864-4673-be6f-062dd403cc08",
          "httpRequestId": "00d4ed30-fd81-487c-8aae-ce53819ae5bc"
        },
        "item": {
          "id": "b93fad89-4396-4810-8451-bb9abeb23de0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "42fbb508-14cb-4ec2-ab45-3888ff43639b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "28002205-b011-4aef-82cc-3a02b5977e16",
        "cursor": {
          "ref": "b28da6ad-2c28-456c-8ec6-17b6387e2c3a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fe25d2df-da0a-489c-9f18-2d8d7af2960d"
        },
        "item": {
          "id": "28002205-b011-4aef-82cc-3a02b5977e16",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "de6c6b84-74a9-4924-9077-7eef20f88e10",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "438a627d-b84c-4890-83e5-33ae550b7cf0",
        "cursor": {
          "ref": "a9efc1e1-4cd0-4508-8c3c-daa43e3120e3",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1a7b1512-3db2-4602-911c-186157c930dd"
        },
        "item": {
          "id": "438a627d-b84c-4890-83e5-33ae550b7cf0",
          "name": "did_json"
        },
        "response": {
          "id": "ca0fbec9-e090-4f35-adbb-5b3cd3ebcd21",
          "status": "OK",
          "code": 200,
          "responseTime": 904,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f5b997-6795-4fb0-93d7-b366be12d115",
        "cursor": {
          "ref": "35206da7-baa0-4f41-8f8b-e20ced3be711",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2ceb04c0-8962-4db8-b202-f7da4b02c681"
        },
        "item": {
          "id": "66f5b997-6795-4fb0-93d7-b366be12d115",
          "name": "did:invalid"
        },
        "response": {
          "id": "5793e192-dee6-4c24-8eef-c82d4d4477fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f5b997-6795-4fb0-93d7-b366be12d115",
        "cursor": {
          "ref": "35206da7-baa0-4f41-8f8b-e20ced3be711",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2ceb04c0-8962-4db8-b202-f7da4b02c681"
        },
        "item": {
          "id": "66f5b997-6795-4fb0-93d7-b366be12d115",
          "name": "did:invalid"
        },
        "response": {
          "id": "5793e192-dee6-4c24-8eef-c82d4d4477fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b33998-cfa9-43fe-9bdd-4aca428bfd84",
        "cursor": {
          "ref": "e3137b9b-5fef-4f1b-9b50-d37902ace47d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2f11d01a-9f44-47aa-8d1c-1fe23b1064f9"
        },
        "item": {
          "id": "c4b33998-cfa9-43fe-9bdd-4aca428bfd84",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f5d7568b-8c84-43a1-a99d-ffe6bc303079",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b33998-cfa9-43fe-9bdd-4aca428bfd84",
        "cursor": {
          "ref": "e3137b9b-5fef-4f1b-9b50-d37902ace47d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2f11d01a-9f44-47aa-8d1c-1fe23b1064f9"
        },
        "item": {
          "id": "c4b33998-cfa9-43fe-9bdd-4aca428bfd84",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f5d7568b-8c84-43a1-a99d-ffe6bc303079",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca288e1-0b72-482c-bfd8-a44833453f0c",
        "cursor": {
          "ref": "9e272fec-09d7-4839-b9b6-946b445b9b23",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f482517d-c897-4e92-94fc-d733b0f5077f"
        },
        "item": {
          "id": "0ca288e1-0b72-482c-bfd8-a44833453f0c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a2b571d5-8624-40c9-8894-e385737dff03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca288e1-0b72-482c-bfd8-a44833453f0c",
        "cursor": {
          "ref": "9e272fec-09d7-4839-b9b6-946b445b9b23",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f482517d-c897-4e92-94fc-d733b0f5077f"
        },
        "item": {
          "id": "0ca288e1-0b72-482c-bfd8-a44833453f0c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a2b571d5-8624-40c9-8894-e385737dff03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f6d825-a3b1-4613-8f2d-c7a5b1e351e1",
        "cursor": {
          "ref": "40c9cd9b-5f42-4a2d-a5e1-d35cca0c3f2a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c7b3e702-5eb7-42eb-b3b1-d84ee1e120a8"
        },
        "item": {
          "id": "78f6d825-a3b1-4613-8f2d-c7a5b1e351e1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e7758ad5-d165-4348-b4cd-7dd9e87dfd66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f6d825-a3b1-4613-8f2d-c7a5b1e351e1",
        "cursor": {
          "ref": "40c9cd9b-5f42-4a2d-a5e1-d35cca0c3f2a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c7b3e702-5eb7-42eb-b3b1-d84ee1e120a8"
        },
        "item": {
          "id": "78f6d825-a3b1-4613-8f2d-c7a5b1e351e1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e7758ad5-d165-4348-b4cd-7dd9e87dfd66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e19dc9-5717-4860-9422-fc7fd9ac243d",
        "cursor": {
          "ref": "bc2c2bf8-330e-41b8-a4ae-399e047f7b0c",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "289f9a85-fa08-49c0-88f6-5a2b5171d1bb"
        },
        "item": {
          "id": "10e19dc9-5717-4860-9422-fc7fd9ac243d",
          "name": "identifiers"
        },
        "response": {
          "id": "29f4492a-7771-46a5-a410-6554134a9d39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "10e19dc9-5717-4860-9422-fc7fd9ac243d",
        "cursor": {
          "ref": "bc2c2bf8-330e-41b8-a4ae-399e047f7b0c",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "289f9a85-fa08-49c0-88f6-5a2b5171d1bb"
        },
        "item": {
          "id": "10e19dc9-5717-4860-9422-fc7fd9ac243d",
          "name": "identifiers"
        },
        "response": {
          "id": "29f4492a-7771-46a5-a410-6554134a9d39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e779bd7b-8729-4c5c-a666-4d1afd39580c",
        "cursor": {
          "ref": "97ff2801-7cb6-448e-af22-2b61a8b7d0f3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4dd3bbc6-732b-49f2-bcb6-26d73b726cd0"
        },
        "item": {
          "id": "e779bd7b-8729-4c5c-a666-4d1afd39580c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e7b7ad6f-42f4-456a-8ee6-3cdf3f1cfd2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e779bd7b-8729-4c5c-a666-4d1afd39580c",
        "cursor": {
          "ref": "97ff2801-7cb6-448e-af22-2b61a8b7d0f3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4dd3bbc6-732b-49f2-bcb6-26d73b726cd0"
        },
        "item": {
          "id": "e779bd7b-8729-4c5c-a666-4d1afd39580c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e7b7ad6f-42f4-456a-8ee6-3cdf3f1cfd2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39d8d70-3aed-4e86-9d2e-5a204c51ba37",
        "cursor": {
          "ref": "f7b8764d-2617-4e17-ad02-e02d2e3d9403",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2bbc119c-3b09-4c1d-a92c-2f1e0e3cf411"
        },
        "item": {
          "id": "e39d8d70-3aed-4e86-9d2e-5a204c51ba37",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f0c653a2-0d4d-4495-82b6-a09b3b5ebe7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39d8d70-3aed-4e86-9d2e-5a204c51ba37",
        "cursor": {
          "ref": "f7b8764d-2617-4e17-ad02-e02d2e3d9403",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2bbc119c-3b09-4c1d-a92c-2f1e0e3cf411"
        },
        "item": {
          "id": "e39d8d70-3aed-4e86-9d2e-5a204c51ba37",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f0c653a2-0d4d-4495-82b6-a09b3b5ebe7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1a279e-78c2-4a77-8cb3-79919cd0cd29",
        "cursor": {
          "ref": "f6dd1a75-e862-4f76-8b42-287e9434c765",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "528cccd7-95af-4187-8cc7-fb72537ff0a5"
        },
        "item": {
          "id": "8e1a279e-78c2-4a77-8cb3-79919cd0cd29",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c4c53528-3041-4075-8bce-36494fa221dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1a279e-78c2-4a77-8cb3-79919cd0cd29",
        "cursor": {
          "ref": "f6dd1a75-e862-4f76-8b42-287e9434c765",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "528cccd7-95af-4187-8cc7-fb72537ff0a5"
        },
        "item": {
          "id": "8e1a279e-78c2-4a77-8cb3-79919cd0cd29",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c4c53528-3041-4075-8bce-36494fa221dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afada0e-e576-44db-a761-4cb0548ddc0d",
        "cursor": {
          "ref": "89bfa7e5-8929-49f9-a1ff-bfd000967342",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c26d3e8d-3507-4577-a34e-2725cb059768"
        },
        "item": {
          "id": "2afada0e-e576-44db-a761-4cb0548ddc0d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "aeced8fc-1e1e-47e0-9980-daf4fe977b49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afada0e-e576-44db-a761-4cb0548ddc0d",
        "cursor": {
          "ref": "89bfa7e5-8929-49f9-a1ff-bfd000967342",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c26d3e8d-3507-4577-a34e-2725cb059768"
        },
        "item": {
          "id": "2afada0e-e576-44db-a761-4cb0548ddc0d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "aeced8fc-1e1e-47e0-9980-daf4fe977b49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cb44df-9c52-43df-89b6-4b010e73aa9d",
        "cursor": {
          "ref": "ddce89b1-4627-437e-9c4f-e1816bde623b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "242415fc-a973-463b-a06b-db50a9b2bb7b"
        },
        "item": {
          "id": "06cb44df-9c52-43df-89b6-4b010e73aa9d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8efd78e4-b1c7-48e4-b9af-df3354c4ccde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cb44df-9c52-43df-89b6-4b010e73aa9d",
        "cursor": {
          "ref": "ddce89b1-4627-437e-9c4f-e1816bde623b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "242415fc-a973-463b-a06b-db50a9b2bb7b"
        },
        "item": {
          "id": "06cb44df-9c52-43df-89b6-4b010e73aa9d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8efd78e4-b1c7-48e4-b9af-df3354c4ccde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f834e618-ebf5-4034-924e-61f305927042",
        "cursor": {
          "ref": "af5cd97e-46e5-4b1d-a21b-93bf059806a1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8f4737ac-bd84-4a0a-adb1-9fe8dcbfefea"
        },
        "item": {
          "id": "f834e618-ebf5-4034-924e-61f305927042",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "25299c98-ca91-47dd-83aa-48068664fb47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f834e618-ebf5-4034-924e-61f305927042",
        "cursor": {
          "ref": "af5cd97e-46e5-4b1d-a21b-93bf059806a1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8f4737ac-bd84-4a0a-adb1-9fe8dcbfefea"
        },
        "item": {
          "id": "f834e618-ebf5-4034-924e-61f305927042",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "25299c98-ca91-47dd-83aa-48068664fb47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dae962b-4121-4e95-880c-1a22da7f1d87",
        "cursor": {
          "ref": "914e6986-9f6d-4b17-993f-04b7bd248b75",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb5d97ce-2679-4285-9796-79666de75663"
        },
        "item": {
          "id": "3dae962b-4121-4e95-880c-1a22da7f1d87",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "31fe8dc0-f7c8-4e61-a127-f56034dfb38b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dae962b-4121-4e95-880c-1a22da7f1d87",
        "cursor": {
          "ref": "914e6986-9f6d-4b17-993f-04b7bd248b75",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb5d97ce-2679-4285-9796-79666de75663"
        },
        "item": {
          "id": "3dae962b-4121-4e95-880c-1a22da7f1d87",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "31fe8dc0-f7c8-4e61-a127-f56034dfb38b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e601019a-d849-4f84-b693-4fe3599b7459",
        "cursor": {
          "ref": "0c668aa6-abae-4a57-ab59-c2e329292739",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6f75895-af09-45cf-8acc-af6a57a475ff"
        },
        "item": {
          "id": "e601019a-d849-4f84-b693-4fe3599b7459",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9d6ed2ab-d85c-49fb-a285-56053d0b14c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e601019a-d849-4f84-b693-4fe3599b7459",
        "cursor": {
          "ref": "0c668aa6-abae-4a57-ab59-c2e329292739",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6f75895-af09-45cf-8acc-af6a57a475ff"
        },
        "item": {
          "id": "e601019a-d849-4f84-b693-4fe3599b7459",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9d6ed2ab-d85c-49fb-a285-56053d0b14c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebbb561-8d48-4f14-a06b-557a96bad083",
        "cursor": {
          "ref": "65e9930a-8ea7-4e6b-983e-a9da4ce2629c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "085a9bd2-6290-40a1-8422-9eb8a7ca5ad1"
        },
        "item": {
          "id": "aebbb561-8d48-4f14-a06b-557a96bad083",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "42696145-3bc4-455c-944d-8f962d25d5bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebbb561-8d48-4f14-a06b-557a96bad083",
        "cursor": {
          "ref": "65e9930a-8ea7-4e6b-983e-a9da4ce2629c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "085a9bd2-6290-40a1-8422-9eb8a7ca5ad1"
        },
        "item": {
          "id": "aebbb561-8d48-4f14-a06b-557a96bad083",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "42696145-3bc4-455c-944d-8f962d25d5bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a3303b-ae3c-49a1-81b4-98c783b73017",
        "cursor": {
          "ref": "7c6fb28a-880f-4f94-9648-8bd97932a8e2",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "51910fb7-9147-46ca-ba69-88b06e322cd8"
        },
        "item": {
          "id": "a7a3303b-ae3c-49a1-81b4-98c783b73017",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a7f061db-2e19-44cf-ad3f-89fc2fe0d553",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a3303b-ae3c-49a1-81b4-98c783b73017",
        "cursor": {
          "ref": "7c6fb28a-880f-4f94-9648-8bd97932a8e2",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "51910fb7-9147-46ca-ba69-88b06e322cd8"
        },
        "item": {
          "id": "a7a3303b-ae3c-49a1-81b4-98c783b73017",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a7f061db-2e19-44cf-ad3f-89fc2fe0d553",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c29570-10a4-444e-bd91-6bc7a775a757",
        "cursor": {
          "ref": "1b304790-b20f-4f46-b093-8946838af27d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "08dc9bcb-fbf3-466a-942c-5879ad2b1e83"
        },
        "item": {
          "id": "b4c29570-10a4-444e-bd91-6bc7a775a757",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "01b976b3-134b-41cf-9153-97642b91c1fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c29570-10a4-444e-bd91-6bc7a775a757",
        "cursor": {
          "ref": "1b304790-b20f-4f46-b093-8946838af27d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "08dc9bcb-fbf3-466a-942c-5879ad2b1e83"
        },
        "item": {
          "id": "b4c29570-10a4-444e-bd91-6bc7a775a757",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "01b976b3-134b-41cf-9153-97642b91c1fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4758eced-547f-41ab-8150-bf4d1371f285",
        "cursor": {
          "ref": "97c74bae-e740-47f9-b89d-17e3c93068fd",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6ef12448-0763-435a-8e2d-4cf29711fa3d"
        },
        "item": {
          "id": "4758eced-547f-41ab-8150-bf4d1371f285",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "35ea5b80-1aac-40c4-a167-0cedc2413a53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4758eced-547f-41ab-8150-bf4d1371f285",
        "cursor": {
          "ref": "97c74bae-e740-47f9-b89d-17e3c93068fd",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6ef12448-0763-435a-8e2d-4cf29711fa3d"
        },
        "item": {
          "id": "4758eced-547f-41ab-8150-bf4d1371f285",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "35ea5b80-1aac-40c4-a167-0cedc2413a53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79af0fee-9441-4a16-a6f0-cba66ad6acff",
        "cursor": {
          "ref": "1c2553eb-b815-497a-9727-d17dc603363e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "44f853d7-edc2-416d-a2a4-7f936f536cde"
        },
        "item": {
          "id": "79af0fee-9441-4a16-a6f0-cba66ad6acff",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "cad22f1b-f23d-4a98-9642-b6a2f6f9bff9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79af0fee-9441-4a16-a6f0-cba66ad6acff",
        "cursor": {
          "ref": "1c2553eb-b815-497a-9727-d17dc603363e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "44f853d7-edc2-416d-a2a4-7f936f536cde"
        },
        "item": {
          "id": "79af0fee-9441-4a16-a6f0-cba66ad6acff",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "cad22f1b-f23d-4a98-9642-b6a2f6f9bff9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3183055a-f95e-4106-831b-12684ac4091c",
        "cursor": {
          "ref": "44deb2c5-0683-4abf-9aed-b0ac54795f0d",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4cf7ec91-320b-45eb-aedc-224a065d5895"
        },
        "item": {
          "id": "3183055a-f95e-4106-831b-12684ac4091c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c63c40ec-4440-49da-b252-0627496043aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3183055a-f95e-4106-831b-12684ac4091c",
        "cursor": {
          "ref": "44deb2c5-0683-4abf-9aed-b0ac54795f0d",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4cf7ec91-320b-45eb-aedc-224a065d5895"
        },
        "item": {
          "id": "3183055a-f95e-4106-831b-12684ac4091c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c63c40ec-4440-49da-b252-0627496043aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c31120d-4e02-4d43-b355-ebd68f48e09b",
        "cursor": {
          "ref": "d54c1b2f-5508-4264-9bdd-f586c6bbeed2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5f8fee81-274d-4fe0-b7c3-a4a8f242e859"
        },
        "item": {
          "id": "7c31120d-4e02-4d43-b355-ebd68f48e09b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "33230507-697f-4d80-8775-3432648f8686",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c31120d-4e02-4d43-b355-ebd68f48e09b",
        "cursor": {
          "ref": "d54c1b2f-5508-4264-9bdd-f586c6bbeed2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5f8fee81-274d-4fe0-b7c3-a4a8f242e859"
        },
        "item": {
          "id": "7c31120d-4e02-4d43-b355-ebd68f48e09b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "33230507-697f-4d80-8775-3432648f8686",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297c9741-ad52-49b7-903e-5afff0aaf751",
        "cursor": {
          "ref": "adf16a45-2df4-4575-a16b-b77a619e7910",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c9500c51-61f1-41bc-a437-5ccf54d8730b"
        },
        "item": {
          "id": "297c9741-ad52-49b7-903e-5afff0aaf751",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5563aed8-08a4-470b-b9e0-d7a2d74a6079",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297c9741-ad52-49b7-903e-5afff0aaf751",
        "cursor": {
          "ref": "adf16a45-2df4-4575-a16b-b77a619e7910",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c9500c51-61f1-41bc-a437-5ccf54d8730b"
        },
        "item": {
          "id": "297c9741-ad52-49b7-903e-5afff0aaf751",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5563aed8-08a4-470b-b9e0-d7a2d74a6079",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23949404-0861-43e9-8d12-1b069f59eea4",
        "cursor": {
          "ref": "d220b44e-8313-4095-80a8-fa82d2cb3fe7",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9796976c-0fce-4463-b4e2-2f5f095fa892"
        },
        "item": {
          "id": "23949404-0861-43e9-8d12-1b069f59eea4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "94ddc3fd-6e21-4f75-8476-8ba654611ee9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23949404-0861-43e9-8d12-1b069f59eea4",
        "cursor": {
          "ref": "d220b44e-8313-4095-80a8-fa82d2cb3fe7",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9796976c-0fce-4463-b4e2-2f5f095fa892"
        },
        "item": {
          "id": "23949404-0861-43e9-8d12-1b069f59eea4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "94ddc3fd-6e21-4f75-8476-8ba654611ee9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c46ce42-7441-4081-ae73-0654d501bbc4",
        "cursor": {
          "ref": "d368c49e-dbb0-4b3c-a381-d13a9e640327",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d52aae77-f2e8-43e1-a859-47452e6e204e"
        },
        "item": {
          "id": "6c46ce42-7441-4081-ae73-0654d501bbc4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "13c75f56-f161-4302-897a-c063b25add9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c46ce42-7441-4081-ae73-0654d501bbc4",
        "cursor": {
          "ref": "d368c49e-dbb0-4b3c-a381-d13a9e640327",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d52aae77-f2e8-43e1-a859-47452e6e204e"
        },
        "item": {
          "id": "6c46ce42-7441-4081-ae73-0654d501bbc4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "13c75f56-f161-4302-897a-c063b25add9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c430855f-4ea2-443d-aa56-c9aa55256f4b",
        "cursor": {
          "ref": "dbf87059-fb63-4fcb-8da0-ab612bcddb8a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "abd5b3f4-b130-485a-86bd-9726055fccc9"
        },
        "item": {
          "id": "c430855f-4ea2-443d-aa56-c9aa55256f4b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "81b1f463-f66e-4f18-973c-d144a97db7d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c430855f-4ea2-443d-aa56-c9aa55256f4b",
        "cursor": {
          "ref": "dbf87059-fb63-4fcb-8da0-ab612bcddb8a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "abd5b3f4-b130-485a-86bd-9726055fccc9"
        },
        "item": {
          "id": "c430855f-4ea2-443d-aa56-c9aa55256f4b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "81b1f463-f66e-4f18-973c-d144a97db7d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f8608d-3067-4021-a53b-0af4d4e9f5b1",
        "cursor": {
          "ref": "4f0e0eff-45ce-4758-af59-90dca531edae",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fef0dddd-31fe-40fe-9c17-2d5f7ef710fc"
        },
        "item": {
          "id": "24f8608d-3067-4021-a53b-0af4d4e9f5b1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "223b9b83-421e-4afd-86dd-1af4f6327d8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f8608d-3067-4021-a53b-0af4d4e9f5b1",
        "cursor": {
          "ref": "4f0e0eff-45ce-4758-af59-90dca531edae",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fef0dddd-31fe-40fe-9c17-2d5f7ef710fc"
        },
        "item": {
          "id": "24f8608d-3067-4021-a53b-0af4d4e9f5b1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "223b9b83-421e-4afd-86dd-1af4f6327d8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae31ac9-e697-412f-b88c-d4af30cf2c13",
        "cursor": {
          "ref": "cf9635f4-7aa4-40f3-aedc-b616936da3e8",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0b69f3d8-23cd-474d-93ef-511296785a54"
        },
        "item": {
          "id": "cae31ac9-e697-412f-b88c-d4af30cf2c13",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8e4a0ae9-e9de-4942-a3c0-5a1c1982e278",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae31ac9-e697-412f-b88c-d4af30cf2c13",
        "cursor": {
          "ref": "cf9635f4-7aa4-40f3-aedc-b616936da3e8",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0b69f3d8-23cd-474d-93ef-511296785a54"
        },
        "item": {
          "id": "cae31ac9-e697-412f-b88c-d4af30cf2c13",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8e4a0ae9-e9de-4942-a3c0-5a1c1982e278",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7dff85-596e-4ea7-bd46-ef219fba9550",
        "cursor": {
          "ref": "4892e28a-2750-4db0-974a-1246b2bb2a9a",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ba29809c-7366-493c-a4c7-2add9aa764eb"
        },
        "item": {
          "id": "ee7dff85-596e-4ea7-bd46-ef219fba9550",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e4ae2f1e-998c-4171-9be3-c7c165b3d33a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7dff85-596e-4ea7-bd46-ef219fba9550",
        "cursor": {
          "ref": "4892e28a-2750-4db0-974a-1246b2bb2a9a",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ba29809c-7366-493c-a4c7-2add9aa764eb"
        },
        "item": {
          "id": "ee7dff85-596e-4ea7-bd46-ef219fba9550",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e4ae2f1e-998c-4171-9be3-c7c165b3d33a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99848597-d5f8-4c54-872a-675b3e06927c",
        "cursor": {
          "ref": "386d8f78-10ba-47a1-83e3-43195a0fd7bd",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4ae5f75d-2372-49e4-9a5f-b0c668b131a3"
        },
        "item": {
          "id": "99848597-d5f8-4c54-872a-675b3e06927c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6832d58b-6816-4f67-bf3b-f33a4a794d0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99848597-d5f8-4c54-872a-675b3e06927c",
        "cursor": {
          "ref": "386d8f78-10ba-47a1-83e3-43195a0fd7bd",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4ae5f75d-2372-49e4-9a5f-b0c668b131a3"
        },
        "item": {
          "id": "99848597-d5f8-4c54-872a-675b3e06927c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6832d58b-6816-4f67-bf3b-f33a4a794d0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e3c8e3-1510-44f4-8886-23187e07ca69",
        "cursor": {
          "ref": "6a1a6005-a254-4547-bdd4-de35dd7db3cb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "34499d69-947a-42f1-bb95-7d6a96a10f34"
        },
        "item": {
          "id": "11e3c8e3-1510-44f4-8886-23187e07ca69",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bc7f1876-4231-469f-bdc4-dcbc30fa1eab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e3c8e3-1510-44f4-8886-23187e07ca69",
        "cursor": {
          "ref": "6a1a6005-a254-4547-bdd4-de35dd7db3cb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "34499d69-947a-42f1-bb95-7d6a96a10f34"
        },
        "item": {
          "id": "11e3c8e3-1510-44f4-8886-23187e07ca69",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bc7f1876-4231-469f-bdc4-dcbc30fa1eab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5388b604-ca1e-4122-b7bd-53b607d52bb9",
        "cursor": {
          "ref": "c1e91514-d137-454f-938b-44844c2b12ed",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "390c414f-138b-4f2d-9418-604d9e17c0c1"
        },
        "item": {
          "id": "5388b604-ca1e-4122-b7bd-53b607d52bb9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0596654b-b181-4c2b-9fba-00edb3ed5e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5388b604-ca1e-4122-b7bd-53b607d52bb9",
        "cursor": {
          "ref": "c1e91514-d137-454f-938b-44844c2b12ed",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "390c414f-138b-4f2d-9418-604d9e17c0c1"
        },
        "item": {
          "id": "5388b604-ca1e-4122-b7bd-53b607d52bb9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0596654b-b181-4c2b-9fba-00edb3ed5e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8867ea2-38a2-4b02-9137-f0805ea194d7",
        "cursor": {
          "ref": "1ea9fe8a-5b74-4912-96a2-a37f871bc504",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2c6f4142-2e10-4df9-9900-551a0986aa65"
        },
        "item": {
          "id": "f8867ea2-38a2-4b02-9137-f0805ea194d7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5202af57-4115-4f70-af4b-16cf4180590a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8867ea2-38a2-4b02-9137-f0805ea194d7",
        "cursor": {
          "ref": "1ea9fe8a-5b74-4912-96a2-a37f871bc504",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2c6f4142-2e10-4df9-9900-551a0986aa65"
        },
        "item": {
          "id": "f8867ea2-38a2-4b02-9137-f0805ea194d7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5202af57-4115-4f70-af4b-16cf4180590a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1a82ae-a0ff-49e1-a81e-034a4459e8ed",
        "cursor": {
          "ref": "924ed8c5-0593-4a12-ba8d-a2100d0b5a40",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b2a0b282-3e5b-4842-a382-d00f1319863e"
        },
        "item": {
          "id": "df1a82ae-a0ff-49e1-a81e-034a4459e8ed",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5e84b3c1-9ac6-49cb-8524-6b6d1dd84eaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1a82ae-a0ff-49e1-a81e-034a4459e8ed",
        "cursor": {
          "ref": "924ed8c5-0593-4a12-ba8d-a2100d0b5a40",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b2a0b282-3e5b-4842-a382-d00f1319863e"
        },
        "item": {
          "id": "df1a82ae-a0ff-49e1-a81e-034a4459e8ed",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5e84b3c1-9ac6-49cb-8524-6b6d1dd84eaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466045a5-ece4-4134-85b7-abf865359e97",
        "cursor": {
          "ref": "da395368-a7a9-448d-a91b-a47064bd6193",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4e73d76d-2313-45ee-9afe-ea1dac4214c4"
        },
        "item": {
          "id": "466045a5-ece4-4134-85b7-abf865359e97",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "be5ca238-13f7-4afe-9b0c-1a144339f36d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466045a5-ece4-4134-85b7-abf865359e97",
        "cursor": {
          "ref": "da395368-a7a9-448d-a91b-a47064bd6193",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4e73d76d-2313-45ee-9afe-ea1dac4214c4"
        },
        "item": {
          "id": "466045a5-ece4-4134-85b7-abf865359e97",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "be5ca238-13f7-4afe-9b0c-1a144339f36d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edce3bd3-9c05-40c7-ab3f-2c4b66a4e0f7",
        "cursor": {
          "ref": "cdd8f529-afc4-43d5-a192-250ea7d2358e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a2486cd2-211a-48b6-b9b1-3d7f38d7ca5b"
        },
        "item": {
          "id": "edce3bd3-9c05-40c7-ab3f-2c4b66a4e0f7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bc140c32-2a29-4b3b-811a-d6bec71b7837",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edce3bd3-9c05-40c7-ab3f-2c4b66a4e0f7",
        "cursor": {
          "ref": "cdd8f529-afc4-43d5-a192-250ea7d2358e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a2486cd2-211a-48b6-b9b1-3d7f38d7ca5b"
        },
        "item": {
          "id": "edce3bd3-9c05-40c7-ab3f-2c4b66a4e0f7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bc140c32-2a29-4b3b-811a-d6bec71b7837",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f4cc2c-51aa-46d2-a458-d464dedcc0b5",
        "cursor": {
          "ref": "f3c34e4a-280f-4669-a11f-239b0e463777",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4c22c2b5-0e35-4ae3-aa64-6058c1679134"
        },
        "item": {
          "id": "d9f4cc2c-51aa-46d2-a458-d464dedcc0b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "32f1f0af-37d1-425d-a9f5-0a92388816d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f4cc2c-51aa-46d2-a458-d464dedcc0b5",
        "cursor": {
          "ref": "f3c34e4a-280f-4669-a11f-239b0e463777",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4c22c2b5-0e35-4ae3-aa64-6058c1679134"
        },
        "item": {
          "id": "d9f4cc2c-51aa-46d2-a458-d464dedcc0b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "32f1f0af-37d1-425d-a9f5-0a92388816d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64d6044-ab12-4fb4-a4a2-187aff251b71",
        "cursor": {
          "ref": "58a5e566-6cff-44cc-baf8-0c8b75172aa4",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "856de12a-064b-4b21-ae0b-6f346922cc55"
        },
        "item": {
          "id": "d64d6044-ab12-4fb4-a4a2-187aff251b71",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a9a98ff6-b0b9-4fea-b214-4b914333cdc7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64d6044-ab12-4fb4-a4a2-187aff251b71",
        "cursor": {
          "ref": "58a5e566-6cff-44cc-baf8-0c8b75172aa4",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "856de12a-064b-4b21-ae0b-6f346922cc55"
        },
        "item": {
          "id": "d64d6044-ab12-4fb4-a4a2-187aff251b71",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a9a98ff6-b0b9-4fea-b214-4b914333cdc7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79923ca-7591-4639-8ae3-83aff72eb24a",
        "cursor": {
          "ref": "2075e32f-7262-46d5-84d6-6aedf18bbf64",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "70a8b3fc-23d1-4004-a3e0-d9e9c41e19c0"
        },
        "item": {
          "id": "d79923ca-7591-4639-8ae3-83aff72eb24a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "96509ab1-f7ba-44d5-b122-4626ae6a9fe5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79923ca-7591-4639-8ae3-83aff72eb24a",
        "cursor": {
          "ref": "2075e32f-7262-46d5-84d6-6aedf18bbf64",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "70a8b3fc-23d1-4004-a3e0-d9e9c41e19c0"
        },
        "item": {
          "id": "d79923ca-7591-4639-8ae3-83aff72eb24a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "96509ab1-f7ba-44d5-b122-4626ae6a9fe5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504249f0-22ba-4721-a641-69cff280506e",
        "cursor": {
          "ref": "b84cb71d-fb9f-4720-bef4-c78914db6a55",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2644ed78-5d14-4d7f-98a6-196125033b67"
        },
        "item": {
          "id": "504249f0-22ba-4721-a641-69cff280506e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c66656fd-6d01-418d-a526-322c5ece2fb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504249f0-22ba-4721-a641-69cff280506e",
        "cursor": {
          "ref": "b84cb71d-fb9f-4720-bef4-c78914db6a55",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2644ed78-5d14-4d7f-98a6-196125033b67"
        },
        "item": {
          "id": "504249f0-22ba-4721-a641-69cff280506e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c66656fd-6d01-418d-a526-322c5ece2fb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f423b6dc-8848-4bf8-9062-44675b34a73a",
        "cursor": {
          "ref": "9d286c05-8b9d-471a-b466-ca4a3acfcdba",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c64ad341-1d6c-4332-ba38-5d51ee6e9550"
        },
        "item": {
          "id": "f423b6dc-8848-4bf8-9062-44675b34a73a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "68ee43a5-f3a3-4e8f-a668-fd3c8f2eada1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f423b6dc-8848-4bf8-9062-44675b34a73a",
        "cursor": {
          "ref": "9d286c05-8b9d-471a-b466-ca4a3acfcdba",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c64ad341-1d6c-4332-ba38-5d51ee6e9550"
        },
        "item": {
          "id": "f423b6dc-8848-4bf8-9062-44675b34a73a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "68ee43a5-f3a3-4e8f-a668-fd3c8f2eada1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94baeda-4e5d-425e-9d5c-03ea971f7cbd",
        "cursor": {
          "ref": "d5ca1b9e-e3fd-4972-8f36-ca25a9a4a774",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "69e8f2a1-1c60-4402-bb6e-f29ce53864ac"
        },
        "item": {
          "id": "f94baeda-4e5d-425e-9d5c-03ea971f7cbd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "55f1a034-f195-4b54-99bd-ef042f4de43a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94baeda-4e5d-425e-9d5c-03ea971f7cbd",
        "cursor": {
          "ref": "d5ca1b9e-e3fd-4972-8f36-ca25a9a4a774",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "69e8f2a1-1c60-4402-bb6e-f29ce53864ac"
        },
        "item": {
          "id": "f94baeda-4e5d-425e-9d5c-03ea971f7cbd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "55f1a034-f195-4b54-99bd-ef042f4de43a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3b5cd4-44d2-4337-a46b-1e6db3dec9c4",
        "cursor": {
          "ref": "f1f91f7e-df54-413c-857e-6cca5dfe3e58",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1c949afd-4860-4669-a4e7-dcccdefe2fb1"
        },
        "item": {
          "id": "3c3b5cd4-44d2-4337-a46b-1e6db3dec9c4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7cde5d88-0db2-438f-98d1-c2c68e718fba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3b5cd4-44d2-4337-a46b-1e6db3dec9c4",
        "cursor": {
          "ref": "f1f91f7e-df54-413c-857e-6cca5dfe3e58",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1c949afd-4860-4669-a4e7-dcccdefe2fb1"
        },
        "item": {
          "id": "3c3b5cd4-44d2-4337-a46b-1e6db3dec9c4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7cde5d88-0db2-438f-98d1-c2c68e718fba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c8b1e5-3333-44d1-8ecd-2f2ff9e97f1d",
        "cursor": {
          "ref": "d92d20ab-b91f-4fa0-b1f8-740c6060980e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ac3fe320-889b-47a5-8a9b-d6cb3a6935bd"
        },
        "item": {
          "id": "d7c8b1e5-3333-44d1-8ecd-2f2ff9e97f1d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "26300a52-02f0-4503-8dee-d0819b43f785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c8b1e5-3333-44d1-8ecd-2f2ff9e97f1d",
        "cursor": {
          "ref": "d92d20ab-b91f-4fa0-b1f8-740c6060980e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ac3fe320-889b-47a5-8a9b-d6cb3a6935bd"
        },
        "item": {
          "id": "d7c8b1e5-3333-44d1-8ecd-2f2ff9e97f1d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "26300a52-02f0-4503-8dee-d0819b43f785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89657744-3c3f-48c6-af0c-679cd24c5a5a",
        "cursor": {
          "ref": "107df526-23e6-42d0-86bb-44d9eaeb07ae",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2cd5c7ac-3389-4ccb-bf76-d08ceaed9ac4"
        },
        "item": {
          "id": "89657744-3c3f-48c6-af0c-679cd24c5a5a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e44955e9-d518-4814-a395-a634f5edb091",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 100,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89657744-3c3f-48c6-af0c-679cd24c5a5a",
        "cursor": {
          "ref": "107df526-23e6-42d0-86bb-44d9eaeb07ae",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2cd5c7ac-3389-4ccb-bf76-d08ceaed9ac4"
        },
        "item": {
          "id": "89657744-3c3f-48c6-af0c-679cd24c5a5a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e44955e9-d518-4814-a395-a634f5edb091",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 100,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1588e4-bc51-4ad7-8e41-86fb2948995c",
        "cursor": {
          "ref": "f68f576e-6959-446d-b16d-312acf146689",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3d293243-10d2-4642-a7f9-ecdb88c19259"
        },
        "item": {
          "id": "af1588e4-bc51-4ad7-8e41-86fb2948995c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "da9758f5-533b-40f0-a9ec-0d1842e9c761",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1588e4-bc51-4ad7-8e41-86fb2948995c",
        "cursor": {
          "ref": "f68f576e-6959-446d-b16d-312acf146689",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3d293243-10d2-4642-a7f9-ecdb88c19259"
        },
        "item": {
          "id": "af1588e4-bc51-4ad7-8e41-86fb2948995c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "da9758f5-533b-40f0-a9ec-0d1842e9c761",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8266b277-7027-4e09-8a27-b964f47be3f0",
        "cursor": {
          "ref": "0cebe944-087f-4981-afa4-5e97072b3299",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5a8ae677-8db1-48c8-9a0e-0552a823abd0"
        },
        "item": {
          "id": "8266b277-7027-4e09-8a27-b964f47be3f0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "82d9aa68-e0e9-454b-b834-cf70b5752bf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8266b277-7027-4e09-8a27-b964f47be3f0",
        "cursor": {
          "ref": "0cebe944-087f-4981-afa4-5e97072b3299",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5a8ae677-8db1-48c8-9a0e-0552a823abd0"
        },
        "item": {
          "id": "8266b277-7027-4e09-8a27-b964f47be3f0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "82d9aa68-e0e9-454b-b834-cf70b5752bf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28cbbe00-8d83-4011-9d8d-aa1ebf50a417",
        "cursor": {
          "ref": "45fe129c-afd0-4a97-9185-84a3f1730d85",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "66ccc5ec-ccbf-4020-979a-890557062f79"
        },
        "item": {
          "id": "28cbbe00-8d83-4011-9d8d-aa1ebf50a417",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ba05a642-85cd-4753-aae7-9cde00d04f36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28cbbe00-8d83-4011-9d8d-aa1ebf50a417",
        "cursor": {
          "ref": "45fe129c-afd0-4a97-9185-84a3f1730d85",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "66ccc5ec-ccbf-4020-979a-890557062f79"
        },
        "item": {
          "id": "28cbbe00-8d83-4011-9d8d-aa1ebf50a417",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ba05a642-85cd-4753-aae7-9cde00d04f36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2175656d-528c-4173-ae9f-5b4d82e2cad8",
        "cursor": {
          "ref": "f059a74e-c99d-4cbd-a862-65a32c1bf2bd",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b9ed3dc8-aa52-45cb-ab57-8b6705e44a84"
        },
        "item": {
          "id": "2175656d-528c-4173-ae9f-5b4d82e2cad8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e30312c9-b002-48ec-8a9b-72a122269d0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2175656d-528c-4173-ae9f-5b4d82e2cad8",
        "cursor": {
          "ref": "f059a74e-c99d-4cbd-a862-65a32c1bf2bd",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b9ed3dc8-aa52-45cb-ab57-8b6705e44a84"
        },
        "item": {
          "id": "2175656d-528c-4173-ae9f-5b4d82e2cad8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e30312c9-b002-48ec-8a9b-72a122269d0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43e9a82-baec-4595-bf3c-38480298b5a6",
        "cursor": {
          "ref": "6b34bad9-cc95-4995-93c8-a015d57417c4",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6c90dc8e-c674-4979-b92e-02b2947b7307"
        },
        "item": {
          "id": "d43e9a82-baec-4595-bf3c-38480298b5a6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "07cd0907-50b8-4149-8f47-f0383914b0ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43e9a82-baec-4595-bf3c-38480298b5a6",
        "cursor": {
          "ref": "6b34bad9-cc95-4995-93c8-a015d57417c4",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6c90dc8e-c674-4979-b92e-02b2947b7307"
        },
        "item": {
          "id": "d43e9a82-baec-4595-bf3c-38480298b5a6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "07cd0907-50b8-4149-8f47-f0383914b0ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b715d554-b19e-412e-95eb-13bb5de189e2",
        "cursor": {
          "ref": "e3917f6a-4646-4e09-8cea-c141741c764a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "be522286-7903-40fb-a61d-50f500cd6456"
        },
        "item": {
          "id": "b715d554-b19e-412e-95eb-13bb5de189e2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "38a8c5aa-7660-4646-80a6-46b7cc1a91dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b715d554-b19e-412e-95eb-13bb5de189e2",
        "cursor": {
          "ref": "e3917f6a-4646-4e09-8cea-c141741c764a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "be522286-7903-40fb-a61d-50f500cd6456"
        },
        "item": {
          "id": "b715d554-b19e-412e-95eb-13bb5de189e2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "38a8c5aa-7660-4646-80a6-46b7cc1a91dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea1b579-96f2-414e-b30f-c3ff14d895b9",
        "cursor": {
          "ref": "baf4e9e0-f9b8-42c2-ad43-c57a6fe9897f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8f5df6b3-146a-4387-adda-58ccb98fa896"
        },
        "item": {
          "id": "bea1b579-96f2-414e-b30f-c3ff14d895b9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "24464569-3465-4ddc-9640-9987ca6ccc04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea1b579-96f2-414e-b30f-c3ff14d895b9",
        "cursor": {
          "ref": "baf4e9e0-f9b8-42c2-ad43-c57a6fe9897f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8f5df6b3-146a-4387-adda-58ccb98fa896"
        },
        "item": {
          "id": "bea1b579-96f2-414e-b30f-c3ff14d895b9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "24464569-3465-4ddc-9640-9987ca6ccc04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6508f646-58ff-4373-b95d-2524926d7a9c",
        "cursor": {
          "ref": "38b401dd-1333-4aff-8629-f255e448fdc4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "adc9b675-bc25-47bd-82b6-5c784ebc0caf"
        },
        "item": {
          "id": "6508f646-58ff-4373-b95d-2524926d7a9c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d201769f-0b6e-4f81-9b42-d093b16ed70a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6508f646-58ff-4373-b95d-2524926d7a9c",
        "cursor": {
          "ref": "38b401dd-1333-4aff-8629-f255e448fdc4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "adc9b675-bc25-47bd-82b6-5c784ebc0caf"
        },
        "item": {
          "id": "6508f646-58ff-4373-b95d-2524926d7a9c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d201769f-0b6e-4f81-9b42-d093b16ed70a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d241785-11e5-4b23-be4b-b0aace885430",
        "cursor": {
          "ref": "9afb7552-b642-4bed-9098-aa9fbf76e3e2",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "81ec0573-5a19-4848-96f7-2501f6f6290e"
        },
        "item": {
          "id": "0d241785-11e5-4b23-be4b-b0aace885430",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "15cff696-7c3a-4d12-b928-d5d7c210ba5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d241785-11e5-4b23-be4b-b0aace885430",
        "cursor": {
          "ref": "9afb7552-b642-4bed-9098-aa9fbf76e3e2",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "81ec0573-5a19-4848-96f7-2501f6f6290e"
        },
        "item": {
          "id": "0d241785-11e5-4b23-be4b-b0aace885430",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "15cff696-7c3a-4d12-b928-d5d7c210ba5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf50393-9cc1-4251-ba72-37cbadf25afb",
        "cursor": {
          "ref": "de21f959-aa1b-435b-8e7e-26355dcb65c2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b253e59e-3281-4772-880e-f08c4c3aa21b"
        },
        "item": {
          "id": "9cf50393-9cc1-4251-ba72-37cbadf25afb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d38d89c2-2eb6-4b58-b587-0ea6627aa65f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf50393-9cc1-4251-ba72-37cbadf25afb",
        "cursor": {
          "ref": "de21f959-aa1b-435b-8e7e-26355dcb65c2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b253e59e-3281-4772-880e-f08c4c3aa21b"
        },
        "item": {
          "id": "9cf50393-9cc1-4251-ba72-37cbadf25afb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d38d89c2-2eb6-4b58-b587-0ea6627aa65f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4827d8e6-c49c-4309-8f94-cc64dbd0b1c7",
        "cursor": {
          "ref": "c890eb4c-874d-4697-bfaf-7a9a0322a579",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a8a40778-55f9-4727-8627-eb16b4761fe4"
        },
        "item": {
          "id": "4827d8e6-c49c-4309-8f94-cc64dbd0b1c7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c11706b0-265b-478c-9a6f-cda741a1c616",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4827d8e6-c49c-4309-8f94-cc64dbd0b1c7",
        "cursor": {
          "ref": "c890eb4c-874d-4697-bfaf-7a9a0322a579",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a8a40778-55f9-4727-8627-eb16b4761fe4"
        },
        "item": {
          "id": "4827d8e6-c49c-4309-8f94-cc64dbd0b1c7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c11706b0-265b-478c-9a6f-cda741a1c616",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d85c8cd-22a8-4d38-8b72-ba77e445ad35",
        "cursor": {
          "ref": "6f7a8e94-5414-4d6d-b876-ec43ec30eaed",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f7a35669-330d-4b40-b213-23fb0f7197bc"
        },
        "item": {
          "id": "3d85c8cd-22a8-4d38-8b72-ba77e445ad35",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a641d6af-56f8-4729-9ed0-171290cbc53f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d85c8cd-22a8-4d38-8b72-ba77e445ad35",
        "cursor": {
          "ref": "6f7a8e94-5414-4d6d-b876-ec43ec30eaed",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f7a35669-330d-4b40-b213-23fb0f7197bc"
        },
        "item": {
          "id": "3d85c8cd-22a8-4d38-8b72-ba77e445ad35",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a641d6af-56f8-4729-9ed0-171290cbc53f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffc136e-dbf9-4a35-a2a7-2e240beaa185",
        "cursor": {
          "ref": "be236d07-ec42-4b0d-b41b-e231e54ce19f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "125b3387-199c-4faf-8457-f4a778999bdf"
        },
        "item": {
          "id": "1ffc136e-dbf9-4a35-a2a7-2e240beaa185",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0b3b4cc7-6b63-49aa-b374-656a59795dce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffc136e-dbf9-4a35-a2a7-2e240beaa185",
        "cursor": {
          "ref": "be236d07-ec42-4b0d-b41b-e231e54ce19f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "125b3387-199c-4faf-8457-f4a778999bdf"
        },
        "item": {
          "id": "1ffc136e-dbf9-4a35-a2a7-2e240beaa185",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0b3b4cc7-6b63-49aa-b374-656a59795dce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe290d3f-8603-4713-89a6-07e9b86ea0e2",
        "cursor": {
          "ref": "67f36e13-4a67-4959-b1d4-834a58ea31c5",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "028a9c4f-4728-49b3-8a99-af18d0ca8781"
        },
        "item": {
          "id": "fe290d3f-8603-4713-89a6-07e9b86ea0e2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "84ea27d8-3474-4779-aee7-81f2dd3e7823",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe290d3f-8603-4713-89a6-07e9b86ea0e2",
        "cursor": {
          "ref": "67f36e13-4a67-4959-b1d4-834a58ea31c5",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "028a9c4f-4728-49b3-8a99-af18d0ca8781"
        },
        "item": {
          "id": "fe290d3f-8603-4713-89a6-07e9b86ea0e2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "84ea27d8-3474-4779-aee7-81f2dd3e7823",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a843deb-c41a-463d-97f7-5fd75320fa6c",
        "cursor": {
          "ref": "e0c92310-6b11-4d58-8181-cd1ef564f6f0",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0bebbf66-52f9-4719-aa35-57c43cb3e13d"
        },
        "item": {
          "id": "2a843deb-c41a-463d-97f7-5fd75320fa6c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "aa83a780-532a-47be-846f-80e60bd3e3f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a843deb-c41a-463d-97f7-5fd75320fa6c",
        "cursor": {
          "ref": "e0c92310-6b11-4d58-8181-cd1ef564f6f0",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0bebbf66-52f9-4719-aa35-57c43cb3e13d"
        },
        "item": {
          "id": "2a843deb-c41a-463d-97f7-5fd75320fa6c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "aa83a780-532a-47be-846f-80e60bd3e3f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0746f74-0715-490c-8240-e4609e52de28",
        "cursor": {
          "ref": "07969343-f605-4d39-a702-120b67b34645",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "58a84290-5dfe-480f-b96f-c803fc65ac3c"
        },
        "item": {
          "id": "a0746f74-0715-490c-8240-e4609e52de28",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "236ecf26-19f5-410f-8f4e-860568026ce2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0746f74-0715-490c-8240-e4609e52de28",
        "cursor": {
          "ref": "07969343-f605-4d39-a702-120b67b34645",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "58a84290-5dfe-480f-b96f-c803fc65ac3c"
        },
        "item": {
          "id": "a0746f74-0715-490c-8240-e4609e52de28",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "236ecf26-19f5-410f-8f4e-860568026ce2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c091bad-e03a-4287-914c-d648e10b387b",
        "cursor": {
          "ref": "c036a37d-4fd5-42cb-956f-c7b1279d0387",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "be762349-2340-44b2-ae1a-5bf3ae694ac8"
        },
        "item": {
          "id": "8c091bad-e03a-4287-914c-d648e10b387b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6018d4ce-ef66-43eb-a307-9018e0de143e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c091bad-e03a-4287-914c-d648e10b387b",
        "cursor": {
          "ref": "c036a37d-4fd5-42cb-956f-c7b1279d0387",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "be762349-2340-44b2-ae1a-5bf3ae694ac8"
        },
        "item": {
          "id": "8c091bad-e03a-4287-914c-d648e10b387b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6018d4ce-ef66-43eb-a307-9018e0de143e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15af7480-1e79-4200-a78b-fecde9eb7334",
        "cursor": {
          "ref": "6b0c65b2-73ca-4835-b645-e5ebd4be9545",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "64fa0307-1e33-4985-91dd-66e25dc96e1f"
        },
        "item": {
          "id": "15af7480-1e79-4200-a78b-fecde9eb7334",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c38552ea-a993-4c6b-a599-5cb70927d96a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15af7480-1e79-4200-a78b-fecde9eb7334",
        "cursor": {
          "ref": "6b0c65b2-73ca-4835-b645-e5ebd4be9545",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "64fa0307-1e33-4985-91dd-66e25dc96e1f"
        },
        "item": {
          "id": "15af7480-1e79-4200-a78b-fecde9eb7334",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c38552ea-a993-4c6b-a599-5cb70927d96a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f90d779-2254-406b-b50c-13988f5da178",
        "cursor": {
          "ref": "d02ff5f8-c5ae-40c6-95b2-ef68afd0d539",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "49775c93-58b2-4779-85db-0edb19bf5eb3"
        },
        "item": {
          "id": "5f90d779-2254-406b-b50c-13988f5da178",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "faba6146-480b-421a-895c-d3a65452fe45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f90d779-2254-406b-b50c-13988f5da178",
        "cursor": {
          "ref": "d02ff5f8-c5ae-40c6-95b2-ef68afd0d539",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "49775c93-58b2-4779-85db-0edb19bf5eb3"
        },
        "item": {
          "id": "5f90d779-2254-406b-b50c-13988f5da178",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "faba6146-480b-421a-895c-d3a65452fe45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee505000-7cff-4a6d-9248-8005a7904626",
        "cursor": {
          "ref": "75024aca-719d-49f5-a923-77ea0fdaffb3",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d40f9ea2-51c6-4361-9654-be959d992466"
        },
        "item": {
          "id": "ee505000-7cff-4a6d-9248-8005a7904626",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1839785a-2584-4f6e-b95a-89ad27a8d016",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee505000-7cff-4a6d-9248-8005a7904626",
        "cursor": {
          "ref": "75024aca-719d-49f5-a923-77ea0fdaffb3",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d40f9ea2-51c6-4361-9654-be959d992466"
        },
        "item": {
          "id": "ee505000-7cff-4a6d-9248-8005a7904626",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1839785a-2584-4f6e-b95a-89ad27a8d016",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d721b984-b9b9-4139-8488-ee1090ca4bfc",
        "cursor": {
          "ref": "c414ff9f-2f71-41a6-bdcb-60b163ce40d1",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "84698434-71f1-45bb-85fa-7f939851262f"
        },
        "item": {
          "id": "d721b984-b9b9-4139-8488-ee1090ca4bfc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b6e2114f-1a03-4d9d-af0a-419f8f238198",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d721b984-b9b9-4139-8488-ee1090ca4bfc",
        "cursor": {
          "ref": "c414ff9f-2f71-41a6-bdcb-60b163ce40d1",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "84698434-71f1-45bb-85fa-7f939851262f"
        },
        "item": {
          "id": "d721b984-b9b9-4139-8488-ee1090ca4bfc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b6e2114f-1a03-4d9d-af0a-419f8f238198",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f754e678-6fa5-41b9-b9e6-c0217a4a3f27",
        "cursor": {
          "ref": "e4119d24-6634-4057-a900-f850d9acbb13",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f992f2a5-ac4c-45bf-a004-0124bd4ebfaf"
        },
        "item": {
          "id": "f754e678-6fa5-41b9-b9e6-c0217a4a3f27",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "20c3c1d5-763e-4f92-9b51-8e4483bfec26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f754e678-6fa5-41b9-b9e6-c0217a4a3f27",
        "cursor": {
          "ref": "e4119d24-6634-4057-a900-f850d9acbb13",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f992f2a5-ac4c-45bf-a004-0124bd4ebfaf"
        },
        "item": {
          "id": "f754e678-6fa5-41b9-b9e6-c0217a4a3f27",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "20c3c1d5-763e-4f92-9b51-8e4483bfec26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f867f545-681c-4608-b9e4-522a2721e991",
        "cursor": {
          "ref": "d5c7f443-11e4-49a9-9f58-05d5ed241e1c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f8057117-d0a0-40f7-ab98-12ccc18a0b0e"
        },
        "item": {
          "id": "f867f545-681c-4608-b9e4-522a2721e991",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9472f99a-30da-4d84-9931-93707b29195c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f867f545-681c-4608-b9e4-522a2721e991",
        "cursor": {
          "ref": "d5c7f443-11e4-49a9-9f58-05d5ed241e1c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f8057117-d0a0-40f7-ab98-12ccc18a0b0e"
        },
        "item": {
          "id": "f867f545-681c-4608-b9e4-522a2721e991",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9472f99a-30da-4d84-9931-93707b29195c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bbed33-31fc-40b8-bb4b-d4cd82dbe8fc",
        "cursor": {
          "ref": "3d9c677d-5d83-495d-a9bf-cde673a5edec",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "23c82bd3-07e3-42f2-96db-a7902d3a5358"
        },
        "item": {
          "id": "84bbed33-31fc-40b8-bb4b-d4cd82dbe8fc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fdd07bc6-6df5-4b12-bcc2-fd16f99d9360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bbed33-31fc-40b8-bb4b-d4cd82dbe8fc",
        "cursor": {
          "ref": "3d9c677d-5d83-495d-a9bf-cde673a5edec",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "23c82bd3-07e3-42f2-96db-a7902d3a5358"
        },
        "item": {
          "id": "84bbed33-31fc-40b8-bb4b-d4cd82dbe8fc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fdd07bc6-6df5-4b12-bcc2-fd16f99d9360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae71a1c-72f7-4090-a99f-8569d4777dfe",
        "cursor": {
          "ref": "ef7357ed-0954-4d68-99c7-c8454d0d36de",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "33e2cc7d-2d8e-4e10-a977-b5a28a48b4f8"
        },
        "item": {
          "id": "3ae71a1c-72f7-4090-a99f-8569d4777dfe",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5fc72d6b-c39f-4fa7-9f32-a4e082862a1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae71a1c-72f7-4090-a99f-8569d4777dfe",
        "cursor": {
          "ref": "ef7357ed-0954-4d68-99c7-c8454d0d36de",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "33e2cc7d-2d8e-4e10-a977-b5a28a48b4f8"
        },
        "item": {
          "id": "3ae71a1c-72f7-4090-a99f-8569d4777dfe",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5fc72d6b-c39f-4fa7-9f32-a4e082862a1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f39c1f-001f-49ba-92e5-85a080bf9fb0",
        "cursor": {
          "ref": "6ea50644-6d70-4eed-950b-794a8df76ea0",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4af4f12a-1ab1-4907-92b9-a3adf52564e9"
        },
        "item": {
          "id": "90f39c1f-001f-49ba-92e5-85a080bf9fb0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "645243d7-56fe-461e-ab87-54c19c8b591b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f39c1f-001f-49ba-92e5-85a080bf9fb0",
        "cursor": {
          "ref": "6ea50644-6d70-4eed-950b-794a8df76ea0",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4af4f12a-1ab1-4907-92b9-a3adf52564e9"
        },
        "item": {
          "id": "90f39c1f-001f-49ba-92e5-85a080bf9fb0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "645243d7-56fe-461e-ab87-54c19c8b591b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebeab3e-84ac-4fad-a3ae-8339a7fdc381",
        "cursor": {
          "ref": "63121b6a-4b9a-4d6d-8383-3667a2e8a769",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5759e20d-7850-4034-b03f-7084e26be50e"
        },
        "item": {
          "id": "5ebeab3e-84ac-4fad-a3ae-8339a7fdc381",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ff195a9d-a777-419a-aec8-009cf08435cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebeab3e-84ac-4fad-a3ae-8339a7fdc381",
        "cursor": {
          "ref": "63121b6a-4b9a-4d6d-8383-3667a2e8a769",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5759e20d-7850-4034-b03f-7084e26be50e"
        },
        "item": {
          "id": "5ebeab3e-84ac-4fad-a3ae-8339a7fdc381",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ff195a9d-a777-419a-aec8-009cf08435cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c22f6b-e988-4f9f-a5b1-b94c92693dd9",
        "cursor": {
          "ref": "82d377d7-238b-42bb-93d7-31fd3dd68750",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f9d4e4d0-fbac-4e1b-9c97-889cc6dde499"
        },
        "item": {
          "id": "31c22f6b-e988-4f9f-a5b1-b94c92693dd9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "94945328-2572-4c59-9454-0467b1aa77e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c22f6b-e988-4f9f-a5b1-b94c92693dd9",
        "cursor": {
          "ref": "82d377d7-238b-42bb-93d7-31fd3dd68750",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f9d4e4d0-fbac-4e1b-9c97-889cc6dde499"
        },
        "item": {
          "id": "31c22f6b-e988-4f9f-a5b1-b94c92693dd9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "94945328-2572-4c59-9454-0467b1aa77e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c714a6-8c55-4ebe-910a-232688cfa97d",
        "cursor": {
          "ref": "acf85225-6f37-4b65-b902-dcfb3df94eaa",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2701299b-00d1-4afa-8df8-d50a1559b9e7"
        },
        "item": {
          "id": "a0c714a6-8c55-4ebe-910a-232688cfa97d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bebc5009-da5b-4e05-81b3-2a80ecdaf8c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c714a6-8c55-4ebe-910a-232688cfa97d",
        "cursor": {
          "ref": "acf85225-6f37-4b65-b902-dcfb3df94eaa",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2701299b-00d1-4afa-8df8-d50a1559b9e7"
        },
        "item": {
          "id": "a0c714a6-8c55-4ebe-910a-232688cfa97d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bebc5009-da5b-4e05-81b3-2a80ecdaf8c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d05d28-b75d-464b-917f-03d051f8836a",
        "cursor": {
          "ref": "650fa846-c827-4692-8c7d-128b74bcb529",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4353fdbd-a7d1-4ae2-8215-56f0ecb49a07"
        },
        "item": {
          "id": "47d05d28-b75d-464b-917f-03d051f8836a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6aef856e-24c5-49e0-93a8-d62ec75fa170",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d05d28-b75d-464b-917f-03d051f8836a",
        "cursor": {
          "ref": "650fa846-c827-4692-8c7d-128b74bcb529",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4353fdbd-a7d1-4ae2-8215-56f0ecb49a07"
        },
        "item": {
          "id": "47d05d28-b75d-464b-917f-03d051f8836a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6aef856e-24c5-49e0-93a8-d62ec75fa170",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79a5548-4e17-4e1a-82fe-4b341be21ac9",
        "cursor": {
          "ref": "fcf05004-cb79-42c3-af77-9570e1925d7d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9eb9698a-f49d-48f2-ab4f-9e2583e8fced"
        },
        "item": {
          "id": "f79a5548-4e17-4e1a-82fe-4b341be21ac9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c0e1fdc6-ef3d-42b0-96af-4fc465bbce9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79a5548-4e17-4e1a-82fe-4b341be21ac9",
        "cursor": {
          "ref": "fcf05004-cb79-42c3-af77-9570e1925d7d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9eb9698a-f49d-48f2-ab4f-9e2583e8fced"
        },
        "item": {
          "id": "f79a5548-4e17-4e1a-82fe-4b341be21ac9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c0e1fdc6-ef3d-42b0-96af-4fc465bbce9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9c8b96-71b7-4818-aaae-f64bcbcae88e",
        "cursor": {
          "ref": "c6380b26-1101-432b-ba39-23d63964e101",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "487017dd-3a57-4231-967e-66508f6e407b"
        },
        "item": {
          "id": "0a9c8b96-71b7-4818-aaae-f64bcbcae88e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "38588546-20e8-4301-98bf-1682e2d09655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9c8b96-71b7-4818-aaae-f64bcbcae88e",
        "cursor": {
          "ref": "c6380b26-1101-432b-ba39-23d63964e101",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "487017dd-3a57-4231-967e-66508f6e407b"
        },
        "item": {
          "id": "0a9c8b96-71b7-4818-aaae-f64bcbcae88e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "38588546-20e8-4301-98bf-1682e2d09655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac1f7c6-768f-4dd8-9c42-c06e00e84240",
        "cursor": {
          "ref": "00d33806-a6bc-4e7e-9a23-b4274be4354b",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d8920020-b3a3-45bd-a923-c7edd89e5371"
        },
        "item": {
          "id": "4ac1f7c6-768f-4dd8-9c42-c06e00e84240",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a31b914a-f6a6-42b3-a97d-5bf3e5947a87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac1f7c6-768f-4dd8-9c42-c06e00e84240",
        "cursor": {
          "ref": "00d33806-a6bc-4e7e-9a23-b4274be4354b",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d8920020-b3a3-45bd-a923-c7edd89e5371"
        },
        "item": {
          "id": "4ac1f7c6-768f-4dd8-9c42-c06e00e84240",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a31b914a-f6a6-42b3-a97d-5bf3e5947a87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d833753f-0538-4cfd-9fb3-f0cbdb4a6cda",
        "cursor": {
          "ref": "3e849770-c940-452b-9829-b0765ea00307",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1352a68a-5b78-423c-8383-8a33e7e2bbcd"
        },
        "item": {
          "id": "d833753f-0538-4cfd-9fb3-f0cbdb4a6cda",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fcacd38c-79e9-4c00-977d-a5051b128b28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d833753f-0538-4cfd-9fb3-f0cbdb4a6cda",
        "cursor": {
          "ref": "3e849770-c940-452b-9829-b0765ea00307",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1352a68a-5b78-423c-8383-8a33e7e2bbcd"
        },
        "item": {
          "id": "d833753f-0538-4cfd-9fb3-f0cbdb4a6cda",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fcacd38c-79e9-4c00-977d-a5051b128b28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb8011b-430e-4de4-9add-776b140ad4a2",
        "cursor": {
          "ref": "0700dcf3-bd7d-472c-92b6-317a74d6f37f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "29a81611-6e04-476b-813c-8046bca8adbf"
        },
        "item": {
          "id": "ecb8011b-430e-4de4-9add-776b140ad4a2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "aad92f4a-5b2d-409a-aff1-b9707536374c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb8011b-430e-4de4-9add-776b140ad4a2",
        "cursor": {
          "ref": "0700dcf3-bd7d-472c-92b6-317a74d6f37f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "29a81611-6e04-476b-813c-8046bca8adbf"
        },
        "item": {
          "id": "ecb8011b-430e-4de4-9add-776b140ad4a2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "aad92f4a-5b2d-409a-aff1-b9707536374c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd12441c-9df6-4603-b6b4-0f2200cf7251",
        "cursor": {
          "ref": "7fed24af-eded-45ba-b5ab-de34a862e3ea",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d1c712f9-fd11-44f0-9526-39205c75b9f2"
        },
        "item": {
          "id": "dd12441c-9df6-4603-b6b4-0f2200cf7251",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "24cc7ee4-a858-45ef-b631-c6c22f2d62c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd12441c-9df6-4603-b6b4-0f2200cf7251",
        "cursor": {
          "ref": "7fed24af-eded-45ba-b5ab-de34a862e3ea",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d1c712f9-fd11-44f0-9526-39205c75b9f2"
        },
        "item": {
          "id": "dd12441c-9df6-4603-b6b4-0f2200cf7251",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "24cc7ee4-a858-45ef-b631-c6c22f2d62c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19abe98c-f3f5-4b77-b2a4-708e21104b4f",
        "cursor": {
          "ref": "fc23f5c6-687a-49d5-b190-3096719aa190",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "741b030f-90b9-49f5-be86-3f3d75603e33"
        },
        "item": {
          "id": "19abe98c-f3f5-4b77-b2a4-708e21104b4f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "07b16787-5226-4699-8483-9e0a02c9fba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19abe98c-f3f5-4b77-b2a4-708e21104b4f",
        "cursor": {
          "ref": "fc23f5c6-687a-49d5-b190-3096719aa190",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "741b030f-90b9-49f5-be86-3f3d75603e33"
        },
        "item": {
          "id": "19abe98c-f3f5-4b77-b2a4-708e21104b4f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "07b16787-5226-4699-8483-9e0a02c9fba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b43ab08-03b5-49c8-81fc-24a5e8a99205",
        "cursor": {
          "ref": "bfcbaf81-3558-4c24-831c-97f74d7f26aa",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a614d8dd-fc53-4603-b882-cb2cde729765"
        },
        "item": {
          "id": "4b43ab08-03b5-49c8-81fc-24a5e8a99205",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "db92b705-3f34-4006-b4f7-d6439b1f42c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b43ab08-03b5-49c8-81fc-24a5e8a99205",
        "cursor": {
          "ref": "bfcbaf81-3558-4c24-831c-97f74d7f26aa",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a614d8dd-fc53-4603-b882-cb2cde729765"
        },
        "item": {
          "id": "4b43ab08-03b5-49c8-81fc-24a5e8a99205",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "db92b705-3f34-4006-b4f7-d6439b1f42c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa63121e-aad7-44c2-a232-23a6176cea44",
        "cursor": {
          "ref": "961998c5-da15-426d-9721-0d9432905f48",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d7803381-5632-4597-9477-a2fa4a8edc73"
        },
        "item": {
          "id": "aa63121e-aad7-44c2-a232-23a6176cea44",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bc27ea46-7f65-47df-ba69-0d28fa66c625",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa63121e-aad7-44c2-a232-23a6176cea44",
        "cursor": {
          "ref": "961998c5-da15-426d-9721-0d9432905f48",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d7803381-5632-4597-9477-a2fa4a8edc73"
        },
        "item": {
          "id": "aa63121e-aad7-44c2-a232-23a6176cea44",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bc27ea46-7f65-47df-ba69-0d28fa66c625",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6173902b-89e0-44bf-9580-3af9bc82dbcc",
        "cursor": {
          "ref": "6db4456c-de2d-4e32-913b-0e7911719f5a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6f5a17cd-cdf6-422a-b059-ad4e26a84f8f"
        },
        "item": {
          "id": "6173902b-89e0-44bf-9580-3af9bc82dbcc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "50b70fd4-b0f5-452e-afb7-848babd5fc8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6173902b-89e0-44bf-9580-3af9bc82dbcc",
        "cursor": {
          "ref": "6db4456c-de2d-4e32-913b-0e7911719f5a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6f5a17cd-cdf6-422a-b059-ad4e26a84f8f"
        },
        "item": {
          "id": "6173902b-89e0-44bf-9580-3af9bc82dbcc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "50b70fd4-b0f5-452e-afb7-848babd5fc8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e76772-95f7-4685-bb60-63d0503c2f4a",
        "cursor": {
          "ref": "de752cc9-917c-4643-ae38-7cbae23e756c",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "68623e6e-e3d3-422e-bab2-11f190b87226"
        },
        "item": {
          "id": "f0e76772-95f7-4685-bb60-63d0503c2f4a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "16984f70-82e8-4b24-9d79-e15a3416099b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e76772-95f7-4685-bb60-63d0503c2f4a",
        "cursor": {
          "ref": "de752cc9-917c-4643-ae38-7cbae23e756c",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "68623e6e-e3d3-422e-bab2-11f190b87226"
        },
        "item": {
          "id": "f0e76772-95f7-4685-bb60-63d0503c2f4a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "16984f70-82e8-4b24-9d79-e15a3416099b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c957f62d-a774-4aee-a374-d15229a6fe5a",
        "cursor": {
          "ref": "af035a17-99ed-4ba2-9c91-f2cfd09a3e6b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e6efb72c-b9d3-42bb-a324-ec2c9a90d835"
        },
        "item": {
          "id": "c957f62d-a774-4aee-a374-d15229a6fe5a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1e4dba22-ad9c-4509-aadc-447798243549",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c957f62d-a774-4aee-a374-d15229a6fe5a",
        "cursor": {
          "ref": "af035a17-99ed-4ba2-9c91-f2cfd09a3e6b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e6efb72c-b9d3-42bb-a324-ec2c9a90d835"
        },
        "item": {
          "id": "c957f62d-a774-4aee-a374-d15229a6fe5a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1e4dba22-ad9c-4509-aadc-447798243549",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2234ceb-aaa5-41a8-bd4e-ad948dcf051f",
        "cursor": {
          "ref": "e142f7e7-e80d-4377-a1c7-b4702c97adcd",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "400ffa93-9ace-424f-ae3b-8c80448cc180"
        },
        "item": {
          "id": "b2234ceb-aaa5-41a8-bd4e-ad948dcf051f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e5a86266-c9ef-4631-8430-8db2d7449cd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2234ceb-aaa5-41a8-bd4e-ad948dcf051f",
        "cursor": {
          "ref": "e142f7e7-e80d-4377-a1c7-b4702c97adcd",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "400ffa93-9ace-424f-ae3b-8c80448cc180"
        },
        "item": {
          "id": "b2234ceb-aaa5-41a8-bd4e-ad948dcf051f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e5a86266-c9ef-4631-8430-8db2d7449cd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6593f34b-6f7e-416c-88a6-a4c3779d6568",
        "cursor": {
          "ref": "2278c018-5cd8-43ea-85ba-e1c8cd6c160d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6955a0f7-e9c6-4336-9c7c-3b7972ce1498"
        },
        "item": {
          "id": "6593f34b-6f7e-416c-88a6-a4c3779d6568",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a2f96ce2-f613-4538-b146-ca705e534ce5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6593f34b-6f7e-416c-88a6-a4c3779d6568",
        "cursor": {
          "ref": "2278c018-5cd8-43ea-85ba-e1c8cd6c160d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6955a0f7-e9c6-4336-9c7c-3b7972ce1498"
        },
        "item": {
          "id": "6593f34b-6f7e-416c-88a6-a4c3779d6568",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a2f96ce2-f613-4538-b146-ca705e534ce5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0613990e-0456-4665-9702-c65f4f406f63",
        "cursor": {
          "ref": "438ba0af-36e4-45fd-8553-7ea5a09cd9a5",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e8545c41-2394-4470-b63e-1bc2a9ce63e2"
        },
        "item": {
          "id": "0613990e-0456-4665-9702-c65f4f406f63",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6185f7e6-d5b8-4756-b45c-b70998aef61b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0613990e-0456-4665-9702-c65f4f406f63",
        "cursor": {
          "ref": "438ba0af-36e4-45fd-8553-7ea5a09cd9a5",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e8545c41-2394-4470-b63e-1bc2a9ce63e2"
        },
        "item": {
          "id": "0613990e-0456-4665-9702-c65f4f406f63",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6185f7e6-d5b8-4756-b45c-b70998aef61b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0326b1-abad-4c86-af87-8faa0bfc0f6a",
        "cursor": {
          "ref": "b4e2c473-05ac-4fd4-ba38-c2b34f7e01e7",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6bdf0da6-8467-439e-b8cf-e5f206d26c0f"
        },
        "item": {
          "id": "db0326b1-abad-4c86-af87-8faa0bfc0f6a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1be40db0-8bd6-4b5c-93a7-127dff628049",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0326b1-abad-4c86-af87-8faa0bfc0f6a",
        "cursor": {
          "ref": "b4e2c473-05ac-4fd4-ba38-c2b34f7e01e7",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6bdf0da6-8467-439e-b8cf-e5f206d26c0f"
        },
        "item": {
          "id": "db0326b1-abad-4c86-af87-8faa0bfc0f6a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1be40db0-8bd6-4b5c-93a7-127dff628049",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f457228d-563f-4dac-b70b-d92e370d12ed",
        "cursor": {
          "ref": "b0f8efab-c910-468a-8a52-064d81bcb876",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "84347409-c114-43ad-b9f2-0c97b7c28bc2"
        },
        "item": {
          "id": "f457228d-563f-4dac-b70b-d92e370d12ed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "21a97c74-ad75-432f-8b7a-91834a9e5504",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f457228d-563f-4dac-b70b-d92e370d12ed",
        "cursor": {
          "ref": "b0f8efab-c910-468a-8a52-064d81bcb876",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "84347409-c114-43ad-b9f2-0c97b7c28bc2"
        },
        "item": {
          "id": "f457228d-563f-4dac-b70b-d92e370d12ed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "21a97c74-ad75-432f-8b7a-91834a9e5504",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48884ed9-a49b-4181-9c40-1226780a2105",
        "cursor": {
          "ref": "6d3d7e4b-630d-4c11-900e-7daec84c489c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2229f270-25fb-43e2-9bff-7a934b53d82b"
        },
        "item": {
          "id": "48884ed9-a49b-4181-9c40-1226780a2105",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fb14bb25-6d5f-4099-a473-74a0cb1bdafa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48884ed9-a49b-4181-9c40-1226780a2105",
        "cursor": {
          "ref": "6d3d7e4b-630d-4c11-900e-7daec84c489c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2229f270-25fb-43e2-9bff-7a934b53d82b"
        },
        "item": {
          "id": "48884ed9-a49b-4181-9c40-1226780a2105",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fb14bb25-6d5f-4099-a473-74a0cb1bdafa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48907a37-4a03-4fa7-9e66-7cc785e2d16d",
        "cursor": {
          "ref": "02b36efe-ba90-449d-a413-6cb96abd58c8",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cd52d2bf-e134-41ef-818d-d01b2c8cdeb5"
        },
        "item": {
          "id": "48907a37-4a03-4fa7-9e66-7cc785e2d16d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d1ca91d1-fb80-45bc-ba36-5013c323b414",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48907a37-4a03-4fa7-9e66-7cc785e2d16d",
        "cursor": {
          "ref": "02b36efe-ba90-449d-a413-6cb96abd58c8",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cd52d2bf-e134-41ef-818d-d01b2c8cdeb5"
        },
        "item": {
          "id": "48907a37-4a03-4fa7-9e66-7cc785e2d16d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d1ca91d1-fb80-45bc-ba36-5013c323b414",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf5e43c-8859-403f-87c1-6ab6616824df",
        "cursor": {
          "ref": "7aa91049-65fa-4750-9fb7-7f6d551f73ca",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cc52b5e8-a601-469e-984a-7817669ad5b1"
        },
        "item": {
          "id": "bdf5e43c-8859-403f-87c1-6ab6616824df",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e1b4a571-93a3-4aa2-a634-712513385df7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf5e43c-8859-403f-87c1-6ab6616824df",
        "cursor": {
          "ref": "7aa91049-65fa-4750-9fb7-7f6d551f73ca",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cc52b5e8-a601-469e-984a-7817669ad5b1"
        },
        "item": {
          "id": "bdf5e43c-8859-403f-87c1-6ab6616824df",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e1b4a571-93a3-4aa2-a634-712513385df7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408cd63c-999d-4074-bfb6-c68b30f995d3",
        "cursor": {
          "ref": "2c7e4b2f-de8f-46e8-975d-58113409971a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "61cfce0f-616e-41bf-9152-414d4c50edce"
        },
        "item": {
          "id": "408cd63c-999d-4074-bfb6-c68b30f995d3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "61ea66c5-8fb2-42c5-b97f-0289fdb37944",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408cd63c-999d-4074-bfb6-c68b30f995d3",
        "cursor": {
          "ref": "2c7e4b2f-de8f-46e8-975d-58113409971a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "61cfce0f-616e-41bf-9152-414d4c50edce"
        },
        "item": {
          "id": "408cd63c-999d-4074-bfb6-c68b30f995d3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "61ea66c5-8fb2-42c5-b97f-0289fdb37944",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046f349c-24bf-4d9a-bb83-34a55d02ecea",
        "cursor": {
          "ref": "965b21bf-29df-4083-b318-ed0905734009",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9d90b08a-35eb-4353-9e3b-3d1edff38e4a"
        },
        "item": {
          "id": "046f349c-24bf-4d9a-bb83-34a55d02ecea",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c863c659-fa53-42d5-96cd-48b4fa67435d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046f349c-24bf-4d9a-bb83-34a55d02ecea",
        "cursor": {
          "ref": "965b21bf-29df-4083-b318-ed0905734009",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9d90b08a-35eb-4353-9e3b-3d1edff38e4a"
        },
        "item": {
          "id": "046f349c-24bf-4d9a-bb83-34a55d02ecea",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c863c659-fa53-42d5-96cd-48b4fa67435d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae2858e-17b2-4858-a753-b38585088966",
        "cursor": {
          "ref": "ce46fb3b-2731-4a79-a9cc-79185eefcd40",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "44f41a6d-238f-4f42-a698-f4de48b75140"
        },
        "item": {
          "id": "6ae2858e-17b2-4858-a753-b38585088966",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2fa4aefe-fa61-490d-9875-970d9ab74245",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae2858e-17b2-4858-a753-b38585088966",
        "cursor": {
          "ref": "ce46fb3b-2731-4a79-a9cc-79185eefcd40",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "44f41a6d-238f-4f42-a698-f4de48b75140"
        },
        "item": {
          "id": "6ae2858e-17b2-4858-a753-b38585088966",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2fa4aefe-fa61-490d-9875-970d9ab74245",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9900dbf4-5136-4b62-a3b8-f2c272683d00",
        "cursor": {
          "ref": "01bd8531-b032-4ccd-a80b-a4377856c446",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "05b3a787-7a2f-43eb-a2e9-0193d28fb6da"
        },
        "item": {
          "id": "9900dbf4-5136-4b62-a3b8-f2c272683d00",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8da86bb8-cbd6-4ef2-a2db-8471ad57c367",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9900dbf4-5136-4b62-a3b8-f2c272683d00",
        "cursor": {
          "ref": "01bd8531-b032-4ccd-a80b-a4377856c446",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "05b3a787-7a2f-43eb-a2e9-0193d28fb6da"
        },
        "item": {
          "id": "9900dbf4-5136-4b62-a3b8-f2c272683d00",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8da86bb8-cbd6-4ef2-a2db-8471ad57c367",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb59c51f-94cc-4ea0-ae4d-3fd3729b5a23",
        "cursor": {
          "ref": "27d5a5ae-253e-4843-ba00-d70e0df35a66",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a24d1c07-345c-4c36-965b-51e4c2b077b4"
        },
        "item": {
          "id": "cb59c51f-94cc-4ea0-ae4d-3fd3729b5a23",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "46bb2435-3f37-4c21-8c35-de0fe344c78b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb59c51f-94cc-4ea0-ae4d-3fd3729b5a23",
        "cursor": {
          "ref": "27d5a5ae-253e-4843-ba00-d70e0df35a66",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a24d1c07-345c-4c36-965b-51e4c2b077b4"
        },
        "item": {
          "id": "cb59c51f-94cc-4ea0-ae4d-3fd3729b5a23",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "46bb2435-3f37-4c21-8c35-de0fe344c78b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c24cc6-1bae-4e25-b411-cf4257b6a7d6",
        "cursor": {
          "ref": "88adf225-bef9-40cb-a0bc-5e6e244816f2",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6c58546b-71aa-422d-8a87-e1fca20672e2"
        },
        "item": {
          "id": "01c24cc6-1bae-4e25-b411-cf4257b6a7d6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5d134735-7bfc-4e1c-8851-c553963d6ac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "01c24cc6-1bae-4e25-b411-cf4257b6a7d6",
        "cursor": {
          "ref": "88adf225-bef9-40cb-a0bc-5e6e244816f2",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6c58546b-71aa-422d-8a87-e1fca20672e2"
        },
        "item": {
          "id": "01c24cc6-1bae-4e25-b411-cf4257b6a7d6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5d134735-7bfc-4e1c-8851-c553963d6ac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "3164a337-c633-4687-a1f6-3f0d0456bd10",
        "cursor": {
          "ref": "11a1c700-cd0f-40e9-94bf-69964a518c8a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bc37d325-2f6a-454f-b251-872b0b2fa198"
        },
        "item": {
          "id": "3164a337-c633-4687-a1f6-3f0d0456bd10",
          "name": "credentials_issue"
        },
        "response": {
          "id": "447abc1a-a03e-4841-ad56-1374c1836a2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "3164a337-c633-4687-a1f6-3f0d0456bd10",
        "cursor": {
          "ref": "11a1c700-cd0f-40e9-94bf-69964a518c8a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bc37d325-2f6a-454f-b251-872b0b2fa198"
        },
        "item": {
          "id": "3164a337-c633-4687-a1f6-3f0d0456bd10",
          "name": "credentials_issue"
        },
        "response": {
          "id": "447abc1a-a03e-4841-ad56-1374c1836a2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "3093e936-dbba-4346-a1c5-ef8259afdb9b",
        "cursor": {
          "ref": "2445eadb-ed58-41d8-82fd-e467f7fae7c9",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6fa3ce0e-0b1b-429f-914a-f82d817f6f61"
        },
        "item": {
          "id": "3093e936-dbba-4346-a1c5-ef8259afdb9b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "abc40842-ea9a-43cb-b232-d2f347370fe0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "3093e936-dbba-4346-a1c5-ef8259afdb9b",
        "cursor": {
          "ref": "2445eadb-ed58-41d8-82fd-e467f7fae7c9",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6fa3ce0e-0b1b-429f-914a-f82d817f6f61"
        },
        "item": {
          "id": "3093e936-dbba-4346-a1c5-ef8259afdb9b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "abc40842-ea9a-43cb-b232-d2f347370fe0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "778bc803-a3e2-4edd-b6b0-3b22fe2f0a7b",
        "cursor": {
          "ref": "68cba737-847a-4bcc-aefb-008c8e72eb02",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c9a08704-6ee7-461a-948c-228d51ffbe41"
        },
        "item": {
          "id": "778bc803-a3e2-4edd-b6b0-3b22fe2f0a7b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d0b8a0db-ff05-4cb9-a4af-48f2af70ee2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "778bc803-a3e2-4edd-b6b0-3b22fe2f0a7b",
        "cursor": {
          "ref": "68cba737-847a-4bcc-aefb-008c8e72eb02",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c9a08704-6ee7-461a-948c-228d51ffbe41"
        },
        "item": {
          "id": "778bc803-a3e2-4edd-b6b0-3b22fe2f0a7b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d0b8a0db-ff05-4cb9-a4af-48f2af70ee2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "4810ef53-f32d-4f5b-b406-1ebc1fc881df",
        "cursor": {
          "ref": "1607f748-3501-4fcd-bdc6-c0d963150320",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c864d394-00ff-4132-a3a7-312b80744f0a"
        },
        "item": {
          "id": "4810ef53-f32d-4f5b-b406-1ebc1fc881df",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a837fdad-1117-46ff-accd-31a3a2febecb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4810ef53-f32d-4f5b-b406-1ebc1fc881df",
        "cursor": {
          "ref": "1607f748-3501-4fcd-bdc6-c0d963150320",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c864d394-00ff-4132-a3a7-312b80744f0a"
        },
        "item": {
          "id": "4810ef53-f32d-4f5b-b406-1ebc1fc881df",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a837fdad-1117-46ff-accd-31a3a2febecb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "0ccd7b8b-5fbd-40f5-a3ed-c71f388278ea",
        "cursor": {
          "ref": "76284302-0359-41c3-ad2a-85adf8738cf2",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "78183fb5-30d2-4d51-a8bd-83c786fe6e1c"
        },
        "item": {
          "id": "0ccd7b8b-5fbd-40f5-a3ed-c71f388278ea",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4be87271-6f80-4835-80d9-38c8d7e5314d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0ccd7b8b-5fbd-40f5-a3ed-c71f388278ea",
        "cursor": {
          "ref": "76284302-0359-41c3-ad2a-85adf8738cf2",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "78183fb5-30d2-4d51-a8bd-83c786fe6e1c"
        },
        "item": {
          "id": "0ccd7b8b-5fbd-40f5-a3ed-c71f388278ea",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4be87271-6f80-4835-80d9-38c8d7e5314d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "474b84be-bb84-419b-8591-589319c43908",
        "cursor": {
          "ref": "4dfe133e-2562-4635-aa10-b240244f7a14",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bf0c1e1c-bdfc-4187-a68f-84d13875856f"
        },
        "item": {
          "id": "474b84be-bb84-419b-8591-589319c43908",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "71268039-31db-472b-bec6-7f4e87008ebe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "474b84be-bb84-419b-8591-589319c43908",
        "cursor": {
          "ref": "4dfe133e-2562-4635-aa10-b240244f7a14",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bf0c1e1c-bdfc-4187-a68f-84d13875856f"
        },
        "item": {
          "id": "474b84be-bb84-419b-8591-589319c43908",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "71268039-31db-472b-bec6-7f4e87008ebe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "badd94a6-2263-40da-88e1-bdfb34a1380f",
        "cursor": {
          "ref": "c9939aaf-e6dc-4312-880e-7981741ee760",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a29c0cf1-b848-463f-8110-c06e70be84b9"
        },
        "item": {
          "id": "badd94a6-2263-40da-88e1-bdfb34a1380f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "63ab87b7-ba9e-40da-9012-0142c9cb374a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badd94a6-2263-40da-88e1-bdfb34a1380f",
        "cursor": {
          "ref": "c9939aaf-e6dc-4312-880e-7981741ee760",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a29c0cf1-b848-463f-8110-c06e70be84b9"
        },
        "item": {
          "id": "badd94a6-2263-40da-88e1-bdfb34a1380f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "63ab87b7-ba9e-40da-9012-0142c9cb374a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584449d9-8c1d-4014-a07d-59ee39d54193",
        "cursor": {
          "ref": "b68d582c-ef30-4803-83e5-2b401ed83151",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c0995deb-2648-41fe-8502-7855b3944ae1"
        },
        "item": {
          "id": "584449d9-8c1d-4014-a07d-59ee39d54193",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "671405d1-47e5-4231-8c5a-cc128b6678ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584449d9-8c1d-4014-a07d-59ee39d54193",
        "cursor": {
          "ref": "b68d582c-ef30-4803-83e5-2b401ed83151",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c0995deb-2648-41fe-8502-7855b3944ae1"
        },
        "item": {
          "id": "584449d9-8c1d-4014-a07d-59ee39d54193",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "671405d1-47e5-4231-8c5a-cc128b6678ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14dbb09a-b0d9-4f72-bae4-e05824779bab",
        "cursor": {
          "ref": "02567296-7e23-49b9-aaa7-a4d92e94a945",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "830a1341-4721-4aff-8b9d-5697c30ae877"
        },
        "item": {
          "id": "14dbb09a-b0d9-4f72-bae4-e05824779bab",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "395e7bfa-f51a-4789-90e9-f52ef584da47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14dbb09a-b0d9-4f72-bae4-e05824779bab",
        "cursor": {
          "ref": "02567296-7e23-49b9-aaa7-a4d92e94a945",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "830a1341-4721-4aff-8b9d-5697c30ae877"
        },
        "item": {
          "id": "14dbb09a-b0d9-4f72-bae4-e05824779bab",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "395e7bfa-f51a-4789-90e9-f52ef584da47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18cc249-1428-4d5c-9532-7a70d31eb1c9",
        "cursor": {
          "ref": "86094e83-7b55-4f28-9d61-374eed19419f",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fd6ddb62-fc88-419e-af0c-6f75984e45f0"
        },
        "item": {
          "id": "d18cc249-1428-4d5c-9532-7a70d31eb1c9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e0ad3506-2997-4a64-af35-bddb82964aac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18cc249-1428-4d5c-9532-7a70d31eb1c9",
        "cursor": {
          "ref": "86094e83-7b55-4f28-9d61-374eed19419f",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fd6ddb62-fc88-419e-af0c-6f75984e45f0"
        },
        "item": {
          "id": "d18cc249-1428-4d5c-9532-7a70d31eb1c9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e0ad3506-2997-4a64-af35-bddb82964aac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68609a6-1515-4eae-af75-f71c602ee5eb",
        "cursor": {
          "ref": "98ac3c60-e9ce-465a-9357-d8859b1c2b88",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4bd5fff9-1e00-4bd1-94b5-139f14a1b7e3"
        },
        "item": {
          "id": "d68609a6-1515-4eae-af75-f71c602ee5eb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df879331-dcb3-4b0d-bfa5-09e7082065b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68609a6-1515-4eae-af75-f71c602ee5eb",
        "cursor": {
          "ref": "98ac3c60-e9ce-465a-9357-d8859b1c2b88",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4bd5fff9-1e00-4bd1-94b5-139f14a1b7e3"
        },
        "item": {
          "id": "d68609a6-1515-4eae-af75-f71c602ee5eb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df879331-dcb3-4b0d-bfa5-09e7082065b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b13f3d4-ada8-4676-8a33-ee935d9286b7",
        "cursor": {
          "ref": "8dbdf243-bb51-42c6-8208-9f37859e7b85",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "039b8996-7dce-4d8e-914d-28aa318768d8"
        },
        "item": {
          "id": "4b13f3d4-ada8-4676-8a33-ee935d9286b7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8e65bd6d-2b9c-416f-98c0-bf9645ac9f89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b13f3d4-ada8-4676-8a33-ee935d9286b7",
        "cursor": {
          "ref": "8dbdf243-bb51-42c6-8208-9f37859e7b85",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "039b8996-7dce-4d8e-914d-28aa318768d8"
        },
        "item": {
          "id": "4b13f3d4-ada8-4676-8a33-ee935d9286b7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8e65bd6d-2b9c-416f-98c0-bf9645ac9f89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29436a16-ecde-4385-920c-8aebe2fc7c9b",
        "cursor": {
          "ref": "244db255-43b5-449f-910f-9b8cabda66d7",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a6271d6f-01ae-474d-aba1-38a666e0423e"
        },
        "item": {
          "id": "29436a16-ecde-4385-920c-8aebe2fc7c9b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5f55c7a9-a6ae-4442-8eb9-6c638f3c6022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29436a16-ecde-4385-920c-8aebe2fc7c9b",
        "cursor": {
          "ref": "244db255-43b5-449f-910f-9b8cabda66d7",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a6271d6f-01ae-474d-aba1-38a666e0423e"
        },
        "item": {
          "id": "29436a16-ecde-4385-920c-8aebe2fc7c9b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5f55c7a9-a6ae-4442-8eb9-6c638f3c6022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d76ccc-d9a8-48e8-9913-7197445e0f7f",
        "cursor": {
          "ref": "3fe230db-0712-4516-8437-e5231110effa",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d333fd6c-aaec-47e8-8541-32a927026006"
        },
        "item": {
          "id": "95d76ccc-d9a8-48e8-9913-7197445e0f7f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c237f3da-2ea2-442c-8abd-228696eb8a34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d76ccc-d9a8-48e8-9913-7197445e0f7f",
        "cursor": {
          "ref": "3fe230db-0712-4516-8437-e5231110effa",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d333fd6c-aaec-47e8-8541-32a927026006"
        },
        "item": {
          "id": "95d76ccc-d9a8-48e8-9913-7197445e0f7f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c237f3da-2ea2-442c-8abd-228696eb8a34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fea2fb-f229-497d-92a1-6a73719fbb95",
        "cursor": {
          "ref": "052e5166-a1ea-4ce2-8247-509bb29f5642",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ea57a716-8b58-4985-bccd-7073880d26a6"
        },
        "item": {
          "id": "26fea2fb-f229-497d-92a1-6a73719fbb95",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c41874e3-ccb7-4a89-95cd-f43a46c206b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fea2fb-f229-497d-92a1-6a73719fbb95",
        "cursor": {
          "ref": "052e5166-a1ea-4ce2-8247-509bb29f5642",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ea57a716-8b58-4985-bccd-7073880d26a6"
        },
        "item": {
          "id": "26fea2fb-f229-497d-92a1-6a73719fbb95",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c41874e3-ccb7-4a89-95cd-f43a46c206b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a3bd0b-5b31-456f-9da7-2f86d586d34c",
        "cursor": {
          "ref": "5f9bbbb1-9d2c-4f06-ac34-8f40fbb5a533",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8a90c099-f0b0-48d6-a050-2725c48ac6ac"
        },
        "item": {
          "id": "b1a3bd0b-5b31-456f-9da7-2f86d586d34c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a12e9bb6-d409-40df-8377-9991d3f7950a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a3bd0b-5b31-456f-9da7-2f86d586d34c",
        "cursor": {
          "ref": "5f9bbbb1-9d2c-4f06-ac34-8f40fbb5a533",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8a90c099-f0b0-48d6-a050-2725c48ac6ac"
        },
        "item": {
          "id": "b1a3bd0b-5b31-456f-9da7-2f86d586d34c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a12e9bb6-d409-40df-8377-9991d3f7950a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326eaa7a-121d-4aad-a84f-c2e4c7344677",
        "cursor": {
          "ref": "b69c9a6b-3226-469c-8ec8-8d4284f8a686",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2c23a7d5-bb34-4eec-aca4-8ed853c927b0"
        },
        "item": {
          "id": "326eaa7a-121d-4aad-a84f-c2e4c7344677",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "98d88cc4-023f-4a1a-b47f-59d462c88bb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326eaa7a-121d-4aad-a84f-c2e4c7344677",
        "cursor": {
          "ref": "b69c9a6b-3226-469c-8ec8-8d4284f8a686",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2c23a7d5-bb34-4eec-aca4-8ed853c927b0"
        },
        "item": {
          "id": "326eaa7a-121d-4aad-a84f-c2e4c7344677",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "98d88cc4-023f-4a1a-b47f-59d462c88bb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15112313-a51c-4231-95ce-c28d2aed3315",
        "cursor": {
          "ref": "45657bc7-d954-4cee-9048-937aee443daf",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6f68d3c7-1e52-4000-9f01-5a49b82491e3"
        },
        "item": {
          "id": "15112313-a51c-4231-95ce-c28d2aed3315",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b2bdf004-a407-4115-a69c-89e35d1b00a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15112313-a51c-4231-95ce-c28d2aed3315",
        "cursor": {
          "ref": "45657bc7-d954-4cee-9048-937aee443daf",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6f68d3c7-1e52-4000-9f01-5a49b82491e3"
        },
        "item": {
          "id": "15112313-a51c-4231-95ce-c28d2aed3315",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b2bdf004-a407-4115-a69c-89e35d1b00a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24d286d-87df-48f6-bfc6-9a75b823b5dd",
        "cursor": {
          "ref": "d9107404-936b-43a9-b9cf-e43435ac4a02",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3b8a5dd4-b2bd-4776-a983-534faaa4e972"
        },
        "item": {
          "id": "e24d286d-87df-48f6-bfc6-9a75b823b5dd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "546d8e0f-9cce-45b9-8510-77645b32de8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24d286d-87df-48f6-bfc6-9a75b823b5dd",
        "cursor": {
          "ref": "d9107404-936b-43a9-b9cf-e43435ac4a02",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3b8a5dd4-b2bd-4776-a983-534faaa4e972"
        },
        "item": {
          "id": "e24d286d-87df-48f6-bfc6-9a75b823b5dd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "546d8e0f-9cce-45b9-8510-77645b32de8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e39095c-4c89-4ce6-9e8f-79a698707937",
        "cursor": {
          "ref": "cd871adf-b01e-4e1f-957b-327cc913b615",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2851e9c6-107e-497e-ad59-2babedf7ff7b"
        },
        "item": {
          "id": "3e39095c-4c89-4ce6-9e8f-79a698707937",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4d5b2c68-5f11-4830-8957-7b74c209125a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e39095c-4c89-4ce6-9e8f-79a698707937",
        "cursor": {
          "ref": "cd871adf-b01e-4e1f-957b-327cc913b615",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2851e9c6-107e-497e-ad59-2babedf7ff7b"
        },
        "item": {
          "id": "3e39095c-4c89-4ce6-9e8f-79a698707937",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4d5b2c68-5f11-4830-8957-7b74c209125a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f870a8-4380-42d8-a69e-8109fa2a8422",
        "cursor": {
          "ref": "5e15bb5a-92e3-47e1-a55a-ad50df109d2e",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "93eb24c2-bc7b-4055-beb9-e4da4ad69be5"
        },
        "item": {
          "id": "35f870a8-4380-42d8-a69e-8109fa2a8422",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "760c89db-c22e-4ff3-90a9-8ded05006202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f870a8-4380-42d8-a69e-8109fa2a8422",
        "cursor": {
          "ref": "5e15bb5a-92e3-47e1-a55a-ad50df109d2e",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "93eb24c2-bc7b-4055-beb9-e4da4ad69be5"
        },
        "item": {
          "id": "35f870a8-4380-42d8-a69e-8109fa2a8422",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "760c89db-c22e-4ff3-90a9-8ded05006202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876c3c7a-dbde-4c84-ad96-68432fd6c907",
        "cursor": {
          "ref": "a888dfeb-acae-4d9d-9e08-33683e9570e6",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "da47255e-6e5a-401c-889d-9139ede84986"
        },
        "item": {
          "id": "876c3c7a-dbde-4c84-ad96-68432fd6c907",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ddd89ce8-8123-4bd2-b626-e71ac79a9a67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876c3c7a-dbde-4c84-ad96-68432fd6c907",
        "cursor": {
          "ref": "a888dfeb-acae-4d9d-9e08-33683e9570e6",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "da47255e-6e5a-401c-889d-9139ede84986"
        },
        "item": {
          "id": "876c3c7a-dbde-4c84-ad96-68432fd6c907",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ddd89ce8-8123-4bd2-b626-e71ac79a9a67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62291c5d-f53d-465f-a4d4-456a80e954a9",
        "cursor": {
          "ref": "5086f2a8-6014-4bbf-9af5-5904345c91d3",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a6eb40fd-9e25-4f15-a1e4-a91bd2083650"
        },
        "item": {
          "id": "62291c5d-f53d-465f-a4d4-456a80e954a9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4456531c-ae7b-4550-9975-323033b55ab1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62291c5d-f53d-465f-a4d4-456a80e954a9",
        "cursor": {
          "ref": "5086f2a8-6014-4bbf-9af5-5904345c91d3",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a6eb40fd-9e25-4f15-a1e4-a91bd2083650"
        },
        "item": {
          "id": "62291c5d-f53d-465f-a4d4-456a80e954a9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4456531c-ae7b-4550-9975-323033b55ab1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679c0e79-be73-4c91-8d84-329aba34ff88",
        "cursor": {
          "ref": "2335797e-c13d-46be-92f0-fefad3d070b9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "eb266039-4bf2-4e11-a073-44d7dc3fdb02"
        },
        "item": {
          "id": "679c0e79-be73-4c91-8d84-329aba34ff88",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c3f05ce6-43e7-489d-a4b2-3cfd57f20f5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679c0e79-be73-4c91-8d84-329aba34ff88",
        "cursor": {
          "ref": "2335797e-c13d-46be-92f0-fefad3d070b9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "eb266039-4bf2-4e11-a073-44d7dc3fdb02"
        },
        "item": {
          "id": "679c0e79-be73-4c91-8d84-329aba34ff88",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c3f05ce6-43e7-489d-a4b2-3cfd57f20f5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9174fd93-ce0f-4630-a9e2-2f6f414256d1",
        "cursor": {
          "ref": "d24a7f25-9133-4ff5-b8f7-49d943ad90fa",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3213187b-3541-48bd-a10a-07001e8b2f58"
        },
        "item": {
          "id": "9174fd93-ce0f-4630-a9e2-2f6f414256d1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d73b5237-83dc-450f-9151-84eeee5a99a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9174fd93-ce0f-4630-a9e2-2f6f414256d1",
        "cursor": {
          "ref": "d24a7f25-9133-4ff5-b8f7-49d943ad90fa",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3213187b-3541-48bd-a10a-07001e8b2f58"
        },
        "item": {
          "id": "9174fd93-ce0f-4630-a9e2-2f6f414256d1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d73b5237-83dc-450f-9151-84eeee5a99a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88049ec-36b2-44d2-95cb-a858a0b5ebcd",
        "cursor": {
          "ref": "d31bc1d3-6fdc-4d29-816b-eb3db48a2e10",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "91e76385-bc8b-4bb0-b57e-65d7b0d7931a"
        },
        "item": {
          "id": "b88049ec-36b2-44d2-95cb-a858a0b5ebcd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0564f2bb-3b1e-4db1-a2fc-39e895461ed2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88049ec-36b2-44d2-95cb-a858a0b5ebcd",
        "cursor": {
          "ref": "d31bc1d3-6fdc-4d29-816b-eb3db48a2e10",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "91e76385-bc8b-4bb0-b57e-65d7b0d7931a"
        },
        "item": {
          "id": "b88049ec-36b2-44d2-95cb-a858a0b5ebcd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0564f2bb-3b1e-4db1-a2fc-39e895461ed2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ba9340-9db0-4bfc-bdd9-8052adb6fd8b",
        "cursor": {
          "ref": "0318eec5-4285-46dd-8f80-a9a0e4047883",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f45c000a-fece-4db8-8159-1f322247c0c6"
        },
        "item": {
          "id": "50ba9340-9db0-4bfc-bdd9-8052adb6fd8b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e3678dd8-1504-44d4-a3eb-e5bfedc4405d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ba9340-9db0-4bfc-bdd9-8052adb6fd8b",
        "cursor": {
          "ref": "0318eec5-4285-46dd-8f80-a9a0e4047883",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f45c000a-fece-4db8-8159-1f322247c0c6"
        },
        "item": {
          "id": "50ba9340-9db0-4bfc-bdd9-8052adb6fd8b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e3678dd8-1504-44d4-a3eb-e5bfedc4405d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b490f0-8404-4fb6-9d2a-d2c1f7a8ca81",
        "cursor": {
          "ref": "f4931969-4b83-4ce1-a87b-e8edd9e5f668",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1c6bf412-2d9c-4707-ac99-ca36b832e1f6"
        },
        "item": {
          "id": "83b490f0-8404-4fb6-9d2a-d2c1f7a8ca81",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bf1642aa-2899-4c18-ae7d-7a271c137509",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b490f0-8404-4fb6-9d2a-d2c1f7a8ca81",
        "cursor": {
          "ref": "f4931969-4b83-4ce1-a87b-e8edd9e5f668",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1c6bf412-2d9c-4707-ac99-ca36b832e1f6"
        },
        "item": {
          "id": "83b490f0-8404-4fb6-9d2a-d2c1f7a8ca81",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bf1642aa-2899-4c18-ae7d-7a271c137509",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21424dac-016a-4476-a22c-75116f2d6a69",
        "cursor": {
          "ref": "12fb2506-3a13-438d-942a-90c2b7da6c96",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cc1bb953-54f9-41ed-a76f-0ad2f22c0264"
        },
        "item": {
          "id": "21424dac-016a-4476-a22c-75116f2d6a69",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0c711b3a-d276-4cff-9329-238b5ef43f19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21424dac-016a-4476-a22c-75116f2d6a69",
        "cursor": {
          "ref": "12fb2506-3a13-438d-942a-90c2b7da6c96",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cc1bb953-54f9-41ed-a76f-0ad2f22c0264"
        },
        "item": {
          "id": "21424dac-016a-4476-a22c-75116f2d6a69",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0c711b3a-d276-4cff-9329-238b5ef43f19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a187ac23-ad85-40e3-ad69-3c5438c77d5d",
        "cursor": {
          "ref": "eb1431f8-9a5f-45b7-9d59-ee31f6c203e4",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c18be073-66e3-4a4d-9aaf-ed729d46a1dc"
        },
        "item": {
          "id": "a187ac23-ad85-40e3-ad69-3c5438c77d5d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4f821166-416c-4dc2-acbb-44a06d2fa0c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a187ac23-ad85-40e3-ad69-3c5438c77d5d",
        "cursor": {
          "ref": "eb1431f8-9a5f-45b7-9d59-ee31f6c203e4",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c18be073-66e3-4a4d-9aaf-ed729d46a1dc"
        },
        "item": {
          "id": "a187ac23-ad85-40e3-ad69-3c5438c77d5d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4f821166-416c-4dc2-acbb-44a06d2fa0c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b071cb93-3fad-470f-a2fa-ce906aaa9ac1",
        "cursor": {
          "ref": "bae5b00e-3d9a-4985-a059-21300a26d20f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dfe3cbe2-88c7-44fe-b060-84e4effcb58f"
        },
        "item": {
          "id": "b071cb93-3fad-470f-a2fa-ce906aaa9ac1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c472770e-ed16-4380-abde-e06f4dc6ce66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b071cb93-3fad-470f-a2fa-ce906aaa9ac1",
        "cursor": {
          "ref": "bae5b00e-3d9a-4985-a059-21300a26d20f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dfe3cbe2-88c7-44fe-b060-84e4effcb58f"
        },
        "item": {
          "id": "b071cb93-3fad-470f-a2fa-ce906aaa9ac1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c472770e-ed16-4380-abde-e06f4dc6ce66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c071360-363d-40a9-9bdc-b48d1f8821a5",
        "cursor": {
          "ref": "0a8a6fc0-eeb1-4fc6-8f6f-e0c0a2f54b3c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f459226e-e0ea-454c-bd5e-fcf8cf68686d"
        },
        "item": {
          "id": "1c071360-363d-40a9-9bdc-b48d1f8821a5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "32b073af-9aa2-41f0-b6d6-b60cdf6683a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c071360-363d-40a9-9bdc-b48d1f8821a5",
        "cursor": {
          "ref": "0a8a6fc0-eeb1-4fc6-8f6f-e0c0a2f54b3c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f459226e-e0ea-454c-bd5e-fcf8cf68686d"
        },
        "item": {
          "id": "1c071360-363d-40a9-9bdc-b48d1f8821a5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "32b073af-9aa2-41f0-b6d6-b60cdf6683a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae696791-3aef-4b23-89f3-87ac6bd10f1d",
        "cursor": {
          "ref": "0e0a57fa-b58b-4682-8b1c-38074ebef423",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9e4812c2-06ca-4918-9fd7-986aa9fa1d7f"
        },
        "item": {
          "id": "ae696791-3aef-4b23-89f3-87ac6bd10f1d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a42dc552-82d6-4ed8-b539-d2724d9e983c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae696791-3aef-4b23-89f3-87ac6bd10f1d",
        "cursor": {
          "ref": "0e0a57fa-b58b-4682-8b1c-38074ebef423",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9e4812c2-06ca-4918-9fd7-986aa9fa1d7f"
        },
        "item": {
          "id": "ae696791-3aef-4b23-89f3-87ac6bd10f1d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a42dc552-82d6-4ed8-b539-d2724d9e983c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59b614b-07b3-48ba-84ad-12b102437365",
        "cursor": {
          "ref": "579071c5-4430-4547-a26d-99a4d89bd54c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3d1e6a73-a5d2-4eb7-814c-30b8fca9cf5f"
        },
        "item": {
          "id": "a59b614b-07b3-48ba-84ad-12b102437365",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f84ff6c5-a050-4f56-bef0-c0476a92d2a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59b614b-07b3-48ba-84ad-12b102437365",
        "cursor": {
          "ref": "579071c5-4430-4547-a26d-99a4d89bd54c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3d1e6a73-a5d2-4eb7-814c-30b8fca9cf5f"
        },
        "item": {
          "id": "a59b614b-07b3-48ba-84ad-12b102437365",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f84ff6c5-a050-4f56-bef0-c0476a92d2a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0109307-dbc1-458a-a213-c6f4f56a01f4",
        "cursor": {
          "ref": "f73ae5fe-3a90-4fb3-83bf-b012fd7a6f42",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "68fcfd8f-1689-4277-a186-3ae1abec0c00"
        },
        "item": {
          "id": "e0109307-dbc1-458a-a213-c6f4f56a01f4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "edfdf815-0f3d-4475-aabd-0ae6fcb3eddf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0109307-dbc1-458a-a213-c6f4f56a01f4",
        "cursor": {
          "ref": "f73ae5fe-3a90-4fb3-83bf-b012fd7a6f42",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "68fcfd8f-1689-4277-a186-3ae1abec0c00"
        },
        "item": {
          "id": "e0109307-dbc1-458a-a213-c6f4f56a01f4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "edfdf815-0f3d-4475-aabd-0ae6fcb3eddf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6175998-5e09-4cda-8af3-a061a197e94a",
        "cursor": {
          "ref": "4e4d5663-c276-458c-9d57-57e0346e80f3",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bddbc42f-07d8-44fd-8a03-192344f4c351"
        },
        "item": {
          "id": "c6175998-5e09-4cda-8af3-a061a197e94a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "081924cb-cad3-4c8a-9100-764b13fbf039",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6175998-5e09-4cda-8af3-a061a197e94a",
        "cursor": {
          "ref": "4e4d5663-c276-458c-9d57-57e0346e80f3",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bddbc42f-07d8-44fd-8a03-192344f4c351"
        },
        "item": {
          "id": "c6175998-5e09-4cda-8af3-a061a197e94a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "081924cb-cad3-4c8a-9100-764b13fbf039",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f080086c-49bc-4123-a67a-34cb4e2d66fe",
        "cursor": {
          "ref": "3132ad2c-828c-4b8e-975d-6e5f377abd75",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b0f4084b-3f89-4c42-88f8-15753dd832c2"
        },
        "item": {
          "id": "f080086c-49bc-4123-a67a-34cb4e2d66fe",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "02cf9d41-eb0d-4840-a810-6110e0c465d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f080086c-49bc-4123-a67a-34cb4e2d66fe",
        "cursor": {
          "ref": "3132ad2c-828c-4b8e-975d-6e5f377abd75",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b0f4084b-3f89-4c42-88f8-15753dd832c2"
        },
        "item": {
          "id": "f080086c-49bc-4123-a67a-34cb4e2d66fe",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "02cf9d41-eb0d-4840-a810-6110e0c465d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e713f1-e084-47ff-9d88-6639b9ebe0e8",
        "cursor": {
          "ref": "86d477fb-e828-48bc-92e9-ac923fcb35b6",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d1b59bd0-de22-47b3-ae6b-cd5c597d17c4"
        },
        "item": {
          "id": "e2e713f1-e084-47ff-9d88-6639b9ebe0e8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "71982ed9-3379-4f07-94f7-c679d8e60c55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e713f1-e084-47ff-9d88-6639b9ebe0e8",
        "cursor": {
          "ref": "86d477fb-e828-48bc-92e9-ac923fcb35b6",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d1b59bd0-de22-47b3-ae6b-cd5c597d17c4"
        },
        "item": {
          "id": "e2e713f1-e084-47ff-9d88-6639b9ebe0e8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "71982ed9-3379-4f07-94f7-c679d8e60c55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a76b715-9c8c-4b9d-a793-9a7b88926220",
        "cursor": {
          "ref": "11bcfdb4-2b33-408f-b561-0bfb9c805796",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3ae712b0-6d51-4dc5-8b0f-22cfad0bdeb0"
        },
        "item": {
          "id": "7a76b715-9c8c-4b9d-a793-9a7b88926220",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a936fc72-f5e3-4398-8cc3-2d87593c474a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a76b715-9c8c-4b9d-a793-9a7b88926220",
        "cursor": {
          "ref": "11bcfdb4-2b33-408f-b561-0bfb9c805796",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3ae712b0-6d51-4dc5-8b0f-22cfad0bdeb0"
        },
        "item": {
          "id": "7a76b715-9c8c-4b9d-a793-9a7b88926220",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a936fc72-f5e3-4398-8cc3-2d87593c474a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d9a4cf-1639-4139-8d5e-bfb51a78ffba",
        "cursor": {
          "ref": "b65181ac-2b1b-4449-bf06-ed181f0925ce",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8fb51803-4db3-45ae-99dd-82aacc1dab63"
        },
        "item": {
          "id": "04d9a4cf-1639-4139-8d5e-bfb51a78ffba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "960b41af-1df3-469b-ba74-1c4b9ce8dfd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d9a4cf-1639-4139-8d5e-bfb51a78ffba",
        "cursor": {
          "ref": "b65181ac-2b1b-4449-bf06-ed181f0925ce",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8fb51803-4db3-45ae-99dd-82aacc1dab63"
        },
        "item": {
          "id": "04d9a4cf-1639-4139-8d5e-bfb51a78ffba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "960b41af-1df3-469b-ba74-1c4b9ce8dfd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00199049-65fa-4d51-b5e4-c92ea1f5a12f",
        "cursor": {
          "ref": "f7e4934e-0c2c-4b67-bcb3-d8a4536bbf96",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2dda6adb-b99e-4355-9cfd-29207742757e"
        },
        "item": {
          "id": "00199049-65fa-4d51-b5e4-c92ea1f5a12f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ec4e640e-9b91-4ff5-801f-467c2c899726",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00199049-65fa-4d51-b5e4-c92ea1f5a12f",
        "cursor": {
          "ref": "f7e4934e-0c2c-4b67-bcb3-d8a4536bbf96",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2dda6adb-b99e-4355-9cfd-29207742757e"
        },
        "item": {
          "id": "00199049-65fa-4d51-b5e4-c92ea1f5a12f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ec4e640e-9b91-4ff5-801f-467c2c899726",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b2c169-1cc2-4c55-8247-6d536331bf7a",
        "cursor": {
          "ref": "771b5a93-6ec8-463b-8c3e-bec78a5a2088",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a9ef99f8-2e79-46bd-ba3a-284fcc2c56f4"
        },
        "item": {
          "id": "76b2c169-1cc2-4c55-8247-6d536331bf7a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "759a00b3-6ba8-403c-a2bf-aed0556cbae8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b2c169-1cc2-4c55-8247-6d536331bf7a",
        "cursor": {
          "ref": "771b5a93-6ec8-463b-8c3e-bec78a5a2088",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a9ef99f8-2e79-46bd-ba3a-284fcc2c56f4"
        },
        "item": {
          "id": "76b2c169-1cc2-4c55-8247-6d536331bf7a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "759a00b3-6ba8-403c-a2bf-aed0556cbae8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2201fb70-f2c1-415b-9014-9192ee6f3818",
        "cursor": {
          "ref": "8f97663d-b875-47e5-b37e-987e211c3e66",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a3f167d3-1692-4d69-a087-94921ce2e8f1"
        },
        "item": {
          "id": "2201fb70-f2c1-415b-9014-9192ee6f3818",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "01e13a17-47a4-4721-ba23-36370fce509a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2201fb70-f2c1-415b-9014-9192ee6f3818",
        "cursor": {
          "ref": "8f97663d-b875-47e5-b37e-987e211c3e66",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a3f167d3-1692-4d69-a087-94921ce2e8f1"
        },
        "item": {
          "id": "2201fb70-f2c1-415b-9014-9192ee6f3818",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "01e13a17-47a4-4721-ba23-36370fce509a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704792e1-4ad2-4335-8983-60f5f1a10bff",
        "cursor": {
          "ref": "4a29c1c5-4288-4895-821b-80e3f1c11c78",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "add23b0e-4caa-4131-a0f6-413914047e01"
        },
        "item": {
          "id": "704792e1-4ad2-4335-8983-60f5f1a10bff",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df3f0e47-55a7-4c7f-9e69-418571d5bacf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704792e1-4ad2-4335-8983-60f5f1a10bff",
        "cursor": {
          "ref": "4a29c1c5-4288-4895-821b-80e3f1c11c78",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "add23b0e-4caa-4131-a0f6-413914047e01"
        },
        "item": {
          "id": "704792e1-4ad2-4335-8983-60f5f1a10bff",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "df3f0e47-55a7-4c7f-9e69-418571d5bacf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800d62da-4dd0-428f-b4d0-b9c3c6fff10c",
        "cursor": {
          "ref": "fd7bbcc2-590c-43fd-bd2f-f4468789e80a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "58cedd77-a172-4655-a682-4a216a8b5011"
        },
        "item": {
          "id": "800d62da-4dd0-428f-b4d0-b9c3c6fff10c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f5842bb3-1b27-4443-8ab6-b54e6a43f29f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800d62da-4dd0-428f-b4d0-b9c3c6fff10c",
        "cursor": {
          "ref": "fd7bbcc2-590c-43fd-bd2f-f4468789e80a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "58cedd77-a172-4655-a682-4a216a8b5011"
        },
        "item": {
          "id": "800d62da-4dd0-428f-b4d0-b9c3c6fff10c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f5842bb3-1b27-4443-8ab6-b54e6a43f29f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8416eec4-f991-45fb-849c-47000d8bdec7",
        "cursor": {
          "ref": "bb5ab9f4-a26e-4e69-a0dd-4d6805bf016c",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "991a0e5e-960a-4cbb-9bba-887d4941db43"
        },
        "item": {
          "id": "8416eec4-f991-45fb-849c-47000d8bdec7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e4761960-c5ed-4763-b4f4-cbc43472bdcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8416eec4-f991-45fb-849c-47000d8bdec7",
        "cursor": {
          "ref": "bb5ab9f4-a26e-4e69-a0dd-4d6805bf016c",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "991a0e5e-960a-4cbb-9bba-887d4941db43"
        },
        "item": {
          "id": "8416eec4-f991-45fb-849c-47000d8bdec7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e4761960-c5ed-4763-b4f4-cbc43472bdcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d530ba02-9077-42cc-b674-76f8a2ecbda0",
        "cursor": {
          "ref": "94924931-5a18-4cc0-98c5-460c0477ced5",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e1766c7a-012e-4f82-9445-d40d0c8003ab"
        },
        "item": {
          "id": "d530ba02-9077-42cc-b674-76f8a2ecbda0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6a9dcb8b-d662-4523-a2b4-c651051227f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d530ba02-9077-42cc-b674-76f8a2ecbda0",
        "cursor": {
          "ref": "94924931-5a18-4cc0-98c5-460c0477ced5",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e1766c7a-012e-4f82-9445-d40d0c8003ab"
        },
        "item": {
          "id": "d530ba02-9077-42cc-b674-76f8a2ecbda0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6a9dcb8b-d662-4523-a2b4-c651051227f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca30e7a8-7d5e-48a1-a6a4-30d03cf8fe61",
        "cursor": {
          "ref": "9ca5dd4b-f39f-42b6-b245-2b6d82cf4c50",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "aed68a13-f55f-4c77-a0f4-c674d351cfa5"
        },
        "item": {
          "id": "ca30e7a8-7d5e-48a1-a6a4-30d03cf8fe61",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ff2eab7e-e077-4b7b-94d6-6be2d7ac45de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca30e7a8-7d5e-48a1-a6a4-30d03cf8fe61",
        "cursor": {
          "ref": "9ca5dd4b-f39f-42b6-b245-2b6d82cf4c50",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "aed68a13-f55f-4c77-a0f4-c674d351cfa5"
        },
        "item": {
          "id": "ca30e7a8-7d5e-48a1-a6a4-30d03cf8fe61",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ff2eab7e-e077-4b7b-94d6-6be2d7ac45de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad66178-dc65-4f50-817e-b91692643f60",
        "cursor": {
          "ref": "ac9130eb-c334-428e-abe6-bc3b390b4354",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4b5eb82d-da72-49a5-83e5-55a010283e06"
        },
        "item": {
          "id": "cad66178-dc65-4f50-817e-b91692643f60",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "de573b3e-1c57-4c0a-b3e4-f29cf7f56272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad66178-dc65-4f50-817e-b91692643f60",
        "cursor": {
          "ref": "ac9130eb-c334-428e-abe6-bc3b390b4354",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4b5eb82d-da72-49a5-83e5-55a010283e06"
        },
        "item": {
          "id": "cad66178-dc65-4f50-817e-b91692643f60",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "de573b3e-1c57-4c0a-b3e4-f29cf7f56272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2b6931-c26a-4626-9fd5-267a0fa223f0",
        "cursor": {
          "ref": "c2051b35-7730-4ee1-91b8-56e039788b3f",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "43269c3d-2b6d-4393-9842-0e18d0a6f116"
        },
        "item": {
          "id": "cc2b6931-c26a-4626-9fd5-267a0fa223f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fb7a266a-b458-4ee9-ac26-febdc1e66329",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2b6931-c26a-4626-9fd5-267a0fa223f0",
        "cursor": {
          "ref": "c2051b35-7730-4ee1-91b8-56e039788b3f",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "43269c3d-2b6d-4393-9842-0e18d0a6f116"
        },
        "item": {
          "id": "cc2b6931-c26a-4626-9fd5-267a0fa223f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fb7a266a-b458-4ee9-ac26-febdc1e66329",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56df0f1-f82d-409b-b9cc-b0a80146c33c",
        "cursor": {
          "ref": "24cacadc-0ad6-4760-a34e-6ab38843a683",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5c93a50f-4eff-4780-a477-fceb09ec9f23"
        },
        "item": {
          "id": "d56df0f1-f82d-409b-b9cc-b0a80146c33c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a8b4468a-9d07-4311-8892-94aa0c526220",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56df0f1-f82d-409b-b9cc-b0a80146c33c",
        "cursor": {
          "ref": "24cacadc-0ad6-4760-a34e-6ab38843a683",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5c93a50f-4eff-4780-a477-fceb09ec9f23"
        },
        "item": {
          "id": "d56df0f1-f82d-409b-b9cc-b0a80146c33c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a8b4468a-9d07-4311-8892-94aa0c526220",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b367deed-92b0-4857-bac6-8310f5f495ae",
        "cursor": {
          "ref": "0e63468c-aec8-4a89-b0b7-6fece71307f2",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9b3734ae-6e08-4aa0-bbab-0c7f5ee0f5b2"
        },
        "item": {
          "id": "b367deed-92b0-4857-bac6-8310f5f495ae",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dac8c5db-70d7-4014-a8cc-2a550d825a3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b367deed-92b0-4857-bac6-8310f5f495ae",
        "cursor": {
          "ref": "0e63468c-aec8-4a89-b0b7-6fece71307f2",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9b3734ae-6e08-4aa0-bbab-0c7f5ee0f5b2"
        },
        "item": {
          "id": "b367deed-92b0-4857-bac6-8310f5f495ae",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dac8c5db-70d7-4014-a8cc-2a550d825a3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726c53dc-90ae-4562-814f-a6d217ce4a92",
        "cursor": {
          "ref": "8578aca3-bc82-4fde-b88d-29293b7e34b5",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ed62e502-617d-4e14-9296-9d33f15af4e0"
        },
        "item": {
          "id": "726c53dc-90ae-4562-814f-a6d217ce4a92",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "85a2be34-95a8-4a7b-a89a-9ba76a760bed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726c53dc-90ae-4562-814f-a6d217ce4a92",
        "cursor": {
          "ref": "8578aca3-bc82-4fde-b88d-29293b7e34b5",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ed62e502-617d-4e14-9296-9d33f15af4e0"
        },
        "item": {
          "id": "726c53dc-90ae-4562-814f-a6d217ce4a92",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "85a2be34-95a8-4a7b-a89a-9ba76a760bed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd21585-4266-47ac-a563-b754a4261e45",
        "cursor": {
          "ref": "ad4d4e52-924b-433e-91e3-3351d31947e3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c01c0325-ae0a-465e-b4e8-b2ed443c5a91"
        },
        "item": {
          "id": "7cd21585-4266-47ac-a563-b754a4261e45",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "352ee257-906b-4058-b4dc-cd3804b44116",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd21585-4266-47ac-a563-b754a4261e45",
        "cursor": {
          "ref": "ad4d4e52-924b-433e-91e3-3351d31947e3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c01c0325-ae0a-465e-b4e8-b2ed443c5a91"
        },
        "item": {
          "id": "7cd21585-4266-47ac-a563-b754a4261e45",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "352ee257-906b-4058-b4dc-cd3804b44116",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafb7a21-e34f-4749-a687-9accb40c7bd0",
        "cursor": {
          "ref": "71ce4f30-c644-4149-bbf1-7fd3cb3322cd",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e127a83c-dd57-48cb-9205-28699cddd1d0"
        },
        "item": {
          "id": "bafb7a21-e34f-4749-a687-9accb40c7bd0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "30403431-3282-4511-8533-272ec7cdba71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafb7a21-e34f-4749-a687-9accb40c7bd0",
        "cursor": {
          "ref": "71ce4f30-c644-4149-bbf1-7fd3cb3322cd",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e127a83c-dd57-48cb-9205-28699cddd1d0"
        },
        "item": {
          "id": "bafb7a21-e34f-4749-a687-9accb40c7bd0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "30403431-3282-4511-8533-272ec7cdba71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a9f0a7-b5f6-42fc-9999-10cda06bf567",
        "cursor": {
          "ref": "9bcad5eb-45a8-4f04-a66a-874ad1ec69d2",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6f568d84-4620-4b74-b9a3-e8e9781a1552"
        },
        "item": {
          "id": "d3a9f0a7-b5f6-42fc-9999-10cda06bf567",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "44e4dd3c-f6ed-4322-b392-0a282e5143a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a9f0a7-b5f6-42fc-9999-10cda06bf567",
        "cursor": {
          "ref": "9bcad5eb-45a8-4f04-a66a-874ad1ec69d2",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6f568d84-4620-4b74-b9a3-e8e9781a1552"
        },
        "item": {
          "id": "d3a9f0a7-b5f6-42fc-9999-10cda06bf567",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "44e4dd3c-f6ed-4322-b392-0a282e5143a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36084a72-b1ae-4c35-9e86-7ffef7034f91",
        "cursor": {
          "ref": "48a7745a-d918-43dd-9663-77a059460d39",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0ff818e2-3db2-4f01-a337-1bbe26f8c881"
        },
        "item": {
          "id": "36084a72-b1ae-4c35-9e86-7ffef7034f91",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "421b1db8-6abd-46d1-9130-4d2009168ddd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36084a72-b1ae-4c35-9e86-7ffef7034f91",
        "cursor": {
          "ref": "48a7745a-d918-43dd-9663-77a059460d39",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0ff818e2-3db2-4f01-a337-1bbe26f8c881"
        },
        "item": {
          "id": "36084a72-b1ae-4c35-9e86-7ffef7034f91",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "421b1db8-6abd-46d1-9130-4d2009168ddd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a066c79c-f853-430b-9424-f8081265a2d3",
        "cursor": {
          "ref": "c2b57290-8827-4d40-816e-2566b555f7ec",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "10c28372-847c-4794-ab3a-0eeb143d8f34"
        },
        "item": {
          "id": "a066c79c-f853-430b-9424-f8081265a2d3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "58a2d4ad-1db8-4fa9-81f7-bf0f4195b64d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a066c79c-f853-430b-9424-f8081265a2d3",
        "cursor": {
          "ref": "c2b57290-8827-4d40-816e-2566b555f7ec",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "10c28372-847c-4794-ab3a-0eeb143d8f34"
        },
        "item": {
          "id": "a066c79c-f853-430b-9424-f8081265a2d3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "58a2d4ad-1db8-4fa9-81f7-bf0f4195b64d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f1f3aa-29b2-4cfb-8111-9d82c6a4ed6f",
        "cursor": {
          "ref": "814632ca-618e-4049-aaa6-8866f1517ab3",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0035d40a-5952-476e-a2ef-e7bd00e029bc"
        },
        "item": {
          "id": "f3f1f3aa-29b2-4cfb-8111-9d82c6a4ed6f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b7ae6477-5811-44e6-b3f8-899bbd8fe344",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f1f3aa-29b2-4cfb-8111-9d82c6a4ed6f",
        "cursor": {
          "ref": "814632ca-618e-4049-aaa6-8866f1517ab3",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0035d40a-5952-476e-a2ef-e7bd00e029bc"
        },
        "item": {
          "id": "f3f1f3aa-29b2-4cfb-8111-9d82c6a4ed6f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b7ae6477-5811-44e6-b3f8-899bbd8fe344",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8964295f-8ebe-4430-a1a2-279e0672434a",
        "cursor": {
          "ref": "96f54885-97c3-4673-8ce7-13c4fd88035e",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "034e8c15-8b5b-4f9b-abe7-2ba9eeb73732"
        },
        "item": {
          "id": "8964295f-8ebe-4430-a1a2-279e0672434a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "87306e40-c245-4c01-8fb3-daf6dff93ce0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8964295f-8ebe-4430-a1a2-279e0672434a",
        "cursor": {
          "ref": "96f54885-97c3-4673-8ce7-13c4fd88035e",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "034e8c15-8b5b-4f9b-abe7-2ba9eeb73732"
        },
        "item": {
          "id": "8964295f-8ebe-4430-a1a2-279e0672434a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "87306e40-c245-4c01-8fb3-daf6dff93ce0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971157e8-9e88-4deb-a3b3-699c738bf199",
        "cursor": {
          "ref": "afbb9c2e-8b5d-4f23-a88a-391667f03dba",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4b40f0a2-2d09-4f47-89df-ce8fd513a0d0"
        },
        "item": {
          "id": "971157e8-9e88-4deb-a3b3-699c738bf199",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8f7255fe-4fb7-4567-825b-22c5560a78da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971157e8-9e88-4deb-a3b3-699c738bf199",
        "cursor": {
          "ref": "afbb9c2e-8b5d-4f23-a88a-391667f03dba",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4b40f0a2-2d09-4f47-89df-ce8fd513a0d0"
        },
        "item": {
          "id": "971157e8-9e88-4deb-a3b3-699c738bf199",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8f7255fe-4fb7-4567-825b-22c5560a78da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1b983d-7762-4efa-bda0-263d7459ed5d",
        "cursor": {
          "ref": "a52621df-0a89-4505-9ecc-7f7992a62945",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d1d50790-ec25-4eb6-b1bf-f4971109eca6"
        },
        "item": {
          "id": "3a1b983d-7762-4efa-bda0-263d7459ed5d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4fc7ebe8-261d-4949-a677-3dc904229033",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1b983d-7762-4efa-bda0-263d7459ed5d",
        "cursor": {
          "ref": "a52621df-0a89-4505-9ecc-7f7992a62945",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d1d50790-ec25-4eb6-b1bf-f4971109eca6"
        },
        "item": {
          "id": "3a1b983d-7762-4efa-bda0-263d7459ed5d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4fc7ebe8-261d-4949-a677-3dc904229033",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c311b769-938e-4333-8700-f15d23ef160f",
        "cursor": {
          "ref": "b4c7a477-43db-4946-9b7b-d1ec9d29c703",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cd38c0ba-6ca7-4666-9fdf-cb64d38fa9b6"
        },
        "item": {
          "id": "c311b769-938e-4333-8700-f15d23ef160f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "108adaf4-9e3a-4ff3-a880-e50cef1d464e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c311b769-938e-4333-8700-f15d23ef160f",
        "cursor": {
          "ref": "b4c7a477-43db-4946-9b7b-d1ec9d29c703",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cd38c0ba-6ca7-4666-9fdf-cb64d38fa9b6"
        },
        "item": {
          "id": "c311b769-938e-4333-8700-f15d23ef160f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "108adaf4-9e3a-4ff3-a880-e50cef1d464e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2945a7-affc-456d-884b-0506c00edb0a",
        "cursor": {
          "ref": "e0337d90-9a93-4e2b-96d2-7d06946de67c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0d2736ef-181a-44aa-96ed-43a23c7caaa0"
        },
        "item": {
          "id": "9e2945a7-affc-456d-884b-0506c00edb0a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a6165e8d-7145-4974-a861-49379bd58187",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2945a7-affc-456d-884b-0506c00edb0a",
        "cursor": {
          "ref": "e0337d90-9a93-4e2b-96d2-7d06946de67c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0d2736ef-181a-44aa-96ed-43a23c7caaa0"
        },
        "item": {
          "id": "9e2945a7-affc-456d-884b-0506c00edb0a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a6165e8d-7145-4974-a861-49379bd58187",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874f4223-888d-455d-a8a1-49100e830ff2",
        "cursor": {
          "ref": "b70e1ef7-0819-4eeb-a240-5311656118fa",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "763a84c9-250a-4db6-9648-28b1afa7d322"
        },
        "item": {
          "id": "874f4223-888d-455d-a8a1-49100e830ff2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bc89e424-c774-47ec-a058-db4b1a9ad6dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874f4223-888d-455d-a8a1-49100e830ff2",
        "cursor": {
          "ref": "b70e1ef7-0819-4eeb-a240-5311656118fa",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "763a84c9-250a-4db6-9648-28b1afa7d322"
        },
        "item": {
          "id": "874f4223-888d-455d-a8a1-49100e830ff2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bc89e424-c774-47ec-a058-db4b1a9ad6dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edbe44a-daa4-4ae8-bafe-95adec199e28",
        "cursor": {
          "ref": "d7968ed9-a068-42b2-b76c-1b948cc7d8ec",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "09696129-ad6a-401e-aeb7-cfb3f2d629bf"
        },
        "item": {
          "id": "0edbe44a-daa4-4ae8-bafe-95adec199e28",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c546f755-7a6c-4574-bede-882db0423e0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edbe44a-daa4-4ae8-bafe-95adec199e28",
        "cursor": {
          "ref": "d7968ed9-a068-42b2-b76c-1b948cc7d8ec",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "09696129-ad6a-401e-aeb7-cfb3f2d629bf"
        },
        "item": {
          "id": "0edbe44a-daa4-4ae8-bafe-95adec199e28",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c546f755-7a6c-4574-bede-882db0423e0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04442085-a046-43ac-bfa4-c82a2c5e15b3",
        "cursor": {
          "ref": "a659466a-be68-4911-835b-5dcfc930caee",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f1740c21-7828-47c4-86b3-ffca59edab63"
        },
        "item": {
          "id": "04442085-a046-43ac-bfa4-c82a2c5e15b3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d2f5b7de-6c28-482d-b4b6-4ac961fb31fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04442085-a046-43ac-bfa4-c82a2c5e15b3",
        "cursor": {
          "ref": "a659466a-be68-4911-835b-5dcfc930caee",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f1740c21-7828-47c4-86b3-ffca59edab63"
        },
        "item": {
          "id": "04442085-a046-43ac-bfa4-c82a2c5e15b3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d2f5b7de-6c28-482d-b4b6-4ac961fb31fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab88b3ce-9538-411c-915b-cd07624bf3d5",
        "cursor": {
          "ref": "f823bdaa-9c6d-4c53-9c93-f01a15a8c570",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ad95d26a-827b-42c8-9350-54834fc57cac"
        },
        "item": {
          "id": "ab88b3ce-9538-411c-915b-cd07624bf3d5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae876556-56a3-4391-9c85-2b4302606eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab88b3ce-9538-411c-915b-cd07624bf3d5",
        "cursor": {
          "ref": "f823bdaa-9c6d-4c53-9c93-f01a15a8c570",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ad95d26a-827b-42c8-9350-54834fc57cac"
        },
        "item": {
          "id": "ab88b3ce-9538-411c-915b-cd07624bf3d5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae876556-56a3-4391-9c85-2b4302606eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f720f508-f648-42a8-96b3-e559dbf17de9",
        "cursor": {
          "ref": "92e25693-e024-44e7-8f34-ea81ae1ec671",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5a36660e-b6fc-4a4e-815e-558a29332d91"
        },
        "item": {
          "id": "f720f508-f648-42a8-96b3-e559dbf17de9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b1929ae0-75a8-45bd-b81e-e5e8a219c0f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f720f508-f648-42a8-96b3-e559dbf17de9",
        "cursor": {
          "ref": "92e25693-e024-44e7-8f34-ea81ae1ec671",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5a36660e-b6fc-4a4e-815e-558a29332d91"
        },
        "item": {
          "id": "f720f508-f648-42a8-96b3-e559dbf17de9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b1929ae0-75a8-45bd-b81e-e5e8a219c0f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf24aa2-cafe-440d-ad77-8c40910d0801",
        "cursor": {
          "ref": "b883fd53-6cda-4f06-be18-12fbd793f882",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0cc547a7-d20f-40b5-ac71-a92b5598b312"
        },
        "item": {
          "id": "fdf24aa2-cafe-440d-ad77-8c40910d0801",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d3ad328e-9c2a-4526-affc-e0b6d52f68ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf24aa2-cafe-440d-ad77-8c40910d0801",
        "cursor": {
          "ref": "b883fd53-6cda-4f06-be18-12fbd793f882",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0cc547a7-d20f-40b5-ac71-a92b5598b312"
        },
        "item": {
          "id": "fdf24aa2-cafe-440d-ad77-8c40910d0801",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d3ad328e-9c2a-4526-affc-e0b6d52f68ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fd7410-951a-45e6-9cac-0702092ff4c7",
        "cursor": {
          "ref": "3d3a084a-2d7d-42bd-ae46-5df84ac6915e",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "118060f2-a210-4e25-9ad0-b3fdf1ae33ea"
        },
        "item": {
          "id": "c7fd7410-951a-45e6-9cac-0702092ff4c7",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "39c91c17-0e03-42db-95b7-15c535b0a446",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fd7410-951a-45e6-9cac-0702092ff4c7",
        "cursor": {
          "ref": "3d3a084a-2d7d-42bd-ae46-5df84ac6915e",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "118060f2-a210-4e25-9ad0-b3fdf1ae33ea"
        },
        "item": {
          "id": "c7fd7410-951a-45e6-9cac-0702092ff4c7",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "39c91c17-0e03-42db-95b7-15c535b0a446",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceab51f9-d024-41f2-9e3f-39bb7339c01c",
        "cursor": {
          "ref": "cfc7372d-1eec-4e14-bd8d-604972e387f5",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ed49dad4-fa00-4386-862f-230fdec3d5d3"
        },
        "item": {
          "id": "ceab51f9-d024-41f2-9e3f-39bb7339c01c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7312f34e-9fe6-4685-83e1-a90a56ccb4f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceab51f9-d024-41f2-9e3f-39bb7339c01c",
        "cursor": {
          "ref": "cfc7372d-1eec-4e14-bd8d-604972e387f5",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ed49dad4-fa00-4386-862f-230fdec3d5d3"
        },
        "item": {
          "id": "ceab51f9-d024-41f2-9e3f-39bb7339c01c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7312f34e-9fe6-4685-83e1-a90a56ccb4f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3447ede9-9501-4d87-9a99-e4d2dc01a134",
        "cursor": {
          "ref": "f0e67279-9160-4676-879a-39acce650bd9",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "82c38428-ecfc-43a2-8b58-88ef10c381d6"
        },
        "item": {
          "id": "3447ede9-9501-4d87-9a99-e4d2dc01a134",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3f975334-6e5f-4364-83a7-62096e9d7302",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3447ede9-9501-4d87-9a99-e4d2dc01a134",
        "cursor": {
          "ref": "f0e67279-9160-4676-879a-39acce650bd9",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "82c38428-ecfc-43a2-8b58-88ef10c381d6"
        },
        "item": {
          "id": "3447ede9-9501-4d87-9a99-e4d2dc01a134",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3f975334-6e5f-4364-83a7-62096e9d7302",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387dca58-05c5-4524-b97f-a2ba078ea9b8",
        "cursor": {
          "ref": "083045a0-9f9f-4f7f-84d9-631f69a78703",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "95fa02c2-d699-41d0-835e-d5402366d153"
        },
        "item": {
          "id": "387dca58-05c5-4524-b97f-a2ba078ea9b8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "dbedc611-4557-4cd8-8813-5baaf3d14106",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387dca58-05c5-4524-b97f-a2ba078ea9b8",
        "cursor": {
          "ref": "083045a0-9f9f-4f7f-84d9-631f69a78703",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "95fa02c2-d699-41d0-835e-d5402366d153"
        },
        "item": {
          "id": "387dca58-05c5-4524-b97f-a2ba078ea9b8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "dbedc611-4557-4cd8-8813-5baaf3d14106",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bf7d35-e629-4747-b6e2-ae6594250bdf",
        "cursor": {
          "ref": "284f2df0-18c5-4eb6-9477-3f9b36d17a6e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "63f6c899-cbf9-40f1-a8fa-1ffc3bdd931a"
        },
        "item": {
          "id": "d5bf7d35-e629-4747-b6e2-ae6594250bdf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e3ae9ab2-6e8c-490e-823c-ca05abc0ec6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bf7d35-e629-4747-b6e2-ae6594250bdf",
        "cursor": {
          "ref": "284f2df0-18c5-4eb6-9477-3f9b36d17a6e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "63f6c899-cbf9-40f1-a8fa-1ffc3bdd931a"
        },
        "item": {
          "id": "d5bf7d35-e629-4747-b6e2-ae6594250bdf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e3ae9ab2-6e8c-490e-823c-ca05abc0ec6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7668dd8-a965-46c5-9cef-b6db890025ed",
        "cursor": {
          "ref": "d1e928db-d785-4fe7-857b-17772e998ecd",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d5adbb63-b55d-4746-a415-8df80192563c"
        },
        "item": {
          "id": "f7668dd8-a965-46c5-9cef-b6db890025ed",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9eba6267-4c76-468a-a7e0-9e1a057ab04a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7668dd8-a965-46c5-9cef-b6db890025ed",
        "cursor": {
          "ref": "d1e928db-d785-4fe7-857b-17772e998ecd",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d5adbb63-b55d-4746-a415-8df80192563c"
        },
        "item": {
          "id": "f7668dd8-a965-46c5-9cef-b6db890025ed",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9eba6267-4c76-468a-a7e0-9e1a057ab04a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df54b3c-e9ac-482e-8475-3881a035ef7b",
        "cursor": {
          "ref": "bcec790b-2caf-45b3-9804-a28736231869",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "73017425-3217-423e-8590-d66eb3867311"
        },
        "item": {
          "id": "3df54b3c-e9ac-482e-8475-3881a035ef7b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "db0ac993-7d6e-41a1-8ef5-6f16c3eaa6e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df54b3c-e9ac-482e-8475-3881a035ef7b",
        "cursor": {
          "ref": "bcec790b-2caf-45b3-9804-a28736231869",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "73017425-3217-423e-8590-d66eb3867311"
        },
        "item": {
          "id": "3df54b3c-e9ac-482e-8475-3881a035ef7b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "db0ac993-7d6e-41a1-8ef5-6f16c3eaa6e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947e94f7-f1d1-434a-bcc3-1a93f31542ae",
        "cursor": {
          "ref": "03ace07e-97cc-46c8-88b6-06f539dce7e9",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cb9ac25a-c0b4-4592-a19d-71ce876bda3e"
        },
        "item": {
          "id": "947e94f7-f1d1-434a-bcc3-1a93f31542ae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8f09d67e-09c9-4ca9-aa60-bb982b64c6a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947e94f7-f1d1-434a-bcc3-1a93f31542ae",
        "cursor": {
          "ref": "03ace07e-97cc-46c8-88b6-06f539dce7e9",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cb9ac25a-c0b4-4592-a19d-71ce876bda3e"
        },
        "item": {
          "id": "947e94f7-f1d1-434a-bcc3-1a93f31542ae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8f09d67e-09c9-4ca9-aa60-bb982b64c6a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe77c38-1bd3-4924-bf26-783354d142b2",
        "cursor": {
          "ref": "1d8a0e10-0d7b-4409-87d5-e70aa38a0e49",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5d926cf0-19ed-4c4d-a6e6-6d7f79af1356"
        },
        "item": {
          "id": "bfe77c38-1bd3-4924-bf26-783354d142b2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "21d03347-d805-45af-bdc8-d3f92e3e6748",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe77c38-1bd3-4924-bf26-783354d142b2",
        "cursor": {
          "ref": "1d8a0e10-0d7b-4409-87d5-e70aa38a0e49",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5d926cf0-19ed-4c4d-a6e6-6d7f79af1356"
        },
        "item": {
          "id": "bfe77c38-1bd3-4924-bf26-783354d142b2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "21d03347-d805-45af-bdc8-d3f92e3e6748",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e13797-32c6-48d4-88c8-05c22534a348",
        "cursor": {
          "ref": "63e55a17-f0b5-4b45-ad39-12e3cc957148",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9abe7521-d8e0-4ecb-8db2-972786807cb9"
        },
        "item": {
          "id": "e8e13797-32c6-48d4-88c8-05c22534a348",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bf0d9d37-4799-426d-8e21-440351c2a7e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e13797-32c6-48d4-88c8-05c22534a348",
        "cursor": {
          "ref": "63e55a17-f0b5-4b45-ad39-12e3cc957148",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9abe7521-d8e0-4ecb-8db2-972786807cb9"
        },
        "item": {
          "id": "e8e13797-32c6-48d4-88c8-05c22534a348",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bf0d9d37-4799-426d-8e21-440351c2a7e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2354c1e9-1157-4454-b32c-a30cc0b48c2c",
        "cursor": {
          "ref": "c8cefb3c-f3be-48a3-a8b7-8cf386c757a8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1263a1e6-89bf-437d-b75a-b7b1d5e815b9"
        },
        "item": {
          "id": "2354c1e9-1157-4454-b32c-a30cc0b48c2c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b47fd83f-f9bb-40d9-be94-11abc284a162",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2354c1e9-1157-4454-b32c-a30cc0b48c2c",
        "cursor": {
          "ref": "c8cefb3c-f3be-48a3-a8b7-8cf386c757a8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1263a1e6-89bf-437d-b75a-b7b1d5e815b9"
        },
        "item": {
          "id": "2354c1e9-1157-4454-b32c-a30cc0b48c2c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b47fd83f-f9bb-40d9-be94-11abc284a162",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165acf5d-2bf6-4bd3-904b-1185161ffb58",
        "cursor": {
          "ref": "a1d0401f-f8c0-436c-9942-e8d049c7d3cc",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "972a9a79-7ef7-40ef-84ec-c597aa64ccaa"
        },
        "item": {
          "id": "165acf5d-2bf6-4bd3-904b-1185161ffb58",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2783b457-f2ad-4c5a-9511-b2295c49e64a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165acf5d-2bf6-4bd3-904b-1185161ffb58",
        "cursor": {
          "ref": "a1d0401f-f8c0-436c-9942-e8d049c7d3cc",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "972a9a79-7ef7-40ef-84ec-c597aa64ccaa"
        },
        "item": {
          "id": "165acf5d-2bf6-4bd3-904b-1185161ffb58",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2783b457-f2ad-4c5a-9511-b2295c49e64a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754220e0-aacb-4f63-9b49-9ca2ebfea89f",
        "cursor": {
          "ref": "25f9eb1c-1ff2-4b58-aa9a-3b5ec7ed3437",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "69da62b4-c0c0-43b2-b58d-cf81548be128"
        },
        "item": {
          "id": "754220e0-aacb-4f63-9b49-9ca2ebfea89f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b2da589b-96ff-4682-9987-a81ece987f68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754220e0-aacb-4f63-9b49-9ca2ebfea89f",
        "cursor": {
          "ref": "25f9eb1c-1ff2-4b58-aa9a-3b5ec7ed3437",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "69da62b4-c0c0-43b2-b58d-cf81548be128"
        },
        "item": {
          "id": "754220e0-aacb-4f63-9b49-9ca2ebfea89f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b2da589b-96ff-4682-9987-a81ece987f68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05d0e56-eede-4604-a760-dda2a9385e01",
        "cursor": {
          "ref": "d5842edc-4798-4ba8-9a1b-c9742fac8725",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "68dfc287-3259-4a18-894e-19b6ba923a20"
        },
        "item": {
          "id": "e05d0e56-eede-4604-a760-dda2a9385e01",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "172c6a71-fb0b-4f61-a09e-fcf3b6618b95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05d0e56-eede-4604-a760-dda2a9385e01",
        "cursor": {
          "ref": "d5842edc-4798-4ba8-9a1b-c9742fac8725",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "68dfc287-3259-4a18-894e-19b6ba923a20"
        },
        "item": {
          "id": "e05d0e56-eede-4604-a760-dda2a9385e01",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "172c6a71-fb0b-4f61-a09e-fcf3b6618b95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10ebebb-be77-486f-acd8-d7748f874b1a",
        "cursor": {
          "ref": "6bb073ae-8220-4052-83af-9ba4f0a9ad2b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b424cce3-c209-4320-bad2-f04bcebed3bf"
        },
        "item": {
          "id": "d10ebebb-be77-486f-acd8-d7748f874b1a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "56f8174b-c778-4767-8511-c7c01b643e57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10ebebb-be77-486f-acd8-d7748f874b1a",
        "cursor": {
          "ref": "6bb073ae-8220-4052-83af-9ba4f0a9ad2b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b424cce3-c209-4320-bad2-f04bcebed3bf"
        },
        "item": {
          "id": "d10ebebb-be77-486f-acd8-d7748f874b1a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "56f8174b-c778-4767-8511-c7c01b643e57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b800211-940e-4c64-a80c-e8e40af791f0",
        "cursor": {
          "ref": "2f8ecee7-15f5-4c66-b3bd-649c56e536a5",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4ad3b391-56b5-4d76-ba68-d1c7872e7100"
        },
        "item": {
          "id": "8b800211-940e-4c64-a80c-e8e40af791f0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "783fb29b-17ed-42d9-9f63-8c6ad659fdc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b800211-940e-4c64-a80c-e8e40af791f0",
        "cursor": {
          "ref": "2f8ecee7-15f5-4c66-b3bd-649c56e536a5",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4ad3b391-56b5-4d76-ba68-d1c7872e7100"
        },
        "item": {
          "id": "8b800211-940e-4c64-a80c-e8e40af791f0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "783fb29b-17ed-42d9-9f63-8c6ad659fdc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0182fda-e84b-415e-a6bd-62752491a496",
        "cursor": {
          "ref": "667135b4-b366-4de9-bcda-518c77692b6a",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7be04b93-8102-4360-b6d1-fbbe21080eb4"
        },
        "item": {
          "id": "b0182fda-e84b-415e-a6bd-62752491a496",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4d3c08a2-9a68-4a72-b31a-5734dd76d4c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0182fda-e84b-415e-a6bd-62752491a496",
        "cursor": {
          "ref": "667135b4-b366-4de9-bcda-518c77692b6a",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7be04b93-8102-4360-b6d1-fbbe21080eb4"
        },
        "item": {
          "id": "b0182fda-e84b-415e-a6bd-62752491a496",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4d3c08a2-9a68-4a72-b31a-5734dd76d4c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686e5bbd-b715-4715-a3a5-430ba95896e5",
        "cursor": {
          "ref": "5b6f0dfd-43d9-408b-805e-3d91d8c4920b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3259768d-3ae3-436c-b50e-6efe5d2bb952"
        },
        "item": {
          "id": "686e5bbd-b715-4715-a3a5-430ba95896e5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e59f2287-fffd-4f7a-86a3-09d18cbeb578",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686e5bbd-b715-4715-a3a5-430ba95896e5",
        "cursor": {
          "ref": "5b6f0dfd-43d9-408b-805e-3d91d8c4920b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3259768d-3ae3-436c-b50e-6efe5d2bb952"
        },
        "item": {
          "id": "686e5bbd-b715-4715-a3a5-430ba95896e5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e59f2287-fffd-4f7a-86a3-09d18cbeb578",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9946fd-f5a6-4f17-b1e4-76d2b318e293",
        "cursor": {
          "ref": "1a5615af-84e1-4f13-a92b-b4d2a236154a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "57bf5f0f-078e-446d-aeaf-2e2fec1721a2"
        },
        "item": {
          "id": "be9946fd-f5a6-4f17-b1e4-76d2b318e293",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aeed2b63-4e45-4e81-83a7-9a4eb2302c4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9946fd-f5a6-4f17-b1e4-76d2b318e293",
        "cursor": {
          "ref": "1a5615af-84e1-4f13-a92b-b4d2a236154a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "57bf5f0f-078e-446d-aeaf-2e2fec1721a2"
        },
        "item": {
          "id": "be9946fd-f5a6-4f17-b1e4-76d2b318e293",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aeed2b63-4e45-4e81-83a7-9a4eb2302c4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b324120-1506-46c6-a623-06a2f5025323",
        "cursor": {
          "ref": "2b520337-eaf9-43fd-9b4b-103abf9d58b9",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "03d995be-68bc-4dd8-9330-4b9038feb973"
        },
        "item": {
          "id": "6b324120-1506-46c6-a623-06a2f5025323",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1927d541-8593-4e55-ac2a-fba6b4055cd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b324120-1506-46c6-a623-06a2f5025323",
        "cursor": {
          "ref": "2b520337-eaf9-43fd-9b4b-103abf9d58b9",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "03d995be-68bc-4dd8-9330-4b9038feb973"
        },
        "item": {
          "id": "6b324120-1506-46c6-a623-06a2f5025323",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1927d541-8593-4e55-ac2a-fba6b4055cd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec8b825-3ff0-4bf2-a3bb-8b9e71bb3fc8",
        "cursor": {
          "ref": "1e025511-0911-4f2e-880c-f15b64ab1240",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9ed744ab-55f4-4a44-abb0-4e261ff26383"
        },
        "item": {
          "id": "bec8b825-3ff0-4bf2-a3bb-8b9e71bb3fc8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2cbc5bd2-93d5-486c-b25d-e7f952aae159",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec8b825-3ff0-4bf2-a3bb-8b9e71bb3fc8",
        "cursor": {
          "ref": "1e025511-0911-4f2e-880c-f15b64ab1240",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9ed744ab-55f4-4a44-abb0-4e261ff26383"
        },
        "item": {
          "id": "bec8b825-3ff0-4bf2-a3bb-8b9e71bb3fc8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2cbc5bd2-93d5-486c-b25d-e7f952aae159",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c589742-9f7f-4cfa-a8a9-24b237fa4ad2",
        "cursor": {
          "ref": "914d90dc-e7b8-4269-9439-6ad21108abb0",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4f7fbac0-610e-441f-b439-d3de1df5a4f6"
        },
        "item": {
          "id": "6c589742-9f7f-4cfa-a8a9-24b237fa4ad2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2be20519-802b-45fe-8ceb-2571e49b8fee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c589742-9f7f-4cfa-a8a9-24b237fa4ad2",
        "cursor": {
          "ref": "914d90dc-e7b8-4269-9439-6ad21108abb0",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4f7fbac0-610e-441f-b439-d3de1df5a4f6"
        },
        "item": {
          "id": "6c589742-9f7f-4cfa-a8a9-24b237fa4ad2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2be20519-802b-45fe-8ceb-2571e49b8fee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2016586-4a3d-4f75-b591-8bc3b04293ab",
        "cursor": {
          "ref": "2a43aaca-f1c4-4c01-bf3f-44a0e5357eec",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "19bd5b99-12c5-4dda-a0ad-165519407d06"
        },
        "item": {
          "id": "c2016586-4a3d-4f75-b591-8bc3b04293ab",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f7fc8656-b669-48e7-892d-9d36b01b598e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2016586-4a3d-4f75-b591-8bc3b04293ab",
        "cursor": {
          "ref": "2a43aaca-f1c4-4c01-bf3f-44a0e5357eec",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "19bd5b99-12c5-4dda-a0ad-165519407d06"
        },
        "item": {
          "id": "c2016586-4a3d-4f75-b591-8bc3b04293ab",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f7fc8656-b669-48e7-892d-9d36b01b598e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c349ed7-d498-4367-b590-db1226d1570a",
        "cursor": {
          "ref": "6671521f-09f5-4097-8f38-ebf4eec86f98",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "90500f49-5164-4b9d-8f74-7e1b4ed2acb5"
        },
        "item": {
          "id": "8c349ed7-d498-4367-b590-db1226d1570a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0640c2d3-59f6-4ec2-857a-33d1e6f6749b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c349ed7-d498-4367-b590-db1226d1570a",
        "cursor": {
          "ref": "6671521f-09f5-4097-8f38-ebf4eec86f98",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "90500f49-5164-4b9d-8f74-7e1b4ed2acb5"
        },
        "item": {
          "id": "8c349ed7-d498-4367-b590-db1226d1570a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0640c2d3-59f6-4ec2-857a-33d1e6f6749b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a2a7e6-1075-4e1b-b67e-4960d3e3c404",
        "cursor": {
          "ref": "5d6dfa71-df5d-41c9-9346-b79dff9f2860",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fecacd63-73a8-433f-a55a-2021103732ca"
        },
        "item": {
          "id": "90a2a7e6-1075-4e1b-b67e-4960d3e3c404",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5593229a-16de-447e-9d55-19cd6688d89e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a2a7e6-1075-4e1b-b67e-4960d3e3c404",
        "cursor": {
          "ref": "5d6dfa71-df5d-41c9-9346-b79dff9f2860",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fecacd63-73a8-433f-a55a-2021103732ca"
        },
        "item": {
          "id": "90a2a7e6-1075-4e1b-b67e-4960d3e3c404",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5593229a-16de-447e-9d55-19cd6688d89e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b741a6d-b45b-44b5-ae19-846397cd7197",
        "cursor": {
          "ref": "f7df01bf-6de9-4138-9986-abf0f061374d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "44bcac23-6873-48c6-87d0-f7c0218b6d00"
        },
        "item": {
          "id": "3b741a6d-b45b-44b5-ae19-846397cd7197",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8c0001aa-88b5-4115-b1f5-7a40aa6614ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b741a6d-b45b-44b5-ae19-846397cd7197",
        "cursor": {
          "ref": "f7df01bf-6de9-4138-9986-abf0f061374d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "44bcac23-6873-48c6-87d0-f7c0218b6d00"
        },
        "item": {
          "id": "3b741a6d-b45b-44b5-ae19-846397cd7197",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8c0001aa-88b5-4115-b1f5-7a40aa6614ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e945b2-74dd-4baa-a456-2d7a03090612",
        "cursor": {
          "ref": "86f260d0-fb77-4e0a-b079-9488a3c89843",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3d2b3110-29f2-48bf-9211-201777e42811"
        },
        "item": {
          "id": "d5e945b2-74dd-4baa-a456-2d7a03090612",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "964fbf11-da0d-422f-ae56-98729eac6938",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e945b2-74dd-4baa-a456-2d7a03090612",
        "cursor": {
          "ref": "86f260d0-fb77-4e0a-b079-9488a3c89843",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3d2b3110-29f2-48bf-9211-201777e42811"
        },
        "item": {
          "id": "d5e945b2-74dd-4baa-a456-2d7a03090612",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "964fbf11-da0d-422f-ae56-98729eac6938",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b673f79c-8ad8-42f5-a861-e93af33b0828",
        "cursor": {
          "ref": "386b91ec-d104-4f5c-a35c-9da5d0411443",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cb32fe6a-0920-4a25-a7ad-dc972c63446a"
        },
        "item": {
          "id": "b673f79c-8ad8-42f5-a861-e93af33b0828",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fc3bb381-3a88-4e5b-be70-2d0af6ade766",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b673f79c-8ad8-42f5-a861-e93af33b0828",
        "cursor": {
          "ref": "386b91ec-d104-4f5c-a35c-9da5d0411443",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cb32fe6a-0920-4a25-a7ad-dc972c63446a"
        },
        "item": {
          "id": "b673f79c-8ad8-42f5-a861-e93af33b0828",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fc3bb381-3a88-4e5b-be70-2d0af6ade766",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190628df-1aba-43f0-b068-f5ec741a962b",
        "cursor": {
          "ref": "31b81ca1-ec68-4447-aa78-f9aad3e03250",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8fff8b91-4a42-4ce7-8412-da857c416417"
        },
        "item": {
          "id": "190628df-1aba-43f0-b068-f5ec741a962b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "299add60-8264-45f4-80bd-602dc52ed17f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190628df-1aba-43f0-b068-f5ec741a962b",
        "cursor": {
          "ref": "31b81ca1-ec68-4447-aa78-f9aad3e03250",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8fff8b91-4a42-4ce7-8412-da857c416417"
        },
        "item": {
          "id": "190628df-1aba-43f0-b068-f5ec741a962b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "299add60-8264-45f4-80bd-602dc52ed17f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60104d05-a1d2-4296-83dc-3b685f3ab7ec",
        "cursor": {
          "ref": "f66c88da-07c2-488f-902c-46cec2ff846f",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "31963b4b-e155-4117-80f0-86a1cf6538b2"
        },
        "item": {
          "id": "60104d05-a1d2-4296-83dc-3b685f3ab7ec",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fce3fecc-75f3-4ec7-b03d-0ea85946d9fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60104d05-a1d2-4296-83dc-3b685f3ab7ec",
        "cursor": {
          "ref": "f66c88da-07c2-488f-902c-46cec2ff846f",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "31963b4b-e155-4117-80f0-86a1cf6538b2"
        },
        "item": {
          "id": "60104d05-a1d2-4296-83dc-3b685f3ab7ec",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fce3fecc-75f3-4ec7-b03d-0ea85946d9fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bbc036-f7f5-4aa2-9896-e03a2693a10b",
        "cursor": {
          "ref": "85138837-3610-48e7-84c0-258ef8dc1a03",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "45818c59-ef4b-47fd-a747-b457391ae4a3"
        },
        "item": {
          "id": "d9bbc036-f7f5-4aa2-9896-e03a2693a10b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5814b13e-785a-45a6-bbb9-e45ce60878b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bbc036-f7f5-4aa2-9896-e03a2693a10b",
        "cursor": {
          "ref": "85138837-3610-48e7-84c0-258ef8dc1a03",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "45818c59-ef4b-47fd-a747-b457391ae4a3"
        },
        "item": {
          "id": "d9bbc036-f7f5-4aa2-9896-e03a2693a10b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5814b13e-785a-45a6-bbb9-e45ce60878b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0ee2a6-9efa-4ace-9dbe-8372962c1c92",
        "cursor": {
          "ref": "2aea7798-c307-4326-8772-1f8aaef6bd16",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6c1fbead-fc1e-4711-bce0-22dae34ef7cf"
        },
        "item": {
          "id": "fc0ee2a6-9efa-4ace-9dbe-8372962c1c92",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c47cec3e-afbe-4daa-943e-4b9293df4759",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0ee2a6-9efa-4ace-9dbe-8372962c1c92",
        "cursor": {
          "ref": "2aea7798-c307-4326-8772-1f8aaef6bd16",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6c1fbead-fc1e-4711-bce0-22dae34ef7cf"
        },
        "item": {
          "id": "fc0ee2a6-9efa-4ace-9dbe-8372962c1c92",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c47cec3e-afbe-4daa-943e-4b9293df4759",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18edf647-4476-42ed-9d5d-9f6c068ebe1d",
        "cursor": {
          "ref": "b627f8e3-07b6-4d7f-8e34-b8c9db58caec",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b0641cbb-3950-4860-b13f-b4bace344d5e"
        },
        "item": {
          "id": "18edf647-4476-42ed-9d5d-9f6c068ebe1d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3b7b2e7e-a373-4cb4-ab6e-de462166c6da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18edf647-4476-42ed-9d5d-9f6c068ebe1d",
        "cursor": {
          "ref": "b627f8e3-07b6-4d7f-8e34-b8c9db58caec",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b0641cbb-3950-4860-b13f-b4bace344d5e"
        },
        "item": {
          "id": "18edf647-4476-42ed-9d5d-9f6c068ebe1d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3b7b2e7e-a373-4cb4-ab6e-de462166c6da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2f35dd-fc18-42c9-be7d-d6b43a1aef71",
        "cursor": {
          "ref": "49e796ae-f5c1-4d78-b859-5b057acf3173",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f8e4dfa9-17ba-4eea-a9d1-79e02aba4094"
        },
        "item": {
          "id": "3e2f35dd-fc18-42c9-be7d-d6b43a1aef71",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e6aff660-541f-455b-939b-8ebc073d5d6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2f35dd-fc18-42c9-be7d-d6b43a1aef71",
        "cursor": {
          "ref": "49e796ae-f5c1-4d78-b859-5b057acf3173",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f8e4dfa9-17ba-4eea-a9d1-79e02aba4094"
        },
        "item": {
          "id": "3e2f35dd-fc18-42c9-be7d-d6b43a1aef71",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e6aff660-541f-455b-939b-8ebc073d5d6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec858bc-0847-4da6-b9ba-87ae8b152455",
        "cursor": {
          "ref": "008f8497-9266-46e5-a428-18e6dd19829e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "82e71959-6327-4287-9ad5-2c3588481097"
        },
        "item": {
          "id": "8ec858bc-0847-4da6-b9ba-87ae8b152455",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4ea88d98-6c7d-4e5b-9623-70eb8a3f95da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec858bc-0847-4da6-b9ba-87ae8b152455",
        "cursor": {
          "ref": "008f8497-9266-46e5-a428-18e6dd19829e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "82e71959-6327-4287-9ad5-2c3588481097"
        },
        "item": {
          "id": "8ec858bc-0847-4da6-b9ba-87ae8b152455",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4ea88d98-6c7d-4e5b-9623-70eb8a3f95da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e126852a-f1da-4792-bea8-47f83fb4c9eb",
        "cursor": {
          "ref": "a9e2e291-e7af-4dbf-a7fb-fcb64c0063d0",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1db98580-9f13-4993-b062-1e16e03a4d00"
        },
        "item": {
          "id": "e126852a-f1da-4792-bea8-47f83fb4c9eb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aa9586db-a282-4719-a0fe-58bc5775c427",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e126852a-f1da-4792-bea8-47f83fb4c9eb",
        "cursor": {
          "ref": "a9e2e291-e7af-4dbf-a7fb-fcb64c0063d0",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1db98580-9f13-4993-b062-1e16e03a4d00"
        },
        "item": {
          "id": "e126852a-f1da-4792-bea8-47f83fb4c9eb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aa9586db-a282-4719-a0fe-58bc5775c427",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc0f172-ae5f-4448-88a9-295f00968b3d",
        "cursor": {
          "ref": "7b55e62a-3525-4500-95bd-2bb20befafa5",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ac048fb0-e9c3-46cd-8bc6-562385360b3f"
        },
        "item": {
          "id": "9bc0f172-ae5f-4448-88a9-295f00968b3d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ff55a1c0-707d-40d0-ace7-10f3db09bd8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc0f172-ae5f-4448-88a9-295f00968b3d",
        "cursor": {
          "ref": "7b55e62a-3525-4500-95bd-2bb20befafa5",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ac048fb0-e9c3-46cd-8bc6-562385360b3f"
        },
        "item": {
          "id": "9bc0f172-ae5f-4448-88a9-295f00968b3d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ff55a1c0-707d-40d0-ace7-10f3db09bd8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783a0959-2720-42a1-ad7b-7f5362d56219",
        "cursor": {
          "ref": "93b868b0-8935-4091-8ec9-80adc06f557a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "91b651da-7ec9-4b19-8b93-0c0e902447ff"
        },
        "item": {
          "id": "783a0959-2720-42a1-ad7b-7f5362d56219",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "325da731-b756-4268-a7d4-bfff5dec3123",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783a0959-2720-42a1-ad7b-7f5362d56219",
        "cursor": {
          "ref": "93b868b0-8935-4091-8ec9-80adc06f557a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "91b651da-7ec9-4b19-8b93-0c0e902447ff"
        },
        "item": {
          "id": "783a0959-2720-42a1-ad7b-7f5362d56219",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "325da731-b756-4268-a7d4-bfff5dec3123",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc788cd-7fc6-4f45-b058-d78bdf884834",
        "cursor": {
          "ref": "e35cb5a9-7524-4df1-99bd-37b3021938c4",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "20962220-da17-4568-bfbd-a46bff747c45"
        },
        "item": {
          "id": "cbc788cd-7fc6-4f45-b058-d78bdf884834",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f32b609f-287a-456b-ad27-3a3b31e0982a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc788cd-7fc6-4f45-b058-d78bdf884834",
        "cursor": {
          "ref": "e35cb5a9-7524-4df1-99bd-37b3021938c4",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "20962220-da17-4568-bfbd-a46bff747c45"
        },
        "item": {
          "id": "cbc788cd-7fc6-4f45-b058-d78bdf884834",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f32b609f-287a-456b-ad27-3a3b31e0982a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a9e471-c0e5-4c39-8494-9501b25409bc",
        "cursor": {
          "ref": "62ed0ce0-c628-4102-90fb-0a9c66b8e7dc",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "40e9cb95-3232-42f8-8a4e-127e4a4ff214"
        },
        "item": {
          "id": "98a9e471-c0e5-4c39-8494-9501b25409bc",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "54f4b714-b9dd-42d5-8146-61e2f3b9297d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a9e471-c0e5-4c39-8494-9501b25409bc",
        "cursor": {
          "ref": "62ed0ce0-c628-4102-90fb-0a9c66b8e7dc",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "40e9cb95-3232-42f8-8a4e-127e4a4ff214"
        },
        "item": {
          "id": "98a9e471-c0e5-4c39-8494-9501b25409bc",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "54f4b714-b9dd-42d5-8146-61e2f3b9297d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fb939c-5b22-4a68-8397-1687e96a020d",
        "cursor": {
          "ref": "d4657481-53b6-4006-b80e-7aafd708eca8",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "910609c2-f7d7-43c4-8103-6b5df5bac254"
        },
        "item": {
          "id": "87fb939c-5b22-4a68-8397-1687e96a020d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cc960b99-1f18-4036-afe2-6d40566b7570",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fb939c-5b22-4a68-8397-1687e96a020d",
        "cursor": {
          "ref": "d4657481-53b6-4006-b80e-7aafd708eca8",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "910609c2-f7d7-43c4-8103-6b5df5bac254"
        },
        "item": {
          "id": "87fb939c-5b22-4a68-8397-1687e96a020d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cc960b99-1f18-4036-afe2-6d40566b7570",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8b1a97-eb66-413c-93e0-be8350f97174",
        "cursor": {
          "ref": "53649e0c-6eff-4123-b8ad-177fcf4122ab",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "111619e9-867a-417e-bf2e-bf5740bb0f2a"
        },
        "item": {
          "id": "0e8b1a97-eb66-413c-93e0-be8350f97174",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dbf678f6-cca5-4ec7-94d4-64f6a2af37f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8b1a97-eb66-413c-93e0-be8350f97174",
        "cursor": {
          "ref": "53649e0c-6eff-4123-b8ad-177fcf4122ab",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "111619e9-867a-417e-bf2e-bf5740bb0f2a"
        },
        "item": {
          "id": "0e8b1a97-eb66-413c-93e0-be8350f97174",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dbf678f6-cca5-4ec7-94d4-64f6a2af37f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768da605-9afb-4f1c-956c-3330f041346c",
        "cursor": {
          "ref": "c34b9661-bfa5-4f65-958b-9bbe23464e86",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9de850c8-e2a8-4a52-9723-a7319c5aa7b1"
        },
        "item": {
          "id": "768da605-9afb-4f1c-956c-3330f041346c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7b68f9cc-c48e-45c9-a37d-4e9eb4593c3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768da605-9afb-4f1c-956c-3330f041346c",
        "cursor": {
          "ref": "c34b9661-bfa5-4f65-958b-9bbe23464e86",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9de850c8-e2a8-4a52-9723-a7319c5aa7b1"
        },
        "item": {
          "id": "768da605-9afb-4f1c-956c-3330f041346c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7b68f9cc-c48e-45c9-a37d-4e9eb4593c3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54eff6e-f224-4c1e-8f5e-04c618c01834",
        "cursor": {
          "ref": "651f457c-e893-4976-8445-2a58fd88ef3f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "af3d31e7-7641-4581-9e00-6c93686f7f8c"
        },
        "item": {
          "id": "a54eff6e-f224-4c1e-8f5e-04c618c01834",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b5de1f7c-9034-42ee-9475-9b58e273fc41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54eff6e-f224-4c1e-8f5e-04c618c01834",
        "cursor": {
          "ref": "651f457c-e893-4976-8445-2a58fd88ef3f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "af3d31e7-7641-4581-9e00-6c93686f7f8c"
        },
        "item": {
          "id": "a54eff6e-f224-4c1e-8f5e-04c618c01834",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b5de1f7c-9034-42ee-9475-9b58e273fc41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aedfff-04ae-43f2-8f1f-bd505cb55377",
        "cursor": {
          "ref": "38cdc74b-2cbe-4910-9629-bc6c3c86bced",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3287b09c-9483-4d96-ada5-f55725eb9b2a"
        },
        "item": {
          "id": "b3aedfff-04ae-43f2-8f1f-bd505cb55377",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cd8fae0c-b58c-4c2d-b2d5-706611f919f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aedfff-04ae-43f2-8f1f-bd505cb55377",
        "cursor": {
          "ref": "38cdc74b-2cbe-4910-9629-bc6c3c86bced",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3287b09c-9483-4d96-ada5-f55725eb9b2a"
        },
        "item": {
          "id": "b3aedfff-04ae-43f2-8f1f-bd505cb55377",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cd8fae0c-b58c-4c2d-b2d5-706611f919f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cd8d8a-b534-4d7f-aa12-36da22270d9e",
        "cursor": {
          "ref": "3ba45b55-f9e5-454c-a9c9-cab9271efb5b",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b1e294c8-161e-46f3-ba76-25cf3e7c15a6"
        },
        "item": {
          "id": "36cd8d8a-b534-4d7f-aa12-36da22270d9e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "aa1603bc-4f54-4acb-8d88-3d895eb3874f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cd8d8a-b534-4d7f-aa12-36da22270d9e",
        "cursor": {
          "ref": "3ba45b55-f9e5-454c-a9c9-cab9271efb5b",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b1e294c8-161e-46f3-ba76-25cf3e7c15a6"
        },
        "item": {
          "id": "36cd8d8a-b534-4d7f-aa12-36da22270d9e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "aa1603bc-4f54-4acb-8d88-3d895eb3874f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699f4079-74dc-4541-b182-43db5aef31a1",
        "cursor": {
          "ref": "f482ac63-f489-4a30-9ec6-b4092ea51344",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "63655f6b-e938-40e1-b70d-e601bcbf9a6e"
        },
        "item": {
          "id": "699f4079-74dc-4541-b182-43db5aef31a1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e82c2ade-cce9-4286-8d3c-5a909fd33aa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699f4079-74dc-4541-b182-43db5aef31a1",
        "cursor": {
          "ref": "f482ac63-f489-4a30-9ec6-b4092ea51344",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "63655f6b-e938-40e1-b70d-e601bcbf9a6e"
        },
        "item": {
          "id": "699f4079-74dc-4541-b182-43db5aef31a1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e82c2ade-cce9-4286-8d3c-5a909fd33aa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a131ea-a7ff-46e1-ad99-632f5290c654",
        "cursor": {
          "ref": "15b6b8dd-9dd4-4425-a8bf-39c0b32a97da",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "375a37f2-c489-4c00-b23a-17eacd599b3b"
        },
        "item": {
          "id": "02a131ea-a7ff-46e1-ad99-632f5290c654",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "960b4705-39e4-40dd-8355-2152b0a3dec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a131ea-a7ff-46e1-ad99-632f5290c654",
        "cursor": {
          "ref": "15b6b8dd-9dd4-4425-a8bf-39c0b32a97da",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "375a37f2-c489-4c00-b23a-17eacd599b3b"
        },
        "item": {
          "id": "02a131ea-a7ff-46e1-ad99-632f5290c654",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "960b4705-39e4-40dd-8355-2152b0a3dec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6edb874-da7e-4ad7-8008-79dd5155f866",
        "cursor": {
          "ref": "34292a27-3986-445f-b57f-71b60b618014",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5050abb7-2862-4211-adc8-1a81ed43ba69"
        },
        "item": {
          "id": "e6edb874-da7e-4ad7-8008-79dd5155f866",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6004cb15-50f3-4935-be88-7b7d27354af4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6edb874-da7e-4ad7-8008-79dd5155f866",
        "cursor": {
          "ref": "34292a27-3986-445f-b57f-71b60b618014",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5050abb7-2862-4211-adc8-1a81ed43ba69"
        },
        "item": {
          "id": "e6edb874-da7e-4ad7-8008-79dd5155f866",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6004cb15-50f3-4935-be88-7b7d27354af4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aee66cc-4cfb-4796-9a66-733726d04cdc",
        "cursor": {
          "ref": "7dfd01d1-4835-432f-9a50-a92e9e61c38c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e4ff38bd-e873-4584-a7c2-7c3003e180ad"
        },
        "item": {
          "id": "6aee66cc-4cfb-4796-9a66-733726d04cdc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5ef59725-fc0a-4f1b-a259-3a0853811c16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aee66cc-4cfb-4796-9a66-733726d04cdc",
        "cursor": {
          "ref": "7dfd01d1-4835-432f-9a50-a92e9e61c38c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e4ff38bd-e873-4584-a7c2-7c3003e180ad"
        },
        "item": {
          "id": "6aee66cc-4cfb-4796-9a66-733726d04cdc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5ef59725-fc0a-4f1b-a259-3a0853811c16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a62e2ce-6d54-4fbf-8d0e-7b2abb8c985f",
        "cursor": {
          "ref": "a318b291-3274-49f7-b397-c0e75a94e1af",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "71cfba54-7987-45e5-9098-93bdbe68e365"
        },
        "item": {
          "id": "0a62e2ce-6d54-4fbf-8d0e-7b2abb8c985f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0e80415f-7c00-476c-a692-81f3af007da8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a62e2ce-6d54-4fbf-8d0e-7b2abb8c985f",
        "cursor": {
          "ref": "a318b291-3274-49f7-b397-c0e75a94e1af",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "71cfba54-7987-45e5-9098-93bdbe68e365"
        },
        "item": {
          "id": "0a62e2ce-6d54-4fbf-8d0e-7b2abb8c985f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0e80415f-7c00-476c-a692-81f3af007da8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eadc208-240f-4074-bb97-0bedf26a76de",
        "cursor": {
          "ref": "550b1f35-0c44-4990-b3d8-23df7168bbc2",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5603edf7-8a87-49e0-a840-4b5ad56b966b"
        },
        "item": {
          "id": "3eadc208-240f-4074-bb97-0bedf26a76de",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "59d0798f-e0b2-4ee4-9d45-91e9c6172825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eadc208-240f-4074-bb97-0bedf26a76de",
        "cursor": {
          "ref": "550b1f35-0c44-4990-b3d8-23df7168bbc2",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5603edf7-8a87-49e0-a840-4b5ad56b966b"
        },
        "item": {
          "id": "3eadc208-240f-4074-bb97-0bedf26a76de",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "59d0798f-e0b2-4ee4-9d45-91e9c6172825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faeb037a-5f23-49e5-b5a3-5f2782944556",
        "cursor": {
          "ref": "8d0b19e3-b229-4918-a1a3-6620f4738f3d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "30df4d16-a800-4521-959b-2bcce129e638"
        },
        "item": {
          "id": "faeb037a-5f23-49e5-b5a3-5f2782944556",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d6d5b840-2197-4038-bd72-a64a669ecc1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faeb037a-5f23-49e5-b5a3-5f2782944556",
        "cursor": {
          "ref": "8d0b19e3-b229-4918-a1a3-6620f4738f3d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "30df4d16-a800-4521-959b-2bcce129e638"
        },
        "item": {
          "id": "faeb037a-5f23-49e5-b5a3-5f2782944556",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d6d5b840-2197-4038-bd72-a64a669ecc1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad0d7f3-8db8-462b-9c81-098eea48c3a0",
        "cursor": {
          "ref": "b9ed4cd4-4057-4f02-8c8b-cab7a6be0ae5",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ecc84777-af87-456a-8cca-dc19a8394493"
        },
        "item": {
          "id": "1ad0d7f3-8db8-462b-9c81-098eea48c3a0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "96ed5c62-d2ed-4a66-bd48-395ae20bde3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad0d7f3-8db8-462b-9c81-098eea48c3a0",
        "cursor": {
          "ref": "b9ed4cd4-4057-4f02-8c8b-cab7a6be0ae5",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ecc84777-af87-456a-8cca-dc19a8394493"
        },
        "item": {
          "id": "1ad0d7f3-8db8-462b-9c81-098eea48c3a0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "96ed5c62-d2ed-4a66-bd48-395ae20bde3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e4469e-aef6-475a-afe5-88eefaa80d9f",
        "cursor": {
          "ref": "189e4159-5f8b-4a89-a0ba-0666c9609e7f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3480bb91-addf-4a68-9a60-0cff888be5a4"
        },
        "item": {
          "id": "10e4469e-aef6-475a-afe5-88eefaa80d9f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fab3a5b3-bedf-489c-a92c-90c2927653f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e4469e-aef6-475a-afe5-88eefaa80d9f",
        "cursor": {
          "ref": "189e4159-5f8b-4a89-a0ba-0666c9609e7f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3480bb91-addf-4a68-9a60-0cff888be5a4"
        },
        "item": {
          "id": "10e4469e-aef6-475a-afe5-88eefaa80d9f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fab3a5b3-bedf-489c-a92c-90c2927653f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707e9dd3-fdb7-4e81-8a16-eab77b257880",
        "cursor": {
          "ref": "e429bfcb-1b78-4dbc-bac5-86264b8cae7b",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "40879af8-1262-451b-a741-664a9b6a5b27"
        },
        "item": {
          "id": "707e9dd3-fdb7-4e81-8a16-eab77b257880",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "880077b8-17c3-439c-9044-23c6665152c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707e9dd3-fdb7-4e81-8a16-eab77b257880",
        "cursor": {
          "ref": "e429bfcb-1b78-4dbc-bac5-86264b8cae7b",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "40879af8-1262-451b-a741-664a9b6a5b27"
        },
        "item": {
          "id": "707e9dd3-fdb7-4e81-8a16-eab77b257880",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "880077b8-17c3-439c-9044-23c6665152c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9cbc114-f37f-4efc-99ad-1188e0564799",
        "cursor": {
          "ref": "5ce2fa62-d8d0-4b46-8153-13d2f7648c66",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e33d306b-26e2-41a3-8f0b-800686d1629d"
        },
        "item": {
          "id": "f9cbc114-f37f-4efc-99ad-1188e0564799",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b32ca5d4-b11f-4d26-9e27-7231a15a5f37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9cbc114-f37f-4efc-99ad-1188e0564799",
        "cursor": {
          "ref": "5ce2fa62-d8d0-4b46-8153-13d2f7648c66",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e33d306b-26e2-41a3-8f0b-800686d1629d"
        },
        "item": {
          "id": "f9cbc114-f37f-4efc-99ad-1188e0564799",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b32ca5d4-b11f-4d26-9e27-7231a15a5f37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620f4f31-51ba-407b-953f-d1ad4d68eadb",
        "cursor": {
          "ref": "14bd235b-6539-4d11-afc8-267126dacb18",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aba5fe92-b38f-4c3a-9ba8-a7215adbeb0c"
        },
        "item": {
          "id": "620f4f31-51ba-407b-953f-d1ad4d68eadb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ece43228-4e19-4862-b6be-44c9cc14ba65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620f4f31-51ba-407b-953f-d1ad4d68eadb",
        "cursor": {
          "ref": "14bd235b-6539-4d11-afc8-267126dacb18",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aba5fe92-b38f-4c3a-9ba8-a7215adbeb0c"
        },
        "item": {
          "id": "620f4f31-51ba-407b-953f-d1ad4d68eadb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ece43228-4e19-4862-b6be-44c9cc14ba65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8d381c-9e9b-438c-a861-fba8f649eb28",
        "cursor": {
          "ref": "9acfee72-2e66-4fdf-8aec-a60f753104df",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c3b982ff-d7ce-49bc-afd9-9aa58be98c70"
        },
        "item": {
          "id": "6a8d381c-9e9b-438c-a861-fba8f649eb28",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "70c4e2db-2fb2-44b1-918d-719a28677a87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8d381c-9e9b-438c-a861-fba8f649eb28",
        "cursor": {
          "ref": "9acfee72-2e66-4fdf-8aec-a60f753104df",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c3b982ff-d7ce-49bc-afd9-9aa58be98c70"
        },
        "item": {
          "id": "6a8d381c-9e9b-438c-a861-fba8f649eb28",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "70c4e2db-2fb2-44b1-918d-719a28677a87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d419882a-d9e0-4354-b5d7-e34e59b7781e",
        "cursor": {
          "ref": "5f00a9bf-ca47-4c68-bd21-85ad95f33ce7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1840bda4-0dd0-427d-a62d-93fcce2f9d51"
        },
        "item": {
          "id": "d419882a-d9e0-4354-b5d7-e34e59b7781e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a0abc1ea-2a86-45e9-b606-363cd494ad72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d419882a-d9e0-4354-b5d7-e34e59b7781e",
        "cursor": {
          "ref": "5f00a9bf-ca47-4c68-bd21-85ad95f33ce7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1840bda4-0dd0-427d-a62d-93fcce2f9d51"
        },
        "item": {
          "id": "d419882a-d9e0-4354-b5d7-e34e59b7781e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a0abc1ea-2a86-45e9-b606-363cd494ad72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb18159-d532-422a-abab-878a49b5eb4f",
        "cursor": {
          "ref": "d1839931-b9d4-4743-848f-88da2f52e61b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "544d9f7f-f37a-40d0-b806-d17fc0665869"
        },
        "item": {
          "id": "eeb18159-d532-422a-abab-878a49b5eb4f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "573f449b-c07c-4e82-b1b5-be31b27c3aa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb18159-d532-422a-abab-878a49b5eb4f",
        "cursor": {
          "ref": "d1839931-b9d4-4743-848f-88da2f52e61b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "544d9f7f-f37a-40d0-b806-d17fc0665869"
        },
        "item": {
          "id": "eeb18159-d532-422a-abab-878a49b5eb4f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "573f449b-c07c-4e82-b1b5-be31b27c3aa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f60fb72-cd1a-439d-b610-dfc356fa4df0",
        "cursor": {
          "ref": "a041ef16-5edc-4354-bd52-94e836b7b200",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3e7b9863-ce72-416e-8bf7-d94ca31d868d"
        },
        "item": {
          "id": "1f60fb72-cd1a-439d-b610-dfc356fa4df0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bcba1efa-35f8-497e-9347-295a93ed41b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f60fb72-cd1a-439d-b610-dfc356fa4df0",
        "cursor": {
          "ref": "a041ef16-5edc-4354-bd52-94e836b7b200",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3e7b9863-ce72-416e-8bf7-d94ca31d868d"
        },
        "item": {
          "id": "1f60fb72-cd1a-439d-b610-dfc356fa4df0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bcba1efa-35f8-497e-9347-295a93ed41b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626ae601-7dda-41e4-80a0-49d137605f08",
        "cursor": {
          "ref": "732ad4c8-bd03-4951-aa4f-e2a47e9c3d53",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3aa1b253-59d7-4936-bc8e-645061859e31"
        },
        "item": {
          "id": "626ae601-7dda-41e4-80a0-49d137605f08",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e524ecc9-0bbf-4053-a055-4230999f9903",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626ae601-7dda-41e4-80a0-49d137605f08",
        "cursor": {
          "ref": "732ad4c8-bd03-4951-aa4f-e2a47e9c3d53",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3aa1b253-59d7-4936-bc8e-645061859e31"
        },
        "item": {
          "id": "626ae601-7dda-41e4-80a0-49d137605f08",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e524ecc9-0bbf-4053-a055-4230999f9903",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df5e27c-e469-492e-a0c3-cc5c34d317c8",
        "cursor": {
          "ref": "f6096cf0-e627-423a-bd09-498d2b194de4",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9ef5df5e-9d9f-4b47-8c63-e80e1ed1ede1"
        },
        "item": {
          "id": "5df5e27c-e469-492e-a0c3-cc5c34d317c8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d84f1ad6-1d61-47a8-8149-1a2cfdac1249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df5e27c-e469-492e-a0c3-cc5c34d317c8",
        "cursor": {
          "ref": "f6096cf0-e627-423a-bd09-498d2b194de4",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9ef5df5e-9d9f-4b47-8c63-e80e1ed1ede1"
        },
        "item": {
          "id": "5df5e27c-e469-492e-a0c3-cc5c34d317c8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d84f1ad6-1d61-47a8-8149-1a2cfdac1249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec632ce-2576-4421-99f6-648da5ac389c",
        "cursor": {
          "ref": "55c0936a-3d25-477e-8604-bffa6a1d31fc",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e2c733da-7f2a-4b32-be4c-64d3fe94bcba"
        },
        "item": {
          "id": "3ec632ce-2576-4421-99f6-648da5ac389c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1b112288-0881-48cd-b6a4-51c9d483660f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec632ce-2576-4421-99f6-648da5ac389c",
        "cursor": {
          "ref": "55c0936a-3d25-477e-8604-bffa6a1d31fc",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e2c733da-7f2a-4b32-be4c-64d3fe94bcba"
        },
        "item": {
          "id": "3ec632ce-2576-4421-99f6-648da5ac389c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1b112288-0881-48cd-b6a4-51c9d483660f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018e812d-c123-4b19-92a1-c30d0545eeba",
        "cursor": {
          "ref": "ed1b824f-e604-4ca4-b34d-0fe9b7b189be",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f51be9ca-7f16-47c8-a328-9efcc13a8eaf"
        },
        "item": {
          "id": "018e812d-c123-4b19-92a1-c30d0545eeba",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "027ac640-e513-41d0-b3d7-d78b1f8c424a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018e812d-c123-4b19-92a1-c30d0545eeba",
        "cursor": {
          "ref": "ed1b824f-e604-4ca4-b34d-0fe9b7b189be",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f51be9ca-7f16-47c8-a328-9efcc13a8eaf"
        },
        "item": {
          "id": "018e812d-c123-4b19-92a1-c30d0545eeba",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "027ac640-e513-41d0-b3d7-d78b1f8c424a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a40d90f-ef4a-4b3a-9fb1-93e51462eb63",
        "cursor": {
          "ref": "d55bbbfd-a37a-4784-8d05-b41b91e36126",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3b0156c2-3794-4363-8d29-0127c33642c7"
        },
        "item": {
          "id": "7a40d90f-ef4a-4b3a-9fb1-93e51462eb63",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "946bb606-fcd0-409c-b72e-171aba9dd03d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a40d90f-ef4a-4b3a-9fb1-93e51462eb63",
        "cursor": {
          "ref": "d55bbbfd-a37a-4784-8d05-b41b91e36126",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3b0156c2-3794-4363-8d29-0127c33642c7"
        },
        "item": {
          "id": "7a40d90f-ef4a-4b3a-9fb1-93e51462eb63",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "946bb606-fcd0-409c-b72e-171aba9dd03d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7661ab06-07c0-428b-99e3-c733f690301b",
        "cursor": {
          "ref": "f44d75c1-4d1c-4e58-ae82-3d7c95b76cc0",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "62066605-4864-4f65-bd91-c15e02ccc817"
        },
        "item": {
          "id": "7661ab06-07c0-428b-99e3-c733f690301b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "986a7f60-d44b-4cf2-b40a-f2a73a13cd6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7661ab06-07c0-428b-99e3-c733f690301b",
        "cursor": {
          "ref": "f44d75c1-4d1c-4e58-ae82-3d7c95b76cc0",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "62066605-4864-4f65-bd91-c15e02ccc817"
        },
        "item": {
          "id": "7661ab06-07c0-428b-99e3-c733f690301b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "986a7f60-d44b-4cf2-b40a-f2a73a13cd6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15591fe4-8268-49fe-b269-71b7de918039",
        "cursor": {
          "ref": "a6731902-0499-48d1-be39-b121b6a59e39",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6e1b047a-cf8e-43de-9f70-f4b08e69fed1"
        },
        "item": {
          "id": "15591fe4-8268-49fe-b269-71b7de918039",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "186d5290-55a3-4503-9529-d70dc6e38f7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15591fe4-8268-49fe-b269-71b7de918039",
        "cursor": {
          "ref": "a6731902-0499-48d1-be39-b121b6a59e39",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6e1b047a-cf8e-43de-9f70-f4b08e69fed1"
        },
        "item": {
          "id": "15591fe4-8268-49fe-b269-71b7de918039",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "186d5290-55a3-4503-9529-d70dc6e38f7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b318e5-18dc-460e-ab13-645961641a18",
        "cursor": {
          "ref": "55596a39-1076-485b-9fc9-35d2d00f9543",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bd029d63-e9b3-49bc-8d21-4bdca4943246"
        },
        "item": {
          "id": "f3b318e5-18dc-460e-ab13-645961641a18",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b3df14ff-d5a5-44db-ac09-50b22b7f6341",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b318e5-18dc-460e-ab13-645961641a18",
        "cursor": {
          "ref": "55596a39-1076-485b-9fc9-35d2d00f9543",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bd029d63-e9b3-49bc-8d21-4bdca4943246"
        },
        "item": {
          "id": "f3b318e5-18dc-460e-ab13-645961641a18",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b3df14ff-d5a5-44db-ac09-50b22b7f6341",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d57b95f-16d6-4336-994e-4ff0905815d2",
        "cursor": {
          "ref": "eb23cacb-ed68-487a-a763-3fef35b0a429",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e9ae31a8-fe5c-4602-a324-73888c936b71"
        },
        "item": {
          "id": "8d57b95f-16d6-4336-994e-4ff0905815d2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "333c18e2-d9b9-475b-9732-8fe6bde4ed0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d57b95f-16d6-4336-994e-4ff0905815d2",
        "cursor": {
          "ref": "eb23cacb-ed68-487a-a763-3fef35b0a429",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e9ae31a8-fe5c-4602-a324-73888c936b71"
        },
        "item": {
          "id": "8d57b95f-16d6-4336-994e-4ff0905815d2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "333c18e2-d9b9-475b-9732-8fe6bde4ed0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8857e25-2ae2-434b-b58d-7066dca6fe6d",
        "cursor": {
          "ref": "30ae6688-c8b1-4ec2-8791-1e110b1531cb",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0f46583c-b0ce-4def-a0f2-bf2d06b26b66"
        },
        "item": {
          "id": "a8857e25-2ae2-434b-b58d-7066dca6fe6d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1b519df9-5b05-4f27-8866-bc6d872099de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8857e25-2ae2-434b-b58d-7066dca6fe6d",
        "cursor": {
          "ref": "30ae6688-c8b1-4ec2-8791-1e110b1531cb",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0f46583c-b0ce-4def-a0f2-bf2d06b26b66"
        },
        "item": {
          "id": "a8857e25-2ae2-434b-b58d-7066dca6fe6d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1b519df9-5b05-4f27-8866-bc6d872099de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea8a321-31b0-4959-b313-a47d745833c8",
        "cursor": {
          "ref": "f442aaa5-972f-4635-9a33-fdca99bf4401",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2f53d366-7be9-42b0-9936-4bd0d0184a59"
        },
        "item": {
          "id": "2ea8a321-31b0-4959-b313-a47d745833c8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cc91b318-f661-4b96-8034-b20d32a722df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea8a321-31b0-4959-b313-a47d745833c8",
        "cursor": {
          "ref": "f442aaa5-972f-4635-9a33-fdca99bf4401",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2f53d366-7be9-42b0-9936-4bd0d0184a59"
        },
        "item": {
          "id": "2ea8a321-31b0-4959-b313-a47d745833c8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cc91b318-f661-4b96-8034-b20d32a722df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d112cc-8cdf-41e7-8d57-22eeb9698a07",
        "cursor": {
          "ref": "b3498036-2890-4cb7-a8b4-fb2c67ff5420",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "548fa5c5-52f8-43e1-9c6d-1915df7325a5"
        },
        "item": {
          "id": "10d112cc-8cdf-41e7-8d57-22eeb9698a07",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a79bcbd6-818f-4e70-a0d0-3137708116d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d112cc-8cdf-41e7-8d57-22eeb9698a07",
        "cursor": {
          "ref": "b3498036-2890-4cb7-a8b4-fb2c67ff5420",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "548fa5c5-52f8-43e1-9c6d-1915df7325a5"
        },
        "item": {
          "id": "10d112cc-8cdf-41e7-8d57-22eeb9698a07",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a79bcbd6-818f-4e70-a0d0-3137708116d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf7142c-c062-4fef-85c0-ab1fa8ba47f3",
        "cursor": {
          "ref": "1a7e35fa-89ae-4eca-8755-e37c264a9638",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4fccaed7-7a10-432b-9a3a-fce7c0860d7b"
        },
        "item": {
          "id": "dcf7142c-c062-4fef-85c0-ab1fa8ba47f3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "dccb35a8-5005-4de7-82db-b5b7a03a5582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf7142c-c062-4fef-85c0-ab1fa8ba47f3",
        "cursor": {
          "ref": "1a7e35fa-89ae-4eca-8755-e37c264a9638",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4fccaed7-7a10-432b-9a3a-fce7c0860d7b"
        },
        "item": {
          "id": "dcf7142c-c062-4fef-85c0-ab1fa8ba47f3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "dccb35a8-5005-4de7-82db-b5b7a03a5582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e88952-2b1f-49aa-9e78-4137f05e2061",
        "cursor": {
          "ref": "e9213e18-266a-49f2-80e0-52ee3778da85",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "208a0b38-100a-4c5c-8574-9acca634d4cf"
        },
        "item": {
          "id": "b6e88952-2b1f-49aa-9e78-4137f05e2061",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "be31382e-bf52-484e-959f-3a1c446022b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e88952-2b1f-49aa-9e78-4137f05e2061",
        "cursor": {
          "ref": "e9213e18-266a-49f2-80e0-52ee3778da85",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "208a0b38-100a-4c5c-8574-9acca634d4cf"
        },
        "item": {
          "id": "b6e88952-2b1f-49aa-9e78-4137f05e2061",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "be31382e-bf52-484e-959f-3a1c446022b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ed22bf-17d9-47b0-9794-af8dc555bb6b",
        "cursor": {
          "ref": "2cbba552-a82e-408f-ad3c-8f740df59c24",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f1e504e8-b138-4aa3-ae41-88af4140c30a"
        },
        "item": {
          "id": "40ed22bf-17d9-47b0-9794-af8dc555bb6b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4e689b03-c6af-4fa8-936b-cd6c343beabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ed22bf-17d9-47b0-9794-af8dc555bb6b",
        "cursor": {
          "ref": "2cbba552-a82e-408f-ad3c-8f740df59c24",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f1e504e8-b138-4aa3-ae41-88af4140c30a"
        },
        "item": {
          "id": "40ed22bf-17d9-47b0-9794-af8dc555bb6b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4e689b03-c6af-4fa8-936b-cd6c343beabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807447e3-6205-405c-800b-b0f7f25fb25d",
        "cursor": {
          "ref": "20c979fb-53e4-459b-a9ec-8c8e717dd830",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cdc62046-b775-4227-97c7-48123484db99"
        },
        "item": {
          "id": "807447e3-6205-405c-800b-b0f7f25fb25d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a4797570-ef9a-4535-b646-4b5be4ffd95b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807447e3-6205-405c-800b-b0f7f25fb25d",
        "cursor": {
          "ref": "20c979fb-53e4-459b-a9ec-8c8e717dd830",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cdc62046-b775-4227-97c7-48123484db99"
        },
        "item": {
          "id": "807447e3-6205-405c-800b-b0f7f25fb25d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a4797570-ef9a-4535-b646-4b5be4ffd95b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35b4f82-1a4a-4a9e-98dc-beb52d533583",
        "cursor": {
          "ref": "04089c43-b2dc-4cef-ba12-aa2d3a476b87",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "45280794-6489-44c5-8052-6de88f26887d"
        },
        "item": {
          "id": "c35b4f82-1a4a-4a9e-98dc-beb52d533583",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "37e8a3de-bcbe-49af-ba4e-d55fede80fc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35b4f82-1a4a-4a9e-98dc-beb52d533583",
        "cursor": {
          "ref": "04089c43-b2dc-4cef-ba12-aa2d3a476b87",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "45280794-6489-44c5-8052-6de88f26887d"
        },
        "item": {
          "id": "c35b4f82-1a4a-4a9e-98dc-beb52d533583",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "37e8a3de-bcbe-49af-ba4e-d55fede80fc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971cce8e-92ca-4012-91d2-d2602365a56d",
        "cursor": {
          "ref": "aff3e11c-feee-4e77-b5ed-fb565c45dc18",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "add47c73-244d-4cad-b316-84365c9f57b7"
        },
        "item": {
          "id": "971cce8e-92ca-4012-91d2-d2602365a56d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d2ed9953-af83-4f09-be19-b77aa0dced14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971cce8e-92ca-4012-91d2-d2602365a56d",
        "cursor": {
          "ref": "aff3e11c-feee-4e77-b5ed-fb565c45dc18",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "add47c73-244d-4cad-b316-84365c9f57b7"
        },
        "item": {
          "id": "971cce8e-92ca-4012-91d2-d2602365a56d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d2ed9953-af83-4f09-be19-b77aa0dced14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124f6d67-28e6-429e-aff1-e582b544540a",
        "cursor": {
          "ref": "f7ca6eb3-36a4-41ec-9179-17bb8ec56d89",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d58ea8cd-5cbe-4da7-b75c-32970c46c965"
        },
        "item": {
          "id": "124f6d67-28e6-429e-aff1-e582b544540a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4689cf68-e403-4c09-b7ba-87e64dbd4576",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124f6d67-28e6-429e-aff1-e582b544540a",
        "cursor": {
          "ref": "f7ca6eb3-36a4-41ec-9179-17bb8ec56d89",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d58ea8cd-5cbe-4da7-b75c-32970c46c965"
        },
        "item": {
          "id": "124f6d67-28e6-429e-aff1-e582b544540a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4689cf68-e403-4c09-b7ba-87e64dbd4576",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84105801-d809-4c95-a1f3-d9923cb9768b",
        "cursor": {
          "ref": "9e6b1c57-7f86-4cb3-8312-dd2b6e951e0e",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "45b7536c-2d62-4c99-82ba-b48adf4344f6"
        },
        "item": {
          "id": "84105801-d809-4c95-a1f3-d9923cb9768b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4892cd7a-7779-418b-b63e-93de8dc6a1bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84105801-d809-4c95-a1f3-d9923cb9768b",
        "cursor": {
          "ref": "9e6b1c57-7f86-4cb3-8312-dd2b6e951e0e",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "45b7536c-2d62-4c99-82ba-b48adf4344f6"
        },
        "item": {
          "id": "84105801-d809-4c95-a1f3-d9923cb9768b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4892cd7a-7779-418b-b63e-93de8dc6a1bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddcf0351-4766-4573-8cd0-7d1728610d11",
        "cursor": {
          "ref": "7406b7cf-1549-41b7-b88c-bc1db74a2147",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b8bdca81-1738-4094-a2c0-c770a719ae0a"
        },
        "item": {
          "id": "ddcf0351-4766-4573-8cd0-7d1728610d11",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8a8ed167-c8d2-4743-93c0-9b0168e32597",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddcf0351-4766-4573-8cd0-7d1728610d11",
        "cursor": {
          "ref": "7406b7cf-1549-41b7-b88c-bc1db74a2147",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b8bdca81-1738-4094-a2c0-c770a719ae0a"
        },
        "item": {
          "id": "ddcf0351-4766-4573-8cd0-7d1728610d11",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8a8ed167-c8d2-4743-93c0-9b0168e32597",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08203763-21e5-4cd1-8c23-6f6be6f902e8",
        "cursor": {
          "ref": "0d5c5cff-1eb5-4394-a231-d9180bd5d26a",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "20665b36-fd8e-485c-ab76-2eea083cf321"
        },
        "item": {
          "id": "08203763-21e5-4cd1-8c23-6f6be6f902e8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "890a0d87-e9c1-4242-98d7-954cbcbba713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08203763-21e5-4cd1-8c23-6f6be6f902e8",
        "cursor": {
          "ref": "0d5c5cff-1eb5-4394-a231-d9180bd5d26a",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "20665b36-fd8e-485c-ab76-2eea083cf321"
        },
        "item": {
          "id": "08203763-21e5-4cd1-8c23-6f6be6f902e8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "890a0d87-e9c1-4242-98d7-954cbcbba713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9176673f-fce1-4ab7-bd8e-da7875c23618",
        "cursor": {
          "ref": "11caf106-fb74-46ee-900d-e09dce09240f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ea98654e-3e78-41ad-a778-ff29a36e9d8b"
        },
        "item": {
          "id": "9176673f-fce1-4ab7-bd8e-da7875c23618",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b6f40dc2-1207-4ed6-9fc8-2b0b66a5fb07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9176673f-fce1-4ab7-bd8e-da7875c23618",
        "cursor": {
          "ref": "11caf106-fb74-46ee-900d-e09dce09240f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ea98654e-3e78-41ad-a778-ff29a36e9d8b"
        },
        "item": {
          "id": "9176673f-fce1-4ab7-bd8e-da7875c23618",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b6f40dc2-1207-4ed6-9fc8-2b0b66a5fb07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e160380e-3898-450b-81d4-7472763f1e0d",
        "cursor": {
          "ref": "493d1f2e-aa43-4449-ba57-891019396309",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "bc2c9fe4-9ee7-4795-8419-f43073ac34df"
        },
        "item": {
          "id": "e160380e-3898-450b-81d4-7472763f1e0d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f60edfa5-9830-4c87-9e60-696a93162fbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e160380e-3898-450b-81d4-7472763f1e0d",
        "cursor": {
          "ref": "493d1f2e-aa43-4449-ba57-891019396309",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "bc2c9fe4-9ee7-4795-8419-f43073ac34df"
        },
        "item": {
          "id": "e160380e-3898-450b-81d4-7472763f1e0d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f60edfa5-9830-4c87-9e60-696a93162fbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3646d1-574c-4a84-9f0a-862dfdacf5db",
        "cursor": {
          "ref": "55e0baa2-cc34-49e5-8e22-fe3e86227af2",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "30665892-881d-49e6-b552-f43797835f08"
        },
        "item": {
          "id": "fc3646d1-574c-4a84-9f0a-862dfdacf5db",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "370fb148-21b6-44ec-b42c-33d68550025f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3646d1-574c-4a84-9f0a-862dfdacf5db",
        "cursor": {
          "ref": "55e0baa2-cc34-49e5-8e22-fe3e86227af2",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "30665892-881d-49e6-b552-f43797835f08"
        },
        "item": {
          "id": "fc3646d1-574c-4a84-9f0a-862dfdacf5db",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "370fb148-21b6-44ec-b42c-33d68550025f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0ee2d7-99b8-4884-9e43-0291124a2f47",
        "cursor": {
          "ref": "60ff39ab-f022-47f8-a6e0-c18b1089f71f",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "fa5ec0f3-b28c-4a72-a259-dc54038242c5"
        },
        "item": {
          "id": "9a0ee2d7-99b8-4884-9e43-0291124a2f47",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "be7c456d-aa91-4f7f-93e9-03900fb620ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0ee2d7-99b8-4884-9e43-0291124a2f47",
        "cursor": {
          "ref": "60ff39ab-f022-47f8-a6e0-c18b1089f71f",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "fa5ec0f3-b28c-4a72-a259-dc54038242c5"
        },
        "item": {
          "id": "9a0ee2d7-99b8-4884-9e43-0291124a2f47",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "be7c456d-aa91-4f7f-93e9-03900fb620ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3e79fa-9b29-4fa6-968a-1fbaa85748a1",
        "cursor": {
          "ref": "f6a67202-c1b6-4119-a2f8-3c01ddf420a4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a19704c1-1443-41b1-b811-f83c905bea8e"
        },
        "item": {
          "id": "5c3e79fa-9b29-4fa6-968a-1fbaa85748a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e03aaf6d-3e28-469b-b759-03c3f315f0b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3e79fa-9b29-4fa6-968a-1fbaa85748a1",
        "cursor": {
          "ref": "f6a67202-c1b6-4119-a2f8-3c01ddf420a4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a19704c1-1443-41b1-b811-f83c905bea8e"
        },
        "item": {
          "id": "5c3e79fa-9b29-4fa6-968a-1fbaa85748a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e03aaf6d-3e28-469b-b759-03c3f315f0b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e3fa39-9419-444b-b218-b7ed5b3eee45",
        "cursor": {
          "ref": "56f2e0a9-3175-4505-88f5-c23ce75737c4",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ff3c0b9b-bf39-4063-bb7c-86ae1003137c"
        },
        "item": {
          "id": "90e3fa39-9419-444b-b218-b7ed5b3eee45",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "73b6ab4c-0685-4bb4-aeb3-39b96359d5b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e3fa39-9419-444b-b218-b7ed5b3eee45",
        "cursor": {
          "ref": "56f2e0a9-3175-4505-88f5-c23ce75737c4",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ff3c0b9b-bf39-4063-bb7c-86ae1003137c"
        },
        "item": {
          "id": "90e3fa39-9419-444b-b218-b7ed5b3eee45",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "73b6ab4c-0685-4bb4-aeb3-39b96359d5b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2d028c-cc86-440a-94c8-96b4ee124b80",
        "cursor": {
          "ref": "5cdada2e-a81f-4e23-83ec-f96d0145f7c6",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1f288786-6be6-4527-98b8-15dfb9fad122"
        },
        "item": {
          "id": "0f2d028c-cc86-440a-94c8-96b4ee124b80",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0076c1da-c9fb-4c49-a4c1-e700a8437409",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2d028c-cc86-440a-94c8-96b4ee124b80",
        "cursor": {
          "ref": "5cdada2e-a81f-4e23-83ec-f96d0145f7c6",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1f288786-6be6-4527-98b8-15dfb9fad122"
        },
        "item": {
          "id": "0f2d028c-cc86-440a-94c8-96b4ee124b80",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0076c1da-c9fb-4c49-a4c1-e700a8437409",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6d8b41-641c-4fd6-84c9-4ab840c8625f",
        "cursor": {
          "ref": "b9a432e2-8ac2-44d0-9598-65a6616eec04",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a807ce53-816e-4a9b-a890-4decb31f3f12"
        },
        "item": {
          "id": "ec6d8b41-641c-4fd6-84c9-4ab840c8625f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0083e14c-772b-42ed-ba74-1d8e22fb2a63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6d8b41-641c-4fd6-84c9-4ab840c8625f",
        "cursor": {
          "ref": "b9a432e2-8ac2-44d0-9598-65a6616eec04",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a807ce53-816e-4a9b-a890-4decb31f3f12"
        },
        "item": {
          "id": "ec6d8b41-641c-4fd6-84c9-4ab840c8625f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0083e14c-772b-42ed-ba74-1d8e22fb2a63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687ab791-2fb6-42d6-8acf-cf48722cdf91",
        "cursor": {
          "ref": "61644798-c3fa-4794-adce-14e571bcd69c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c2d64ffa-f190-42a6-8cc9-9e1d86fbfa32"
        },
        "item": {
          "id": "687ab791-2fb6-42d6-8acf-cf48722cdf91",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a3f4e7af-656f-4cd9-8cd9-3c73e2cc5710",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687ab791-2fb6-42d6-8acf-cf48722cdf91",
        "cursor": {
          "ref": "61644798-c3fa-4794-adce-14e571bcd69c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c2d64ffa-f190-42a6-8cc9-9e1d86fbfa32"
        },
        "item": {
          "id": "687ab791-2fb6-42d6-8acf-cf48722cdf91",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a3f4e7af-656f-4cd9-8cd9-3c73e2cc5710",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcb17d0-cc1c-48e2-9975-d54b162beef6",
        "cursor": {
          "ref": "b3d7c15f-6745-41cb-8d9b-d0825018d75f",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3b4979f4-12b3-416c-a5ec-55c6b13594ca"
        },
        "item": {
          "id": "dbcb17d0-cc1c-48e2-9975-d54b162beef6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5a4a00b7-bfe8-452d-879a-23ac199b5401",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcb17d0-cc1c-48e2-9975-d54b162beef6",
        "cursor": {
          "ref": "b3d7c15f-6745-41cb-8d9b-d0825018d75f",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3b4979f4-12b3-416c-a5ec-55c6b13594ca"
        },
        "item": {
          "id": "dbcb17d0-cc1c-48e2-9975-d54b162beef6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5a4a00b7-bfe8-452d-879a-23ac199b5401",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d208fbc-ff55-4c4d-8c80-e9a6abb2a3bb",
        "cursor": {
          "ref": "5e5da432-86cb-4a43-a68d-f8fe5356e6a5",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4ba2baea-8efe-40dc-ad75-e43c4e77840d"
        },
        "item": {
          "id": "6d208fbc-ff55-4c4d-8c80-e9a6abb2a3bb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5297b772-d381-43e3-90a4-99b83563d487",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d208fbc-ff55-4c4d-8c80-e9a6abb2a3bb",
        "cursor": {
          "ref": "5e5da432-86cb-4a43-a68d-f8fe5356e6a5",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4ba2baea-8efe-40dc-ad75-e43c4e77840d"
        },
        "item": {
          "id": "6d208fbc-ff55-4c4d-8c80-e9a6abb2a3bb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5297b772-d381-43e3-90a4-99b83563d487",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66e1f5a-5861-4ab6-b0ce-e6eed6b6be88",
        "cursor": {
          "ref": "e79972b1-4d37-4bf8-aa98-245e8d45902f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "dbd1b0e6-c152-4663-8bd6-80c5c4f70df0"
        },
        "item": {
          "id": "a66e1f5a-5861-4ab6-b0ce-e6eed6b6be88",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3e1aba1a-2dd4-4b6c-b609-411253dec145",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66e1f5a-5861-4ab6-b0ce-e6eed6b6be88",
        "cursor": {
          "ref": "e79972b1-4d37-4bf8-aa98-245e8d45902f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "dbd1b0e6-c152-4663-8bd6-80c5c4f70df0"
        },
        "item": {
          "id": "a66e1f5a-5861-4ab6-b0ce-e6eed6b6be88",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3e1aba1a-2dd4-4b6c-b609-411253dec145",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ab519d-8fba-4835-b19b-458820e44bae",
        "cursor": {
          "ref": "867cfbfc-c8ed-443a-a02b-f7704828ac75",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "680554c3-aa2f-4a39-abd0-8583fc8b16c0"
        },
        "item": {
          "id": "73ab519d-8fba-4835-b19b-458820e44bae",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0d4f6d18-f955-46f1-8d48-a7fc4af8cfcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ab519d-8fba-4835-b19b-458820e44bae",
        "cursor": {
          "ref": "867cfbfc-c8ed-443a-a02b-f7704828ac75",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "680554c3-aa2f-4a39-abd0-8583fc8b16c0"
        },
        "item": {
          "id": "73ab519d-8fba-4835-b19b-458820e44bae",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0d4f6d18-f955-46f1-8d48-a7fc4af8cfcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb376860-6cfa-4fbc-8b6c-6c0e6f977d8f",
        "cursor": {
          "ref": "91fdbc55-fd8f-4a4c-ab8c-0785d279d043",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1423e158-fd20-418a-b752-61453bbfc007"
        },
        "item": {
          "id": "bb376860-6cfa-4fbc-8b6c-6c0e6f977d8f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "44cd7ffa-f091-4f96-b3fb-17814454fa2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb376860-6cfa-4fbc-8b6c-6c0e6f977d8f",
        "cursor": {
          "ref": "91fdbc55-fd8f-4a4c-ab8c-0785d279d043",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1423e158-fd20-418a-b752-61453bbfc007"
        },
        "item": {
          "id": "bb376860-6cfa-4fbc-8b6c-6c0e6f977d8f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "44cd7ffa-f091-4f96-b3fb-17814454fa2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c53ae3-9766-4925-a70e-dcd1582ad544",
        "cursor": {
          "ref": "f50f71da-0687-43f3-8fcb-79294c5c95aa",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e994e84e-6516-4618-84ce-15f0ac5550ff"
        },
        "item": {
          "id": "51c53ae3-9766-4925-a70e-dcd1582ad544",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f0ad0ee0-1544-42bb-abf5-8dc468d8b5e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c53ae3-9766-4925-a70e-dcd1582ad544",
        "cursor": {
          "ref": "f50f71da-0687-43f3-8fcb-79294c5c95aa",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e994e84e-6516-4618-84ce-15f0ac5550ff"
        },
        "item": {
          "id": "51c53ae3-9766-4925-a70e-dcd1582ad544",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f0ad0ee0-1544-42bb-abf5-8dc468d8b5e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46168f3f-b6ee-454c-be2e-2a45fa8fd881",
        "cursor": {
          "ref": "042201a4-a214-4cd3-a929-6a105eb3dd0b",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7d5c39b2-b937-432d-b43e-c471dbe3c12c"
        },
        "item": {
          "id": "46168f3f-b6ee-454c-be2e-2a45fa8fd881",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "23b0effb-391f-4a65-b81f-d891995b7a34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46168f3f-b6ee-454c-be2e-2a45fa8fd881",
        "cursor": {
          "ref": "042201a4-a214-4cd3-a929-6a105eb3dd0b",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7d5c39b2-b937-432d-b43e-c471dbe3c12c"
        },
        "item": {
          "id": "46168f3f-b6ee-454c-be2e-2a45fa8fd881",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "23b0effb-391f-4a65-b81f-d891995b7a34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8259bfe4-6ccd-4ca7-af9f-fd778831dcdc",
        "cursor": {
          "ref": "43fb6c67-0b3e-4e69-a0b8-ab9ef69b3dcd",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1ae73179-8883-40a6-b884-61de3bb9affa"
        },
        "item": {
          "id": "8259bfe4-6ccd-4ca7-af9f-fd778831dcdc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "74b40d58-9f90-4023-8fb2-f4866cc01510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8259bfe4-6ccd-4ca7-af9f-fd778831dcdc",
        "cursor": {
          "ref": "43fb6c67-0b3e-4e69-a0b8-ab9ef69b3dcd",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1ae73179-8883-40a6-b884-61de3bb9affa"
        },
        "item": {
          "id": "8259bfe4-6ccd-4ca7-af9f-fd778831dcdc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "74b40d58-9f90-4023-8fb2-f4866cc01510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78c49d0-a5a3-4947-98be-bb7a4df992a9",
        "cursor": {
          "ref": "06b269ce-3a78-483e-8897-4d303118e888",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "14b6560f-5cfe-4c47-b0e0-7fa3677cc4f2"
        },
        "item": {
          "id": "c78c49d0-a5a3-4947-98be-bb7a4df992a9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d3418a9f-f5b1-4ca5-96e8-4eafcb1362e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78c49d0-a5a3-4947-98be-bb7a4df992a9",
        "cursor": {
          "ref": "06b269ce-3a78-483e-8897-4d303118e888",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "14b6560f-5cfe-4c47-b0e0-7fa3677cc4f2"
        },
        "item": {
          "id": "c78c49d0-a5a3-4947-98be-bb7a4df992a9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d3418a9f-f5b1-4ca5-96e8-4eafcb1362e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e29ef3-7108-4665-8042-84a6273e7eea",
        "cursor": {
          "ref": "fc70fcf6-afcb-4d25-94c1-5af786f4741f",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0e3a8de6-5e34-45bc-b0cb-7eae46c401a5"
        },
        "item": {
          "id": "96e29ef3-7108-4665-8042-84a6273e7eea",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "25390068-e96e-47fe-abbf-788d53969962",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e29ef3-7108-4665-8042-84a6273e7eea",
        "cursor": {
          "ref": "fc70fcf6-afcb-4d25-94c1-5af786f4741f",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0e3a8de6-5e34-45bc-b0cb-7eae46c401a5"
        },
        "item": {
          "id": "96e29ef3-7108-4665-8042-84a6273e7eea",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "25390068-e96e-47fe-abbf-788d53969962",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f4a44f-4cfc-415f-bb1a-d0caec90b99a",
        "cursor": {
          "ref": "f491d951-82ad-47f6-a966-8c9d5638c34a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "61a2dc5c-61f2-4444-9ed7-3875ecfb3600"
        },
        "item": {
          "id": "a5f4a44f-4cfc-415f-bb1a-d0caec90b99a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "463b270f-ae8c-47af-834d-5ce6307cbeee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f4a44f-4cfc-415f-bb1a-d0caec90b99a",
        "cursor": {
          "ref": "f491d951-82ad-47f6-a966-8c9d5638c34a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "61a2dc5c-61f2-4444-9ed7-3875ecfb3600"
        },
        "item": {
          "id": "a5f4a44f-4cfc-415f-bb1a-d0caec90b99a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "463b270f-ae8c-47af-834d-5ce6307cbeee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2f0e66-8e34-42f1-8d42-518c1805c891",
        "cursor": {
          "ref": "d4788af7-a164-41b6-a030-43b154ed3457",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "3c655b12-4b92-4b45-ae95-f5f213a15f44"
        },
        "item": {
          "id": "7e2f0e66-8e34-42f1-8d42-518c1805c891",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b716612b-37c3-4124-9528-6778e8a91772",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2f0e66-8e34-42f1-8d42-518c1805c891",
        "cursor": {
          "ref": "d4788af7-a164-41b6-a030-43b154ed3457",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "3c655b12-4b92-4b45-ae95-f5f213a15f44"
        },
        "item": {
          "id": "7e2f0e66-8e34-42f1-8d42-518c1805c891",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b716612b-37c3-4124-9528-6778e8a91772",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ebd50e-2948-4492-b906-8ab8c22b8009",
        "cursor": {
          "ref": "5c80a7e8-daf3-4f25-a488-dc76c0abf133",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "af50423a-eb6e-47f2-a946-8238fa1e549e"
        },
        "item": {
          "id": "20ebd50e-2948-4492-b906-8ab8c22b8009",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cab6fb77-5cfe-4e38-8dc5-5d47e0eaabe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "20ebd50e-2948-4492-b906-8ab8c22b8009",
        "cursor": {
          "ref": "5c80a7e8-daf3-4f25-a488-dc76c0abf133",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "af50423a-eb6e-47f2-a946-8238fa1e549e"
        },
        "item": {
          "id": "20ebd50e-2948-4492-b906-8ab8c22b8009",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cab6fb77-5cfe-4e38-8dc5-5d47e0eaabe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "15f2ed47-953e-49bc-9f71-bba800c6d1a0",
        "cursor": {
          "ref": "f95e3709-47a3-4c98-b343-11e715ad219a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "abba1e80-fb91-4886-a3c3-0f6a81098d67"
        },
        "item": {
          "id": "15f2ed47-953e-49bc-9f71-bba800c6d1a0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fa473f20-7963-40a7-bd12-40bbfb3fbfc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "15f2ed47-953e-49bc-9f71-bba800c6d1a0",
        "cursor": {
          "ref": "f95e3709-47a3-4c98-b343-11e715ad219a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "abba1e80-fb91-4886-a3c3-0f6a81098d67"
        },
        "item": {
          "id": "15f2ed47-953e-49bc-9f71-bba800c6d1a0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fa473f20-7963-40a7-bd12-40bbfb3fbfc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "3b256ba8-48c6-4738-a217-c1059a804097",
        "cursor": {
          "ref": "c47e3f46-dfad-4c99-ba92-96ccbffdcfa3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b2da3ae7-8db9-453c-a127-c99be357c992"
        },
        "item": {
          "id": "3b256ba8-48c6-4738-a217-c1059a804097",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e32947f1-e22e-4096-ae93-22794d09700a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "3b256ba8-48c6-4738-a217-c1059a804097",
        "cursor": {
          "ref": "c47e3f46-dfad-4c99-ba92-96ccbffdcfa3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b2da3ae7-8db9-453c-a127-c99be357c992"
        },
        "item": {
          "id": "3b256ba8-48c6-4738-a217-c1059a804097",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e32947f1-e22e-4096-ae93-22794d09700a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "e009afbb-c4d9-4363-bbe6-21e4baeee006",
        "cursor": {
          "ref": "f65dcdaa-f93f-443b-8045-2b70c778768e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0e513b65-e5fd-4e7c-9393-ff9edb1a32b9"
        },
        "item": {
          "id": "e009afbb-c4d9-4363-bbe6-21e4baeee006",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b723d30-2921-4c66-a706-8ae6531f98fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e009afbb-c4d9-4363-bbe6-21e4baeee006",
        "cursor": {
          "ref": "f65dcdaa-f93f-443b-8045-2b70c778768e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0e513b65-e5fd-4e7c-9393-ff9edb1a32b9"
        },
        "item": {
          "id": "e009afbb-c4d9-4363-bbe6-21e4baeee006",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b723d30-2921-4c66-a706-8ae6531f98fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e009afbb-c4d9-4363-bbe6-21e4baeee006",
        "cursor": {
          "ref": "f65dcdaa-f93f-443b-8045-2b70c778768e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0e513b65-e5fd-4e7c-9393-ff9edb1a32b9"
        },
        "item": {
          "id": "e009afbb-c4d9-4363-bbe6-21e4baeee006",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b723d30-2921-4c66-a706-8ae6531f98fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca3e869-66e4-439f-a907-ac5c03525394",
        "cursor": {
          "ref": "f9c975e9-a201-48bd-8904-d34e1568d9ce",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d0129158-5944-44ef-93d4-ff13f9dc4b50"
        },
        "item": {
          "id": "4ca3e869-66e4-439f-a907-ac5c03525394",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "217a5b8b-cc2a-4201-bae7-e95a10aacb82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca3e869-66e4-439f-a907-ac5c03525394",
        "cursor": {
          "ref": "f9c975e9-a201-48bd-8904-d34e1568d9ce",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d0129158-5944-44ef-93d4-ff13f9dc4b50"
        },
        "item": {
          "id": "4ca3e869-66e4-439f-a907-ac5c03525394",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "217a5b8b-cc2a-4201-bae7-e95a10aacb82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b4b4c9-b937-4350-847c-8c4303889787",
        "cursor": {
          "ref": "13bb56a4-8581-4872-a86f-edd30ccad787",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9a9e5786-2e3f-4b80-9069-2df9eeeb13cb"
        },
        "item": {
          "id": "b4b4b4c9-b937-4350-847c-8c4303889787",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "83d05b6e-864f-4d13-bb7f-db7c545a2051",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b4b4c9-b937-4350-847c-8c4303889787",
        "cursor": {
          "ref": "13bb56a4-8581-4872-a86f-edd30ccad787",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9a9e5786-2e3f-4b80-9069-2df9eeeb13cb"
        },
        "item": {
          "id": "b4b4b4c9-b937-4350-847c-8c4303889787",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "83d05b6e-864f-4d13-bb7f-db7c545a2051",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}